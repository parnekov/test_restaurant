95edecd374f224176c136097c32487af
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault2(require("@babel/runtime/helpers/asyncToGenerator"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = waitForElementToBeRemoved;
var _waitFor = _interopRequireDefault(require("./wait-for"));
var _errors = require("./helpers/errors");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function isRemoved(result) {
  return !result || Array.isArray(result) && !result.length;
}
function waitForElementToBeRemoved(_x, _x2) {
  return _waitForElementToBeRemoved.apply(this, arguments);
}
function _waitForElementToBeRemoved() {
  _waitForElementToBeRemoved = (0, _asyncToGenerator2.default)(function* (expectation, options) {
    var timeoutError = new _errors.ErrorWithStack('Timed out in waitForElementToBeRemoved.', waitForElementToBeRemoved);
    var initialElements = expectation();
    if (isRemoved(initialElements)) {
      throw new _errors.ErrorWithStack('The element(s) given to waitForElementToBeRemoved are already removed. waitForElementToBeRemoved requires that the element(s) exist(s) before waiting for removal.', waitForElementToBeRemoved);
    }
    return yield (0, _waitFor.default)(function () {
      var result;
      try {
        result = expectation();
      } catch (error) {
        return initialElements;
      }
      if (!isRemoved(result)) {
        throw timeoutError;
      }
      return initialElements;
    }, options);
  });
  return _waitForElementToBeRemoved.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfd2FpdEZvciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2Vycm9ycyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiaXNSZW1vdmVkIiwicmVzdWx0IiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwid2FpdEZvckVsZW1lbnRUb0JlUmVtb3ZlZCIsIl94IiwiX3gyIiwiX3dhaXRGb3JFbGVtZW50VG9CZVJlbW92ZWQiLCJhcHBseSIsImFyZ3VtZW50cyIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImV4cGVjdGF0aW9uIiwib3B0aW9ucyIsInRpbWVvdXRFcnJvciIsIkVycm9yV2l0aFN0YWNrIiwiaW5pdGlhbEVsZW1lbnRzIiwiZXJyb3IiXSwic291cmNlcyI6WyIuLi9zcmMvd2FpdC1mb3ItZWxlbWVudC10by1iZS1yZW1vdmVkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB3YWl0Rm9yIGZyb20gJy4vd2FpdC1mb3InO1xuaW1wb3J0IHR5cGUgeyBXYWl0Rm9yT3B0aW9ucyB9IGZyb20gJy4vd2FpdC1mb3InO1xuaW1wb3J0IHsgRXJyb3JXaXRoU3RhY2sgfSBmcm9tICcuL2hlbHBlcnMvZXJyb3JzJztcblxuZnVuY3Rpb24gaXNSZW1vdmVkPFQ+KHJlc3VsdDogVCk6IGJvb2xlYW4ge1xuICByZXR1cm4gIXJlc3VsdCB8fCAoQXJyYXkuaXNBcnJheShyZXN1bHQpICYmICFyZXN1bHQubGVuZ3RoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gd2FpdEZvckVsZW1lbnRUb0JlUmVtb3ZlZDxUPihcbiAgZXhwZWN0YXRpb246ICgpID0+IFQsXG4gIG9wdGlvbnM/OiBXYWl0Rm9yT3B0aW9ucyxcbik6IFByb21pc2U8VD4ge1xuICAvLyBDcmVhdGVkIGhlcmUgc28gd2UgZ2V0IGEgbmljZSBzdGFja3RyYWNlXG4gIGNvbnN0IHRpbWVvdXRFcnJvciA9IG5ldyBFcnJvcldpdGhTdGFjayhcbiAgICAnVGltZWQgb3V0IGluIHdhaXRGb3JFbGVtZW50VG9CZVJlbW92ZWQuJyxcbiAgICB3YWl0Rm9yRWxlbWVudFRvQmVSZW1vdmVkLFxuICApO1xuXG4gIC8vIEVsZW1lbnRzIGhhdmUgdG8gYmUgcHJlc2VudCBpbml0YWxseSBhbmQgdGhlbiByZW1vdmVkLlxuICBjb25zdCBpbml0aWFsRWxlbWVudHMgPSBleHBlY3RhdGlvbigpO1xuICBpZiAoaXNSZW1vdmVkKGluaXRpYWxFbGVtZW50cykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3JXaXRoU3RhY2soXG4gICAgICAnVGhlIGVsZW1lbnQocykgZ2l2ZW4gdG8gd2FpdEZvckVsZW1lbnRUb0JlUmVtb3ZlZCBhcmUgYWxyZWFkeSByZW1vdmVkLiB3YWl0Rm9yRWxlbWVudFRvQmVSZW1vdmVkIHJlcXVpcmVzIHRoYXQgdGhlIGVsZW1lbnQocykgZXhpc3QocykgYmVmb3JlIHdhaXRpbmcgZm9yIHJlbW92YWwuJyxcbiAgICAgIHdhaXRGb3JFbGVtZW50VG9CZVJlbW92ZWQsXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBleHBlY3RhdGlvbigpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gaW5pdGlhbEVsZW1lbnRzO1xuICAgIH1cblxuICAgIGlmICghaXNSZW1vdmVkKHJlc3VsdCkpIHtcbiAgICAgIHRocm93IHRpbWVvdXRFcnJvcjtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5pdGlhbEVsZW1lbnRzO1xuICB9LCBvcHRpb25zKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFBQSxRQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBQyxPQUFBLEdBQUFELE9BQUE7QUFBa0QsU0FBQUQsdUJBQUFHLEdBQUE7RUFBQSxPQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBO0lBQUFFLE9BQUEsRUFBQUY7RUFBQTtBQUFBO0FBRWxELFNBQVNHLFNBQVNBLENBQUlDLE1BQVMsRUFBVztFQUN4QyxPQUFPLENBQUNBLE1BQU0sSUFBS0MsS0FBSyxDQUFDQyxPQUFPLENBQUNGLE1BQU0sQ0FBQyxJQUFJLENBQUNBLE1BQU0sQ0FBQ0csTUFBTztBQUM3RDtBQUFBLFNBRThCQyx5QkFBeUJBLENBQUFDLEVBQUEsRUFBQUMsR0FBQTtFQUFBLE9BQUFDLDBCQUFBLENBQUFDLEtBQUEsT0FBQUMsU0FBQTtBQUFBO0FBQUEsU0FBQUYsMkJBQUE7RUFBQUEsMEJBQUEsT0FBQUcsa0JBQUEsQ0FBQVosT0FBQSxFQUF4QyxXQUNiYSxXQUFvQixFQUNwQkMsT0FBd0IsRUFDWjtJQUVaLElBQU1DLFlBQVksR0FBRyxJQUFJbEIsT0FBQSxDQUFBbUIsY0FBYyxDQUNyQyx5Q0FBeUMsRUFDekNWLHlCQUNGLENBQUM7SUFHRCxJQUFNVyxlQUFlLEdBQUdKLFdBQVcsQ0FBQyxDQUFDO0lBQ3JDLElBQUlaLFNBQVMsQ0FBQ2dCLGVBQWUsQ0FBQyxFQUFFO01BQzlCLE1BQU0sSUFBSXBCLE9BQUEsQ0FBQW1CLGNBQWMsQ0FDdEIsb0tBQW9LLEVBQ3BLVix5QkFDRixDQUFDO0lBQ0g7SUFFQSxhQUFhLElBQUFaLFFBQUEsQ0FBQU0sT0FBTyxFQUFDLFlBQU07TUFDekIsSUFBSUUsTUFBTTtNQUNWLElBQUk7UUFDRkEsTUFBTSxHQUFHVyxXQUFXLENBQUMsQ0FBQztNQUN4QixDQUFDLENBQUMsT0FBT0ssS0FBSyxFQUFFO1FBQ2QsT0FBT0QsZUFBZTtNQUN4QjtNQUVBLElBQUksQ0FBQ2hCLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLEVBQUU7UUFDdEIsTUFBTWEsWUFBWTtNQUNwQjtNQUVBLE9BQU9FLGVBQWU7SUFDeEIsQ0FBQyxFQUFFSCxPQUFPLENBQUM7RUFDYjtFQUFBLE9BQUFMLDBCQUFBLENBQUFDLEtBQUEsT0FBQUMsU0FBQTtBQUFBIiwiaWdub3JlTGlzdCI6W119