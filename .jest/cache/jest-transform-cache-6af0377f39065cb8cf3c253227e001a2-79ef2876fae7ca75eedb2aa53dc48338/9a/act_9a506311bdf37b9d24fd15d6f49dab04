96a1bec598e4f1b99ba52d81ca9c2fdd
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getIsReactActEnvironment = getIsReactActEnvironment;
exports.setReactActEnvironment = setIsReactActEnvironment;
var _reactTestRenderer = require("react-test-renderer");
var _reactVersions = require("./react-versions");
function setIsReactActEnvironment(isReactActEnvironment) {
  globalThis.IS_REACT_ACT_ENVIRONMENT = isReactActEnvironment;
}
function getIsReactActEnvironment() {
  return globalThis.IS_REACT_ACT_ENVIRONMENT;
}
function withGlobalActEnvironment(actImplementation) {
  return function (callback) {
    var previousActEnvironment = getIsReactActEnvironment();
    setIsReactActEnvironment(true);
    try {
      var callbackNeedsToBeAwaited = false;
      var actResult = actImplementation(function () {
        var result = callback();
        if (result !== null && typeof result === 'object' && typeof result.then === 'function') {
          callbackNeedsToBeAwaited = true;
        }
        return result;
      });
      if (callbackNeedsToBeAwaited) {
        var thenable = actResult;
        return {
          then: function then(resolve, reject) {
            thenable.then(function (returnValue) {
              setIsReactActEnvironment(previousActEnvironment);
              resolve(returnValue);
            }, function (error) {
              setIsReactActEnvironment(previousActEnvironment);
              reject(error);
            });
          }
        };
      } else {
        setIsReactActEnvironment(previousActEnvironment);
        return actResult;
      }
    } catch (error) {
      setIsReactActEnvironment(previousActEnvironment);
      throw error;
    }
  };
}
var act = (0, _reactVersions.checkReactVersionAtLeast)(18, 0) ? withGlobalActEnvironment(_reactTestRenderer.act) : _reactTestRenderer.act;
var _default = exports.default = act;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3RUZXN0UmVuZGVyZXIiLCJyZXF1aXJlIiwiX3JlYWN0VmVyc2lvbnMiLCJzZXRJc1JlYWN0QWN0RW52aXJvbm1lbnQiLCJpc1JlYWN0QWN0RW52aXJvbm1lbnQiLCJnbG9iYWxUaGlzIiwiSVNfUkVBQ1RfQUNUX0VOVklST05NRU5UIiwiZ2V0SXNSZWFjdEFjdEVudmlyb25tZW50Iiwid2l0aEdsb2JhbEFjdEVudmlyb25tZW50IiwiYWN0SW1wbGVtZW50YXRpb24iLCJjYWxsYmFjayIsInByZXZpb3VzQWN0RW52aXJvbm1lbnQiLCJjYWxsYmFja05lZWRzVG9CZUF3YWl0ZWQiLCJhY3RSZXN1bHQiLCJyZXN1bHQiLCJ0aGVuIiwidGhlbmFibGUiLCJyZXNvbHZlIiwicmVqZWN0IiwicmV0dXJuVmFsdWUiLCJlcnJvciIsImFjdCIsImNoZWNrUmVhY3RWZXJzaW9uQXRMZWFzdCIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi9zcmMvYWN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgZmlsZSBhbmQgdGhlIGFjdCgpIGltcGxlbWVudGF0aW9uIGlzIHNvdXJjZWQgZnJvbSByZWFjdC10ZXN0aW5nLWxpYnJhcnlcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90ZXN0aW5nLWxpYnJhcnkvcmVhY3QtdGVzdGluZy1saWJyYXJ5L2Jsb2IvYzgwODA5YTk1NmIwYjlmMzI4OWM0YTZmYThiNWU4Y2M3MmQ2ZWY2ZC9zcmMvYWN0LWNvbXBhdC5qc1xuaW1wb3J0IHsgYWN0IGFzIHJlYWN0VGVzdFJlbmRlcmVyQWN0IH0gZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcic7XG5pbXBvcnQgeyBjaGVja1JlYWN0VmVyc2lvbkF0TGVhc3QgfSBmcm9tICcuL3JlYWN0LXZlcnNpb25zJztcblxudHlwZSBSZWFjdEFjdCA9IHR5cGVvZiByZWFjdFRlc3RSZW5kZXJlckFjdDtcblxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdHdnL3JlYWN0LTE4L2Rpc2N1c3Npb25zLzEwMiBmb3IgbW9yZSBjb250ZXh0IG9uIGdsb2JhbC5JU19SRUFDVF9BQ1RfRU5WSVJPTk1FTlRcbmRlY2xhcmUgZ2xvYmFsIHtcbiAgdmFyIElTX1JFQUNUX0FDVF9FTlZJUk9OTUVOVDogYm9vbGVhbiB8IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gc2V0SXNSZWFjdEFjdEVudmlyb25tZW50KGlzUmVhY3RBY3RFbnZpcm9ubWVudDogYm9vbGVhbiB8IHVuZGVmaW5lZCkge1xuICBnbG9iYWxUaGlzLklTX1JFQUNUX0FDVF9FTlZJUk9OTUVOVCA9IGlzUmVhY3RBY3RFbnZpcm9ubWVudDtcbn1cblxuZnVuY3Rpb24gZ2V0SXNSZWFjdEFjdEVudmlyb25tZW50KCkge1xuICByZXR1cm4gZ2xvYmFsVGhpcy5JU19SRUFDVF9BQ1RfRU5WSVJPTk1FTlQ7XG59XG5cbmZ1bmN0aW9uIHdpdGhHbG9iYWxBY3RFbnZpcm9ubWVudChhY3RJbXBsZW1lbnRhdGlvbjogUmVhY3RBY3QpIHtcbiAgcmV0dXJuIChjYWxsYmFjazogUGFyYW1ldGVyczxSZWFjdEFjdD5bMF0pID0+IHtcbiAgICBjb25zdCBwcmV2aW91c0FjdEVudmlyb25tZW50ID0gZ2V0SXNSZWFjdEFjdEVudmlyb25tZW50KCk7XG4gICAgc2V0SXNSZWFjdEFjdEVudmlyb25tZW50KHRydWUpO1xuXG4gICAgLy8gdGhpcyBjb2RlIGlzIHJpZGRsZWQgd2l0aCBlc2xpbnQgZGlzYWJsaW5nIGNvbW1lbnRzIGJlY2F1c2UgdGhpcyBkb2Vzbid0IHVzZSByZWFsIHByb21pc2VzIGJ1dCBlc2xpbnQgdGhpbmtzIHdlIGRvXG4gICAgdHJ5IHtcbiAgICAgIC8vIFRoZSByZXR1cm4gdmFsdWUgb2YgYGFjdGAgaXMgYWx3YXlzIGEgdGhlbmFibGUuXG4gICAgICBsZXQgY2FsbGJhY2tOZWVkc1RvQmVBd2FpdGVkID0gZmFsc2U7XG4gICAgICBjb25zdCBhY3RSZXN1bHQgPSBhY3RJbXBsZW1lbnRhdGlvbigoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNhbGxiYWNrKCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICByZXN1bHQgIT09IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2YgcmVzdWx0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdGhpcyBzaG91bGQgYmUgYSBwcm9taXNlIG9yIHRoZW5hYmxlXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByb21pc2UvcHJlZmVyLWF3YWl0LXRvLXRoZW5cbiAgICAgICAgICB0eXBlb2YgcmVzdWx0LnRoZW4gPT09ICdmdW5jdGlvbidcbiAgICAgICAgKSB7XG4gICAgICAgICAgY2FsbGJhY2tOZWVkc1RvQmVBd2FpdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChjYWxsYmFja05lZWRzVG9CZUF3YWl0ZWQpIHtcbiAgICAgICAgY29uc3QgdGhlbmFibGUgPSBhY3RSZXN1bHQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdGhlbjogKHJlc29sdmU6ICh2YWx1ZTogbmV2ZXIpID0+IG5ldmVyLCByZWplY3Q6ICh2YWx1ZTogbmV2ZXIpID0+IG5ldmVyKSA9PiB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgIHRoZW5hYmxlLnRoZW4oXG4gICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcm9taXNlL2Fsd2F5cy1yZXR1cm5cbiAgICAgICAgICAgICAgKHJldHVyblZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0SXNSZWFjdEFjdEVudmlyb25tZW50KHByZXZpb3VzQWN0RW52aXJvbm1lbnQpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUocmV0dXJuVmFsdWUpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBzZXRJc1JlYWN0QWN0RW52aXJvbm1lbnQocHJldmlvdXNBY3RFbnZpcm9ubWVudCk7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldElzUmVhY3RBY3RFbnZpcm9ubWVudChwcmV2aW91c0FjdEVudmlyb25tZW50KTtcbiAgICAgICAgcmV0dXJuIGFjdFJlc3VsdDtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gQ2FuJ3QgYmUgYSBgZmluYWxseSB7fWAgYmxvY2sgc2luY2Ugd2UgZG9uJ3Qga25vdyBpZiB3ZSBoYXZlIHRvIGltbWVkaWF0ZWx5IHJlc3RvcmUgSVNfUkVBQ1RfQUNUX0VOVklST05NRU5UXG4gICAgICAvLyBvciBpZiB3ZSBoYXZlIHRvIGF3YWl0IHRoZSBjYWxsYmFjayBmaXJzdC5cbiAgICAgIHNldElzUmVhY3RBY3RFbnZpcm9ubWVudChwcmV2aW91c0FjdEVudmlyb25tZW50KTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfTtcbn1cblxuY29uc3QgYWN0OiBSZWFjdEFjdCA9IGNoZWNrUmVhY3RWZXJzaW9uQXRMZWFzdCgxOCwgMClcbiAgPyAod2l0aEdsb2JhbEFjdEVudmlyb25tZW50KHJlYWN0VGVzdFJlbmRlcmVyQWN0KSBhcyBSZWFjdEFjdClcbiAgOiByZWFjdFRlc3RSZW5kZXJlckFjdDtcblxuZXhwb3J0IGRlZmF1bHQgYWN0O1xuZXhwb3J0IHsgc2V0SXNSZWFjdEFjdEVudmlyb25tZW50IGFzIHNldFJlYWN0QWN0RW52aXJvbm1lbnQsIGdldElzUmVhY3RBY3RFbnZpcm9ubWVudCB9O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUVBLElBQUFBLGtCQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxjQUFBLEdBQUFELE9BQUE7QUFTQSxTQUFTRSx3QkFBd0JBLENBQUNDLHFCQUEwQyxFQUFFO0VBQzVFQyxVQUFVLENBQUNDLHdCQUF3QixHQUFHRixxQkFBcUI7QUFDN0Q7QUFFQSxTQUFTRyx3QkFBd0JBLENBQUEsRUFBRztFQUNsQyxPQUFPRixVQUFVLENBQUNDLHdCQUF3QjtBQUM1QztBQUVBLFNBQVNFLHdCQUF3QkEsQ0FBQ0MsaUJBQTJCLEVBQUU7RUFDN0QsT0FBUSxVQUFBQyxRQUFpQyxFQUFLO0lBQzVDLElBQU1DLHNCQUFzQixHQUFHSix3QkFBd0IsQ0FBQyxDQUFDO0lBQ3pESix3QkFBd0IsQ0FBQyxJQUFJLENBQUM7SUFHOUIsSUFBSTtNQUVGLElBQUlTLHdCQUF3QixHQUFHLEtBQUs7TUFDcEMsSUFBTUMsU0FBUyxHQUFHSixpQkFBaUIsQ0FBQyxZQUFNO1FBQ3hDLElBQU1LLE1BQU0sR0FBR0osUUFBUSxDQUFDLENBQUM7UUFDekIsSUFDRUksTUFBTSxLQUFLLElBQUksSUFDZixPQUFPQSxNQUFNLEtBQUssUUFBUSxJQUcxQixPQUFPQSxNQUFNLENBQUNDLElBQUksS0FBSyxVQUFVLEVBQ2pDO1VBQ0FILHdCQUF3QixHQUFHLElBQUk7UUFDakM7UUFDQSxPQUFPRSxNQUFNO01BQ2YsQ0FBQyxDQUFDO01BRUYsSUFBSUYsd0JBQXdCLEVBQUU7UUFDNUIsSUFBTUksUUFBUSxHQUFHSCxTQUFTO1FBQzFCLE9BQU87VUFDTEUsSUFBSSxFQUFFLFNBQUFBLEtBQUNFLE9BQWdDLEVBQUVDLE1BQStCLEVBQUs7WUFFM0VGLFFBQVEsQ0FBQ0QsSUFBSSxDQUVWLFVBQUFJLFdBQVcsRUFBSztjQUNmaEIsd0JBQXdCLENBQUNRLHNCQUFzQixDQUFDO2NBQ2hETSxPQUFPLENBQUNFLFdBQVcsQ0FBQztZQUN0QixDQUFDLEVBQ0EsVUFBQUMsS0FBSyxFQUFLO2NBQ1RqQix3QkFBd0IsQ0FBQ1Esc0JBQXNCLENBQUM7Y0FDaERPLE1BQU0sQ0FBQ0UsS0FBSyxDQUFDO1lBQ2YsQ0FDRixDQUFDO1VBQ0g7UUFDRixDQUFDO01BQ0gsQ0FBQyxNQUFNO1FBQ0xqQix3QkFBd0IsQ0FBQ1Esc0JBQXNCLENBQUM7UUFDaEQsT0FBT0UsU0FBUztNQUNsQjtJQUNGLENBQUMsQ0FBQyxPQUFPTyxLQUFLLEVBQUU7TUFHZGpCLHdCQUF3QixDQUFDUSxzQkFBc0IsQ0FBQztNQUNoRCxNQUFNUyxLQUFLO0lBQ2I7RUFDRixDQUFDO0FBQ0g7QUFFQSxJQUFNQyxHQUFhLEdBQUcsSUFBQW5CLGNBQUEsQ0FBQW9CLHdCQUF3QixFQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FDaERkLHdCQUF3QixDQUFDUixrQkFBQSxDQUFBcUIsR0FBb0IsQ0FBQyxHQUMvQ3JCLGtCQUFBLENBQUFxQixHQUFvQjtBQUFDLElBQUFFLFFBQUEsR0FBQUMsT0FBQSxDQUFBQyxPQUFBLEdBRVZKLEdBQUciLCJpZ25vcmVMaXN0IjpbXX0=