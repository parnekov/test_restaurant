{"version":3,"names":["_errors","require","_hostComponentNames","_textInput","_pointerEvents","_eventBuilder","_utils","_type","clear","_x","_clear","apply","arguments","_asyncToGenerator2","default","element","_ref","_element$props$value","isHostTextInput","ErrorWithStack","type","isTextInputEditable","isPointerEventEnabled","dispatchEvent","EventBuilder","Common","focus","previousText","props","value","defaultValue","selectionRange","start","end","length","TextInput","selectionChange","finalText","emitTypingEvents","config","wait","endEditing","blur"],"sources":["../../src/user-event/clear.ts"],"sourcesContent":["import { ReactTestInstance } from 'react-test-renderer';\nimport { ErrorWithStack } from '../helpers/errors';\nimport { isHostTextInput } from '../helpers/host-component-names';\nimport { isTextInputEditable } from '../helpers/text-input';\nimport { isPointerEventEnabled } from '../helpers/pointer-events';\nimport { EventBuilder } from './event-builder';\nimport { UserEventInstance } from './setup';\nimport { dispatchEvent, wait } from './utils';\nimport { emitTypingEvents } from './type/type';\n\nexport async function clear(this: UserEventInstance, element: ReactTestInstance): Promise<void> {\n  if (!isHostTextInput(element)) {\n    throw new ErrorWithStack(\n      `clear() only supports host \"TextInput\" elements. Passed element has type: \"${element.type}\".`,\n      clear,\n    );\n  }\n\n  if (!isTextInputEditable(element) || !isPointerEventEnabled(element)) {\n    return;\n  }\n\n  // 1. Enter element\n  dispatchEvent(element, 'focus', EventBuilder.Common.focus());\n\n  // 2. Select all\n  const previousText = element.props.value ?? element.props.defaultValue ?? '';\n  const selectionRange = {\n    start: 0,\n    end: previousText.length,\n  };\n  dispatchEvent(element, 'selectionChange', EventBuilder.TextInput.selectionChange(selectionRange));\n\n  // 3. Press backspace\n  const finalText = '';\n  await emitTypingEvents(this.config, element, 'Backspace', finalText, previousText);\n\n  // 4. Exit element\n  await wait(this.config);\n  dispatchEvent(element, 'endEditing', EventBuilder.TextInput.endEditing(finalText));\n\n  dispatchEvent(element, 'blur', EventBuilder.Common.blur());\n}\n"],"mappings":";;;;;;;;AACA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,mBAAA,GAAAD,OAAA;AACA,IAAAE,UAAA,GAAAF,OAAA;AACA,IAAAG,cAAA,GAAAH,OAAA;AACA,IAAAI,aAAA,GAAAJ,OAAA;AAEA,IAAAK,MAAA,GAAAL,OAAA;AACA,IAAAM,KAAA,GAAAN,OAAA;AAAA,SAEsBO,KAAKA,CAAAC,EAAA;EAAA,OAAAC,MAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,OAAA;EAAAA,MAAA,OAAAG,kBAAA,CAAAC,OAAA,EAApB,WAA8CC,OAA0B,EAAiB;IAAA,IAAAC,IAAA,EAAAC,oBAAA;IAC9F,IAAI,CAAC,IAAAf,mBAAA,CAAAgB,eAAe,EAACH,OAAO,CAAC,EAAE;MAC7B,MAAM,IAAIf,OAAA,CAAAmB,cAAc,CACrB,8EAA6EJ,OAAO,CAACK,IAAK,IAAG,EAC9FZ,KACF,CAAC;IACH;IAEA,IAAI,CAAC,IAAAL,UAAA,CAAAkB,mBAAmB,EAACN,OAAO,CAAC,IAAI,CAAC,IAAAX,cAAA,CAAAkB,qBAAqB,EAACP,OAAO,CAAC,EAAE;MACpE;IACF;IAGA,IAAAT,MAAA,CAAAiB,aAAa,EAACR,OAAO,EAAE,OAAO,EAAEV,aAAA,CAAAmB,YAAY,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAG5D,IAAMC,YAAY,IAAAX,IAAA,IAAAC,oBAAA,GAAGF,OAAO,CAACa,KAAK,CAACC,KAAK,YAAAZ,oBAAA,GAAIF,OAAO,CAACa,KAAK,CAACE,YAAY,YAAAd,IAAA,GAAI,EAAE;IAC5E,IAAMe,cAAc,GAAG;MACrBC,KAAK,EAAE,CAAC;MACRC,GAAG,EAAEN,YAAY,CAACO;IACpB,CAAC;IACD,IAAA5B,MAAA,CAAAiB,aAAa,EAACR,OAAO,EAAE,iBAAiB,EAAEV,aAAA,CAAAmB,YAAY,CAACW,SAAS,CAACC,eAAe,CAACL,cAAc,CAAC,CAAC;IAGjG,IAAMM,SAAS,GAAG,EAAE;IACpB,MAAM,IAAA9B,KAAA,CAAA+B,gBAAgB,EAAC,IAAI,CAACC,MAAM,EAAExB,OAAO,EAAE,WAAW,EAAEsB,SAAS,EAAEV,YAAY,CAAC;IAGlF,MAAM,IAAArB,MAAA,CAAAkC,IAAI,EAAC,IAAI,CAACD,MAAM,CAAC;IACvB,IAAAjC,MAAA,CAAAiB,aAAa,EAACR,OAAO,EAAE,YAAY,EAAEV,aAAA,CAAAmB,YAAY,CAACW,SAAS,CAACM,UAAU,CAACJ,SAAS,CAAC,CAAC;IAElF,IAAA/B,MAAA,CAAAiB,aAAa,EAACR,OAAO,EAAE,MAAM,EAAEV,aAAA,CAAAmB,YAAY,CAACC,MAAM,CAACiB,IAAI,CAAC,CAAC,CAAC;EAC5D;EAAA,OAAAhC,MAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA","ignoreList":[]}