8faef4e4412b5eba79266ca043896877
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clear = clear;
var _errors = require("../helpers/errors");
var _hostComponentNames = require("../helpers/host-component-names");
var _textInput = require("../helpers/text-input");
var _pointerEvents = require("../helpers/pointer-events");
var _eventBuilder = require("./event-builder");
var _utils = require("./utils");
var _type = require("./type/type");
function clear(_x) {
  return _clear.apply(this, arguments);
}
function _clear() {
  _clear = (0, _asyncToGenerator2.default)(function* (element) {
    var _ref, _element$props$value;
    if (!(0, _hostComponentNames.isHostTextInput)(element)) {
      throw new _errors.ErrorWithStack(`clear() only supports host "TextInput" elements. Passed element has type: "${element.type}".`, clear);
    }
    if (!(0, _textInput.isTextInputEditable)(element) || !(0, _pointerEvents.isPointerEventEnabled)(element)) {
      return;
    }
    (0, _utils.dispatchEvent)(element, 'focus', _eventBuilder.EventBuilder.Common.focus());
    var previousText = (_ref = (_element$props$value = element.props.value) != null ? _element$props$value : element.props.defaultValue) != null ? _ref : '';
    var selectionRange = {
      start: 0,
      end: previousText.length
    };
    (0, _utils.dispatchEvent)(element, 'selectionChange', _eventBuilder.EventBuilder.TextInput.selectionChange(selectionRange));
    var finalText = '';
    yield (0, _type.emitTypingEvents)(this.config, element, 'Backspace', finalText, previousText);
    yield (0, _utils.wait)(this.config);
    (0, _utils.dispatchEvent)(element, 'endEditing', _eventBuilder.EventBuilder.TextInput.endEditing(finalText));
    (0, _utils.dispatchEvent)(element, 'blur', _eventBuilder.EventBuilder.Common.blur());
  });
  return _clear.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXJyb3JzIiwicmVxdWlyZSIsIl9ob3N0Q29tcG9uZW50TmFtZXMiLCJfdGV4dElucHV0IiwiX3BvaW50ZXJFdmVudHMiLCJfZXZlbnRCdWlsZGVyIiwiX3V0aWxzIiwiX3R5cGUiLCJjbGVhciIsIl94IiwiX2NsZWFyIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJkZWZhdWx0IiwiZWxlbWVudCIsIl9yZWYiLCJfZWxlbWVudCRwcm9wcyR2YWx1ZSIsImlzSG9zdFRleHRJbnB1dCIsIkVycm9yV2l0aFN0YWNrIiwidHlwZSIsImlzVGV4dElucHV0RWRpdGFibGUiLCJpc1BvaW50ZXJFdmVudEVuYWJsZWQiLCJkaXNwYXRjaEV2ZW50IiwiRXZlbnRCdWlsZGVyIiwiQ29tbW9uIiwiZm9jdXMiLCJwcmV2aW91c1RleHQiLCJwcm9wcyIsInZhbHVlIiwiZGVmYXVsdFZhbHVlIiwic2VsZWN0aW9uUmFuZ2UiLCJzdGFydCIsImVuZCIsImxlbmd0aCIsIlRleHRJbnB1dCIsInNlbGVjdGlvbkNoYW5nZSIsImZpbmFsVGV4dCIsImVtaXRUeXBpbmdFdmVudHMiLCJjb25maWciLCJ3YWl0IiwiZW5kRWRpdGluZyIsImJsdXIiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvdXNlci1ldmVudC9jbGVhci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWFjdFRlc3RJbnN0YW5jZSB9IGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInO1xuaW1wb3J0IHsgRXJyb3JXaXRoU3RhY2sgfSBmcm9tICcuLi9oZWxwZXJzL2Vycm9ycyc7XG5pbXBvcnQgeyBpc0hvc3RUZXh0SW5wdXQgfSBmcm9tICcuLi9oZWxwZXJzL2hvc3QtY29tcG9uZW50LW5hbWVzJztcbmltcG9ydCB7IGlzVGV4dElucHV0RWRpdGFibGUgfSBmcm9tICcuLi9oZWxwZXJzL3RleHQtaW5wdXQnO1xuaW1wb3J0IHsgaXNQb2ludGVyRXZlbnRFbmFibGVkIH0gZnJvbSAnLi4vaGVscGVycy9wb2ludGVyLWV2ZW50cyc7XG5pbXBvcnQgeyBFdmVudEJ1aWxkZXIgfSBmcm9tICcuL2V2ZW50LWJ1aWxkZXInO1xuaW1wb3J0IHsgVXNlckV2ZW50SW5zdGFuY2UgfSBmcm9tICcuL3NldHVwJztcbmltcG9ydCB7IGRpc3BhdGNoRXZlbnQsIHdhaXQgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IGVtaXRUeXBpbmdFdmVudHMgfSBmcm9tICcuL3R5cGUvdHlwZSc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjbGVhcih0aGlzOiBVc2VyRXZlbnRJbnN0YW5jZSwgZWxlbWVudDogUmVhY3RUZXN0SW5zdGFuY2UpOiBQcm9taXNlPHZvaWQ+IHtcbiAgaWYgKCFpc0hvc3RUZXh0SW5wdXQoZWxlbWVudCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3JXaXRoU3RhY2soXG4gICAgICBgY2xlYXIoKSBvbmx5IHN1cHBvcnRzIGhvc3QgXCJUZXh0SW5wdXRcIiBlbGVtZW50cy4gUGFzc2VkIGVsZW1lbnQgaGFzIHR5cGU6IFwiJHtlbGVtZW50LnR5cGV9XCIuYCxcbiAgICAgIGNsZWFyLFxuICAgICk7XG4gIH1cblxuICBpZiAoIWlzVGV4dElucHV0RWRpdGFibGUoZWxlbWVudCkgfHwgIWlzUG9pbnRlckV2ZW50RW5hYmxlZChlbGVtZW50KSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIDEuIEVudGVyIGVsZW1lbnRcbiAgZGlzcGF0Y2hFdmVudChlbGVtZW50LCAnZm9jdXMnLCBFdmVudEJ1aWxkZXIuQ29tbW9uLmZvY3VzKCkpO1xuXG4gIC8vIDIuIFNlbGVjdCBhbGxcbiAgY29uc3QgcHJldmlvdXNUZXh0ID0gZWxlbWVudC5wcm9wcy52YWx1ZSA/PyBlbGVtZW50LnByb3BzLmRlZmF1bHRWYWx1ZSA/PyAnJztcbiAgY29uc3Qgc2VsZWN0aW9uUmFuZ2UgPSB7XG4gICAgc3RhcnQ6IDAsXG4gICAgZW5kOiBwcmV2aW91c1RleHQubGVuZ3RoLFxuICB9O1xuICBkaXNwYXRjaEV2ZW50KGVsZW1lbnQsICdzZWxlY3Rpb25DaGFuZ2UnLCBFdmVudEJ1aWxkZXIuVGV4dElucHV0LnNlbGVjdGlvbkNoYW5nZShzZWxlY3Rpb25SYW5nZSkpO1xuXG4gIC8vIDMuIFByZXNzIGJhY2tzcGFjZVxuICBjb25zdCBmaW5hbFRleHQgPSAnJztcbiAgYXdhaXQgZW1pdFR5cGluZ0V2ZW50cyh0aGlzLmNvbmZpZywgZWxlbWVudCwgJ0JhY2tzcGFjZScsIGZpbmFsVGV4dCwgcHJldmlvdXNUZXh0KTtcblxuICAvLyA0LiBFeGl0IGVsZW1lbnRcbiAgYXdhaXQgd2FpdCh0aGlzLmNvbmZpZyk7XG4gIGRpc3BhdGNoRXZlbnQoZWxlbWVudCwgJ2VuZEVkaXRpbmcnLCBFdmVudEJ1aWxkZXIuVGV4dElucHV0LmVuZEVkaXRpbmcoZmluYWxUZXh0KSk7XG5cbiAgZGlzcGF0Y2hFdmVudChlbGVtZW50LCAnYmx1cicsIEV2ZW50QnVpbGRlci5Db21tb24uYmx1cigpKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFDQSxJQUFBQSxPQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxtQkFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsVUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsY0FBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksYUFBQSxHQUFBSixPQUFBO0FBRUEsSUFBQUssTUFBQSxHQUFBTCxPQUFBO0FBQ0EsSUFBQU0sS0FBQSxHQUFBTixPQUFBO0FBQUEsU0FFc0JPLEtBQUtBLENBQUFDLEVBQUE7RUFBQSxPQUFBQyxNQUFBLENBQUFDLEtBQUEsT0FBQUMsU0FBQTtBQUFBO0FBQUEsU0FBQUYsT0FBQTtFQUFBQSxNQUFBLE9BQUFHLGtCQUFBLENBQUFDLE9BQUEsRUFBcEIsV0FBOENDLE9BQTBCLEVBQWlCO0lBQUEsSUFBQUMsSUFBQSxFQUFBQyxvQkFBQTtJQUM5RixJQUFJLENBQUMsSUFBQWYsbUJBQUEsQ0FBQWdCLGVBQWUsRUFBQ0gsT0FBTyxDQUFDLEVBQUU7TUFDN0IsTUFBTSxJQUFJZixPQUFBLENBQUFtQixjQUFjLENBQ3JCLDhFQUE2RUosT0FBTyxDQUFDSyxJQUFLLElBQUcsRUFDOUZaLEtBQ0YsQ0FBQztJQUNIO0lBRUEsSUFBSSxDQUFDLElBQUFMLFVBQUEsQ0FBQWtCLG1CQUFtQixFQUFDTixPQUFPLENBQUMsSUFBSSxDQUFDLElBQUFYLGNBQUEsQ0FBQWtCLHFCQUFxQixFQUFDUCxPQUFPLENBQUMsRUFBRTtNQUNwRTtJQUNGO0lBR0EsSUFBQVQsTUFBQSxDQUFBaUIsYUFBYSxFQUFDUixPQUFPLEVBQUUsT0FBTyxFQUFFVixhQUFBLENBQUFtQixZQUFZLENBQUNDLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUc1RCxJQUFNQyxZQUFZLElBQUFYLElBQUEsSUFBQUMsb0JBQUEsR0FBR0YsT0FBTyxDQUFDYSxLQUFLLENBQUNDLEtBQUssWUFBQVosb0JBQUEsR0FBSUYsT0FBTyxDQUFDYSxLQUFLLENBQUNFLFlBQVksWUFBQWQsSUFBQSxHQUFJLEVBQUU7SUFDNUUsSUFBTWUsY0FBYyxHQUFHO01BQ3JCQyxLQUFLLEVBQUUsQ0FBQztNQUNSQyxHQUFHLEVBQUVOLFlBQVksQ0FBQ087SUFDcEIsQ0FBQztJQUNELElBQUE1QixNQUFBLENBQUFpQixhQUFhLEVBQUNSLE9BQU8sRUFBRSxpQkFBaUIsRUFBRVYsYUFBQSxDQUFBbUIsWUFBWSxDQUFDVyxTQUFTLENBQUNDLGVBQWUsQ0FBQ0wsY0FBYyxDQUFDLENBQUM7SUFHakcsSUFBTU0sU0FBUyxHQUFHLEVBQUU7SUFDcEIsTUFBTSxJQUFBOUIsS0FBQSxDQUFBK0IsZ0JBQWdCLEVBQUMsSUFBSSxDQUFDQyxNQUFNLEVBQUV4QixPQUFPLEVBQUUsV0FBVyxFQUFFc0IsU0FBUyxFQUFFVixZQUFZLENBQUM7SUFHbEYsTUFBTSxJQUFBckIsTUFBQSxDQUFBa0MsSUFBSSxFQUFDLElBQUksQ0FBQ0QsTUFBTSxDQUFDO0lBQ3ZCLElBQUFqQyxNQUFBLENBQUFpQixhQUFhLEVBQUNSLE9BQU8sRUFBRSxZQUFZLEVBQUVWLGFBQUEsQ0FBQW1CLFlBQVksQ0FBQ1csU0FBUyxDQUFDTSxVQUFVLENBQUNKLFNBQVMsQ0FBQyxDQUFDO0lBRWxGLElBQUEvQixNQUFBLENBQUFpQixhQUFhLEVBQUNSLE9BQU8sRUFBRSxNQUFNLEVBQUVWLGFBQUEsQ0FBQW1CLFlBQVksQ0FBQ0MsTUFBTSxDQUFDaUIsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUM1RDtFQUFBLE9BQUFoQyxNQUFBLENBQUFDLEtBQUEsT0FBQUMsU0FBQTtBQUFBIiwiaWdub3JlTGlzdCI6W119