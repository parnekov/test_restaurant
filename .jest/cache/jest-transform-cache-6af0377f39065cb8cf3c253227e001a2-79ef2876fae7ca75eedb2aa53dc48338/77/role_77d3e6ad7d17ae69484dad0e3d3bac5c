cdf5528ca0c726a35262e7b10a92d594
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindByRoleQueries = void 0;
var _accessiblity = require("../helpers/accessiblity");
var _findAll = require("../helpers/find-all");
var _matchAccessibilityState = require("../helpers/matchers/match-accessibility-state");
var _matchAccessibilityValue = require("../helpers/matchers/match-accessibility-value");
var _matchStringProp = require("../helpers/matchers/match-string-prop");
var _within = require("../within");
var _makeQueries = require("./make-queries");
var matchAccessibleNameIfNeeded = function matchAccessibleNameIfNeeded(node, name) {
  if (name == null) return true;
  var _ref = (0, _within.getQueriesForElement)(node),
    queryAllByText = _ref.queryAllByText,
    queryAllByLabelText = _ref.queryAllByLabelText;
  return queryAllByText(name).length > 0 || queryAllByLabelText(name).length > 0;
};
var matchAccessibleStateIfNeeded = function matchAccessibleStateIfNeeded(node, options) {
  return options != null ? (0, _matchAccessibilityState.matchAccessibilityState)(node, options) : true;
};
var matchAccessibilityValueIfNeeded = function matchAccessibilityValueIfNeeded(node, value) {
  return value != null ? (0, _matchAccessibilityValue.matchAccessibilityValue)(node, value) : true;
};
var queryAllByRole = function queryAllByRole(instance) {
  return function queryAllByRoleFn(role, options) {
    return (0, _findAll.findAll)(instance, function (node) {
      return (0, _accessiblity.isAccessibilityElement)(node) && (0, _matchStringProp.matchStringProp)((0, _accessiblity.getAccessibilityRole)(node), role) && matchAccessibleStateIfNeeded(node, options) && matchAccessibilityValueIfNeeded(node, options == null ? void 0 : options.value) && matchAccessibleNameIfNeeded(node, options == null ? void 0 : options.name);
    }, options);
  };
};
var formatQueryParams = function formatQueryParams(role) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var params = [`role: "${String(role)}"`];
  if (options.name) {
    params.push(`name: "${String(options.name)}"`);
  }
  _accessiblity.accessibilityStateKeys.forEach(function (stateKey) {
    if (options[stateKey] !== undefined) {
      params.push(`${stateKey} state: ${options[stateKey]}`);
    }
  });
  _accessiblity.accessiblityValueKeys.forEach(function (valueKey) {
    var _options$value;
    if ((options == null ? void 0 : (_options$value = options.value) == null ? void 0 : _options$value[valueKey]) !== undefined) {
      var _options$value2;
      params.push(`${valueKey} value: ${options == null ? void 0 : (_options$value2 = options.value) == null ? void 0 : _options$value2[valueKey]}`);
    }
  });
  return params.join(', ');
};
var getMultipleError = function getMultipleError(role, options) {
  return `Found multiple elements with ${formatQueryParams(role, options)}`;
};
var getMissingError = function getMissingError(role, options) {
  return `Unable to find an element with ${formatQueryParams(role, options)}`;
};
var _ref2 = (0, _makeQueries.makeQueries)(queryAllByRole, getMissingError, getMultipleError),
  getBy = _ref2.getBy,
  getAllBy = _ref2.getAllBy,
  queryBy = _ref2.queryBy,
  queryAllBy = _ref2.queryAllBy,
  findBy = _ref2.findBy,
  findAllBy = _ref2.findAllBy;
var bindByRoleQueries = function bindByRoleQueries(instance) {
  return {
    getByRole: getBy(instance),
    getAllByRole: getAllBy(instance),
    queryByRole: queryBy(instance),
    queryAllByRole: queryAllBy(instance),
    findByRole: findBy(instance),
    findAllByRole: findAllBy(instance)
  };
};
exports.bindByRoleQueries = bindByRoleQueries;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,