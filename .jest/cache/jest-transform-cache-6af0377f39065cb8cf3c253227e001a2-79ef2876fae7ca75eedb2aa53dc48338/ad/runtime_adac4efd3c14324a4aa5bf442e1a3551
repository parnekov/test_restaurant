f479d7a8b002a51485ecf040d62db2dc
var runtime = function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var defineProperty = Object.defineProperty || function (obj, key, desc) {
    obj[key] = desc.value;
  };
  var undefined;
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    define({}, "");
  } catch (err) {
    define = function define(obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);
    defineProperty(generator, "_invoke", {
      value: makeInvokeMethod(innerFn, self, context)
    });
    return generator;
  }
  exports.wrap = wrap;
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";
  var ContinueSentinel = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    IteratorPrototype = NativeIteratorPrototype;
  }
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: true
  });
  defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: true
  });
  GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }
  exports.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };
  exports.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };
  exports.awrap = function (arg) {
    return {
      __await: arg
    };
  };
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }
        return PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped;
          resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }
    }
    var previousPromise;
    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }
      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    }
    defineProperty(this, "_invoke", {
      value: enqueue
    });
  }
  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;
  exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };
  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;
    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }
      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }
        return doneResult();
      }
      context.method = method;
      context.arg = arg;
      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }
        if (context.method === "next") {
          context.sent = context._sent = context.arg;
        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }
          context.dispatchException(context.arg);
        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }
        state = GenStateExecuting;
        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;
          if (record.arg === ContinueSentinel) {
            continue;
          }
          return {
            value: record.arg,
            done: context.done
          };
        } else if (record.type === "throw") {
          state = GenStateCompleted;
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var methodName = context.method;
    var method = delegate.iterator[methodName];
    if (method === undefined) {
      context.delegate = null;
      if (methodName === "throw" && delegate.iterator["return"]) {
        context.method = "return";
        context.arg = undefined;
        maybeInvokeDelegate(delegate, context);
        if (context.method === "throw") {
          return ContinueSentinel;
        }
      }
      if (methodName !== "return") {
        context.method = "throw";
        context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method");
      }
      return ContinueSentinel;
    }
    var record = tryCatch(method, delegate.iterator, context.arg);
    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }
    var info = record.arg;
    if (!info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }
    if (info.done) {
      context[delegate.resultName] = info.value;
      context.next = delegate.nextLoc;
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }
    } else {
      return info;
    }
    context.delegate = null;
    return ContinueSentinel;
  }
  defineIteratorMethods(Gp);
  define(Gp, toStringTagSymbol, "Generator");
  define(Gp, iteratorSymbol, function () {
    return this;
  });
  define(Gp, "toString", function () {
    return "[object Generator]";
  });
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    if (1 in locs) {
      entry.catchLoc = locs[1];
    }
    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }
    this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }
  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }
  exports.keys = function (val) {
    var object = Object(val);
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }
      next.done = true;
      return next;
    };
  };
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }
      if (typeof iterable.next === "function") {
        return iterable;
      }
      if (!isNaN(iterable.length)) {
        var i = -1,
          next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }
            next.value = undefined;
            next.done = true;
            return next;
          };
        return next.next = next;
      }
    }
    return {
      next: doneResult
    };
  }
  exports.values = values;
  function doneResult() {
    return {
      value: undefined,
      done: true
    };
  }
  Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;
      this.method = "next";
      this.arg = undefined;
      this.tryEntries.forEach(resetTryEntry);
      if (!skipTempReset) {
        for (var name in this) {
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },
    stop: function stop() {
      this.done = true;
      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }
      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) {
        throw exception;
      }
      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;
        if (caught) {
          context.method = "next";
          context.arg = undefined;
        }
        return !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;
        if (entry.tryLoc === "root") {
          return handle("end");
        }
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        finallyEntry = null;
      }
      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;
      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }
      return this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }
      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }
      return ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };
      if (this.method === "next") {
        this.arg = undefined;
      }
      return ContinueSentinel;
    }
  };
  return exports;
}(typeof module === "object" ? module.exports : {});
try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJydW50aW1lIiwiZXhwb3J0cyIsIk9wIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJkZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImtleSIsImRlc2MiLCJ2YWx1ZSIsInVuZGVmaW5lZCIsIiRTeW1ib2wiLCJTeW1ib2wiLCJpdGVyYXRvclN5bWJvbCIsIml0ZXJhdG9yIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsInRvU3RyaW5nVGFnIiwiZGVmaW5lIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZXJyIiwid3JhcCIsImlubmVyRm4iLCJvdXRlckZuIiwic2VsZiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJjcmVhdGUiLCJjb250ZXh0IiwiQ29udGV4dCIsIm1ha2VJbnZva2VNZXRob2QiLCJ0cnlDYXRjaCIsImZuIiwiYXJnIiwidHlwZSIsImNhbGwiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIkdlblN0YXRlRXhlY3V0aW5nIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJDb250aW51ZVNlbnRpbmVsIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwidmFsdWVzIiwiR3AiLCJkaXNwbGF5TmFtZSIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsImZvckVhY2giLCJtZXRob2QiLCJfaW52b2tlIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJtYXJrIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsIl9fYXdhaXQiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVjb3JkIiwicmVzdWx0IiwidGhlbiIsInVud3JhcHBlZCIsImVycm9yIiwicHJldmlvdXNQcm9taXNlIiwiZW5xdWV1ZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiYXN5bmMiLCJQcm9taXNlIiwiaXRlciIsIm5leHQiLCJkb25lIiwic3RhdGUiLCJFcnJvciIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwibWV0aG9kTmFtZSIsIlR5cGVFcnJvciIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJlbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInB1c2giLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0Iiwia2V5cyIsInZhbCIsIm9iamVjdCIsInJldmVyc2UiLCJsZW5ndGgiLCJwb3AiLCJpdGVyYWJsZSIsIml0ZXJhdG9yTWV0aG9kIiwiaXNOYU4iLCJpIiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJjaGFyQXQiLCJzbGljZSIsInN0b3AiLCJyb290RW50cnkiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwiX2NhdGNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsIm1vZHVsZSIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIl0sInNvdXJjZXMiOlsicnVudGltZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5IHx8IGZ1bmN0aW9uIChvYmosIGtleSwgZGVzYykgeyBvYmpba2V5XSA9IGRlc2MudmFsdWU7IH07XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfVxuICB0cnkge1xuICAgIC8vIElFIDggaGFzIGEgYnJva2VuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB0aGF0IG9ubHkgd29ya3Mgb24gRE9NIG9iamVjdHMuXG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24ob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGRlZmluZVByb3BlcnR5KGdlbmVyYXRvciwgXCJfaW52b2tlXCIsIHsgdmFsdWU6IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkgfSk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIGRlZmluZShJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgZGVmaW5lUHJvcGVydHkoR3AsIFwiY29uc3RydWN0b3JcIiwgeyB2YWx1ZTogR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgZGVmaW5lUHJvcGVydHkoXG4gICAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsXG4gICAgXCJjb25zdHJ1Y3RvclwiLFxuICAgIHsgdmFsdWU6IEdlbmVyYXRvckZ1bmN0aW9uLCBjb25maWd1cmFibGU6IHRydWUgfVxuICApO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgZGVmaW5lUHJvcGVydHkodGhpcywgXCJfaW52b2tlXCIsIHsgdmFsdWU6IGVucXVldWUgfSk7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBkZWZpbmUoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUsIGFzeW5jSXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kTmFtZSA9IGNvbnRleHQubWV0aG9kO1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvclttZXRob2ROYW1lXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kLCBvciBhIG1pc3NpbmcgLm5leHQgbWVodG9kLCBhbHdheXMgdGVybWluYXRlIHRoZVxuICAgICAgLy8geWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgIGlmIChtZXRob2ROYW1lID09PSBcInRocm93XCIgJiYgZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1ldGhvZE5hbWUgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ1wiICsgbWV0aG9kTmFtZSArIFwiJyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgZGVmaW5lKEdwLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JcIik7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBkZWZpbmUoR3AsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG5cbiAgZGVmaW5lKEdwLCBcInRvU3RyaW5nXCIsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9KTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIHZhciBvYmplY3QgPSBPYmplY3QodmFsKTtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgaW4gbW9kZXJuIGVuZ2luZXNcbiAgLy8gd2UgY2FuIGV4cGxpY2l0bHkgYWNjZXNzIGdsb2JhbFRoaXMuIEluIG9sZGVyIGVuZ2luZXMgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSBcIm9iamVjdFwiKSB7XG4gICAgZ2xvYmFsVGhpcy5yZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xuICB9IGVsc2Uge1xuICAgIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBT0EsSUFBSUEsT0FBTyxHQUFJLFVBQVVDLE9BQU8sRUFBRTtFQUNoQyxZQUFZOztFQUVaLElBQUlDLEVBQUUsR0FBR0MsTUFBTSxDQUFDQyxTQUFTO0VBQ3pCLElBQUlDLE1BQU0sR0FBR0gsRUFBRSxDQUFDSSxjQUFjO0VBQzlCLElBQUlDLGNBQWMsR0FBR0osTUFBTSxDQUFDSSxjQUFjLElBQUksVUFBVUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLElBQUksRUFBRTtJQUFFRixHQUFHLENBQUNDLEdBQUcsQ0FBQyxHQUFHQyxJQUFJLENBQUNDLEtBQUs7RUFBRSxDQUFDO0VBQ2xHLElBQUlDLFNBQVM7RUFDYixJQUFJQyxPQUFPLEdBQUcsT0FBT0MsTUFBTSxLQUFLLFVBQVUsR0FBR0EsTUFBTSxHQUFHLENBQUMsQ0FBQztFQUN4RCxJQUFJQyxjQUFjLEdBQUdGLE9BQU8sQ0FBQ0csUUFBUSxJQUFJLFlBQVk7RUFDckQsSUFBSUMsbUJBQW1CLEdBQUdKLE9BQU8sQ0FBQ0ssYUFBYSxJQUFJLGlCQUFpQjtFQUNwRSxJQUFJQyxpQkFBaUIsR0FBR04sT0FBTyxDQUFDTyxXQUFXLElBQUksZUFBZTtFQUU5RCxTQUFTQyxNQUFNQSxDQUFDYixHQUFHLEVBQUVDLEdBQUcsRUFBRUUsS0FBSyxFQUFFO0lBQy9CUixNQUFNLENBQUNJLGNBQWMsQ0FBQ0MsR0FBRyxFQUFFQyxHQUFHLEVBQUU7TUFDOUJFLEtBQUssRUFBRUEsS0FBSztNQUNaVyxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsWUFBWSxFQUFFLElBQUk7TUFDbEJDLFFBQVEsRUFBRTtJQUNaLENBQUMsQ0FBQztJQUNGLE9BQU9oQixHQUFHLENBQUNDLEdBQUcsQ0FBQztFQUNqQjtFQUNBLElBQUk7SUFFRlksTUFBTSxDQUFDLENBQUMsQ0FBQyxF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