6d7fc5a291e4960f81eb4c21b81b76a1
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _requireNativeComponent = _interopRequireDefault(require("../../Libraries/ReactNative/requireNativeComponent"));
var _UIManager = _interopRequireDefault(require("../ReactNative/UIManager"));
function codegenNativeComponent(componentName, options) {
  if (global.RN$Bridgeless === true && __DEV__) {
    console.warn(`Codegen didn't run for ${componentName}. This will be an error in the future. Make sure you are using @react-native/babel-preset when building your JavaScript code.`);
  }
  var componentNameInUse = options && options.paperComponentName != null ? options.paperComponentName : componentName;
  if (options != null && options.paperComponentNameDeprecated != null) {
    if (_UIManager.default.hasViewManagerConfig(componentName)) {
      componentNameInUse = componentName;
    } else if (options.paperComponentNameDeprecated != null && _UIManager.default.hasViewManagerConfig(options.paperComponentNameDeprecated)) {
      componentNameInUse = options.paperComponentNameDeprecated;
    } else {
      var _options$paperCompone;
      throw new Error(`Failed to find native component for either ${componentName} or ${(_options$paperCompone = options.paperComponentNameDeprecated) != null ? _options$paperCompone : '(unknown)'}`);
    }
  }
  return (0, _requireNativeComponent.default)(componentNameInUse);
}
var _default = exports.default = codegenNativeComponent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX1VJTWFuYWdlciIsImNvZGVnZW5OYXRpdmVDb21wb25lbnQiLCJjb21wb25lbnROYW1lIiwib3B0aW9ucyIsImdsb2JhbCIsIlJOJEJyaWRnZWxlc3MiLCJfX0RFVl9fIiwiY29uc29sZSIsIndhcm4iLCJjb21wb25lbnROYW1lSW5Vc2UiLCJwYXBlckNvbXBvbmVudE5hbWUiLCJwYXBlckNvbXBvbmVudE5hbWVEZXByZWNhdGVkIiwiVUlNYW5hZ2VyIiwiaGFzVmlld01hbmFnZXJDb25maWciLCJfb3B0aW9ucyRwYXBlckNvbXBvbmUiLCJFcnJvciIsInJlcXVpcmVOYXRpdmVDb21wb25lbnQiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiY29kZWdlbk5hdGl2ZUNvbXBvbmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKi9cblxuLy8gVE9ETzogbW92ZSB0aGlzIGZpbGUgdG8gc2hpbXMvUmVhY3ROYXRpdmUgKHJlcXVpcmVzIFJlYWN0IHVwZGF0ZSBhbmQgc3luYylcblxuaW1wb3J0IHR5cGUge0hvc3RDb21wb25lbnR9IGZyb20gJy4uLy4uL0xpYnJhcmllcy9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZVR5cGVzJztcblxuaW1wb3J0IHJlcXVpcmVOYXRpdmVDb21wb25lbnQgZnJvbSAnLi4vLi4vTGlicmFyaWVzL1JlYWN0TmF0aXZlL3JlcXVpcmVOYXRpdmVDb21wb25lbnQnO1xuaW1wb3J0IFVJTWFuYWdlciBmcm9tICcuLi9SZWFjdE5hdGl2ZS9VSU1hbmFnZXInO1xuXG4vLyBUT0RPOiBpbXBvcnQgZnJvbSBDb2RlZ2VuU2NoZW1hIG9uY2Ugd29ya3NwYWNlcyBhcmUgZW5hYmxlZFxudHlwZSBPcHRpb25zID0gJFJlYWRPbmx5PHt8XG4gIGludGVyZmFjZU9ubHk/OiBib29sZWFuLFxuICBwYXBlckNvbXBvbmVudE5hbWU/OiBzdHJpbmcsXG4gIHBhcGVyQ29tcG9uZW50TmFtZURlcHJlY2F0ZWQ/OiBzdHJpbmcsXG4gIGV4Y2x1ZGVkUGxhdGZvcm1zPzogJFJlYWRPbmx5QXJyYXk8J2lPUycgfCAnYW5kcm9pZCc+LFxufH0+O1xuXG5leHBvcnQgdHlwZSBOYXRpdmVDb21wb25lbnRUeXBlPFQ+ID0gSG9zdENvbXBvbmVudDxUPjtcblxuLy8gSWYgdGhpcyBmdW5jdGlvbiBydW5zIHRoZW4gdGhhdCBtZWFucyB0aGUgdmlldyBjb25maWdzIHdlcmUgbm90XG4vLyBnZW5lcmF0ZWQgYXQgYnVpbGQgdGltZSB1c2luZyBgR2VuZXJhdGVWaWV3Q29uZmlnSnMuanNgLiBUaHVzXG4vLyB3ZSBuZWVkIHRvIGByZXF1aXJlTmF0aXZlQ29tcG9uZW50YCB0byBnZXQgdGhlIHZpZXcgY29uZmlncyBmcm9tIHZpZXcgbWFuYWdlcnMuXG4vLyBgcmVxdWlyZU5hdGl2ZUNvbXBvbmVudGAgaXMgbm90IGF2YWlsYWJsZSBpbiBCcmlkZ2VsZXNzIG1vZGUuXG4vLyBlLmcuIFRoaXMgZnVuY3Rpb24gcnVucyBhdCBydW50aW1lIGlmIGBjb2RlZ2VuTmF0aXZlQ29tcG9uZW50YCB3YXMgbm90IGNhbGxlZFxuLy8gZnJvbSBhIGZpbGUgc3VmZml4ZWQgd2l0aCBOYXRpdmVDb21wb25lbnQuanMuXG5mdW5jdGlvbiBjb2RlZ2VuTmF0aXZlQ29tcG9uZW50PFByb3BzPihcbiAgY29tcG9uZW50TmFtZTogc3RyaW5nLFxuICBvcHRpb25zPzogT3B0aW9ucyxcbik6IE5hdGl2ZUNvbXBvbmVudFR5cGU8UHJvcHM+IHtcbiAgaWYgKGdsb2JhbC5STiRCcmlkZ2VsZXNzID09PSB0cnVlICYmIF9fREVWX18pIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICBgQ29kZWdlbiBkaWRuJ3QgcnVuIGZvciAke2NvbXBvbmVudE5hbWV9LiBUaGlzIHdpbGwgYmUgYW4gZXJyb3IgaW4gdGhlIGZ1dHVyZS4gTWFrZSBzdXJlIHlvdSBhcmUgdXNpbmcgQHJlYWN0LW5hdGl2ZS9iYWJlbC1wcmVzZXQgd2hlbiBidWlsZGluZyB5b3VyIEphdmFTY3JpcHQgY29kZS5gLFxuICAgICk7XG4gIH1cblxuICBsZXQgY29tcG9uZW50TmFtZUluVXNlID1cbiAgICBvcHRpb25zICYmIG9wdGlvbnMucGFwZXJDb21wb25lbnROYW1lICE9IG51bGxcbiAgICAgID8gb3B0aW9ucy5wYXBlckNvbXBvbmVudE5hbWVcbiAgICAgIDogY29tcG9uZW50TmFtZTtcblxuICBpZiAob3B0aW9ucyAhPSBudWxsICYmIG9wdGlvbnMucGFwZXJDb21wb25lbnROYW1lRGVwcmVjYXRlZCAhPSBudWxsKSB7XG4gICAgaWYgKFVJTWFuYWdlci5oYXNWaWV3TWFuYWdlckNvbmZpZyhjb21wb25lbnROYW1lKSkge1xuICAgICAgY29tcG9uZW50TmFtZUluVXNlID0gY29tcG9uZW50TmFtZTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgb3B0aW9ucy5wYXBlckNvbXBvbmVudE5hbWVEZXByZWNhdGVkICE9IG51bGwgJiZcbiAgICAgIFVJTWFuYWdlci5oYXNWaWV3TWFuYWdlckNvbmZpZyhvcHRpb25zLnBhcGVyQ29tcG9uZW50TmFtZURlcHJlY2F0ZWQpXG4gICAgKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXVxuICAgICAgY29tcG9uZW50TmFtZUluVXNlID0gb3B0aW9ucy5wYXBlckNvbXBvbmVudE5hbWVEZXByZWNhdGVkO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBGYWlsZWQgdG8gZmluZCBuYXRpdmUgY29tcG9uZW50IGZvciBlaXRoZXIgJHtjb21wb25lbnROYW1lfSBvciAke1xuICAgICAgICAgIG9wdGlvbnMucGFwZXJDb21wb25lbnROYW1lRGVwcmVjYXRlZCA/PyAnKHVua25vd24pJ1xuICAgICAgICB9YCxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChyZXF1aXJlTmF0aXZlQ29tcG9uZW50PFByb3BzPihcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXVxuICAgIGNvbXBvbmVudE5hbWVJblVzZSxcbiAgKTogSG9zdENvbXBvbmVudDxQcm9wcz4pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb2RlZ2VuTmF0aXZlQ29tcG9uZW50O1xuIl0sIm1hcHBpbmdzIjoiOzs7OztBQWNBLElBQUFBLHVCQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFrQkEsU0FBU0Usc0JBQXNCQSxDQUM3QkMsYUFBcUIsRUFDckJDLE9BQWlCLEVBQ1c7RUFDNUIsSUFBSUMsTUFBTSxDQUFDQyxhQUFhLEtBQUssSUFBSSxJQUFJQyxPQUFPLEVBQUU7SUFDNUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUNULDBCQUF5Qk4sYUFBYywrSEFDMUMsQ0FBQztFQUNIO0VBRUEsSUFBSU8sa0JBQWtCLEdBQ3BCTixPQUFPLElBQUlBLE9BQU8sQ0FBQ08sa0JBQWtCLElBQUksSUFBSSxHQUN6Q1AsT0FBTyxDQUFDTyxrQkFBa0IsR0FDMUJSLGFBQWE7RUFFbkIsSUFBSUMsT0FBTyxJQUFJLElBQUksSUFBSUEsT0FBTyxDQUFDUSw0QkFBNEIsSUFBSSxJQUFJLEVBQUU7SUFDbkUsSUFBSUMsa0JBQVMsQ0FBQ0Msb0JBQW9CLENBQUNYLGFBQWEsQ0FBQyxFQUFFO01BQ2pETyxrQkFBa0IsR0FBR1AsYUFBYTtJQUNwQyxDQUFDLE1BQU0sSUFDTEMsT0FBTyxDQUFDUSw0QkFBNEIsSUFBSSxJQUFJLElBQzVDQyxrQkFBUyxDQUFDQyxvQkFBb0IsQ0FBQ1YsT0FBTyxDQUFDUSw0QkFBNEIsQ0FBQyxFQUNwRTtNQUVBRixrQkFBa0IsR0FBR04sT0FBTyxDQUFDUSw0QkFBNEI7SUFDM0QsQ0FBQyxNQUFNO01BQUEsSUFBQUcscUJBQUE7TUFDTCxNQUFNLElBQUlDLEtBQUssQ0FDWiw4Q0FBNkNiLGFBQWMsT0FBSSxDQUFBWSxxQkFBQSxHQUM5RFgsT0FBTyxDQUFDUSw0QkFBNEIsWUFBQUcscUJBQUEsR0FBSSxXQUN6QyxFQUNILENBQUM7SUFDSDtFQUNGO0VBRUEsT0FBUSxJQUFBRSwrQkFBc0IsRUFFNUJQLGtCQUNGLENBQUM7QUFDSDtBQUFDLElBQUFRLFFBQUEsR0FBQUMsT0FBQSxDQUFBQyxPQUFBLEdBRWNsQixzQkFBc0IiLCJpZ25vcmVMaXN0IjpbXX0=