2ce0ec286536e11709503039a54f63c8
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _CheckIcon = _interopRequireDefault(require("../../assets/icons/CheckIcon"));
var _theme = require("../../utils/theme");
var _styles = _interopRequireDefault(require("./styles"));
var _jsxRuntime = require("react/jsx-runtime");
var CheckBox = function CheckBox(_ref) {
  var checked = _ref.checked,
    title = _ref.title,
    onChange = _ref.onChange,
    style = _ref.style,
    checkedColor = _ref.checkedColor,
    isDisabled = _ref.isDisabled,
    testID = _ref.testID;
  var onCheckChange = function onCheckChange() {
    onChange(!checked);
  };
  var iconContainerStyle = [_styles.default.iconContainer, checked ? _styles.default.checkedIconContainer : _styles.default.uncheckedIconContainer];
  return (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
    testID: testID,
    style: [_styles.default.container, style],
    onPress: onCheckChange,
    disabled: isDisabled,
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: iconContainerStyle,
      children: (0, _jsxRuntime.jsx)(_CheckIcon.default, {
        color: checked ? checkedColor || _theme.COLORS.WHITE : _theme.COLORS.WHITE,
        size: 16
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: _styles.default.title,
      children: title
    })]
  });
};
var _default = exports.default = CheckBox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9DaGVja0ljb24iLCJfdGhlbWUiLCJfc3R5bGVzIiwiX2pzeFJ1bnRpbWUiLCJDaGVja0JveCIsIl9yZWYiLCJjaGVja2VkIiwidGl0bGUiLCJvbkNoYW5nZSIsInN0eWxlIiwiY2hlY2tlZENvbG9yIiwiaXNEaXNhYmxlZCIsInRlc3RJRCIsIm9uQ2hlY2tDaGFuZ2UiLCJpY29uQ29udGFpbmVyU3R5bGUiLCJzdHlsZXMiLCJpY29uQ29udGFpbmVyIiwiY2hlY2tlZEljb25Db250YWluZXIiLCJ1bmNoZWNrZWRJY29uQ29udGFpbmVyIiwianN4cyIsIlRvdWNoYWJsZU9wYWNpdHkiLCJjb250YWluZXIiLCJvblByZXNzIiwiZGlzYWJsZWQiLCJjaGlsZHJlbiIsImpzeCIsIlZpZXciLCJkZWZhdWx0IiwiY29sb3IiLCJDT0xPUlMiLCJXSElURSIsInNpemUiLCJUZXh0IiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIFJFQUNUICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtUb3VjaGFibGVPcGFjaXR5LCBWaWV3LCBUZXh0LCBTdHlsZVByb3AsIFZpZXdTdHlsZX0gZnJvbSAncmVhY3QtbmF0aXZlJztcbi8qIENPTVBPTkVOVFMgKi9cbmltcG9ydCBDaGVja0ljb24gZnJvbSAnLi4vLi4vYXNzZXRzL2ljb25zL0NoZWNrSWNvbic7XG4vKiBVVElMUyAqL1xuaW1wb3J0IHtDT0xPUlN9IGZyb20gJy4uLy4uL3V0aWxzL3RoZW1lJztcbi8qIFNUWUxFUyAqL1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlcyc7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIGNoZWNrZWQ6IGJvb2xlYW47XG4gIGNoZWNrZWRDb2xvcj86IHN0cmluZztcbiAgdGl0bGU6IHN0cmluZztcbiAgb25DaGFuZ2U6IEZ1bmN0aW9uO1xuICBzdHlsZT86IFN0eWxlUHJvcDxWaWV3U3R5bGU+O1xuICBpc0Rpc2FibGVkPzogYm9vbGVhbjtcbiAgdGVzdElEPzogc3RyaW5nO1xufTtcblxuY29uc3QgQ2hlY2tCb3ggPSAoe1xuICBjaGVja2VkLFxuICB0aXRsZSxcbiAgb25DaGFuZ2UsXG4gIHN0eWxlLFxuICBjaGVja2VkQ29sb3IsXG4gIGlzRGlzYWJsZWQsXG4gIHRlc3RJRCxcbn06IFByb3BzKSA9PiB7XG4gIGNvbnN0IG9uQ2hlY2tDaGFuZ2UgPSAoKSA9PiB7XG4gICAgb25DaGFuZ2UoIWNoZWNrZWQpO1xuICB9O1xuXG4gIGNvbnN0IGljb25Db250YWluZXJTdHlsZSA9IFtcbiAgICBzdHlsZXMuaWNvbkNvbnRhaW5lcixcbiAgICBjaGVja2VkID8gc3R5bGVzLmNoZWNrZWRJY29uQ29udGFpbmVyIDogc3R5bGVzLnVuY2hlY2tlZEljb25Db250YWluZXIsXG4gIF07XG5cbiAgcmV0dXJuIChcbiAgICA8VG91Y2hhYmxlT3BhY2l0eVxuICAgICAgdGVzdElEPXt0ZXN0SUR9XG4gICAgICBzdHlsZT17W3N0eWxlcy5jb250YWluZXIsIHN0eWxlXX1cbiAgICAgIG9uUHJlc3M9e29uQ2hlY2tDaGFuZ2V9XG4gICAgICBkaXNhYmxlZD17aXNEaXNhYmxlZH0+XG4gICAgICA8VmlldyBzdHlsZT17aWNvbkNvbnRhaW5lclN0eWxlfT5cbiAgICAgICAgPENoZWNrSWNvblxuICAgICAgICAgIGNvbG9yPXtjaGVja2VkID8gY2hlY2tlZENvbG9yIHx8IENPTE9SUy5XSElURSA6IENPTE9SUy5XSElURX1cbiAgICAgICAgICBzaXplPXsxNn1cbiAgICAgICAgLz5cbiAgICAgIDwvVmlldz5cbiAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMudGl0bGV9Pnt0aXRsZX08L1RleHQ+XG4gICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQ2hlY2tCb3g7XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsVUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUcsTUFBQSxHQUFBSCxPQUFBO0FBRUEsSUFBQUksT0FBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQThCLElBQUFLLFdBQUEsR0FBQUwsT0FBQTtBQVk5QixJQUFNTSxRQUFRLEdBQUcsU0FBWEEsUUFBUUEsQ0FBQUMsSUFBQSxFQVFEO0VBQUEsSUFQWEMsT0FBTyxHQUFBRCxJQUFBLENBQVBDLE9BQU87SUFDUEMsS0FBSyxHQUFBRixJQUFBLENBQUxFLEtBQUs7SUFDTEMsUUFBUSxHQUFBSCxJQUFBLENBQVJHLFFBQVE7SUFDUkMsS0FBSyxHQUFBSixJQUFBLENBQUxJLEtBQUs7SUFDTEMsWUFBWSxHQUFBTCxJQUFBLENBQVpLLFlBQVk7SUFDWkMsVUFBVSxHQUFBTixJQUFBLENBQVZNLFVBQVU7SUFDVkMsTUFBTSxHQUFBUCxJQUFBLENBQU5PLE1BQU07RUFFTixJQUFNQyxhQUFhLEdBQUcsU0FBaEJBLGFBQWFBLENBQUEsRUFBUztJQUMxQkwsUUFBUSxDQUFDLENBQUNGLE9BQU8sQ0FBQztFQUNwQixDQUFDO0VBRUQsSUFBTVEsa0JBQWtCLEdBQUcsQ0FDekJDLGVBQU0sQ0FBQ0MsYUFBYSxFQUNwQlYsT0FBTyxHQUFHUyxlQUFNLENBQUNFLG9CQUFvQixHQUFHRixlQUFNLENBQUNHLHNCQUFzQixDQUN0RTtFQUVELE9BQ0UsSUFBQWYsV0FBQSxDQUFBZ0IsSUFBQSxFQUFDcEIsWUFBQSxDQUFBcUIsZ0JBQWdCO0lBQ2ZSLE1BQU0sRUFBRUEsTUFBTztJQUNmSCxLQUFLLEVBQUUsQ0FBQ00sZUFBTSxDQUFDTSxTQUFTLEVBQUVaLEtBQUssQ0FBRTtJQUNqQ2EsT0FBTyxFQUFFVCxhQUFjO0lBQ3ZCVSxRQUFRLEVBQUVaLFVBQVc7SUFBQWEsUUFBQSxHQUNyQixJQUFBckIsV0FBQSxDQUFBc0IsR0FBQSxFQUFDMUIsWUFBQSxDQUFBMkIsSUFBSTtNQUFDakIsS0FBSyxFQUFFSyxrQkFBbUI7TUFBQVUsUUFBQSxFQUM5QixJQUFBckIsV0FBQSxDQUFBc0IsR0FBQSxFQUFDekIsVUFBQSxDQUFBMkIsT0FBUztRQUNSQyxLQUFLLEVBQUV0QixPQUFPLEdBQUdJLFlBQVksSUFBSW1CLGFBQU0sQ0FBQ0MsS0FBSyxHQUFHRCxhQUFNLENBQUNDLEtBQU07UUFDN0RDLElBQUksRUFBRTtNQUFHLENBQ1Y7SUFBQyxDQUNFLENBQUMsRUFDUCxJQUFBNUIsV0FBQSxDQUFBc0IsR0FBQSxFQUFDMUIsWUFBQSxDQUFBaUMsSUFBSTtNQUFDdkIsS0FBSyxFQUFFTSxlQUFNLENBQUNSLEtBQU07TUFBQWlCLFFBQUEsRUFBRWpCO0lBQUssQ0FBTyxDQUFDO0VBQUEsQ0FDekIsQ0FBQztBQUV2QixDQUFDO0FBQUMsSUFBQTBCLFFBQUEsR0FBQUMsT0FBQSxDQUFBUCxPQUFBLEdBRWF2QixRQUFRIiwiaWdub3JlTGlzdCI6W119