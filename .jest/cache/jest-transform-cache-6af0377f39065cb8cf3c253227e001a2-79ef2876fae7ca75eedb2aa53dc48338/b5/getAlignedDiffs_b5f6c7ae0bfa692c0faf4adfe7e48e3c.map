{"version":3,"names":["_interopRequireDefault","require","_toConsumableArray2","_classCallCheck2","_createClass2","Object","defineProperty","exports","value","default","_cleanupSemantic","concatenateRelevantDiffs","op","diffs","changeColor","reduce","reduced","diff","DIFF_EQUAL","length","ChangeBuffer","line","lines","key","pushSubstring","substring","pushDiff","Diff","pushLine","push","isLineEmpty","align","_this","string","includes","substrings","split","iLast","forEach","i","moveLinesTo","apply","CommonBuffer","deleteBuffer","insertBuffer","pushDiffCommonLine","pushDiffChangeLines","isDiffEmpty","flushChangeLines","_this2","subdiff","getLines","getAlignedDiffs","DIFF_DELETE","DIFF_INSERT","commonBuffer","_default"],"sources":["getAlignedDiffs.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\nvar _cleanupSemantic = require('./cleanupSemantic');\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// Given change op and array of diffs, return concatenated string:\n// * include common strings\n// * include change strings which have argument op with changeColor\n// * exclude change strings which have opposite op\nconst concatenateRelevantDiffs = (op, diffs, changeColor) =>\n  diffs.reduce(\n    (reduced, diff) =>\n      reduced +\n      (diff[0] === _cleanupSemantic.DIFF_EQUAL\n        ? diff[1]\n        : diff[0] === op && diff[1].length !== 0 // empty if change is newline\n        ? changeColor(diff[1])\n        : ''),\n    ''\n  );\n\n// Encapsulate change lines until either a common newline or the end.\nclass ChangeBuffer {\n  op;\n  line; // incomplete line\n  lines; // complete lines\n  changeColor;\n  constructor(op, changeColor) {\n    this.op = op;\n    this.line = [];\n    this.lines = [];\n    this.changeColor = changeColor;\n  }\n  pushSubstring(substring) {\n    this.pushDiff(new _cleanupSemantic.Diff(this.op, substring));\n  }\n  pushLine() {\n    // Assume call only if line has at least one diff,\n    // therefore an empty line must have a diff which has an empty string.\n\n    // If line has multiple diffs, then assume it has a common diff,\n    // therefore change diffs have change color;\n    // otherwise then it has line color only.\n    this.lines.push(\n      this.line.length !== 1\n        ? new _cleanupSemantic.Diff(\n            this.op,\n            concatenateRelevantDiffs(this.op, this.line, this.changeColor)\n          )\n        : this.line[0][0] === this.op\n        ? this.line[0] // can use instance\n        : new _cleanupSemantic.Diff(this.op, this.line[0][1]) // was common diff\n    );\n\n    this.line.length = 0;\n  }\n  isLineEmpty() {\n    return this.line.length === 0;\n  }\n\n  // Minor input to buffer.\n  pushDiff(diff) {\n    this.line.push(diff);\n  }\n\n  // Main input to buffer.\n  align(diff) {\n    const string = diff[1];\n    if (string.includes('\\n')) {\n      const substrings = string.split('\\n');\n      const iLast = substrings.length - 1;\n      substrings.forEach((substring, i) => {\n        if (i < iLast) {\n          // The first substring completes the current change line.\n          // A middle substring is a change line.\n          this.pushSubstring(substring);\n          this.pushLine();\n        } else if (substring.length !== 0) {\n          // The last substring starts a change line, if it is not empty.\n          // Important: This non-empty condition also automatically omits\n          // the newline appended to the end of expected and received strings.\n          this.pushSubstring(substring);\n        }\n      });\n    } else {\n      // Append non-multiline string to current change line.\n      this.pushDiff(diff);\n    }\n  }\n\n  // Output from buffer.\n  moveLinesTo(lines) {\n    if (!this.isLineEmpty()) {\n      this.pushLine();\n    }\n    lines.push(...this.lines);\n    this.lines.length = 0;\n  }\n}\n\n// Encapsulate common and change lines.\nclass CommonBuffer {\n  deleteBuffer;\n  insertBuffer;\n  lines;\n  constructor(deleteBuffer, insertBuffer) {\n    this.deleteBuffer = deleteBuffer;\n    this.insertBuffer = insertBuffer;\n    this.lines = [];\n  }\n  pushDiffCommonLine(diff) {\n    this.lines.push(diff);\n  }\n  pushDiffChangeLines(diff) {\n    const isDiffEmpty = diff[1].length === 0;\n\n    // An empty diff string is redundant, unless a change line is empty.\n    if (!isDiffEmpty || this.deleteBuffer.isLineEmpty()) {\n      this.deleteBuffer.pushDiff(diff);\n    }\n    if (!isDiffEmpty || this.insertBuffer.isLineEmpty()) {\n      this.insertBuffer.pushDiff(diff);\n    }\n  }\n  flushChangeLines() {\n    this.deleteBuffer.moveLinesTo(this.lines);\n    this.insertBuffer.moveLinesTo(this.lines);\n  }\n\n  // Input to buffer.\n  align(diff) {\n    const op = diff[0];\n    const string = diff[1];\n    if (string.includes('\\n')) {\n      const substrings = string.split('\\n');\n      const iLast = substrings.length - 1;\n      substrings.forEach((substring, i) => {\n        if (i === 0) {\n          const subdiff = new _cleanupSemantic.Diff(op, substring);\n          if (\n            this.deleteBuffer.isLineEmpty() &&\n            this.insertBuffer.isLineEmpty()\n          ) {\n            // If both current change lines are empty,\n            // then the first substring is a common line.\n            this.flushChangeLines();\n            this.pushDiffCommonLine(subdiff);\n          } else {\n            // If either current change line is non-empty,\n            // then the first substring completes the change lines.\n            this.pushDiffChangeLines(subdiff);\n            this.flushChangeLines();\n          }\n        } else if (i < iLast) {\n          // A middle substring is a common line.\n          this.pushDiffCommonLine(new _cleanupSemantic.Diff(op, substring));\n        } else if (substring.length !== 0) {\n          // The last substring starts a change line, if it is not empty.\n          // Important: This non-empty condition also automatically omits\n          // the newline appended to the end of expected and received strings.\n          this.pushDiffChangeLines(new _cleanupSemantic.Diff(op, substring));\n        }\n      });\n    } else {\n      // Append non-multiline string to current change lines.\n      // Important: It cannot be at the end following empty change lines,\n      // because newline appended to the end of expected and received strings.\n      this.pushDiffChangeLines(diff);\n    }\n  }\n\n  // Output from buffer.\n  getLines() {\n    this.flushChangeLines();\n    return this.lines;\n  }\n}\n\n// Given diffs from expected and received strings,\n// return new array of diffs split or joined into lines.\n//\n// To correctly align a change line at the end, the algorithm:\n// * assumes that a newline was appended to the strings\n// * omits the last newline from the output array\n//\n// Assume the function is not called:\n// * if either expected or received is empty string\n// * if neither expected nor received is multiline string\nconst getAlignedDiffs = (diffs, changeColor) => {\n  const deleteBuffer = new ChangeBuffer(\n    _cleanupSemantic.DIFF_DELETE,\n    changeColor\n  );\n  const insertBuffer = new ChangeBuffer(\n    _cleanupSemantic.DIFF_INSERT,\n    changeColor\n  );\n  const commonBuffer = new CommonBuffer(deleteBuffer, insertBuffer);\n  diffs.forEach(diff => {\n    switch (diff[0]) {\n      case _cleanupSemantic.DIFF_DELETE:\n        deleteBuffer.align(diff);\n        break;\n      case _cleanupSemantic.DIFF_INSERT:\n        insertBuffer.align(diff);\n        break;\n      default:\n        commonBuffer.align(diff);\n    }\n  });\n  return commonBuffer.getLines();\n};\nvar _default = getAlignedDiffs;\nexports.default = _default;\n"],"mappings":"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","ignoreList":[]}