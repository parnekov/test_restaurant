2d072b80fbbbadbe05a5550e1124b704
_getJestObj().mock('@react-navigation/native', function () {
  var actualNav = jest.requireActual('@react-navigation/native');
  return Object.assign({}, actualNav, {
    useNavigation: function useNavigation() {
      return {
        setOptions: jest.fn()
      };
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactRedux = require("react-redux");
var _store = require("../src/store/store");
var _native = require("@react-navigation/native");
var _MyOrder = _interopRequireDefault(require("../src/screens/MyOrder"));
var _routes = require("../src/navigation/routes");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var testID = _routes.SCREEN_NAMES.MY_ORDER;
var ComponentToRender = (0, _jsxRuntime.jsx)(_reactRedux.Provider, {
  store: _store.store,
  children: (0, _jsxRuntime.jsx)(_native.NavigationContainer, {
    children: (0, _jsxRuntime.jsx)(_MyOrder.default, {})
  })
});
describe('MyOrder screen tests', function () {
  it('MyOrder renders correctly', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)(ComponentToRender),
      queryByTestId = _render.queryByTestId,
      queryByText = _render.queryByText;
    expect(queryByTestId(`${testID}-container`)).toBeTruthy();
    expect(queryByTestId(`${testID}-list`)).toBeTruthy();
    expect(queryByTestId(`${testID}-list-header-checkbox`)).toBeTruthy();
    expect(queryByTestId(`${testID}-pay-button`)).toBeTruthy();
    expect(queryByText('Pay')).toBeTruthy();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJhY3R1YWxOYXYiLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsIk9iamVjdCIsImFzc2lnbiIsInVzZU5hdmlnYXRpb24iLCJzZXRPcHRpb25zIiwiZm4iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdFJlZHV4IiwiX3N0b3JlIiwiX25hdGl2ZSIsIl9NeU9yZGVyIiwiX3JvdXRlcyIsIl9qc3hSdW50aW1lIiwiX3JlcXVpcmUiLCJ0ZXN0SUQiLCJTQ1JFRU5fTkFNRVMiLCJNWV9PUkRFUiIsIkNvbXBvbmVudFRvUmVuZGVyIiwianN4IiwiUHJvdmlkZXIiLCJzdG9yZSIsImNoaWxkcmVuIiwiTmF2aWdhdGlvbkNvbnRhaW5lciIsImRlZmF1bHQiLCJkZXNjcmliZSIsIml0IiwiX3JlbmRlciIsInJlbmRlciIsInF1ZXJ5QnlUZXN0SWQiLCJxdWVyeUJ5VGV4dCIsImV4cGVjdCIsInRvQmVUcnV0aHkiXSwic291cmNlcyI6WyJNeU9yZGVyLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIFJFQUNUICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyogTU9EVUxFUyAqL1xuaW1wb3J0IHtSZWFjdFRlc3RJbnN0YW5jZX0gZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcic7XG5pbXBvcnQge3JlbmRlciwgZmlyZUV2ZW50LCB3YWl0Rm9yfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG4vKiBTVE9SRSAqL1xuaW1wb3J0IHtQcm92aWRlcn0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHtzdG9yZX0gZnJvbSAnLi4vc3JjL3N0b3JlL3N0b3JlJztcbi8qIENPTVBPTkVOVFMgKi9cbmltcG9ydCB7TmF2aWdhdGlvbkNvbnRhaW5lcn0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJztcbmltcG9ydCBNeU9yZGVyIGZyb20gJy4uL3NyYy9zY3JlZW5zL015T3JkZXInO1xuLyogQ09OU1RBTlRTICovXG5pbXBvcnQge1NDUkVFTl9OQU1FU30gZnJvbSAnLi4vc3JjL25hdmlnYXRpb24vcm91dGVzJztcblxuY29uc3QgdGVzdElEID0gU0NSRUVOX05BTUVTLk1ZX09SREVSO1xuXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+IHtcbiAgY29uc3QgYWN0dWFsTmF2ID0gamVzdC5yZXF1aXJlQWN0dWFsKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5hY3R1YWxOYXYsXG4gICAgdXNlTmF2aWdhdGlvbjogKCkgPT4gKHtcbiAgICAgIHNldE9wdGlvbnM6IGplc3QuZm4oKSxcbiAgICB9KSxcbiAgfTtcbn0pO1xuXG5jb25zdCBDb21wb25lbnRUb1JlbmRlciA9IChcbiAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgPE5hdmlnYXRpb25Db250YWluZXI+XG4gICAgICA8TXlPcmRlciAvPlxuICAgIDwvTmF2aWdhdGlvbkNvbnRhaW5lcj5cbiAgPC9Qcm92aWRlcj5cbik7XG5cbmRlc2NyaWJlKCdNeU9yZGVyIHNjcmVlbiB0ZXN0cycsICgpID0+IHtcbiAgaXQoJ015T3JkZXIgcmVuZGVycyBjb3JyZWN0bHknLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qge3F1ZXJ5QnlUZXN0SWQsIHF1ZXJ5QnlUZXh0fSA9IHJlbmRlcihDb21wb25lbnRUb1JlbmRlcik7XG5cbiAgICBleHBlY3QocXVlcnlCeVRlc3RJZChgJHt0ZXN0SUR9LWNvbnRhaW5lcmApKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXN0SWQoYCR7dGVzdElEfS1saXN0YCkpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QocXVlcnlCeVRlc3RJZChgJHt0ZXN0SUR9LWxpc3QtaGVhZGVyLWNoZWNrYm94YCkpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QocXVlcnlCeVRlc3RJZChgJHt0ZXN0SUR9LXBheS1idXR0b25gKSkudG9CZVRydXRoeSgpO1xuXG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXh0KCdQYXknKSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICAvLyBpdCgnTXlPcmRlciBtYXRjaGVzIHNuYXBzaG90JywgKCkgPT4ge1xuICAvLyAgIGNvbnN0IGNvbXBvbmVudCA9IHJlbmRlcihDb21wb25lbnRUb1JlbmRlcikudG9KU09OKCk7XG4gIC8vICAgZXhwZWN0KGNvbXBvbmVudCkudG9NYXRjaFNuYXBzaG90KCk7XG4gIC8vIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQWdCQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsWUFBTTtFQUMxQyxJQUFNQyxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLDBCQUEwQixDQUFDO0VBQ2hFLE9BQUFDLE1BQUEsQ0FBQUMsTUFBQSxLQUNLSixTQUFTO0lBQ1pLLGFBQWEsRUFBRSxTQUFBQSxjQUFBO01BQUEsT0FBTztRQUNwQkMsVUFBVSxFQUFFTCxJQUFJLENBQUNNLEVBQUUsQ0FBQztNQUN0QixDQUFDO0lBQUE7RUFBQztBQUVOLENBQUMsQ0FBQztBQUFDLElBQUFDLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxrQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBdkJILElBQUFFLE1BQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUdBLElBQUFHLFlBQUEsR0FBQUgsT0FBQTtBQUVBLElBQUFJLFdBQUEsR0FBQUosT0FBQTtBQUNBLElBQUFLLE1BQUEsR0FBQUwsT0FBQTtBQUVBLElBQUFNLE9BQUEsR0FBQU4sT0FBQTtBQUNBLElBQUFPLFFBQUEsR0FBQVIsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFRLE9BQUEsR0FBQVIsT0FBQTtBQUFzRCxJQUFBUyxXQUFBLEdBQUFULE9BQUE7QUFBQSxTQUFBWCxZQUFBO0VBQUEsSUFBQXFCLFFBQUEsR0FBQVYsT0FBQTtJQUFBUixJQUFBLEdBQUFrQixRQUFBLENBQUFsQixJQUFBO0VBQUFILFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFHLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQUV0RCxJQUFNbUIsTUFBTSxHQUFHQyxvQkFBWSxDQUFDQyxRQUFRO0FBWXBDLElBQU1DLGlCQUFpQixHQUNyQixJQUFBTCxXQUFBLENBQUFNLEdBQUEsRUFBQ1gsV0FBQSxDQUFBWSxRQUFRO0VBQUNDLEtBQUssRUFBRUEsWUFBTTtFQUFBQyxRQUFBLEVBQ3JCLElBQUFULFdBQUEsQ0FBQU0sR0FBQSxFQUFDVCxPQUFBLENBQUFhLG1CQUFtQjtJQUFBRCxRQUFBLEVBQ2xCLElBQUFULFdBQUEsQ0FBQU0sR0FBQSxFQUFDUixRQUFBLENBQUFhLE9BQU8sSUFBRTtFQUFDLENBQ1E7QUFBQyxDQUNkLENBQ1g7QUFFREMsUUFBUSxDQUFDLHNCQUFzQixFQUFFLFlBQU07RUFDckNDLEVBQUUsQ0FBQywyQkFBMkIsTUFBQXJCLGtCQUFBLENBQUFtQixPQUFBLEVBQUUsYUFBWTtJQUMxQyxJQUFBRyxPQUFBLEdBQXFDLElBQUFDLG1CQUFNLEVBQUNWLGlCQUFpQixDQUFDO01BQXZEVyxhQUFhLEdBQUFGLE9BQUEsQ0FBYkUsYUFBYTtNQUFFQyxXQUFXLEdBQUFILE9BQUEsQ0FBWEcsV0FBVztJQUVqQ0MsTUFBTSxDQUFDRixhQUFhLENBQUUsR0FBRWQsTUFBTyxZQUFXLENBQUMsQ0FBQyxDQUFDaUIsVUFBVSxDQUFDLENBQUM7SUFDekRELE1BQU0sQ0FBQ0YsYUFBYSxDQUFFLEdBQUVkLE1BQU8sT0FBTSxDQUFDLENBQUMsQ0FBQ2lCLFVBQVUsQ0FBQyxDQUFDO0lBQ3BERCxNQUFNLENBQUNGLGFBQWEsQ0FBRSxHQUFFZCxNQUFPLHVCQUFzQixDQUFDLENBQUMsQ0FBQ2lCLFVBQVUsQ0FBQyxDQUFDO0lBQ3BFRCxNQUFNLENBQUNGLGFBQWEsQ0FBRSxHQUFFZCxNQUFPLGFBQVksQ0FBQyxDQUFDLENBQUNpQixVQUFVLENBQUMsQ0FBQztJQUUxREQsTUFBTSxDQUFDRCxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7RUFDekMsQ0FBQyxFQUFDO0FBTUosQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119