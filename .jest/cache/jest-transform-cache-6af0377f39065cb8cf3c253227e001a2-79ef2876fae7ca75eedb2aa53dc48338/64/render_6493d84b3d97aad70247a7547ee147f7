eb46fa54e90e6bb1e3999162cf1bec91
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = render;
exports.renderInternal = renderInternal;
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _act = _interopRequireDefault(require("./act"));
var _cleanup = require("./cleanup");
var _config = require("./config");
var _componentTree = require("./helpers/component-tree");
var _debugDeep = _interopRequireDefault(require("./helpers/debug-deep"));
var _debugShallow = _interopRequireDefault(require("./helpers/debug-shallow"));
var _hostComponentNames = require("./helpers/host-component-names");
var _stringValidation = require("./helpers/string-validation");
var _renderAct = require("./render-act");
var _screen = require("./screen");
var _within = require("./within");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
function render(component) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return renderInternal(component, options);
}
function renderInternal(component) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
    Wrapper = _ref.wrapper,
    createNodeMock = _ref.createNodeMock,
    unstable_validateStringsRenderedWithinText = _ref.unstable_validateStringsRenderedWithinText,
    _ref$detectHostCompon = _ref.detectHostComponentNames,
    detectHostComponentNames = _ref$detectHostCompon === void 0 ? true : _ref$detectHostCompon;
  if (detectHostComponentNames) {
    (0, _hostComponentNames.configureHostComponentNamesIfNeeded)();
  }
  if (unstable_validateStringsRenderedWithinText) {
    return renderWithStringValidation(component, {
      wrapper: Wrapper,
      createNodeMock: createNodeMock
    });
  }
  var wrap = function wrap(element) {
    return Wrapper ? React.createElement(Wrapper, null, element) : element;
  };
  var renderer = (0, _renderAct.renderWithAct)(wrap(component), createNodeMock ? {
    createNodeMock: createNodeMock
  } : undefined);
  return buildRenderResult(renderer, wrap);
}
function renderWithStringValidation(component) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
    Wrapper = _ref2.wrapper,
    createNodeMock = _ref2.createNodeMock;
  var handleRender = function handleRender(_, phase) {
    if (phase === 'update') {
      (0, _stringValidation.validateStringsRenderedWithinText)(_screen.screen.toJSON());
    }
  };
  var wrap = function wrap(element) {
    return React.createElement(_react.Profiler, {
      id: "renderProfiler",
      onRender: handleRender
    }, Wrapper ? React.createElement(Wrapper, null, element) : element);
  };
  var renderer = (0, _renderAct.renderWithAct)(wrap(component), createNodeMock ? {
    createNodeMock: createNodeMock
  } : undefined);
  (0, _stringValidation.validateStringsRenderedWithinText)(renderer.toJSON());
  return buildRenderResult(renderer, wrap);
}
function buildRenderResult(renderer, wrap) {
  var update = updateWithAct(renderer, wrap);
  var instance = renderer.root;
  var unmount = function unmount() {
    void (0, _act.default)(function () {
      renderer.unmount();
    });
  };
  (0, _cleanup.addToCleanupQueue)(unmount);
  var result = Object.assign({}, (0, _within.getQueriesForElement)(instance), {
    update: update,
    unmount: unmount,
    rerender: update,
    toJSON: renderer.toJSON,
    debug: debug(instance, renderer),
    get root() {
      return (0, _componentTree.getHostChildren)(instance)[0];
    },
    UNSAFE_root: instance
  });
  Object.defineProperty(result, 'container', {
    enumerable: false,
    get: function get() {
      throw new Error("'container' property has been renamed to 'UNSAFE_root'.\n\n" + "Consider using 'root' property which returns root host element.");
    }
  });
  (0, _screen.setRenderResult)(result);
  return result;
}
function updateWithAct(renderer, wrap) {
  return function (component) {
    void (0, _act.default)(function () {
      renderer.update(wrap(component));
    });
  };
}
function debug(instance, renderer) {
  function debugImpl(options) {
    var _ref3 = (0, _config.getConfig)(),
      defaultDebugOptions = _ref3.defaultDebugOptions;
    var debugOptions = typeof options === 'string' ? Object.assign({}, defaultDebugOptions, {
      message: options
    }) : Object.assign({}, defaultDebugOptions, options);
    if (typeof options === 'string') {
      console.warn('Using debug("message") is deprecated and will be removed in future release, please use debug({ message; "message" }) instead.');
    }
    var json = renderer.toJSON();
    if (json) {
      return (0, _debugDeep.default)(json, debugOptions);
    }
  }
  debugImpl.shallow = function (message) {
    return (0, _debugShallow.default)(instance, message);
  };
  return debugImpl;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,