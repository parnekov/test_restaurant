d6f6871bffd90b2a201326247986507c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findAll = findAll;
var _config = require("../config");
var _accessiblity = require("./accessiblity");
var _componentTree = require("./component-tree");
function findAll(root, predicate, options) {
  var _ref, _options$includeHidde, _ref2;
  var results = findAllInternal(root, predicate, options);
  var includeHiddenElements = (_ref = (_options$includeHidde = options == null ? void 0 : options.includeHiddenElements) != null ? _options$includeHidde : options == null ? void 0 : options.hidden) != null ? _ref : (_ref2 = (0, _config.getConfig)()) == null ? void 0 : _ref2.defaultIncludeHiddenElements;
  if (includeHiddenElements) {
    return results;
  }
  var cache = new WeakMap();
  return results.filter(function (element) {
    return !(0, _accessiblity.isHiddenFromAccessibility)(element, {
      cache: cache
    });
  });
}
function findAllInternal(root, predicate, options) {
  var results = [];
  var matchingDescendants = [];
  root.children.forEach(function (child) {
    if (typeof child === 'string') {
      return;
    }
    matchingDescendants.push.apply(matchingDescendants, (0, _toConsumableArray2.default)(findAllInternal(child, predicate, options)));
  });
  if ((!(options != null && options.matchDeepestOnly) || matchingDescendants.length === 0) && (0, _componentTree.isHostElement)(root) && predicate(root)) {
    results.push(root);
  }
  results.push.apply(results, matchingDescendants);
  return results;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29uZmlnIiwicmVxdWlyZSIsIl9hY2Nlc3NpYmxpdHkiLCJfY29tcG9uZW50VHJlZSIsImZpbmRBbGwiLCJyb290IiwicHJlZGljYXRlIiwib3B0aW9ucyIsIl9yZWYiLCJfb3B0aW9ucyRpbmNsdWRlSGlkZGUiLCJfcmVmMiIsInJlc3VsdHMiLCJmaW5kQWxsSW50ZXJuYWwiLCJpbmNsdWRlSGlkZGVuRWxlbWVudHMiLCJoaWRkZW4iLCJnZXRDb25maWciLCJkZWZhdWx0SW5jbHVkZUhpZGRlbkVsZW1lbnRzIiwiY2FjaGUiLCJXZWFrTWFwIiwiZmlsdGVyIiwiZWxlbWVudCIsImlzSGlkZGVuRnJvbUFjY2Vzc2liaWxpdHkiLCJtYXRjaGluZ0Rlc2NlbmRhbnRzIiwiY2hpbGRyZW4iLCJmb3JFYWNoIiwiY2hpbGQiLCJwdXNoIiwiYXBwbHkiLCJfdG9Db25zdW1hYmxlQXJyYXkyIiwiZGVmYXVsdCIsIm1hdGNoRGVlcGVzdE9ubHkiLCJsZW5ndGgiLCJpc0hvc3RFbGVtZW50Il0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hlbHBlcnMvZmluZC1hbGwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVhY3RUZXN0SW5zdGFuY2UgfSBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcbmltcG9ydCB7IGdldENvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBpc0hpZGRlbkZyb21BY2Nlc3NpYmlsaXR5IH0gZnJvbSAnLi9hY2Nlc3NpYmxpdHknO1xuaW1wb3J0IHsgSG9zdFRlc3RJbnN0YW5jZSwgaXNIb3N0RWxlbWVudCB9IGZyb20gJy4vY29tcG9uZW50LXRyZWUnO1xuXG5pbnRlcmZhY2UgRmluZEFsbE9wdGlvbnMge1xuICAvKiogTWF0Y2ggZWxlbWVudHMgaGlkZGVuIGZyb20gYWNjZXNzaWJpbGl0eSAqL1xuICBpbmNsdWRlSGlkZGVuRWxlbWVudHM/OiBib29sZWFuO1xuXG4gIC8qKiBSVEwtY29tcGF0aWJsZSBhbGlhcyB0byBgaW5jbHVkZUhpZGRlbkVsZW1lbnRzYCAqL1xuICBoaWRkZW4/OiBib29sZWFuO1xuXG4gIC8qIEV4Y2x1ZGUgYW55IGFuY2VzdG9ycyBvZiBkZWVwZXN0IG1hdGNoZWQgZWxlbWVudHMgZXZlbiBpZiB0aGV5IG1hdGNoIHRoZSBwcmVkaWNhdGUgKi9cbiAgbWF0Y2hEZWVwZXN0T25seT86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kQWxsKFxuICByb290OiBSZWFjdFRlc3RJbnN0YW5jZSxcbiAgcHJlZGljYXRlOiAoZWxlbWVudDogUmVhY3RUZXN0SW5zdGFuY2UpID0+IGJvb2xlYW4sXG4gIG9wdGlvbnM/OiBGaW5kQWxsT3B0aW9ucyxcbik6IEhvc3RUZXN0SW5zdGFuY2VbXSB7XG4gIGNvbnN0IHJlc3VsdHMgPSBmaW5kQWxsSW50ZXJuYWwocm9vdCwgcHJlZGljYXRlLCBvcHRpb25zKTtcblxuICBjb25zdCBpbmNsdWRlSGlkZGVuRWxlbWVudHMgPVxuICAgIG9wdGlvbnM/LmluY2x1ZGVIaWRkZW5FbGVtZW50cyA/PyBvcHRpb25zPy5oaWRkZW4gPz8gZ2V0Q29uZmlnKCk/LmRlZmF1bHRJbmNsdWRlSGlkZGVuRWxlbWVudHM7XG5cbiAgaWYgKGluY2x1ZGVIaWRkZW5FbGVtZW50cykge1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9XG5cbiAgY29uc3QgY2FjaGUgPSBuZXcgV2Vha01hcDxSZWFjdFRlc3RJbnN0YW5jZT4oKTtcbiAgcmV0dXJuIHJlc3VsdHMuZmlsdGVyKChlbGVtZW50KSA9PiAhaXNIaWRkZW5Gcm9tQWNjZXNzaWJpbGl0eShlbGVtZW50LCB7IGNhY2hlIH0pKTtcbn1cblxuLy8gRXh0cmFjdGVkIGZyb20gUmVhY3QgVGVzdCBSZW5kZXJlclxuLy8gc3JjOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi84ZTJiZGU2ZjI3NTFhYTYzMzVmM2NlZjQ4OGMwNWMzZWEwOGUwNzRhL3BhY2thZ2VzL3JlYWN0LXRlc3QtcmVuZGVyZXIvc3JjL1JlYWN0VGVzdFJlbmRlcmVyLmpzI0w0MDJcbmZ1bmN0aW9uIGZpbmRBbGxJbnRlcm5hbChcbiAgcm9vdDogUmVhY3RUZXN0SW5zdGFuY2UsXG4gIHByZWRpY2F0ZTogKGVsZW1lbnQ6IFJlYWN0VGVzdEluc3RhbmNlKSA9PiBib29sZWFuLFxuICBvcHRpb25zPzogRmluZEFsbE9wdGlvbnMsXG4pOiBIb3N0VGVzdEluc3RhbmNlW10ge1xuICBjb25zdCByZXN1bHRzOiBIb3N0VGVzdEluc3RhbmNlW10gPSBbXTtcblxuICAvLyBNYXRjaCBkZXNjZW5kYW50cyBmaXJzdCBidXQgZG8gbm90IGFkZCB0aGVtIHRvIHJlc3VsdHMgeWV0LlxuICBjb25zdCBtYXRjaGluZ0Rlc2NlbmRhbnRzOiBIb3N0VGVzdEluc3RhbmNlW10gPSBbXTtcbiAgcm9vdC5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgIGlmICh0eXBlb2YgY2hpbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG1hdGNoaW5nRGVzY2VuZGFudHMucHVzaCguLi5maW5kQWxsSW50ZXJuYWwoY2hpbGQsIHByZWRpY2F0ZSwgb3B0aW9ucykpO1xuICB9KTtcblxuICBpZiAoXG4gICAgLy8gV2hlbiBtYXRjaERlZXBlc3RPbmx5ID0gdHJ1ZTogYWRkIGN1cnJlbnQgZWxlbWVudCBvbmx5IGlmIG5vIGRlc2NlbmRhbnRzIG1hdGNoXG4gICAgKCFvcHRpb25zPy5tYXRjaERlZXBlc3RPbmx5IHx8IG1hdGNoaW5nRGVzY2VuZGFudHMubGVuZ3RoID09PSAwKSAmJlxuICAgIGlzSG9zdEVsZW1lbnQocm9vdCkgJiZcbiAgICBwcmVkaWNhdGUocm9vdClcbiAgKSB7XG4gICAgcmVzdWx0cy5wdXNoKHJvb3QpO1xuICB9XG5cbiAgLy8gQWRkIG1hdGNoaW5nIGRlc2NlbmRhbnRzIGFmdGVyIGVsZW1lbnQgdG8gcHJlc2VydmUgb3JpZ2luYWwgdHJlZSB3YWxrIG9yZGVyLlxuICByZXN1bHRzLnB1c2goLi4ubWF0Y2hpbmdEZXNjZW5kYW50cyk7XG5cbiAgcmV0dXJuIHJlc3VsdHM7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQ0EsSUFBQUEsT0FBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsY0FBQSxHQUFBRixPQUFBO0FBYU8sU0FBU0csT0FBT0EsQ0FDckJDLElBQXVCLEVBQ3ZCQyxTQUFrRCxFQUNsREMsT0FBd0IsRUFDSjtFQUFBLElBQUFDLElBQUEsRUFBQUMscUJBQUEsRUFBQUMsS0FBQTtFQUNwQixJQUFNQyxPQUFPLEdBQUdDLGVBQWUsQ0FBQ1AsSUFBSSxFQUFFQyxTQUFTLEVBQUVDLE9BQU8sQ0FBQztFQUV6RCxJQUFNTSxxQkFBcUIsSUFBQUwsSUFBQSxJQUFBQyxxQkFBQSxHQUN6QkYsT0FBTyxvQkFBUEEsT0FBTyxDQUFFTSxxQkFBcUIsWUFBQUoscUJBQUEsR0FBSUYsT0FBTyxvQkFBUEEsT0FBTyxDQUFFTyxNQUFNLFlBQUFOLElBQUEsSUFBQUUsS0FBQSxHQUFJLElBQUFWLE9BQUEsQ0FBQWUsU0FBUyxFQUFDLENBQUMscUJBQVhMLEtBQUEsQ0FBYU0sNEJBQTRCO0VBRWhHLElBQUlILHFCQUFxQixFQUFFO0lBQ3pCLE9BQU9GLE9BQU87RUFDaEI7RUFFQSxJQUFNTSxLQUFLLEdBQUcsSUFBSUMsT0FBTyxDQUFvQixDQUFDO0VBQzlDLE9BQU9QLE9BQU8sQ0FBQ1EsTUFBTSxDQUFFLFVBQUFDLE9BQU87SUFBQSxPQUFLLENBQUMsSUFBQWxCLGFBQUEsQ0FBQW1CLHlCQUF5QixFQUFDRCxPQUFPLEVBQUU7TUFBRUgsS0FBQSxFQUFBQTtJQUFNLENBQUMsQ0FBQztFQUFBLEVBQUM7QUFDcEY7QUFJQSxTQUFTTCxlQUFlQSxDQUN0QlAsSUFBdUIsRUFDdkJDLFNBQWtELEVBQ2xEQyxPQUF3QixFQUNKO0VBQ3BCLElBQU1JLE9BQTJCLEdBQUcsRUFBRTtFQUd0QyxJQUFNVyxtQkFBdUMsR0FBRyxFQUFFO0VBQ2xEakIsSUFBSSxDQUFDa0IsUUFBUSxDQUFDQyxPQUFPLENBQUUsVUFBQUMsS0FBSyxFQUFLO0lBQy9CLElBQUksT0FBT0EsS0FBSyxLQUFLLFFBQVEsRUFBRTtNQUM3QjtJQUNGO0lBQ0FILG1CQUFtQixDQUFDSSxJQUFJLENBQUFDLEtBQUEsQ0FBeEJMLG1CQUFtQixNQUFBTSxtQkFBQSxDQUFBQyxPQUFBLEVBQVNqQixlQUFlLENBQUNhLEtBQUssRUFBRW5CLFNBQVMsRUFBRUMsT0FBTyxDQUFDLEVBQUM7RUFDekUsQ0FBQyxDQUFDO0VBRUYsSUFFRSxDQUFDLEVBQUNBLE9BQU8sWUFBUEEsT0FBTyxDQUFFdUIsZ0JBQWdCLEtBQUlSLG1CQUFtQixDQUFDUyxNQUFNLEtBQUssQ0FBQyxLQUMvRCxJQUFBNUIsY0FBQSxDQUFBNkIsYUFBYSxFQUFDM0IsSUFBSSxDQUFDLElBQ25CQyxTQUFTLENBQUNELElBQUksQ0FBQyxFQUNmO0lBQ0FNLE9BQU8sQ0FBQ2UsSUFBSSxDQUFDckIsSUFBSSxDQUFDO0VBQ3BCO0VBR0FNLE9BQU8sQ0FBQ2UsSUFBSSxDQUFBQyxLQUFBLENBQVpoQixPQUFPLEVBQVNXLG1CQUFtQixDQUFDO0VBRXBDLE9BQU9YLE9BQU87QUFDaEIiLCJpZ25vcmVMaXN0IjpbXX0=