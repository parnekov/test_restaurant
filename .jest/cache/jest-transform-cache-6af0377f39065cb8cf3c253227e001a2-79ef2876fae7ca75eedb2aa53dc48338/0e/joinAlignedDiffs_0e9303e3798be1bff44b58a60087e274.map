{"version":3,"names":["Object","defineProperty","exports","value","joinAlignedDiffsNoExpand","joinAlignedDiffsExpand","_cleanupSemantic","require","formatTrailingSpaces","line","trailingSpaceFormatter","replace","match","printDiffLine","isFirstOrLast","color","indicator","emptyFirstOrLastLinePlaceholder","length","printDeleteLine","_ref","aColor","aIndicator","changeLineTrailingSpaceColor","printInsertLine","_ref2","bColor","bIndicator","printCommonLine","_ref3","commonColor","commonIndicator","commonLineTrailingSpaceColor","createPatchMark","aStart","aEnd","bStart","bEnd","_ref4","patchColor","diffs","options","iLength","nContextLines","contextLines","nContextLines2","jLength","hasExcessAtStartOrEnd","nExcessesBetweenChanges","i","iStart","DIFF_EQUAL","n","hasPatch","jLast","lines","jPatchMark","push","pushCommonLine","j","pushDeleteLine","pushInsertLine","iCommon","iEnd","nCommon","nOmit","DIFF_DELETE","DIFF_INSERT","join","map","diff"],"sources":["joinAlignedDiffs.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.joinAlignedDiffsNoExpand = exports.joinAlignedDiffsExpand = void 0;\nvar _cleanupSemantic = require('./cleanupSemantic');\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst formatTrailingSpaces = (line, trailingSpaceFormatter) =>\n  line.replace(/\\s+$/, match => trailingSpaceFormatter(match));\nconst printDiffLine = (\n  line,\n  isFirstOrLast,\n  color,\n  indicator,\n  trailingSpaceFormatter,\n  emptyFirstOrLastLinePlaceholder\n) =>\n  line.length !== 0\n    ? color(\n        `${indicator} ${formatTrailingSpaces(line, trailingSpaceFormatter)}`\n      )\n    : indicator !== ' '\n    ? color(indicator)\n    : isFirstOrLast && emptyFirstOrLastLinePlaceholder.length !== 0\n    ? color(`${indicator} ${emptyFirstOrLastLinePlaceholder}`)\n    : '';\nconst printDeleteLine = (\n  line,\n  isFirstOrLast,\n  {\n    aColor,\n    aIndicator,\n    changeLineTrailingSpaceColor,\n    emptyFirstOrLastLinePlaceholder\n  }\n) =>\n  printDiffLine(\n    line,\n    isFirstOrLast,\n    aColor,\n    aIndicator,\n    changeLineTrailingSpaceColor,\n    emptyFirstOrLastLinePlaceholder\n  );\nconst printInsertLine = (\n  line,\n  isFirstOrLast,\n  {\n    bColor,\n    bIndicator,\n    changeLineTrailingSpaceColor,\n    emptyFirstOrLastLinePlaceholder\n  }\n) =>\n  printDiffLine(\n    line,\n    isFirstOrLast,\n    bColor,\n    bIndicator,\n    changeLineTrailingSpaceColor,\n    emptyFirstOrLastLinePlaceholder\n  );\nconst printCommonLine = (\n  line,\n  isFirstOrLast,\n  {\n    commonColor,\n    commonIndicator,\n    commonLineTrailingSpaceColor,\n    emptyFirstOrLastLinePlaceholder\n  }\n) =>\n  printDiffLine(\n    line,\n    isFirstOrLast,\n    commonColor,\n    commonIndicator,\n    commonLineTrailingSpaceColor,\n    emptyFirstOrLastLinePlaceholder\n  );\n\n// In GNU diff format, indexes are one-based instead of zero-based.\nconst createPatchMark = (aStart, aEnd, bStart, bEnd, {patchColor}) =>\n  patchColor(\n    `@@ -${aStart + 1},${aEnd - aStart} +${bStart + 1},${bEnd - bStart} @@`\n  );\n\n// jest --no-expand\n//\n// Given array of aligned strings with inverse highlight formatting,\n// return joined lines with diff formatting (and patch marks, if needed).\nconst joinAlignedDiffsNoExpand = (diffs, options) => {\n  const iLength = diffs.length;\n  const nContextLines = options.contextLines;\n  const nContextLines2 = nContextLines + nContextLines;\n\n  // First pass: count output lines and see if it has patches.\n  let jLength = iLength;\n  let hasExcessAtStartOrEnd = false;\n  let nExcessesBetweenChanges = 0;\n  let i = 0;\n  while (i !== iLength) {\n    const iStart = i;\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_EQUAL) {\n      i += 1;\n    }\n    if (iStart !== i) {\n      if (iStart === 0) {\n        // at start\n        if (i > nContextLines) {\n          jLength -= i - nContextLines; // subtract excess common lines\n          hasExcessAtStartOrEnd = true;\n        }\n      } else if (i === iLength) {\n        // at end\n        const n = i - iStart;\n        if (n > nContextLines) {\n          jLength -= n - nContextLines; // subtract excess common lines\n          hasExcessAtStartOrEnd = true;\n        }\n      } else {\n        // between changes\n        const n = i - iStart;\n        if (n > nContextLines2) {\n          jLength -= n - nContextLines2; // subtract excess common lines\n          nExcessesBetweenChanges += 1;\n        }\n      }\n    }\n    while (i !== iLength && diffs[i][0] !== _cleanupSemantic.DIFF_EQUAL) {\n      i += 1;\n    }\n  }\n  const hasPatch = nExcessesBetweenChanges !== 0 || hasExcessAtStartOrEnd;\n  if (nExcessesBetweenChanges !== 0) {\n    jLength += nExcessesBetweenChanges + 1; // add patch lines\n  } else if (hasExcessAtStartOrEnd) {\n    jLength += 1; // add patch line\n  }\n\n  const jLast = jLength - 1;\n  const lines = [];\n  let jPatchMark = 0; // index of placeholder line for current patch mark\n  if (hasPatch) {\n    lines.push(''); // placeholder line for first patch mark\n  }\n\n  // Indexes of expected or received lines in current patch:\n  let aStart = 0;\n  let bStart = 0;\n  let aEnd = 0;\n  let bEnd = 0;\n  const pushCommonLine = line => {\n    const j = lines.length;\n    lines.push(printCommonLine(line, j === 0 || j === jLast, options));\n    aEnd += 1;\n    bEnd += 1;\n  };\n  const pushDeleteLine = line => {\n    const j = lines.length;\n    lines.push(printDeleteLine(line, j === 0 || j === jLast, options));\n    aEnd += 1;\n  };\n  const pushInsertLine = line => {\n    const j = lines.length;\n    lines.push(printInsertLine(line, j === 0 || j === jLast, options));\n    bEnd += 1;\n  };\n\n  // Second pass: push lines with diff formatting (and patch marks, if needed).\n  i = 0;\n  while (i !== iLength) {\n    let iStart = i;\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_EQUAL) {\n      i += 1;\n    }\n    if (iStart !== i) {\n      if (iStart === 0) {\n        // at beginning\n        if (i > nContextLines) {\n          iStart = i - nContextLines;\n          aStart = iStart;\n          bStart = iStart;\n          aEnd = aStart;\n          bEnd = bStart;\n        }\n        for (let iCommon = iStart; iCommon !== i; iCommon += 1) {\n          pushCommonLine(diffs[iCommon][1]);\n        }\n      } else if (i === iLength) {\n        // at end\n        const iEnd = i - iStart > nContextLines ? iStart + nContextLines : i;\n        for (let iCommon = iStart; iCommon !== iEnd; iCommon += 1) {\n          pushCommonLine(diffs[iCommon][1]);\n        }\n      } else {\n        // between changes\n        const nCommon = i - iStart;\n        if (nCommon > nContextLines2) {\n          const iEnd = iStart + nContextLines;\n          for (let iCommon = iStart; iCommon !== iEnd; iCommon += 1) {\n            pushCommonLine(diffs[iCommon][1]);\n          }\n          lines[jPatchMark] = createPatchMark(\n            aStart,\n            aEnd,\n            bStart,\n            bEnd,\n            options\n          );\n          jPatchMark = lines.length;\n          lines.push(''); // placeholder line for next patch mark\n\n          const nOmit = nCommon - nContextLines2;\n          aStart = aEnd + nOmit;\n          bStart = bEnd + nOmit;\n          aEnd = aStart;\n          bEnd = bStart;\n          for (let iCommon = i - nContextLines; iCommon !== i; iCommon += 1) {\n            pushCommonLine(diffs[iCommon][1]);\n          }\n        } else {\n          for (let iCommon = iStart; iCommon !== i; iCommon += 1) {\n            pushCommonLine(diffs[iCommon][1]);\n          }\n        }\n      }\n    }\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_DELETE) {\n      pushDeleteLine(diffs[i][1]);\n      i += 1;\n    }\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_INSERT) {\n      pushInsertLine(diffs[i][1]);\n      i += 1;\n    }\n  }\n  if (hasPatch) {\n    lines[jPatchMark] = createPatchMark(aStart, aEnd, bStart, bEnd, options);\n  }\n  return lines.join('\\n');\n};\n\n// jest --expand\n//\n// Given array of aligned strings with inverse highlight formatting,\n// return joined lines with diff formatting.\nexports.joinAlignedDiffsNoExpand = joinAlignedDiffsNoExpand;\nconst joinAlignedDiffsExpand = (diffs, options) =>\n  diffs\n    .map((diff, i, diffs) => {\n      const line = diff[1];\n      const isFirstOrLast = i === 0 || i === diffs.length - 1;\n      switch (diff[0]) {\n        case _cleanupSemantic.DIFF_DELETE:\n          return printDeleteLine(line, isFirstOrLast, options);\n        case _cleanupSemantic.DIFF_INSERT:\n          return printInsertLine(line, isFirstOrLast, options);\n        default:\n          return printCommonLine(line, isFirstOrLast, options);\n      }\n    })\n    .join('\\n');\nexports.joinAlignedDiffsExpand = joinAlignedDiffsExpand;\n"],"mappings":"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","ignoreList":[]}