a131ee8b0ac7175450ca6b996ca0d376
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createAnimatedComponent;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _View = _interopRequireDefault(require("../Components/View/View"));
var _useMergeRefs = _interopRequireDefault(require("../Utilities/useMergeRefs"));
var _useAnimatedProps3 = _interopRequireDefault(require("./useAnimatedProps"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["style"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function createAnimatedComponent(Component) {
  var AnimatedComponent = React.forwardRef(function (props, forwardedRef) {
    var _useAnimatedProps = (0, _useAnimatedProps3.default)(props),
      _useAnimatedProps2 = (0, _slicedToArray2.default)(_useAnimatedProps, 2),
      reducedProps = _useAnimatedProps2[0],
      callbackRef = _useAnimatedProps2[1];
    var ref = (0, _useMergeRefs.default)(callbackRef, forwardedRef);
    var passthroughAnimatedPropExplicitValues = reducedProps.passthroughAnimatedPropExplicitValues,
      style = reducedProps.style;
    var _ref = passthroughAnimatedPropExplicitValues != null ? passthroughAnimatedPropExplicitValues : {},
      passthroughStyle = _ref.style,
      passthroughProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var mergedStyle = Object.assign({}, style, passthroughStyle);
    return (0, _jsxRuntime.jsx)(Component, Object.assign({}, reducedProps, passthroughProps, {
      style: mergedStyle,
      ref: ref
    }));
  });
  AnimatedComponent.displayName = `Animated(${Component.displayName || 'Anonymous'})`;
  return AnimatedComponent;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfVmlldyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3VzZU1lcmdlUmVmcyIsIl91c2VBbmltYXRlZFByb3BzMyIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfanN4UnVudGltZSIsIl9leGNsdWRlZCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsImNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50IiwiQ29tcG9uZW50IiwiQW5pbWF0ZWRDb21wb25lbnQiLCJmb3J3YXJkUmVmIiwicHJvcHMiLCJmb3J3YXJkZWRSZWYiLCJfdXNlQW5pbWF0ZWRQcm9wcyIsInVzZUFuaW1hdGVkUHJvcHMiLCJfdXNlQW5pbWF0ZWRQcm9wczIiLCJfc2xpY2VkVG9BcnJheTIiLCJyZWR1Y2VkUHJvcHMiLCJjYWxsYmFja1JlZiIsInJlZiIsInVzZU1lcmdlUmVmcyIsInBhc3N0aHJvdWdoQW5pbWF0ZWRQcm9wRXhwbGljaXRWYWx1ZXMiLCJzdHlsZSIsIl9yZWYiLCJwYXNzdGhyb3VnaFN0eWxlIiwicGFzc3Rocm91Z2hQcm9wcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllczIiLCJtZXJnZWRTdHlsZSIsImFzc2lnbiIsImpzeCIsImRpc3BsYXlOYW1lIl0sInNvdXJjZXMiOlsiY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IFZpZXcgZnJvbSAnLi4vQ29tcG9uZW50cy9WaWV3L1ZpZXcnO1xuaW1wb3J0IHVzZU1lcmdlUmVmcyBmcm9tICcuLi9VdGlsaXRpZXMvdXNlTWVyZ2VSZWZzJztcbmltcG9ydCB1c2VBbmltYXRlZFByb3BzIGZyb20gJy4vdXNlQW5pbWF0ZWRQcm9wcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbi8vICRGbG93Rml4TWVbZGVwcmVjYXRlZC10eXBlXVxuZXhwb3J0IHR5cGUgQW5pbWF0ZWRQcm9wczxQcm9wczogey4uLn0+ID0gJE9iak1hcDxcbiAgUHJvcHMgJlxuICAgICRSZWFkT25seTx7XG4gICAgICBwYXNzdGhyb3VnaEFuaW1hdGVkUHJvcEV4cGxpY2l0VmFsdWVzPzogUmVhY3QuRWxlbWVudENvbmZpZzx0eXBlb2YgVmlldz4sXG4gICAgfT4sXG4gICgpID0+IGFueSxcbj47XG5cbmV4cG9ydCB0eXBlIEFuaW1hdGVkQ29tcG9uZW50VHlwZTxcbiAgUHJvcHM6IHsuLi59LFxuICArSW5zdGFuY2UgPSBtaXhlZCxcbj4gPSBSZWFjdC5BYnN0cmFjdENvbXBvbmVudDxBbmltYXRlZFByb3BzPFByb3BzPiwgSW5zdGFuY2U+O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVBbmltYXRlZENvbXBvbmVudDxUUHJvcHM6IHsuLi59LCBUSW5zdGFuY2U+KFxuICBDb21wb25lbnQ6IFJlYWN0LkFic3RyYWN0Q29tcG9uZW50PFRQcm9wcywgVEluc3RhbmNlPixcbik6IEFuaW1hdGVkQ29tcG9uZW50VHlwZTxUUHJvcHMsIFRJbnN0YW5jZT4ge1xuICBjb25zdCBBbmltYXRlZENvbXBvbmVudCA9IFJlYWN0LmZvcndhcmRSZWY8QW5pbWF0ZWRQcm9wczxUUHJvcHM+LCBUSW5zdGFuY2U+KFxuICAgIChwcm9wcywgZm9yd2FyZGVkUmVmKSA9PiB7XG4gICAgICBjb25zdCBbcmVkdWNlZFByb3BzLCBjYWxsYmFja1JlZl0gPSB1c2VBbmltYXRlZFByb3BzPFRQcm9wcywgVEluc3RhbmNlPihcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF1cbiAgICAgICAgcHJvcHMsXG4gICAgICApO1xuICAgICAgY29uc3QgcmVmID0gdXNlTWVyZ2VSZWZzPFRJbnN0YW5jZT4oY2FsbGJhY2tSZWYsIGZvcndhcmRlZFJlZik7XG5cbiAgICAgIC8vIFNvbWUgY29tcG9uZW50cyByZXF1aXJlIGV4cGxpY2l0IHBhc3N0aHJvdWdoIHZhbHVlcyBmb3IgYW5pbWF0aW9uXG4gICAgICAvLyB0byB3b3JrIHByb3Blcmx5LiBGb3IgZXhhbXBsZSwgaWYgYW4gYW5pbWF0ZWQgY29tcG9uZW50IGlzXG4gICAgICAvLyB0cmFuc2Zvcm1lZCBhbmQgUHJlc3NhYmxlLCBvblByZXNzIHdpbGwgbm90IHdvcmsgYWZ0ZXIgdHJhbnNmb3JtXG4gICAgICAvLyB3aXRob3V0IHRoZXNlIHBhc3N0aHJvdWdoIHZhbHVlcy5cbiAgICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgICAgY29uc3Qge3Bhc3N0aHJvdWdoQW5pbWF0ZWRQcm9wRXhwbGljaXRWYWx1ZXMsIHN0eWxlfSA9IHJlZHVjZWRQcm9wcztcbiAgICAgIGNvbnN0IHtzdHlsZTogcGFzc3Rocm91Z2hTdHlsZSwgLi4ucGFzc3Rocm91Z2hQcm9wc30gPVxuICAgICAgICBwYXNzdGhyb3VnaEFuaW1hdGVkUHJvcEV4cGxpY2l0VmFsdWVzID8/IHt9O1xuICAgICAgY29uc3QgbWVyZ2VkU3R5bGUgPSB7Li4uc3R5bGUsIC4uLnBhc3N0aHJvdWdoU3R5bGV9O1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8Q29tcG9uZW50XG4gICAgICAgICAgey4uLnJlZHVjZWRQcm9wc31cbiAgICAgICAgICB7Li4ucGFzc3Rocm91Z2hQcm9wc31cbiAgICAgICAgICBzdHlsZT17bWVyZ2VkU3R5bGV9XG4gICAgICAgICAgcmVmPXtyZWZ9XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgIH0sXG4gICk7XG5cbiAgQW5pbWF0ZWRDb21wb25lbnQuZGlzcGxheU5hbWUgPSBgQW5pbWF0ZWQoJHtcbiAgICBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgJ0Fub255bW91cydcbiAgfSlgO1xuXG4gIHJldHVybiBBbmltYXRlZENvbXBvbmVudDtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVVBLElBQUFBLEtBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGFBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLGtCQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxLQUFBLEdBQUFDLHVCQUFBLENBQUFKLE9BQUE7QUFBK0IsSUFBQUssV0FBQSxHQUFBTCxPQUFBO0FBQUEsSUFBQU0sU0FBQTtBQUFBLFNBQUFDLHlCQUFBQyxDQUFBLDZCQUFBQyxPQUFBLG1CQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxDQUFBLFdBQUFBLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLEtBQUFGLENBQUE7QUFBQSxTQUFBSix3QkFBQUksQ0FBQSxFQUFBRSxDQUFBLFNBQUFBLENBQUEsSUFBQUYsQ0FBQSxJQUFBQSxDQUFBLENBQUFJLFVBQUEsU0FBQUosQ0FBQSxlQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFdBQUFLLE9BQUEsRUFBQUwsQ0FBQSxRQUFBRyxDQUFBLEdBQUFKLHdCQUFBLENBQUFHLENBQUEsT0FBQUMsQ0FBQSxJQUFBQSxDQUFBLENBQUFHLEdBQUEsQ0FBQU4sQ0FBQSxVQUFBRyxDQUFBLENBQUFJLEdBQUEsQ0FBQVAsQ0FBQSxPQUFBUSxDQUFBLEtBQUFDLFNBQUEsVUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQSxXQUFBQyxDQUFBLElBQUFkLENBQUEsb0JBQUFjLENBQUEsT0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFoQixDQUFBLEVBQUFjLENBQUEsU0FBQUcsQ0FBQSxHQUFBUCxDQUFBLEdBQUFDLE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQWIsQ0FBQSxFQUFBYyxDQUFBLFVBQUFHLENBQUEsS0FBQUEsQ0FBQSxDQUFBVixHQUFBLElBQUFVLENBQUEsQ0FBQUMsR0FBQSxJQUFBUCxNQUFBLENBQUFDLGNBQUEsQ0FBQUosQ0FBQSxFQUFBTSxDQUFBLEVBQUFHLENBQUEsSUFBQVQsQ0FBQSxDQUFBTSxDQUFBLElBQUFkLENBQUEsQ0FBQWMsQ0FBQSxZQUFBTixDQUFBLENBQUFILE9BQUEsR0FBQUwsQ0FBQSxFQUFBRyxDQUFBLElBQUFBLENBQUEsQ0FBQWUsR0FBQSxDQUFBbEIsQ0FBQSxFQUFBUSxDQUFBLEdBQUFBLENBQUE7QUFnQmhCLFNBQVNXLHVCQUF1QkEsQ0FDN0NDLFNBQXFELEVBQ1g7RUFDMUMsSUFBTUMsaUJBQWlCLEdBQUcxQixLQUFLLENBQUMyQixVQUFVLENBQ3hDLFVBQUNDLEtBQUssRUFBRUMsWUFBWSxFQUFLO0lBQ3ZCLElBQUFDLGlCQUFBLEdBQW9DLElBQUFDLDBCQUFnQixFQUVsREgsS0FDRixDQUFDO01BQUFJLGtCQUFBLE9BQUFDLGVBQUEsQ0FBQXZCLE9BQUEsRUFBQW9CLGlCQUFBO01BSE1JLFlBQVksR0FBQUYsa0JBQUE7TUFBRUcsV0FBVyxHQUFBSCxrQkFBQTtJQUloQyxJQUFNSSxHQUFHLEdBQUcsSUFBQUMscUJBQVksRUFBWUYsV0FBVyxFQUFFTixZQUFZLENBQUM7SUFPOUQsSUFBT1MscUNBQXFDLEdBQVdKLFlBQVksQ0FBNURJLHFDQUFxQztNQUFFQyxLQUFLLEdBQUlMLFlBQVksQ0FBckJLLEtBQUs7SUFDbkQsSUFBQUMsSUFBQSxHQUNFRixxQ0FBcUMsV0FBckNBLHFDQUFxQyxHQUFJLENBQUMsQ0FBQztNQUQvQkcsZ0JBQWdCLEdBQUFELElBQUEsQ0FBdkJELEtBQUs7TUFBdUJHLGdCQUFnQixPQUFBQyx5QkFBQSxDQUFBakMsT0FBQSxFQUFBOEIsSUFBQSxFQUFBckMsU0FBQTtJQUVuRCxJQUFNeUMsV0FBVyxHQUFBNUIsTUFBQSxDQUFBNkIsTUFBQSxLQUFPTixLQUFLLEVBQUtFLGdCQUFnQixDQUFDO0lBRW5ELE9BQ0UsSUFBQXZDLFdBQUEsQ0FBQTRDLEdBQUEsRUFBQ3JCLFNBQVMsRUFBQVQsTUFBQSxDQUFBNkIsTUFBQSxLQUNKWCxZQUFZLEVBQ1pRLGdCQUFnQjtNQUNwQkgsS0FBSyxFQUFFSyxXQUFZO01BQ25CUixHQUFHLEVBQUVBO0lBQUksRUFDVixDQUFDO0VBRU4sQ0FDRixDQUFDO0VBRURWLGlCQUFpQixDQUFDcUIsV0FBVyxHQUFJLFlBQy9CdEIsU0FBUyxDQUFDc0IsV0FBVyxJQUFJLFdBQzFCLEdBQUU7RUFFSCxPQUFPckIsaUJBQWlCO0FBQzFCIiwiaWdub3JlTGlzdCI6W119