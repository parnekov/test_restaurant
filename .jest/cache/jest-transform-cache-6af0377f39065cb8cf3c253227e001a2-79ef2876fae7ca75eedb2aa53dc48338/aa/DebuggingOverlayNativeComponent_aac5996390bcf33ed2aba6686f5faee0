88102ac5621ccbe68f078057918b84ba
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = void 0;
var _codegenNativeCommands = _interopRequireDefault(require("../../../../Libraries/Utilities/codegenNativeCommands"));
var _codegenNativeComponent = _interopRequireDefault(require("../../../../Libraries/Utilities/codegenNativeComponent"));
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var NativeComponentRegistry = require('react-native/Libraries/NativeComponent/NativeComponentRegistry');
var _require = require("react-native/Libraries/ReactNative/RendererProxy"),
  dispatchCommand = _require.dispatchCommand;
var nativeComponentName = 'DebuggingOverlay';
var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
  uiViewClassName: 'DebuggingOverlay',
  validAttributes: {}
};
var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, function () {
  return __INTERNAL_VIEW_CONFIG;
});
var Commands = exports.Commands = {
  highlightTraceUpdates: function highlightTraceUpdates(ref, updates) {
    dispatchCommand(ref, "highlightTraceUpdates", [updates]);
  },
  highlightElements: function highlightElements(ref, elements) {
    dispatchCommand(ref, "highlightElements", [elements]);
  },
  clearElementsHighlights: function clearElementsHighlights(ref) {
    dispatchCommand(ref, "clearElementsHighlights", []);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29kZWdlbk5hdGl2ZUNvbW1hbmRzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfY29kZWdlbk5hdGl2ZUNvbXBvbmVudCIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJOYXRpdmVDb21wb25lbnRSZWdpc3RyeSIsIl9yZXF1aXJlIiwiZGlzcGF0Y2hDb21tYW5kIiwibmF0aXZlQ29tcG9uZW50TmFtZSIsIl9fSU5URVJOQUxfVklFV19DT05GSUciLCJleHBvcnRzIiwidWlWaWV3Q2xhc3NOYW1lIiwidmFsaWRBdHRyaWJ1dGVzIiwiX2RlZmF1bHQiLCJDb21tYW5kcyIsImhpZ2hsaWdodFRyYWNlVXBkYXRlcyIsInJlZiIsInVwZGF0ZXMiLCJoaWdobGlnaHRFbGVtZW50cyIsImVsZW1lbnRzIiwiY2xlYXJFbGVtZW50c0hpZ2hsaWdodHMiXSwic291cmNlcyI6WyJEZWJ1Z2dpbmdPdmVybGF5TmF0aXZlQ29tcG9uZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQgdHlwZSB7Vmlld1Byb3BzfSBmcm9tICcuLi8uLi8uLi8uLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9WaWV3L1ZpZXdQcm9wVHlwZXMnO1xuaW1wb3J0IHR5cGUge0hvc3RDb21wb25lbnR9IGZyb20gJy4uLy4uLy4uLy4uL0xpYnJhcmllcy9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZVR5cGVzJztcbmltcG9ydCB0eXBlIHtQcm9jZXNzZWRDb2xvclZhbHVlfSBmcm9tICcuLi8uLi8uLi8uLi9MaWJyYXJpZXMvU3R5bGVTaGVldC9wcm9jZXNzQ29sb3InO1xuXG5pbXBvcnQgY29kZWdlbk5hdGl2ZUNvbW1hbmRzIGZyb20gJy4uLy4uLy4uLy4uL0xpYnJhcmllcy9VdGlsaXRpZXMvY29kZWdlbk5hdGl2ZUNvbW1hbmRzJztcbmltcG9ydCBjb2RlZ2VuTmF0aXZlQ29tcG9uZW50IGZyb20gJy4uLy4uLy4uLy4uL0xpYnJhcmllcy9VdGlsaXRpZXMvY29kZWdlbk5hdGl2ZUNvbXBvbmVudCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbnR5cGUgTmF0aXZlUHJvcHMgPSAkUmVhZE9ubHk8e3xcbiAgLi4uVmlld1Byb3BzLFxufH0+O1xuZXhwb3J0IHR5cGUgRGVidWdnaW5nT3ZlcmxheU5hdGl2ZUNvbXBvbmVudFR5cGUgPSBIb3N0Q29tcG9uZW50PE5hdGl2ZVByb3BzPjtcblxuZXhwb3J0IHR5cGUgVHJhY2VVcGRhdGUgPSB7XG4gIGlkOiBudW1iZXIsXG4gIHJlY3RhbmdsZTogRWxlbWVudFJlY3RhbmdsZSxcbiAgY29sb3I6ID9Qcm9jZXNzZWRDb2xvclZhbHVlLFxufTtcblxuZXhwb3J0IHR5cGUgRWxlbWVudFJlY3RhbmdsZSA9IHtcbiAgeDogbnVtYmVyLFxuICB5OiBudW1iZXIsXG4gIHdpZHRoOiBudW1iZXIsXG4gIGhlaWdodDogbnVtYmVyLFxufTtcblxuaW50ZXJmYWNlIE5hdGl2ZUNvbW1hbmRzIHtcbiAgK2hpZ2hsaWdodFRyYWNlVXBkYXRlczogKFxuICAgIHZpZXdSZWY6IFJlYWN0LkVsZW1lbnRSZWY8RGVidWdnaW5nT3ZlcmxheU5hdGl2ZUNvbXBvbmVudFR5cGU+LFxuICAgIHVwZGF0ZXM6ICRSZWFkT25seUFycmF5PFRyYWNlVXBkYXRlPixcbiAgKSA9PiB2b2lkO1xuICAraGlnaGxpZ2h0RWxlbWVudHM6IChcbiAgICB2aWV3UmVmOiBSZWFjdC5FbGVtZW50UmVmPERlYnVnZ2luZ092ZXJsYXlOYXRpdmVDb21wb25lbnRUeXBlPixcbiAgICBlbGVtZW50czogJFJlYWRPbmx5QXJyYXk8RWxlbWVudFJlY3RhbmdsZT4sXG4gICkgPT4gdm9pZDtcbiAgK2NsZWFyRWxlbWVudHNIaWdobGlnaHRzOiAoXG4gICAgdmlld1JlZjogUmVhY3QuRWxlbWVudFJlZjxEZWJ1Z2dpbmdPdmVybGF5TmF0aXZlQ29tcG9uZW50VHlwZT4sXG4gICkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGNvbnN0IENvbW1hbmRzOiBOYXRpdmVDb21tYW5kcyA9IGNvZGVnZW5OYXRpdmVDb21tYW5kczxOYXRpdmVDb21tYW5kcz4oe1xuICBzdXBwb3J0ZWRDb21tYW5kczogW1xuICAgICdoaWdobGlnaHRUcmFjZVVwZGF0ZXMnLFxuICAgICdoaWdobGlnaHRFbGVtZW50cycsXG4gICAgJ2NsZWFyRWxlbWVudHNIaWdobGlnaHRzJyxcbiAgXSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCAoY29kZWdlbk5hdGl2ZUNvbXBvbmVudDxOYXRpdmVQcm9wcz4oXG4gICdEZWJ1Z2dpbmdPdmVybGF5Jyxcbik6IEhvc3RDb21wb25lbnQ8TmF0aXZlUHJvcHM+KTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFjQSxJQUFBQSxzQkFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsdUJBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUgsT0FBQTtBQUErQixTQUFBSSx5QkFBQUMsQ0FBQSw2QkFBQUMs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