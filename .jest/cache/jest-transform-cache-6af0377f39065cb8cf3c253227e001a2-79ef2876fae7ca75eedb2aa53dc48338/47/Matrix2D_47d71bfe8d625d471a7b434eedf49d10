411b26837e9f6a509c1a5cac0c51b17f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.append = append;
exports.appendTransform = appendTransform;
exports.identity = void 0;
exports.reset = reset;
exports.toArray = toArray;
var DEG_TO_RAD = Math.PI / 180;
var identity = [1, 0, 0, 1, 0, 0];
exports.identity = identity;
var a = 1;
var b = 0;
var c = 0;
var d = 1;
var tx = 0;
var ty = 0;
var hasInitialState = true;
function reset() {
  if (hasInitialState) {
    return;
  }
  a = d = 1;
  b = c = tx = ty = 0;
  hasInitialState = true;
}
function toArray() {
  if (hasInitialState) {
    return identity;
  }
  return [a, b, c, d, tx, ty];
}
function append(a2, b2, c2, d2, tx2, ty2) {
  var change = a2 !== 1 || b2 !== 0 || c2 !== 0 || d2 !== 1;
  var translate = tx2 !== 0 || ty2 !== 0;
  if (!change && !translate) {
    return;
  }
  if (hasInitialState) {
    hasInitialState = false;
    a = a2;
    b = b2;
    c = c2;
    d = d2;
    tx = tx2;
    ty = ty2;
    return;
  }
  var a1 = a;
  var b1 = b;
  var c1 = c;
  var d1 = d;
  if (change) {
    a = a1 * a2 + c1 * b2;
    b = b1 * a2 + d1 * b2;
    c = a1 * c2 + c1 * d2;
    d = b1 * c2 + d1 * d2;
  }
  if (translate) {
    tx = a1 * tx2 + c1 * ty2 + tx;
    ty = b1 * tx2 + d1 * ty2 + ty;
  }
}
function appendTransform(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {
  if (x === 0 && y === 0 && scaleX === 1 && scaleY === 1 && rotation === 0 && skewX === 0 && skewY === 0 && regX === 0 && regY === 0) {
    return;
  }
  var cos, sin;
  if (rotation % 360) {
    var r = rotation * DEG_TO_RAD;
    cos = Math.cos(r);
    sin = Math.sin(r);
  } else {
    cos = 1;
    sin = 0;
  }
  var a2 = cos * scaleX;
  var b2 = sin * scaleX;
  var c2 = -sin * scaleY;
  var d2 = cos * scaleY;
  if (skewX || skewY) {
    var b1 = Math.tan(skewY * DEG_TO_RAD);
    var c1 = Math.tan(skewX * DEG_TO_RAD);
    append(a2 + c1 * b2, b1 * a2 + b2, c2 + c1 * d2, b1 * c2 + d2, x, y);
  } else {
    append(a2, b2, c2, d2, x, y);
  }
  if (regX || regY) {
    tx -= regX * a + regY * c;
    ty -= regX * b + regY * d;
    hasInitialState = false;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJERUdfVE9fUkFEIiwiTWF0aCIsIlBJIiwiaWRlbnRpdHkiLCJleHBvcnRzIiwiYSIsImIiLCJjIiwiZCIsInR4IiwidHkiLCJoYXNJbml0aWFsU3RhdGUiLCJyZXNldCIsInRvQXJyYXkiLCJhcHBlbmQiLCJhMiIsImIyIiwiYzIiLCJkMiIsInR4MiIsInR5MiIsImNoYW5nZSIsInRyYW5zbGF0ZSIsImExIiwiYjEiLCJjMSIsImQxIiwiYXBwZW5kVHJhbnNmb3JtIiwieCIsInkiLCJzY2FsZVgiLCJzY2FsZVkiLCJyb3RhdGlvbiIsInNrZXdYIiwic2tld1kiLCJyZWdYIiwicmVnWSIsImNvcyIsInNpbiIsInIiLCJ0YW4iXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL01hdHJpeDJELnRzIl0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBSUEsSUFBTUEsVUFBVSxHQUFHQyxJQUFJLENBQUNDLEVBQUUsR0FBRyxHQUFHO0FBRXpCLElBQU1DLFFBQTBELEdBQUcsQ0FDeEUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQ2pCO0FBQUNDLE9BQUEsQ0FBQUQsUUFBQSxHQUFBQSxRQUFBO0FBRUYsSUFBSUUsQ0FBQyxHQUFHLENBQUM7QUFDVCxJQUFJQyxDQUFDLEdBQUcsQ0FBQztBQUNULElBQUlDLENBQUMsR0FBRyxDQUFDO0FBQ1QsSUFBSUMsQ0FBQyxHQUFHLENBQUM7QUFDVCxJQUFJQyxFQUFFLEdBQUcsQ0FBQztBQUNWLElBQUlDLEVBQUUsR0FBRyxDQUFDO0FBQ1YsSUFBSUMsZUFBZSxHQUFHLElBQUk7QUFrQm5CLFNBQVNDLEtBQUtBLENBQUEsRUFBRztFQUN0QixJQUFJRCxlQUFlLEVBQUU7SUFDbkI7RUFDRjtFQUNBTixDQUFDLEdBQUdHLENBQUMsR0FBRyxDQUFDO0VBQ1RGLENBQUMsR0FBR0MsQ0FBQyxHQUFHRSxFQUFFLEdBQUdDLEVBQUUs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