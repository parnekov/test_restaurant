6d9d6bb8ce7eee622c5a61f3ed54d3ec
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHostChildren = getHostChildren;
exports.getHostParent = getHostParent;
exports.getHostSelves = getHostSelves;
exports.getHostSiblings = getHostSiblings;
exports.getUnsafeRootElement = getUnsafeRootElement;
exports.isHostElement = isHostElement;
function isHostElement(element) {
  return typeof (element == null ? void 0 : element.type) === 'string';
}
function getHostParent(element) {
  if (element == null) {
    return null;
  }
  var current = element.parent;
  while (current) {
    if (isHostElement(current)) {
      return current;
    }
    current = current.parent;
  }
  return null;
}
function getHostChildren(element) {
  if (element == null) {
    return [];
  }
  var hostChildren = [];
  element.children.forEach(function (child) {
    if (typeof child !== 'object') {
      return;
    }
    if (isHostElement(child)) {
      hostChildren.push(child);
    } else {
      hostChildren.push.apply(hostChildren, (0, _toConsumableArray2.default)(getHostChildren(child)));
    }
  });
  return hostChildren;
}
function getHostSelves(element) {
  return isHostElement(element) ? [element] : getHostChildren(element);
}
function getHostSiblings(element) {
  var hostParent = getHostParent(element);
  var hostSelves = getHostSelves(element);
  return getHostChildren(hostParent).filter(function (sibling) {
    return !hostSelves.includes(sibling);
  });
}
function getUnsafeRootElement(element) {
  if (element == null) {
    return null;
  }
  var current = element;
  while (current.parent) {
    current = current.parent;
  }
  return current;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc0hvc3RFbGVtZW50IiwiZWxlbWVudCIsInR5cGUiLCJnZXRIb3N0UGFyZW50IiwiY3VycmVudCIsInBhcmVudCIsImdldEhvc3RDaGlsZHJlbiIsImhvc3RDaGlsZHJlbiIsImNoaWxkcmVuIiwiZm9yRWFjaCIsImNoaWxkIiwicHVzaCIsImFwcGx5IiwiX3RvQ29uc3VtYWJsZUFycmF5MiIsImRlZmF1bHQiLCJnZXRIb3N0U2VsdmVzIiwiZ2V0SG9zdFNpYmxpbmdzIiwiaG9zdFBhcmVudCIsImhvc3RTZWx2ZXMiLCJmaWx0ZXIiLCJzaWJsaW5nIiwiaW5jbHVkZXMiLCJnZXRVbnNhZmVSb290RWxlbWVudCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2NvbXBvbmVudC10cmVlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlYWN0VGVzdEluc3RhbmNlIH0gZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcic7XG5cbi8qKlxuICogUmVhY3RUZXN0SW5zdGFuY2UgcmVmZXJyaW5nIHRvIGhvc3QgZWxlbWVudC5cbiAqL1xuZXhwb3J0IHR5cGUgSG9zdFRlc3RJbnN0YW5jZSA9IFJlYWN0VGVzdEluc3RhbmNlICYgeyB0eXBlOiBzdHJpbmcgfTtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIGVsZW1lbnQgaXMgYSBob3N0IGVsZW1lbnQuXG4gKiBAcGFyYW0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBjaGVjay5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzSG9zdEVsZW1lbnQoZWxlbWVudD86IFJlYWN0VGVzdEluc3RhbmNlIHwgbnVsbCk6IGVsZW1lbnQgaXMgSG9zdFRlc3RJbnN0YW5jZSB7XG4gIHJldHVybiB0eXBlb2YgZWxlbWVudD8udHlwZSA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogUmV0dXJucyBmaXJzdCBob3N0IGFuY2VzdG9yIGZvciBnaXZlbiBlbGVtZW50LlxuICogQHBhcmFtIGVsZW1lbnQgVGhlIGVsZW1lbnQgc3RhcnQgdHJhdmVyc2luZyBmcm9tLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SG9zdFBhcmVudChlbGVtZW50OiBSZWFjdFRlc3RJbnN0YW5jZSB8IG51bGwpOiBIb3N0VGVzdEluc3RhbmNlIHwgbnVsbCB7XG4gIGlmIChlbGVtZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGxldCBjdXJyZW50ID0gZWxlbWVudC5wYXJlbnQ7XG4gIHdoaWxlIChjdXJyZW50KSB7XG4gICAgaWYgKGlzSG9zdEVsZW1lbnQoY3VycmVudCkpIHtcbiAgICAgIHJldHVybiBjdXJyZW50O1xuICAgIH1cblxuICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIFJldHVybnMgaG9zdCBjaGlsZHJlbiBmb3IgZ2l2ZW4gZWxlbWVudC5cbiAqIEBwYXJhbSBlbGVtZW50IFRoZSBlbGVtZW50IHN0YXJ0IHRyYXZlcnNpbmcgZnJvbS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEhvc3RDaGlsZHJlbihlbGVtZW50OiBSZWFjdFRlc3RJbnN0YW5jZSB8IG51bGwpOiBIb3N0VGVzdEluc3RhbmNlW10ge1xuICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgY29uc3QgaG9zdENoaWxkcmVuOiBIb3N0VGVzdEluc3RhbmNlW10gPSBbXTtcblxuICBlbGVtZW50LmNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBjaGlsZCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNIb3N0RWxlbWVudChjaGlsZCkpIHtcbiAgICAgIGhvc3RDaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaG9zdENoaWxkcmVuLnB1c2goLi4uZ2V0SG9zdENoaWxkcmVuKGNoaWxkKSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gaG9zdENoaWxkcmVuO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgYXJyYXkgb2YgaG9zdCBlbGVtZW50cyB0aGF0IHJlcHJlc2VudCB0aGUgcGFzc2VkIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIGVsZW1lbnQgVGhlIGVsZW1lbnQgc3RhcnQgdHJhdmVyc2luZyBmcm9tLlxuICogQHJldHVybnMgSWYgdGhlIHBhc3NlZCBlbGVtZW50IGlzIGEgaG9zdCBlbGVtZW50LCBpdCB3aWxsIHJldHVybiBhbiBhcnJheSBjb250YWluaW5nIG9ubHkgdGhhdCBlbGVtZW50LFxuICogaWYgdGhlIHBhc3NlZCBlbGVtZW50IGlzIGEgY29tcG9zaXRlIGVsZW1lbnQsIGl0IHdpbGwgcmV0dXJuIGFuIGFycmF5IGNvbnRhaW5pbmcgaXRzIGhvc3QgY2hpbGRyZW4gKHplcm8sIG9uZSBvciBtYW55KS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEhvc3RTZWx2ZXMoZWxlbWVudDogUmVhY3RUZXN0SW5zdGFuY2UgfCBudWxsKTogSG9zdFRlc3RJbnN0YW5jZVtdIHtcbiAgcmV0dXJuIGlzSG9zdEVsZW1lbnQoZWxlbWVudCkgPyBbZWxlbWVudF0gOiBnZXRIb3N0Q2hpbGRyZW4oZWxlbWVudCk7XG59XG5cbi8qKlxuICogUmV0dXJucyBob3N0IHNpYmxpbmdzIGZvciBnaXZlbiBlbGVtZW50LlxuICogQHBhcmFtIGVsZW1lbnQgVGhlIGVsZW1lbnQgc3RhcnQgdHJhdmVyc2luZyBmcm9tLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SG9zdFNpYmxpbmdzKGVsZW1lbnQ6IFJlYWN0VGVzdEluc3RhbmNlIHwgbnVsbCk6IEhvc3RUZXN0SW5zdGFuY2VbXSB7XG4gIGNvbnN0IGhvc3RQYXJlbnQgPSBnZXRIb3N0UGFyZW50KGVsZW1lbnQpO1xuICBjb25zdCBob3N0U2VsdmVzID0gZ2V0SG9zdFNlbHZlcyhlbGVtZW50KTtcbiAgcmV0dXJuIGdldEhvc3RDaGlsZHJlbihob3N0UGFyZW50KS5maWx0ZXIoKHNpYmxpbmcpID0+ICFob3N0U2VsdmVzLmluY2x1ZGVzKHNpYmxpbmcpKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB1bnNhZmUgcm9vdCBlbGVtZW50IG9mIHRoZSB0cmVlIChwcm9iYWJseSBjb21wb3NpdGUpLlxuICpcbiAqIEBwYXJhbSBlbGVtZW50IFRoZSBlbGVtZW50IHN0YXJ0IHRyYXZlcnNpbmcgZnJvbS5cbiAqIEByZXR1cm5zIFRoZSByb290IGVsZW1lbnQgb2YgdGhlIHRyZWUgKGhvc3Qgb3IgY29tcG9zaXRlKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFVuc2FmZVJvb3RFbGVtZW50KGVsZW1lbnQ6IFJlYWN0VGVzdEluc3RhbmNlIHwgbnVsbCkge1xuICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsZXQgY3VycmVudCA9IGVsZW1lbnQ7XG4gIHdoaWxlIChjdXJyZW50LnBhcmVudCkge1xuICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcbiAgfVxuXG4gIHJldHVybiBjdXJyZW50O1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBV08sU0FBU0EsYUFBYUEsQ0FBQ0MsT0FBa0MsRUFBK0I7RUFDN0YsT0FBTyxRQUFPQSxPQUFPLG9CQUFQQSxPQUFPLENBQUVDLElBQUksTUFBSyxRQUFRO0FBQzFDO0FBTU8sU0FBU0MsYUFBYUEsQ0FBQ0YsT0FBaUMsRUFBMkI7RUFDeEYsSUFBSUEsT0FBTyxJQUFJLElBQUksRUFBRTtJQUNuQixPQUFPLElBQUk7RUFDYjtFQUVBLElBQUlHLE9BQU8sR0FBR0gsT0FBTyxDQUFDSSxNQUFNO0VBQzVCLE9BQU9ELE9BQU8sRUFBRTtJQUNkLElBQUlKLGFBQWEsQ0FBQ0ksT0FBTyxDQUFDLEVBQUU7TUFDMUIsT0FBT0EsT0FBTztJQUNoQjtJQUVBQSxPQUFPLEdBQUdBLE9BQU8sQ0FBQ0MsTUFBTTtFQUMxQjtFQUVBLE9BQU8sSUFBSTtBQUNiO0FBTU8sU0FBU0MsZUFBZUEsQ0FBQ0wsT0FBaUMsRUFBc0I7RUFDckYsSUFBSUEsT0FBTyxJQUFJLElBQUksRUFBRTtJQUNuQixPQUFPLEVBQUU7RUFDWDtFQUVBLElBQU1NLFlBQWdDLEdBQUcsRUFBRTtFQUUzQ04sT0FBTyxDQUFDTyxRQUFRLENBQUNDLE9BQU8sQ0FBRSxVQUFBQyxLQUFLLEVBQUs7SUFDbEMsSUFBSSxPQUFPQSxLQUFLLEtBQUssUUFBUSxFQUFFO01BQzdCO0lBQ0Y7SUFFQSxJQUFJVixhQUFhLENBQUNVLEtBQUssQ0FBQyxFQUFFO01BQ3hCSCxZQUFZLENBQUNJLElBQUksQ0FBQ0QsS0FBSyxDQUFDO0lBQzFCLENBQUMsTUFBTTtNQUNMSCxZQUFZLENBQUNJLElBQUksQ0FBQUMsS0FBQSxDQUFqQkwsWUFBWSxNQUFBTSxtQkFBQSxDQUFBQyxPQUFBLEVBQVNSLGVBQWUsQ0FBQ0ksS0FBSyxDQUFDLEVBQUM7SUFDOUM7RUFDRixDQUFDLENBQUM7RUFFRixPQUFPSCxZQUFZO0FBQ3JCO0FBU08sU0FBU1EsYUFBYUEsQ0FBQ2QsT0FBaUMsRUFBc0I7RUFDbkYsT0FBT0QsYUFBYSxDQUFDQyxPQUFPLENBQUMsR0FBRyxDQUFDQSxPQUFPLENBQUMsR0FBR0ssZUFBZSxDQUFDTCxPQUFPLENBQUM7QUFDdEU7QUFNTyxTQUFTZSxlQUFlQSxDQUFDZixPQUFpQyxFQUFzQjtFQUNyRixJQUFNZ0IsVUFBVSxHQUFHZCxhQUFhLENBQUNGLE9BQU8sQ0FBQztFQUN6QyxJQUFNaUIsVUFBVSxHQUFHSCxhQUFhLENBQUNkLE9BQU8sQ0FBQztFQUN6QyxPQUFPSyxlQUFlLENBQUNXLFVBQVUsQ0FBQyxDQUFDRSxNQUFNLENBQUUsVUFBQUMsT0FBTztJQUFBLE9BQUssQ0FBQ0YsVUFBVSxDQUFDRyxRQUFRLENBQUNELE9BQU8sQ0FBQztFQUFBLEVBQUM7QUFDdkY7QUFRTyxTQUFTRSxvQkFBb0JBLENBQUNyQixPQUFpQyxFQUFFO0VBQ3RFLElBQUlBLE9BQU8sSUFBSSxJQUFJLEVBQUU7SUFDbkIsT0FBTyxJQUFJO0VBQ2I7RUFFQSxJQUFJRyxPQUFPLEdBQUdILE9BQU87RUFDckIsT0FBT0csT0FBTyxDQUFDQyxNQUFNLEVBQUU7SUFDckJELE9BQU8sR0FBR0EsT0FBTyxDQUFDQyxNQUFNO0VBQzFCO0VBRUEsT0FBT0QsT0FBTztBQUNoQiIsImlnbm9yZUxpc3QiOltdfQ==