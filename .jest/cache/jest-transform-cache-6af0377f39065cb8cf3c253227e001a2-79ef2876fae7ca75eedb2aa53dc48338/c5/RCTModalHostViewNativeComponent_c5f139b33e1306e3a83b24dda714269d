148e8608f12028953f6daed71ce98bb8
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.__INTERNAL_VIEW_CONFIG = void 0;
var _codegenNativeComponent = _interopRequireDefault(require("../../../../Libraries/Utilities/codegenNativeComponent"));
var NativeComponentRegistry = require('react-native/Libraries/NativeComponent/NativeComponentRegistry');
var _require = require('react-native/Libraries/NativeComponent/ViewConfigIgnore'),
  ConditionallyIgnoredEventHandlers = _require.ConditionallyIgnoredEventHandlers;
var nativeComponentName = 'RCTModalHostView';
var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
  uiViewClassName: 'RCTModalHostView',
  directEventTypes: {
    topRequestClose: {
      registrationName: 'onRequestClose'
    },
    topShow: {
      registrationName: 'onShow'
    },
    topDismiss: {
      registrationName: 'onDismiss'
    },
    topOrientationChange: {
      registrationName: 'onOrientationChange'
    }
  },
  validAttributes: Object.assign({
    animationType: true,
    presentationStyle: true,
    transparent: true,
    statusBarTranslucent: true,
    hardwareAccelerated: true,
    visible: true,
    animated: true,
    supportedOrientations: true,
    identifier: true
  }, ConditionallyIgnoredEventHandlers({
    onRequestClose: true,
    onShow: true,
    onDismiss: true,
    onOrientationChange: true
  }))
};
var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, function () {
  return __INTERNAL_VIEW_CONFIG;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29kZWdlbk5hdGl2ZUNvbXBvbmVudCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiTmF0aXZlQ29tcG9uZW50UmVnaXN0cnkiLCJfcmVxdWlyZSIsIkNvbmRpdGlvbmFsbHlJZ25vcmVkRXZlbnRIYW5kbGVycyIsIm5hdGl2ZUNvbXBvbmVudE5hbWUiLCJfX0lOVEVSTkFMX1ZJRVdfQ09ORklHIiwiZXhwb3J0cyIsInVpVmlld0NsYXNzTmFtZSIsImRpcmVjdEV2ZW50VHlwZXMiLCJ0b3BSZXF1ZXN0Q2xvc2UiLCJyZWdpc3RyYXRpb25OYW1lIiwidG9wU2hvdyIsInRvcERpc21pc3MiLCJ0b3BPcmllbnRhdGlvbkNoYW5nZSIsInZhbGlkQXR0cmlidXRlcyIsIk9iamVjdCIsImFzc2lnbiIsImFuaW1hdGlvblR5cGUiLCJwcmVzZW50YXRpb25TdHlsZSIsInRyYW5zcGFyZW50Iiwic3RhdHVzQmFyVHJhbnNsdWNlbnQiLCJoYXJkd2FyZUFjY2VsZXJhdGVkIiwidmlzaWJsZSIsImFuaW1hdGVkIiwic3VwcG9ydGVkT3JpZW50YXRpb25zIiwiaWRlbnRpZmllciIsIm9uUmVxdWVzdENsb3NlIiwib25TaG93Iiwib25EaXNtaXNzIiwib25PcmllbnRhdGlvbkNoYW5nZSIsIl9kZWZhdWx0IiwiZGVmYXVsdCIsImdldCJdLCJzb3VyY2VzIjpbIlJDVE1vZGFsSG9zdFZpZXdOYXRpdmVDb21wb25lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICovXG5cbmltcG9ydCB0eXBlIHtWaWV3UHJvcHN9IGZyb20gJy4uLy4uLy4uLy4uL0xpYnJhcmllcy9Db21wb25lbnRzL1ZpZXcvVmlld1Byb3BUeXBlcyc7XG5pbXBvcnQgdHlwZSB7SG9zdENvbXBvbmVudH0gZnJvbSAnLi4vLi4vLi4vLi4vTGlicmFyaWVzL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlVHlwZXMnO1xuaW1wb3J0IHR5cGUge1xuICBEaXJlY3RFdmVudEhhbmRsZXIsXG4gIEludDMyLFxuICBXaXRoRGVmYXVsdCxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vTGlicmFyaWVzL1R5cGVzL0NvZGVnZW5UeXBlcyc7XG5cbmltcG9ydCBjb2RlZ2VuTmF0aXZlQ29tcG9uZW50IGZyb20gJy4uLy4uLy4uLy4uL0xpYnJhcmllcy9VdGlsaXRpZXMvY29kZWdlbk5hdGl2ZUNvbXBvbmVudCc7XG5cbnR5cGUgT3JpZW50YXRpb25DaGFuZ2VFdmVudCA9ICRSZWFkT25seTx7fFxuICBvcmllbnRhdGlvbjogJ3BvcnRyYWl0JyB8ICdsYW5kc2NhcGUnLFxufH0+O1xuXG50eXBlIE5hdGl2ZVByb3BzID0gJFJlYWRPbmx5PHt8XG4gIC4uLlZpZXdQcm9wcyxcblxuICAvKipcbiAgICogVGhlIGBhbmltYXRpb25UeXBlYCBwcm9wIGNvbnRyb2xzIGhvdyB0aGUgbW9kYWwgYW5pbWF0ZXMuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL21vZGFsI2FuaW1hdGlvbnR5cGVcbiAgICovXG4gIGFuaW1hdGlvblR5cGU/OiBXaXRoRGVmYXVsdDwnbm9uZScgfCAnc2xpZGUnIHwgJ2ZhZGUnLCAnbm9uZSc+LFxuXG4gIC8qKlxuICAgKiBUaGUgYHByZXNlbnRhdGlvblN0eWxlYCBwcm9wIGNvbnRyb2xzIGhvdyB0aGUgbW9kYWwgYXBwZWFycy5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvbW9kYWwjcHJlc2VudGF0aW9uc3R5bGVcbiAgICovXG4gIHByZXNlbnRhdGlvblN0eWxlPzogV2l0aERlZmF1bHQ8XG4gICAgJ2Z1bGxTY3JlZW4nIHwgJ3BhZ2VTaGVldCcgfCAnZm9ybVNoZWV0JyB8ICdvdmVyRnVsbFNjcmVlbicsXG4gICAgJ2Z1bGxTY3JlZW4nLFxuICA+LFxuXG4gIC8qKlxuICAgKiBUaGUgYHRyYW5zcGFyZW50YCBwcm9wIGRldGVybWluZXMgd2hldGhlciB5b3VyIG1vZGFsIHdpbGwgZmlsbCB0aGVcbiAgICogZW50aXJlIHZpZXcuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL21vZGFsI3RyYW5zcGFyZW50XG4gICAqL1xuICB0cmFuc3BhcmVudD86IFdpdGhEZWZhdWx0PGJvb2xlYW4sIGZhbHNlPixcblxuICAvKipcbiAgICogVGhlIGBzdGF0dXNCYXJUcmFuc2x1Y2VudGAgcHJvcCBkZXRlcm1pbmVzIHdoZXRoZXIgeW91ciBtb2RhbCBzaG91bGQgZ28gdW5kZXJcbiAgICogdGhlIHN5c3RlbSBzdGF0dXNiYXIuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL21vZGFsI3N0YXR1c0JhclRyYW5zbHVjZW50XG4gICAqL1xuICBzdGF0dXNCYXJUcmFuc2x1Y2VudD86IFdpdGhEZWZhdWx0PGJvb2xlYW4sIGZhbHNlPixcblxuICAvKipcbiAgICogVGhlIGBoYXJkd2FyZUFjY2VsZXJhdGVkYCBwcm9wIGNvbnRyb2xzIHdoZXRoZXIgdG8gZm9yY2UgaGFyZHdhcmVcbiAgICogYWNjZWxlcmF0aW9uIGZvciB0aGUgdW5kZXJseWluZyB3aW5kb3cuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL21vZGFsI2hhcmR3YXJlYWNjZWxlcmF0ZWRcbiAgICovXG4gIGhhcmR3YXJlQWNjZWxlcmF0ZWQ/OiBXaXRoRGVmYXVsdDxib29sZWFuLCBmYWxzZT4sXG5cbiAgLyoqXG4gICAqIFRoZSBgb25SZXF1ZXN0Q2xvc2VgIGNhbGxiYWNrIGlzIGNhbGxlZCB3aGVuIHRoZSB1c2VyIHRhcHMgdGhlIGhhcmR3YXJlXG4gICAqIGJhY2sgYnV0dG9uIG9uIEFuZHJvaWQgb3IgdGhlIG1lbnUgYnV0dG9uIG9uIEFwcGxlIFRWLlxuICAgKlxuICAgKiBUaGlzIGlzIHJlcXVpcmVkIG9uIEFwcGxlIFRWIGFuZCBBbmRyb2lkLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9tb2RhbCNvbnJlcXVlc3RjbG9zZVxuICAgKi9cbiAgb25SZXF1ZXN0Q2xvc2U/OiA/RGlyZWN0RXZlbnRIYW5kbGVyPG51bGw+LFxuXG4gIC8qKlxuICAgKiBUaGUgYG9uU2hvd2AgcHJvcCBhbGxvd3MgcGFzc2luZyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgb25jZSB0aGVcbiAgICogbW9kYWwgaGFzIGJlZW4gc2hvd24uXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL21vZGFsI29uc2hvd1xuICAgKi9cbiAgb25TaG93PzogP0RpcmVjdEV2ZW50SGFuZGxlcjxudWxsPixcblxuICAvKipcbiAgICogVGhlIGBvbkRpc21pc3NgIHByb3AgYWxsb3dzIHBhc3NpbmcgYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIG9uY2VcbiAgICogdGhlIG1vZGFsIGhhcyBiZWVuIGRpc21pc3NlZC5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvbW9kYWwjb25kaXNtaXNzXG4gICAqL1xuICBvbkRpc21pc3M/OiA/RGlyZWN0RXZlbnRIYW5kbGVyPG51bGw+LFxuXG4gIC8qKlxuICAgKiBUaGUgYHZpc2libGVgIHByb3AgZGV0ZXJtaW5lcyB3aGV0aGVyIHlvdXIgbW9kYWwgaXMgdmlzaWJsZS5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvbW9kYWwjdmlzaWJsZVxuICAgKi9cbiAgdmlzaWJsZT86IFdpdGhEZWZhdWx0PGJvb2xlYW4sIGZhbHNlPixcblxuICAvKipcbiAgICogRGVwcmVjYXRlZC4gVXNlIHRoZSBgYW5pbWF0aW9uVHlwZWAgcHJvcCBpbnN0ZWFkLlxuICAgKi9cbiAgYW5pbWF0ZWQ/OiBXaXRoRGVmYXVsdDxib29sZWFuLCBmYWxzZT4sXG5cbiAgLyoqXG4gICAqIFRoZSBgc3VwcG9ydGVkT3JpZW50YXRpb25zYCBwcm9wIGFsbG93cyB0aGUgbW9kYWwgdG8gYmUgcm90YXRlZCB0byBhbnkgb2YgdGhlIHNwZWNpZmllZCBvcmllbnRhdGlvbnMuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL21vZGFsI3N1cHBvcnRlZG9yaWVudGF0aW9uc1xuICAgKi9cbiAgc3VwcG9ydGVkT3JpZW50YXRpb25zPzogV2l0aERlZmF1bHQ8XG4gICAgJFJlYWRPbmx5QXJyYXk8XG4gICAgICB8ICdwb3J0cmFpdCdcbiAgICAgIHwgJ3BvcnRyYWl0LXVwc2lkZS1kb3duJ1xuICAgICAgfCAnbGFuZHNjYXBlJ1xuICAgICAgfCAnbGFuZHNjYXBlLWxlZnQnXG4gICAgICB8ICdsYW5kc2NhcGUtcmlnaHQnLFxuICAgID4sXG4gICAgJ3BvcnRyYWl0JyxcbiAgPixcblxuICAvKipcbiAgICogVGhlIGBvbk9yaWVudGF0aW9uQ2hhbmdlYCBjYWxsYmFjayBpcyBjYWxsZWQgd2hlbiB0aGUgb3JpZW50YXRpb24gY2hhbmdlcyB3aGlsZSB0aGUgbW9kYWwgaXMgYmVpbmcgZGlzcGxheWVkLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9tb2RhbCNvbm9yaWVudGF0aW9uY2hhbmdlXG4gICAqL1xuICBvbk9yaWVudGF0aW9uQ2hhbmdlPzogP0RpcmVjdEV2ZW50SGFuZGxlcjxPcmllbnRhdGlvbkNoYW5nZUV2ZW50PixcblxuICAvKipcbiAgICogVGhlIGBpZGVudGlmaWVyYCBpcyB0aGUgdW5pcXVlIG51bWJlciBmb3IgaWRlbnRpZnlpbmcgTW9kYWwgY29tcG9uZW50cy5cbiAgICovXG4gIGlkZW50aWZpZXI/OiBXaXRoRGVmYXVsdDxJbnQzMiwgMD4sXG58fT47XG5cbmV4cG9ydCBkZWZhdWx0IChjb2RlZ2VuTmF0aXZlQ29tcG9uZW50PE5hdGl2ZVByb3BzPignTW9kYWxIb3N0VmlldycsIHtcbiAgaW50ZXJmYWNlT25seTogdHJ1ZSxcbiAgcGFwZXJDb21wb25lbnROYW1lOiAnUkNUTW9kYWxIb3N0VmlldycsXG59KTogSG9zdENvbXBvbmVudDxOYXRpdmVQcm9wcz4pO1xuIl0sIm1hcHBpbmdzIjoiOzs7OztBQWtCQSxJQUFBQSx1QkFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBSkEsSUFBTUMsdUJBQXVCLEdBQUdELE9BQU8sQ0FBQyxnRUFBZ0UsQ0FBQztBQUN6RyxJQUFBRSxRQUFBLEdBQTRDRixPQUFPLENBQUMseURBQXlELENBQUM7RUFBdkdHLGlDQUFpQyxHQUFBRCxRQUFBLENBQWpDQyxpQ0FBaUM7QUFFeEMsSUFBSUMsbUJBQW1CLEdBQUcsa0JBQWtCO0FBR3JDLElBQU1DLHNCQUFzQixHQUFBQyxPQUFBLENBQUFELHNCQUFBLEdBQUc7RUFDcENFLGVBQWUsRUFBRSxrQkFBa0I7RUFFbkNDLGdCQUFnQixFQUFFO0lBQ2hCQyxlQUFlLEVBQUU7TUFDZkMsZ0JBQWdCLEVBQUU7SUFDcEIsQ0FBQztJQUVEQyxPQUFPLEVBQUU7TUFDUEQsZ0JBQWdCLEVBQUU7SUFDcEIsQ0FBQztJQUVERSxVQUFVLEVBQUU7TUFDVkYsZ0JBQWdCLEVBQUU7SUFDcEIsQ0FBQztJQUVERyxvQkFBb0IsRUFBRTtNQUNwQkgsZ0JBQWdCLEVBQUU7SUFDcEI7RUFDRixDQUFDO0VBRURJLGVBQWUsRUFBQUMsTUFBQSxDQUFBQyxNQUFBO0lBQ2JDLGFBQWEsRUFBRSxJQUFJO0lBQ25CQyxpQkFBaUIsRUFBRSxJQUFJO0lBQ3ZCQyxXQUFXLEVBQUUsSUFBSTtJQUNqQkMsb0JBQW9CLEVBQUUsSUFBSTtJQUMxQkMsbUJBQW1CLEVBQUUsSUFBSTtJQUN6QkMsT0FBTyxFQUFFLElBQUk7SUFDYkMsUUFBUSxFQUFFLElBQUk7SUFDZEMscUJBQXFCLEVBQUUsSUFBSTtJQUMzQkMsVUFBVSxFQUFFO0VBQUksR0FFYnRCLGlDQUFpQyxDQUFDO0lBQ25DdUIsY0FBYyxFQUFFLElBQUk7SUFDcEJDLE1BQU0sRUFBRSxJQUFJO0lBQ1pDLFNBQVMsRUFBRSxJQUFJO0lBQ2ZDLG1CQUFtQixFQUFFO0VBQ3ZCLENBQUMsQ0FBQztBQUVOLENBQUM7QUFBQyxJQUFBQyxRQUFBLEdBQUF4QixPQUFBLENBQUF5QixPQUFBLEdBRWE5Qix1QkFBdUIsQ0FBQytCLEdBQUcsQ0FBQzVCLG1CQUFtQixFQUFFO0VBQUEsT0FBTUMsc0JBQXNCO0FBQUEsRUFBQyIsImlnbm9yZUxpc3QiOltdfQ==