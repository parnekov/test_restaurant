c3c7586bba605dbdc29a783c49bba70b
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.longPress = longPress;
exports.press = press;
var _componentTree = require("../../helpers/component-tree");
var _textInput = require("../../helpers/text-input");
var _pointerEvents = require("../../helpers/pointer-events");
var _hostComponentNames = require("../../helpers/host-component-names");
var _eventBuilder = require("../event-builder");
var _utils = require("../utils");
var _constants = require("./constants");
function press(_x) {
  return _press.apply(this, arguments);
}
function _press() {
  _press = (0, _asyncToGenerator2.default)(function* (element) {
    yield basePress(this.config, element, {
      type: 'press',
      duration: 0
    });
  });
  return _press.apply(this, arguments);
}
function longPress(_x2, _x3) {
  return _longPress.apply(this, arguments);
}
function _longPress() {
  _longPress = (0, _asyncToGenerator2.default)(function* (element, options) {
    var _options$duration;
    yield basePress(this.config, element, {
      type: 'longPress',
      duration: (_options$duration = options == null ? void 0 : options.duration) != null ? _options$duration : 500
    });
  });
  return _longPress.apply(this, arguments);
}
var basePress = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (config, element, options) {
    if (isPressableText(element)) {
      yield emitTextPressEvents(config, element, options);
      return;
    }
    if ((0, _hostComponentNames.isHostTextInput)(element) && (0, _textInput.isTextInputEditable)(element) && (0, _pointerEvents.isPointerEventEnabled)(element)) {
      yield emitTextInputPressEvents(config, element, options);
      return;
    }
    if (isEnabledTouchResponder(element)) {
      yield emitPressablePressEvents(config, element, options);
      return;
    }
    var hostParentElement = (0, _componentTree.getHostParent)(element);
    if (!hostParentElement) {
      return;
    }
    yield basePress(config, hostParentElement, options);
  });
  return function basePress(_x4, _x5, _x6) {
    return _ref.apply(this, arguments);
  };
}();
var emitPressablePressEvents = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (config, element, options) {
    (0, _utils.warnAboutRealTimersIfNeeded)();
    yield (0, _utils.wait)(config);
    (0, _utils.dispatchEvent)(element, 'responderGrant', _eventBuilder.EventBuilder.Common.responderGrant());
    yield (0, _utils.wait)(config, options.duration);
    (0, _utils.dispatchEvent)(element, 'responderRelease', _eventBuilder.EventBuilder.Common.responderRelease());
    if (_constants.DEFAULT_MIN_PRESS_DURATION - options.duration > 0) {
      yield (0, _utils.wait)(config, _constants.DEFAULT_MIN_PRESS_DURATION - options.duration);
    }
  });
  return function emitPressablePressEvents(_x7, _x8, _x9) {
    return _ref2.apply(this, arguments);
  };
}();
var isEnabledTouchResponder = function isEnabledTouchResponder(element) {
  return (0, _pointerEvents.isPointerEventEnabled)(element) && (element.props.onStartShouldSetResponder == null ? void 0 : element.props.onStartShouldSetResponder());
};
var isPressableText = function isPressableText(element) {
  var hasPressEventHandler = Boolean(element.props.onPress || element.props.onLongPress || element.props.onPressIn || element.props.onPressOut);
  return (0, _hostComponentNames.isHostText)(element) && (0, _pointerEvents.isPointerEventEnabled)(element) && !element.props.disabled && hasPressEventHandler;
};
function emitTextPressEvents(_x10, _x11, _x12) {
  return _emitTextPressEvents.apply(this, arguments);
}
function _emitTextPressEvents() {
  _emitTextPressEvents = (0, _asyncToGenerator2.default)(function* (config, element, options) {
    yield (0, _utils.wait)(config);
    (0, _utils.dispatchEvent)(element, 'pressIn', _eventBuilder.EventBuilder.Common.touch());
    (0, _utils.dispatchEvent)(element, options.type, _eventBuilder.EventBuilder.Common.touch());
    yield (0, _utils.wait)(config, options.duration);
    (0, _utils.dispatchEvent)(element, 'pressOut', _eventBuilder.EventBuilder.Common.touch());
  });
  return _emitTextPressEvents.apply(this, arguments);
}
function emitTextInputPressEvents(_x13, _x14, _x15) {
  return _emitTextInputPressEvents.apply(this, arguments);
}
function _emitTextInputPressEvents() {
  _emitTextInputPressEvents = (0, _asyncToGenerator2.default)(function* (config, element, options) {
    yield (0, _utils.wait)(config);
    (0, _utils.dispatchEvent)(element, 'pressIn', _eventBuilder.EventBuilder.Common.touch());
    yield (0, _utils.wait)(config, options.duration);
    (0, _utils.dispatchEvent)(element, 'pressOut', _eventBuilder.EventBuilder.Common.touch());
  });
  return _emitTextInputPressEvents.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,