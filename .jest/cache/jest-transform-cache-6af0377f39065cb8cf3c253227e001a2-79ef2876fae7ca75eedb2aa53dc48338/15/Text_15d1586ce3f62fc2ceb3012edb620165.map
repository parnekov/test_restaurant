{"version":3,"names":["PressabilityDebug","_interopRequireWildcard","require","_usePressability","_interopRequireDefault","_flattenStyle","_processColor","_Platform","_TextAncestor","_TextNativeComponent","_react","React","_jsxRuntime","_excluded","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","Text","forwardRef","props","forwardedRef","_accessibilityState2","_accessibilityState3","_style","_style3","_style4","accessible","accessibilityLabel","accessibilityState","allowFontScaling","ariaBusy","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","ariaSelected","ellipsizeMode","id","nativeID","onLongPress","onPress","onPressIn","onPressOut","onResponderGrant","onResponderMove","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","onStartShouldSetResponder","pressRetentionOffset","suppressHighlighting","restProps","_objectWithoutProperties2","_useState","useState","_useState2","_slicedToArray2","isHighlighted","setHighlighted","_accessibilityState","busy","checked","disabled","expanded","selected","_disabled","nativeTextAccessibilityState","assign","isPressable","initialized","useLazyInitialization","config","useMemo","pressRectOffset","event","Platform","OS","onResponderTerminationRequest_DEPRECATED","onStartShouldSetResponder_DEPRECATED","eventHandlers","usePressability","eventHandlersForText","onClick","selectionColor","processColor","style","__DEV__","isEnabled","color","numberOfLines","console","error","hasTextAncestor","useContext","TextAncestor","_accessible","select","ios","flattenStyle","fontWeight","_style2","toString","_selectable","selectable","userSelect","userSelectToSelectableMap","verticalAlign","textAlignVertical","verticalAlignToTextAlignVerticalMap","_hasOnPressOrOnLongPress","jsx","NativeVirtualText","ref","Provider","value","children","NativeText","displayName","newValue","_useState3","_useState4","oldValue","setValue","auto","text","none","contain","all","top","bottom","middle","module","exports"],"sources":["Text.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {PressEvent} from '../Types/CoreEventTypes';\nimport type {TextProps} from './TextProps';\n\nimport * as PressabilityDebug from '../Pressability/PressabilityDebug';\nimport usePressability from '../Pressability/usePressability';\nimport flattenStyle from '../StyleSheet/flattenStyle';\nimport processColor from '../StyleSheet/processColor';\nimport Platform from '../Utilities/Platform';\nimport TextAncestor from './TextAncestor';\nimport {NativeText, NativeVirtualText} from './TextNativeComponent';\nimport * as React from 'react';\nimport {useContext, useMemo, useState} from 'react';\n\n/**\n * Text is the fundamental component for displaying text.\n *\n * @see https://reactnative.dev/docs/text\n */\nconst Text: React.AbstractComponent<\n  TextProps,\n  React.ElementRef<typeof NativeText | typeof NativeVirtualText>,\n> = React.forwardRef((props: TextProps, forwardedRef) => {\n  const {\n    accessible,\n    accessibilityLabel,\n    accessibilityState,\n    allowFontScaling,\n    'aria-busy': ariaBusy,\n    'aria-checked': ariaChecked,\n    'aria-disabled': ariaDisabled,\n    'aria-expanded': ariaExpanded,\n    'aria-label': ariaLabel,\n    'aria-selected': ariaSelected,\n    ellipsizeMode,\n    id,\n    nativeID,\n    onLongPress,\n    onPress,\n    onPressIn,\n    onPressOut,\n    onResponderGrant,\n    onResponderMove,\n    onResponderRelease,\n    onResponderTerminate,\n    onResponderTerminationRequest,\n    onStartShouldSetResponder,\n    pressRetentionOffset,\n    suppressHighlighting,\n    ...restProps\n  } = props;\n\n  const [isHighlighted, setHighlighted] = useState(false);\n\n  let _accessibilityState;\n  if (\n    accessibilityState != null ||\n    ariaBusy != null ||\n    ariaChecked != null ||\n    ariaDisabled != null ||\n    ariaExpanded != null ||\n    ariaSelected != null\n  ) {\n    _accessibilityState = {\n      busy: ariaBusy ?? accessibilityState?.busy,\n      checked: ariaChecked ?? accessibilityState?.checked,\n      disabled: ariaDisabled ?? accessibilityState?.disabled,\n      expanded: ariaExpanded ?? accessibilityState?.expanded,\n      selected: ariaSelected ?? accessibilityState?.selected,\n    };\n  }\n\n  const _disabled =\n    restProps.disabled != null\n      ? restProps.disabled\n      : _accessibilityState?.disabled;\n\n  const nativeTextAccessibilityState =\n    _disabled !== _accessibilityState?.disabled\n      ? {..._accessibilityState, disabled: _disabled}\n      : _accessibilityState;\n\n  const isPressable =\n    (onPress != null ||\n      onLongPress != null ||\n      onStartShouldSetResponder != null) &&\n    _disabled !== true;\n\n  const initialized = useLazyInitialization(isPressable);\n  const config = useMemo(\n    () =>\n      initialized\n        ? {\n            disabled: !isPressable,\n            pressRectOffset: pressRetentionOffset,\n            onLongPress,\n            onPress,\n            onPressIn(event: PressEvent) {\n              // Updating isHighlighted causes unnecessary re-renders for platforms that don't use it\n              // in the best case, and cause issues with text selection in the worst case. Forcing\n              // the isHighlighted prop to false on all platforms except iOS.\n              setHighlighted(\n                (suppressHighlighting == null || !suppressHighlighting) &&\n                  Platform.OS === 'ios',\n              );\n              onPressIn?.(event);\n            },\n            onPressOut(event: PressEvent) {\n              setHighlighted(false);\n              onPressOut?.(event);\n            },\n            onResponderTerminationRequest_DEPRECATED:\n              onResponderTerminationRequest,\n            onStartShouldSetResponder_DEPRECATED: onStartShouldSetResponder,\n          }\n        : null,\n    [\n      initialized,\n      isPressable,\n      pressRetentionOffset,\n      onLongPress,\n      onPress,\n      onPressIn,\n      onPressOut,\n      onResponderTerminationRequest,\n      onStartShouldSetResponder,\n      suppressHighlighting,\n    ],\n  );\n\n  const eventHandlers = usePressability(config);\n  const eventHandlersForText = useMemo(\n    () =>\n      eventHandlers == null\n        ? null\n        : {\n            onResponderGrant(event: PressEvent) {\n              eventHandlers.onResponderGrant(event);\n              if (onResponderGrant != null) {\n                onResponderGrant(event);\n              }\n            },\n            onResponderMove(event: PressEvent) {\n              eventHandlers.onResponderMove(event);\n              if (onResponderMove != null) {\n                onResponderMove(event);\n              }\n            },\n            onResponderRelease(event: PressEvent) {\n              eventHandlers.onResponderRelease(event);\n              if (onResponderRelease != null) {\n                onResponderRelease(event);\n              }\n            },\n            onResponderTerminate(event: PressEvent) {\n              eventHandlers.onResponderTerminate(event);\n              if (onResponderTerminate != null) {\n                onResponderTerminate(event);\n              }\n            },\n            onClick: eventHandlers.onClick,\n            onResponderTerminationRequest:\n              eventHandlers.onResponderTerminationRequest,\n            onStartShouldSetResponder: eventHandlers.onStartShouldSetResponder,\n          },\n    [\n      eventHandlers,\n      onResponderGrant,\n      onResponderMove,\n      onResponderRelease,\n      onResponderTerminate,\n    ],\n  );\n\n  // TODO: Move this processing to the view configuration.\n  const selectionColor =\n    restProps.selectionColor == null\n      ? null\n      : processColor(restProps.selectionColor);\n\n  let style = restProps.style;\n\n  if (__DEV__) {\n    if (PressabilityDebug.isEnabled() && onPress != null) {\n      style = [restProps.style, {color: 'magenta'}];\n    }\n  }\n\n  let numberOfLines = restProps.numberOfLines;\n  if (numberOfLines != null && !(numberOfLines >= 0)) {\n    console.error(\n      `'numberOfLines' in <Text> must be a non-negative number, received: ${numberOfLines}. The value will be set to 0.`,\n    );\n    numberOfLines = 0;\n  }\n\n  const hasTextAncestor = useContext(TextAncestor);\n\n  const _accessible = Platform.select({\n    ios: accessible !== false,\n    default: accessible,\n  });\n\n  // $FlowFixMe[underconstrained-implicit-instantiation]\n  style = flattenStyle(style);\n\n  if (typeof style?.fontWeight === 'number') {\n    // $FlowFixMe[prop-missing]\n    // $FlowFixMe[cannot-write]\n    style.fontWeight = style?.fontWeight.toString();\n  }\n\n  let _selectable = restProps.selectable;\n  if (style?.userSelect != null) {\n    // $FlowFixMe[invalid-computed-prop]\n    _selectable = userSelectToSelectableMap[style.userSelect];\n    // $FlowFixMe[prop-missing]\n    // $FlowFixMe[cannot-write]\n    delete style.userSelect;\n  }\n\n  if (style?.verticalAlign != null) {\n    // $FlowFixMe[prop-missing]\n    // $FlowFixMe[cannot-write]\n    style.textAlignVertical =\n      // $FlowFixMe[invalid-computed-prop]\n      verticalAlignToTextAlignVerticalMap[style.verticalAlign];\n    // $FlowFixMe[prop-missing]\n    // $FlowFixMe[cannot-write]\n    delete style.verticalAlign;\n  }\n\n  const _hasOnPressOrOnLongPress =\n    props.onPress != null || props.onLongPress != null;\n\n  return hasTextAncestor ? (\n    <NativeVirtualText\n      {...restProps}\n      {...eventHandlersForText}\n      accessibilityLabel={ariaLabel ?? accessibilityLabel}\n      accessibilityState={_accessibilityState}\n      isHighlighted={isHighlighted}\n      isPressable={isPressable}\n      nativeID={id ?? nativeID}\n      numberOfLines={numberOfLines}\n      ref={forwardedRef}\n      selectable={_selectable}\n      selectionColor={selectionColor}\n      style={style}\n    />\n  ) : (\n    <TextAncestor.Provider value={true}>\n      <NativeText\n        {...restProps}\n        {...eventHandlersForText}\n        accessibilityLabel={ariaLabel ?? accessibilityLabel}\n        accessibilityState={nativeTextAccessibilityState}\n        accessible={\n          accessible == null && Platform.OS === 'android'\n            ? _hasOnPressOrOnLongPress\n            : _accessible\n        }\n        allowFontScaling={allowFontScaling !== false}\n        disabled={_disabled}\n        ellipsizeMode={ellipsizeMode ?? 'tail'}\n        isHighlighted={isHighlighted}\n        nativeID={id ?? nativeID}\n        numberOfLines={numberOfLines}\n        ref={forwardedRef}\n        selectable={_selectable}\n        selectionColor={selectionColor}\n        style={style}\n      />\n    </TextAncestor.Provider>\n  );\n});\n\nText.displayName = 'Text';\n\n/**\n * Returns false until the first time `newValue` is true, after which this will\n * always return true. This is necessary to lazily initialize `Pressability` so\n * we do not eagerly create one for every pressable `Text` component.\n */\nfunction useLazyInitialization(newValue: boolean): boolean {\n  const [oldValue, setValue] = useState(newValue);\n  if (!oldValue && newValue) {\n    setValue(newValue);\n  }\n  return oldValue;\n}\n\nconst userSelectToSelectableMap = {\n  auto: true,\n  text: true,\n  none: false,\n  contain: true,\n  all: true,\n};\n\nconst verticalAlignToTextAlignVerticalMap = {\n  auto: 'auto',\n  top: 'top',\n  bottom: 'bottom',\n  middle: 'center',\n};\n\nmodule.exports = Text;\n"],"mappings":"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","ignoreList":[]}