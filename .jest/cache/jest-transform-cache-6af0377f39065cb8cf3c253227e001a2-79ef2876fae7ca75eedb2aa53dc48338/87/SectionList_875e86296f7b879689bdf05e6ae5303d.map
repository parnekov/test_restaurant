{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_objectWithoutProperties2","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_inherits2","_Platform","_virtualizedLists","React","_interopRequireWildcard","_jsxRuntime","_excluded","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","has","get","n","__proto__","a","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_callSuper","o","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","SectionList","_React$PureComponent","_this","_len","arguments","length","args","Array","_key","concat","_captureRef","ref","_wrapperListRef","key","scrollToLocation","params","recordInteraction","listRef","getListRef","flashScrollIndicators","getScrollResponder","getScrollableNode","setNativeProps","props","render","_this$props","_stickySectionHeadersEnabled","stickySectionHeadersEnabled","restProps","Platform","OS","jsx","VirtualizedSectionList","assign","getItemCount","items","getItem","index","PureComponent"],"sources":["SectionList.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {ScrollResponderType} from '../Components/ScrollView/ScrollView';\nimport type {\n  ScrollToLocationParamsType,\n  SectionBase as _SectionBase,\n  VirtualizedSectionListProps,\n} from '@react-native/virtualized-lists';\n\nimport Platform from '../Utilities/Platform';\nimport {VirtualizedSectionList} from '@react-native/virtualized-lists';\nimport * as React from 'react';\n\ntype Item = any;\n\nexport type SectionBase<SectionItemT> = _SectionBase<SectionItemT>;\n\ntype RequiredProps<SectionT: SectionBase<any>> = {|\n  /**\n   * The actual data to render, akin to the `data` prop in [`<FlatList>`](https://reactnative.dev/docs/flatlist).\n   *\n   * General shape:\n   *\n   *     sections: $ReadOnlyArray<{\n   *       data: $ReadOnlyArray<SectionItem>,\n   *       renderItem?: ({item: SectionItem, ...}) => ?React.Element<*>,\n   *       ItemSeparatorComponent?: ?ReactClass<{highlighted: boolean, ...}>,\n   *     }>\n   */\n  sections: $ReadOnlyArray<SectionT>,\n|};\n\ntype OptionalProps<SectionT: SectionBase<any>> = {|\n  /**\n   * Default renderer for every item in every section. Can be over-ridden on a per-section basis.\n   */\n  renderItem?: (info: {\n    item: Item,\n    index: number,\n    section: SectionT,\n    separators: {\n      highlight: () => void,\n      unhighlight: () => void,\n      updateProps: (select: 'leading' | 'trailing', newProps: Object) => void,\n      ...\n    },\n    ...\n  }) => null | React.Element<any>,\n  /**\n   * A marker property for telling the list to re-render (since it implements `PureComponent`). If\n   * any of your `renderItem`, Header, Footer, etc. functions depend on anything outside of the\n   * `data` prop, stick it here and treat it immutably.\n   */\n  extraData?: any,\n  /**\n   * How many items to render in the initial batch. This should be enough to fill the screen but not\n   * much more. Note these items will never be unmounted as part of the windowed rendering in order\n   * to improve perceived performance of scroll-to-top actions.\n   */\n  initialNumToRender?: ?number,\n  /**\n   * Reverses the direction of scroll. Uses scale transforms of -1.\n   */\n  inverted?: ?boolean,\n  /**\n   * Used to extract a unique key for a given item at the specified index. Key is used for caching\n   * and as the react key to track item re-ordering. The default extractor checks item.key, then\n   * falls back to using the index, like react does. Note that this sets keys for each item, but\n   * each overall section still needs its own key.\n   */\n  keyExtractor?: ?(item: Item, index: number) => string,\n  /**\n   * Called once when the scroll position gets within `onEndReachedThreshold` of the rendered\n   * content.\n   */\n  onEndReached?: ?(info: {distanceFromEnd: number, ...}) => void,\n  /**\n   * Note: may have bugs (missing content) in some circumstances - use at your own risk.\n   *\n   * This may improve scroll performance for large lists.\n   */\n  removeClippedSubviews?: boolean,\n|};\n\nexport type Props<SectionT> = {|\n  ...$Diff<\n    VirtualizedSectionListProps<SectionT>,\n    {\n      getItem: $PropertyType<VirtualizedSectionListProps<SectionT>, 'getItem'>,\n      getItemCount: $PropertyType<\n        VirtualizedSectionListProps<SectionT>,\n        'getItemCount',\n      >,\n      renderItem: $PropertyType<\n        VirtualizedSectionListProps<SectionT>,\n        'renderItem',\n      >,\n      keyExtractor: $PropertyType<\n        VirtualizedSectionListProps<SectionT>,\n        'keyExtractor',\n      >,\n      ...\n    },\n  >,\n  ...RequiredProps<SectionT>,\n  ...OptionalProps<SectionT>,\n|};\n\n/**\n * A performant interface for rendering sectioned lists, supporting the most handy features:\n *\n *  - Fully cross-platform.\n *  - Configurable viewability callbacks.\n *  - List header support.\n *  - List footer support.\n *  - Item separator support.\n *  - Section header support.\n *  - Section separator support.\n *  - Heterogeneous data and item rendering support.\n *  - Pull to Refresh.\n *  - Scroll loading.\n *\n * If you don't need section support and want a simpler interface, use\n * [`<FlatList>`](https://reactnative.dev/docs/flatlist).\n *\n * Simple Examples:\n *\n *     <SectionList\n *       renderItem={({item}) => <ListItem title={item} />}\n *       renderSectionHeader={({section}) => <Header title={section.title} />}\n *       sections={[ // homogeneous rendering between sections\n *         {data: [...], title: ...},\n *         {data: [...], title: ...},\n *         {data: [...], title: ...},\n *       ]}\n *     />\n *\n *     <SectionList\n *       sections={[ // heterogeneous rendering between sections\n *         {data: [...], renderItem: ...},\n *         {data: [...], renderItem: ...},\n *         {data: [...], renderItem: ...},\n *       ]}\n *     />\n *\n * This is a convenience wrapper around [`<VirtualizedList>`](docs/virtualizedlist),\n * and thus inherits its props (as well as those of `ScrollView`) that aren't explicitly listed\n * here, along with the following caveats:\n *\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop\n *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on\n *   changes. This includes the `data` prop and parent component state.\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\n *   offscreen. This means it's possible to scroll faster than the fill rate and momentarily see\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\n *   and we are working on improving it behind the scenes.\n * - By default, the list looks for a `key` prop on each item and uses that for the React key.\n *   Alternatively, you can provide a custom `keyExtractor` prop.\n *\n */\nexport default class SectionList<\n  SectionT: SectionBase<any>,\n> extends React.PureComponent<Props<SectionT>, void> {\n  props: Props<SectionT>;\n\n  /**\n   * Scrolls to the item at the specified `sectionIndex` and `itemIndex` (within the section)\n   * positioned in the viewable area such that `viewPosition` 0 places it at the top (and may be\n   * covered by a sticky header), 1 at the bottom, and 0.5 centered in the middle. `viewOffset` is a\n   * fixed number of pixels to offset the final target position, e.g. to compensate for sticky\n   * headers.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n  scrollToLocation(params: ScrollToLocationParamsType) {\n    if (this._wrapperListRef != null) {\n      this._wrapperListRef.scrollToLocation(params);\n    }\n  }\n\n  /**\n   * Tells the list an interaction has occurred, which should trigger viewability calculations, e.g.\n   * if `waitForInteractions` is true and the user has not scrolled. This is typically called by\n   * taps on items or by navigation actions.\n   */\n  recordInteraction() {\n    const listRef = this._wrapperListRef && this._wrapperListRef.getListRef();\n    listRef && listRef.recordInteraction();\n  }\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators() {\n    const listRef = this._wrapperListRef && this._wrapperListRef.getListRef();\n    listRef && listRef.flashScrollIndicators();\n  }\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   */\n  getScrollResponder(): ?ScrollResponderType {\n    const listRef = this._wrapperListRef && this._wrapperListRef.getListRef();\n    if (listRef) {\n      return listRef.getScrollResponder();\n    }\n  }\n\n  getScrollableNode(): any {\n    const listRef = this._wrapperListRef && this._wrapperListRef.getListRef();\n    if (listRef) {\n      return listRef.getScrollableNode();\n    }\n  }\n\n  setNativeProps(props: Object) {\n    const listRef = this._wrapperListRef && this._wrapperListRef.getListRef();\n    if (listRef) {\n      listRef.setNativeProps(props);\n    }\n  }\n\n  render(): React.Node {\n    const {\n      stickySectionHeadersEnabled: _stickySectionHeadersEnabled,\n      ...restProps\n    } = this.props;\n    const stickySectionHeadersEnabled =\n      _stickySectionHeadersEnabled ?? Platform.OS === 'ios';\n    return (\n      /* $FlowFixMe[incompatible-type] Error revealed after improved builtin\n       * React utility types */\n      /* $FlowFixMe[incompatible-type] Error revealed after improved builtin\n       * React utility types */\n      <VirtualizedSectionList\n        {...restProps}\n        stickySectionHeadersEnabled={stickySectionHeadersEnabled}\n        ref={this._captureRef}\n        // $FlowFixMe[missing-local-annot]\n        getItemCount={items => items.length}\n        // $FlowFixMe[missing-local-annot]\n        getItem={(items, index) => items[index]}\n      />\n    );\n  }\n\n  _wrapperListRef: ?React.ElementRef<typeof VirtualizedSectionList>;\n  /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n   * LTI update could not be added via codemod */\n  _captureRef = ref => {\n    this._wrapperListRef = ref;\n  };\n}\n"],"mappings":"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","ignoreList":[]}