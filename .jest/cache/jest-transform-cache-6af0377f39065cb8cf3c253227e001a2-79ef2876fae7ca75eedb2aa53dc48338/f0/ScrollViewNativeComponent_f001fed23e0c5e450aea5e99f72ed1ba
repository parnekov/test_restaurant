14aa766c6ad1b1f7494e3ee2730a1184
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.__INTERNAL_VIEW_CONFIG = void 0;
var NativeComponentRegistry = _interopRequireWildcard(require("../../NativeComponent/NativeComponentRegistry"));
var _ViewConfigIgnore = require("../../NativeComponent/ViewConfigIgnore");
var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = _Platform.default.OS === 'android' ? {
  uiViewClassName: 'RCTScrollView',
  bubblingEventTypes: {},
  directEventTypes: {
    topMomentumScrollBegin: {
      registrationName: 'onMomentumScrollBegin'
    },
    topMomentumScrollEnd: {
      registrationName: 'onMomentumScrollEnd'
    },
    topScroll: {
      registrationName: 'onScroll'
    },
    topScrollBeginDrag: {
      registrationName: 'onScrollBeginDrag'
    },
    topScrollEndDrag: {
      registrationName: 'onScrollEndDrag'
    }
  },
  validAttributes: {
    contentOffset: {
      diff: require('../../Utilities/differ/pointsDiffer')
    },
    decelerationRate: true,
    disableIntervalMomentum: true,
    pagingEnabled: true,
    scrollEnabled: true,
    showsVerticalScrollIndicator: true,
    snapToAlignment: true,
    snapToEnd: true,
    snapToInterval: true,
    snapToOffsets: true,
    snapToStart: true,
    borderBottomLeftRadius: true,
    borderBottomRightRadius: true,
    sendMomentumEvents: true,
    borderRadius: true,
    nestedScrollEnabled: true,
    borderStyle: true,
    borderRightColor: {
      process: require('../../StyleSheet/processColor').default
    },
    borderColor: {
      process: require('../../StyleSheet/processColor').default
    },
    borderBottomColor: {
      process: require('../../StyleSheet/processColor').default
    },
    persistentScrollbar: true,
    endFillColor: {
      process: require('../../StyleSheet/processColor').default
    },
    fadingEdgeLength: true,
    overScrollMode: true,
    borderTopLeftRadius: true,
    scrollPerfTag: true,
    borderTopColor: {
      process: require('../../StyleSheet/processColor').default
    },
    removeClippedSubviews: true,
    borderTopRightRadius: true,
    borderLeftColor: {
      process: require('../../StyleSheet/processColor').default
    },
    pointerEvents: true,
    isInvertedVirtualizedList: true
  }
} : {
  uiViewClassName: 'RCTScrollView',
  bubblingEventTypes: {},
  directEventTypes: {
    topMomentumScrollBegin: {
      registrationName: 'onMomentumScrollBegin'
    },
    topMomentumScrollEnd: {
      registrationName: 'onMomentumScrollEnd'
    },
    topScroll: {
      registrationName: 'onScroll'
    },
    topScrollBeginDrag: {
      registrationName: 'onScrollBeginDrag'
    },
    topScrollEndDrag: {
      registrationName: 'onScrollEndDrag'
    },
    topScrollToTop: {
      registrationName: 'onScrollToTop'
    }
  },
  validAttributes: Object.assign({
    alwaysBounceHorizontal: true,
    alwaysBounceVertical: true,
    automaticallyAdjustContentInsets: true,
    automaticallyAdjustKeyboardInsets: true,
    automaticallyAdjustsScrollIndicatorInsets: true,
    bounces: true,
    bouncesZoom: true,
    canCancelContentTouches: true,
    centerContent: true,
    contentInset: {
      diff: require('../../Utilities/differ/insetsDiffer')
    },
    contentOffset: {
      diff: require('../../Utilities/differ/pointsDiffer')
    },
    contentInsetAdjustmentBehavior: true,
    decelerationRate: true,
    directionalLockEnabled: true,
    disableIntervalMomentum: true,
    indicatorStyle: true,
    inverted: true,
    keyboardDismissMode: true,
    maintainVisibleContentPosition: true,
    maximumZoomScale: true,
    minimumZoomScale: true,
    pagingEnabled: true,
    pinchGestureEnabled: true,
    scrollEnabled: true,
    scrollEventThrottle: true,
    scrollIndicatorInsets: {
      diff: require('../../Utilities/differ/insetsDiffer')
    },
    scrollToOverflowEnabled: true,
    scrollsToTop: true,
    showsHorizontalScrollIndicator: true,
    showsVerticalScrollIndicator: true,
    snapToAlignment: true,
    snapToEnd: true,
    snapToInterval: true,
    snapToOffsets: true,
    snapToStart: true,
    zoomScale: true
  }, (0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
    onScrollBeginDrag: true,
    onMomentumScrollEnd: true,
    onScrollEndDrag: true,
    onMomentumScrollBegin: true,
    onScrollToTop: true,
    onScroll: true
  }))
};
var ScrollViewNativeComponent = NativeComponentRegistry.get('RCTScrollView', function () {
  return __INTERNAL_VIEW_CONFIG;
});
var _default = exports.default = ScrollViewNativeComponent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOYXRpdmVDb21wb25lbnRSZWdpc3RyeSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9WaWV3Q29uZmlnSWdub3JlIiwiX1BsYXRmb3JtIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIl9fSU5URVJOQUxfVklFV19DT05GSUciLCJleHBvcnRzIiwiUGxhdGZvcm0iLCJPUyIsInVpVmlld0NsYXNzTmFtZSIsImJ1YmJsaW5nRXZlbnRUeXBlcyIsImRpcmVjdEV2ZW50VHlwZXMiLCJ0b3BNb21lbnR1bVNjcm9sbEJlZ2luIiwicmVnaXN0cmF0aW9uTmFtZSIsInRvcE1vbWVudHVtU2Nyb2xsRW5kIiwidG9wU2Nyb2xsIiwidG9wU2Nyb2xsQmVnaW5EcmFnIiwidG9wU2Nyb2xsRW5kRHJhZyIsInZhbGlkQXR0cmlidXRlcyIsImNvbnRlbnRPZmZzZXQiLCJkaWZmIiwiZGVjZWxlcmF0aW9uUmF0ZSIsImRpc2FibGVJbnRlcnZhbE1vbWVudHVtIiwicGFnaW5nRW5hYmxlZCIsInNjcm9sbEVuYWJsZWQiLCJzaG93c1ZlcnRpY2FsU2Nyb2xsSW5kaWNhdG9yIiwic25hcFRvQWxpZ25tZW50Iiwic25hcFRvRW5kIiwic25hcFRvSW50ZXJ2YWwiLCJzbmFwVG9PZmZzZXRzIiwic25hcFRvU3RhcnQiLCJib3JkZXJCb3R0b21MZWZ0UmFkaXVzIiwiYm9yZGVyQm90dG9tUmlnaHRSYWRpdXMiLCJzZW5kTW9tZW50dW1FdmVudHMiLCJib3JkZXJSYWRpdXMiLCJuZXN0ZWRTY3JvbGxFbmFibGVkIiwiYm9yZGVyU3R5bGUiLCJib3JkZXJSaWdodENvbG9yIiwicHJvY2VzcyIsImJvcmRlckNvbG9yIiwiYm9yZGVyQm90dG9tQ29sb3IiLCJwZXJzaXN0ZW50U2Nyb2xsYmFyIiwiZW5kRmlsbENvbG9yIiwiZmFkaW5nRWRnZUxlbmd0aCIsIm92ZXJTY3JvbGxNb2RlIiwiYm9yZGVyVG9wTGVmdFJhZGl1cyIsInNjcm9sbFBlcmZUYWciLCJib3JkZXJUb3BDb2xvciIsInJlbW92ZUNsaXBwZWRTdWJ2aWV3cyIsImJvcmRlclRvcFJpZ2h0UmFkaXVzIiwiYm9yZGVyTGVmdENvbG9yIiwicG9pbnRlckV2ZW50cyIsImlzSW52ZXJ0ZWRWaXJ0dWFsaXplZExpc3QiLCJ0b3BTY3JvbGxUb1RvcCIsImFzc2lnbiIsImFsd2F5c0JvdW5jZUhvcml6b250YWwiLCJhbHdheXNCb3VuY2VWZXJ0aWNhbCIsImF1dG9tYXRpY2FsbHlBZGp1c3RDb250ZW50SW5zZXRzIiwiYXV0b21hdGljYWxseUFkanVzdEtleWJvYXJkSW5zZXRzIiwiYXV0b21hdGljYWxseUFkanVzdHNTY3JvbGxJbmRpY2F0b3JJbnNldHMiLCJib3VuY2VzIiwiYm91bmNlc1pvb20iLCJjYW5DYW5jZWxDb250ZW50VG91Y2hlcyIsImNlbnRlckNvbnRlbnQiLCJjb250ZW50SW5zZXQiLCJjb250ZW50SW5zZXRBZGp1c3RtZW50QmVoYXZpb3IiLCJkaXJlY3Rpb25hbExvY2tFbmFibGVkIiwiaW5kaWNhdG9yU3R5bGUiLCJpbnZlcnRlZCIsImtleWJvYXJkRGlzbWlzc01vZGUiLCJtYWludGFpblZpc2libGVDb250ZW50UG9zaXRpb24iLCJtYXhpbXVtWm9vbVNjYWxlIiwibWluaW11bVpvb21TY2FsZSIsInBpbmNoR2VzdHVyZUVuYWJsZWQiLCJzY3JvbGxFdmVudFRocm90dGxlIiwic2Nyb2xsSW5kaWNhdG9ySW5zZXRzIiwic2Nyb2xsVG9PdmVyZmxvd0VuYWJsZWQiLCJzY3JvbGxzVG9Ub3AiLCJzaG93c0hvcml6b250YWxTY3JvbGxJbmRpY2F0b3IiLCJ6b29tU2NhbGUiLCJDb25kaXRpb25hbGx5SWdub3JlZEV2ZW50SGFuZGxlcnMiLCJvblNjcm9sbEJlZ2luRHJhZyIsIm9uTW9tZW50dW1TY3JvbGxFbmQiLCJvblNjcm9sbEVuZERyYWciLCJvbk1vbWVudHVtU2Nyb2xsQmVnaW4iLCJvblNjcm9sbFRvVG9wIiwib25TY3JvbGwiLCJTY3JvbGxWaWV3TmF0aXZlQ29tcG9uZW50IiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyJTY3JvbGxWaWV3TmF0aXZlQ29tcG9uZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQgdHlwZSB7XG4gIEhvc3RDb21wb25lbnQsXG4gIFBhcnRpYWxWaWV3Q29uZmlnLFxufSBmcm9tICcuLi8uLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZVR5cGVzJztcbmltcG9ydCB0eXBlIHtTY3JvbGxWaWV3TmF0aXZlUHJvcHMgYXMgUHJvcHN9IGZyb20gJy4vU2Nyb2xsVmlld05hdGl2ZUNvbXBvbmVudFR5cGUnO1xuXG5pbXBvcnQgKiBhcyBOYXRpdmVDb21wb25lbnRSZWdpc3RyeSBmcm9tICcuLi8uLi9OYXRpdmVDb21wb25lbnQvTmF0aXZlQ29tcG9uZW50UmVnaXN0cnknO1xuaW1wb3J0IHtDb25kaXRpb25hbGx5SWdub3JlZEV2ZW50SGFuZGxlcnN9IGZyb20gJy4uLy4uL05hdGl2ZUNvbXBvbmVudC9WaWV3Q29uZmlnSWdub3JlJztcbmltcG9ydCBQbGF0Zm9ybSBmcm9tICcuLi8uLi9VdGlsaXRpZXMvUGxhdGZvcm0nO1xuXG5leHBvcnQgY29uc3QgX19JTlRFUk5BTF9WSUVXX0NPTkZJRzogUGFydGlhbFZpZXdDb25maWcgPVxuICBQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnXG4gICAgPyB7XG4gICAgICAgIHVpVmlld0NsYXNzTmFtZTogJ1JDVFNjcm9sbFZpZXcnLFxuICAgICAgICBidWJibGluZ0V2ZW50VHlwZXM6IHt9LFxuICAgICAgICBkaXJlY3RFdmVudFR5cGVzOiB7XG4gICAgICAgICAgdG9wTW9tZW50dW1TY3JvbGxCZWdpbjoge1xuICAgICAgICAgICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uTW9tZW50dW1TY3JvbGxCZWdpbicsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB0b3BNb21lbnR1bVNjcm9sbEVuZDoge1xuICAgICAgICAgICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uTW9tZW50dW1TY3JvbGxFbmQnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdG9wU2Nyb2xsOiB7XG4gICAgICAgICAgICByZWdpc3RyYXRpb25OYW1lOiAnb25TY3JvbGwnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdG9wU2Nyb2xsQmVnaW5EcmFnOiB7XG4gICAgICAgICAgICByZWdpc3RyYXRpb25OYW1lOiAnb25TY3JvbGxCZWdpbkRyYWcnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdG9wU2Nyb2xsRW5kRHJhZzoge1xuICAgICAgICAgICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uU2Nyb2xsRW5kRHJhZycsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgdmFsaWRBdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgY29udGVudE9mZnNldDoge1xuICAgICAgICAgICAgZGlmZjogcmVxdWlyZSgnLi4vLi4vVXRpbGl0aWVzL2RpZmZlci9wb2ludHNEaWZmZXInKSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRlY2VsZXJhdGlvblJhdGU6IHRydWUsXG4gICAgICAgICAgZGlzYWJsZUludGVydmFsTW9tZW50dW06IHRydWUsXG4gICAgICAgICAgcGFnaW5nRW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICBzY3JvbGxFbmFibGVkOiB0cnVlLFxuICAgICAgICAgIHNob3dzVmVydGljYWxTY3JvbGxJbmRpY2F0b3I6IHRydWUsXG4gICAgICAgICAgc25hcFRvQWxpZ25tZW50OiB0cnVlLFxuICAgICAgICAgIHNuYXBUb0VuZDogdHJ1ZSxcbiAgICAgICAgICBzbmFwVG9JbnRlcnZhbDogdHJ1ZSxcbiAgICAgICAgICBzbmFwVG9PZmZzZXRzOiB0cnVlLFxuICAgICAgICAgIHNuYXBUb1N0YXJ0OiB0cnVlLFxuICAgICAgICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IHRydWUsXG4gICAgICAgICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6IHRydWUsXG4gICAgICAgICAgc2VuZE1vbWVudHVtRXZlbnRzOiB0cnVlLFxuICAgICAgICAgIGJvcmRlclJhZGl1czogdHJ1ZSxcbiAgICAgICAgICBuZXN0ZWRTY3JvbGxFbmFibGVkOiB0cnVlLFxuICAgICAgICAgIGJvcmRlclN0eWxlOiB0cnVlLFxuICAgICAgICAgIGJvcmRlclJpZ2h0Q29sb3I6IHtcbiAgICAgICAgICAgIHByb2Nlc3M6IHJlcXVpcmUoJy4uLy4uL1N0eWxlU2hlZXQvcHJvY2Vzc0NvbG9yJykuZGVmYXVsdCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGJvcmRlckNvbG9yOiB7XG4gICAgICAgICAgICBwcm9jZXNzOiByZXF1aXJlKCcuLi8uLi9TdHlsZVNoZWV0L3Byb2Nlc3NDb2xvcicpLmRlZmF1bHQsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBib3JkZXJCb3R0b21Db2xvcjoge1xuICAgICAgICAgICAgcHJvY2VzczogcmVxdWlyZSgnLi4vLi4vU3R5bGVTaGVldC9wcm9jZXNzQ29sb3InKS5kZWZhdWx0LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgcGVyc2lzdGVudFNjcm9sbGJhcjogdHJ1ZSxcbiAgICAgICAgICBlbmRGaWxsQ29sb3I6IHtcbiAgICAgICAgICAgIHByb2Nlc3M6IHJlcXVpcmUoJy4uLy4uL1N0eWxlU2hlZXQvcHJvY2Vzc0NvbG9yJykuZGVmYXVsdCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGZhZGluZ0VkZ2VMZW5ndGg6IHRydWUsXG4gICAgICAgICAgb3ZlclNjcm9sbE1vZGU6IHRydWUsXG4gICAgICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogdHJ1ZSxcbiAgICAgICAgICBzY3JvbGxQZXJmVGFnOiB0cnVlLFxuICAgICAgICAgIGJvcmRlclRvcENvbG9yOiB7XG4gICAgICAgICAgICBwcm9jZXNzOiByZXF1aXJlKCcuLi8uLi9TdHlsZVNoZWV0L3Byb2Nlc3NDb2xvcicpLmRlZmF1bHQsXG4gICAgICAgICAgfSxcbiAgICAgICAgICByZW1vdmVDbGlwcGVkU3Vidmlld3M6IHRydWUsXG4gICAgICAgICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IHRydWUsXG4gICAgICAgICAgYm9yZGVyTGVmdENvbG9yOiB7XG4gICAgICAgICAgICBwcm9jZXNzOiByZXF1aXJlKCcuLi8uLi9TdHlsZVNoZWV0L3Byb2Nlc3NDb2xvcicpLmRlZmF1bHQsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwb2ludGVyRXZlbnRzOiB0cnVlLFxuICAgICAgICAgIGlzSW52ZXJ0ZWRWaXJ0dWFsaXplZExpc3Q6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgOiB7XG4gICAgICAgIHVpVmlld0NsYXNzTmFtZTogJ1JDVFNjcm9sbFZpZXcnLFxuICAgICAgICBidWJibGluZ0V2ZW50VHlwZXM6IHt9LFxuICAgICAgICBkaXJlY3RFdmVudFR5cGVzOiB7XG4gICAgICAgICAgdG9wTW9tZW50dW1TY3JvbGxCZWdpbjoge1xuICAgICAgICAgICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uTW9tZW50dW1TY3JvbGxCZWdpbicsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB0b3BNb21lbnR1bVNjcm9sbEVuZDoge1xuICAgICAgICAgICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uTW9tZW50dW1TY3JvbGxFbmQnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdG9wU2Nyb2xsOiB7XG4gICAgICAgICAgICByZWdpc3RyYXRpb25OYW1lOiAnb25TY3JvbGwnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdG9wU2Nyb2xsQmVnaW5EcmFnOiB7XG4gICAgICAgICAgICByZWdpc3RyYXRpb25OYW1lOiAnb25TY3JvbGxCZWdpbkRyYWcnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdG9wU2Nyb2xsRW5kRHJhZzoge1xuICAgICAgICAgICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uU2Nyb2xsRW5kRHJhZycsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB0b3BTY3JvbGxUb1RvcDoge1xuICAgICAgICAgICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uU2Nyb2xsVG9Ub3AnLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHZhbGlkQXR0cmlidXRlczoge1xuICAgICAgICAgIGFsd2F5c0JvdW5jZUhvcml6b250YWw6IHRydWUsXG4gICAgICAgICAgYWx3YXlzQm91bmNlVmVydGljYWw6IHRydWUsXG4gICAgICAgICAgYXV0b21hdGljYWxseUFkanVzdENvbnRlbnRJbnNldHM6IHRydWUsXG4gICAgICAgICAgYXV0b21hdGljYWxseUFkanVzdEtleWJvYXJkSW5zZXRzOiB0cnVlLFxuICAgICAgICAgIGF1dG9tYXRpY2FsbHlBZGp1c3RzU2Nyb2xsSW5kaWNhdG9ySW5zZXRzOiB0cnVlLFxuICAgICAgICAgIGJvdW5jZXM6IHRydWUsXG4gICAgICAgICAgYm91bmNlc1pvb206IHRydWUsXG4gICAgICAgICAgY2FuQ2FuY2VsQ29udGVudFRvdWNoZXM6IHRydWUsXG4gICAgICAgICAgY2VudGVyQ29udGVudDogdHJ1ZSxcbiAgICAgICAgICBjb250ZW50SW5zZXQ6IHtcbiAgICAgICAgICAgIGRpZmY6IHJlcXVpcmUoJy4uLy4uL1V0aWxpdGllcy9kaWZmZXIvaW5zZXRzRGlmZmVyJyksXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb250ZW50T2Zmc2V0OiB7XG4gICAgICAgICAgICBkaWZmOiByZXF1aXJlKCcuLi8uLi9VdGlsaXRpZXMvZGlmZmVyL3BvaW50c0RpZmZlcicpLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgY29udGVudEluc2V0QWRqdXN0bWVudEJlaGF2aW9yOiB0cnVlLFxuICAgICAgICAgIGRlY2VsZXJhdGlvblJhdGU6IHRydWUsXG4gICAgICAgICAgZGlyZWN0aW9uYWxMb2NrRW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICBkaXNhYmxlSW50ZXJ2YWxNb21lbnR1bTogdHJ1ZSxcbiAgICAgICAgICBpbmRpY2F0b3JTdHlsZTogdHJ1ZSxcbiAgICAgICAgICBpbnZlcnRlZDogdHJ1ZSxcbiAgICAgICAgICBrZXlib2FyZERpc21pc3NNb2RlOiB0cnVlLFxuICAgICAgICAgIG1haW50YWluVmlzaWJsZUNvbnRlbnRQb3NpdGlvbjogdHJ1ZSxcbiAgICAgICAgICBtYXhpbXVtWm9vbVNjYWxlOiB0cnVlLFxuICAgICAgICAgIG1pbmltdW1ab29tU2NhbGU6IHRydWUsXG4gICAgICAgICAgcGFnaW5nRW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICBwaW5jaEdlc3R1cmVFbmFibGVkOiB0cnVlLFxuICAgICAgICAgIHNjcm9sbEVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgc2Nyb2xsRXZlbnRUaHJvdHRsZTogdHJ1ZSxcbiAgICAgICAgICBzY3JvbGxJbmRpY2F0b3JJbnNldHM6IHtcbiAgICAgICAgICAgIGRpZmY6IHJlcXVpcmUoJy4uLy4uL1V0aWxpdGllcy9kaWZmZXIvaW5zZXRzRGlmZmVyJyksXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzY3JvbGxUb092ZXJmbG93RW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICBzY3JvbGxzVG9Ub3A6IHRydWUsXG4gICAgICAgICAgc2hvd3NIb3Jpem9udGFsU2Nyb2xsSW5kaWNhdG9yOiB0cnVlLFxuICAgICAgICAgIHNob3dzVmVydGljYWxTY3JvbGxJbmRpY2F0b3I6IHRydWUsXG4gICAgICAgICAgc25hcFRvQWxpZ25tZW50OiB0cnVlLFxuICAgICAgICAgIHNuYXBUb0VuZDogdHJ1ZSxcbiAgICAgICAgICBzbmFwVG9JbnRlcnZhbDogdHJ1ZSxcbiAgICAgICAgICBzbmFwVG9PZmZzZXRzOiB0cnVlLFxuICAgICAgICAgIHNuYXBUb1N0YXJ0OiB0cnVlLFxuICAgICAgICAgIHpvb21TY2FsZTogdHJ1ZSxcbiAgICAgICAgICAuLi5Db25kaXRpb25hbGx5SWdub3JlZEV2ZW50SGFuZGxlcnMoe1xuICAgICAgICAgICAgb25TY3JvbGxCZWdpbkRyYWc6IHRydWUsXG4gICAgICAgICAgICBvbk1vbWVudHVtU2Nyb2xsRW5kOiB0cnVlLFxuICAgICAgICAgICAgb25TY3JvbGxFbmREcmFnOiB0cnVlLFxuICAgICAgICAgICAgb25Nb21lbnR1bVNjcm9sbEJlZ2luOiB0cnVlLFxuICAgICAgICAgICAgb25TY3JvbGxUb1RvcDogdHJ1ZSxcbiAgICAgICAgICAgIG9uU2Nyb2xsOiB0cnVlLFxuICAgICAgICAgIH0pLFxuICAgICAgICB9LFxuICAgICAgfTtcblxuY29uc3QgU2Nyb2xsVmlld05hdGl2ZUNvbXBvbmVudDogSG9zdENvbXBvbmVudDxQcm9wcz4gPVxuICBOYXRpdmVDb21wb25lbnRSZWdpc3RyeS5nZXQ8UHJvcHM+KFxuICAgICdSQ1RTY3JvbGxWaWV3JyxcbiAgICAoKSA9PiBfX0lOVEVSTkFMX1ZJRVdfQ09ORklHLFxuICApO1xuXG5leHBvcnQgZGVmYXVsdCBTY3JvbGxWaWV3TmF0aXZlQ29tcG9uZW50O1xuIl0sIm1hcHBpbmdzIjoiOzs7OztBQWdCQSxJQUFBQSx1QkFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsaUJBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFNBQUEsR0FBQUMsc0JBQUEsQ0FBQUgsT0FBQTtBQUFnRCxTQUFBSSx5QkFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxtQkFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsQ0FBQSxXQUFBQSxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxLQUFBRixDQUFBO0FBQUEsU0FBQU4sd0JBQUFNLENBQUEsRUFBQUUsQ0FBQSxTQUFBQSxDQUFBLElBQUFGLENBQUEsSUFBQUEsQ0FBQSxDQUFBSSxVQUFBLFNBQUFKLENBQUEsZUFBQUEsQ0FBQSx1QkFBQUEsQ0FBQSx5QkFBQUEsQ0FBQSxXQUFBSyxPQUFBLEVBQUFMLENBQUEsUUFBQUcsQ0FBQSxHQUFBSix3QkFBQSxDQUFBRyxDQUFBLE9BQUFDLENBQUEsSUFBQUEsQ0FBQSxDQUFBRyxHQUFBLENBQUFOLENBQUEsVUFBQUcsQ0FBQSxDQUFBSSxHQUFBLENBQUFQLENBQUEsT0FBQVEsQ0FBQSxLQUFBQyxTQUFBLFVBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxjQUFBLElBQUFELE1BQUEsQ0FBQUUsd0JBQUEsV0FBQUMsQ0FBQSxJQUFBZCxDQUFBLG9CQUFBYyxDQUFBLE9BQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBaEIsQ0FBQSxFQUFBYyxDQUFBLFNBQUFHLENBQUEsR0FBQVAsQ0FBQSxHQUFBQyxNQUFBLENBQUFFLHdCQUFBLENBQUFiLENBQUEsRUFBQWMsQ0FBQSxVQUFBRyxDQUFBLEtBQUFBLENBQUEsQ0FBQVYsR0FBQSxJQUFBVSxDQUFBLENBQUFDLEdBQUEsSUFBQVAsTUFBQSxDQUFBQyxjQUFBLENBQUFKLENBQUEsRUFBQU0sQ0FBQSxFQUFBRyxDQUFBLElBQUFULENBQUEsQ0FBQU0sQ0FBQSxJQUFBZCxDQUFBLENBQUFjLENBQUEsWUFBQU4sQ0FBQSxDQUFBSCxPQUFBLEdBQUFMLENBQUEsRUFBQUcsQ0FBQSxJQUFBQSxDQUFBLENBQUFlLEdBQUEsQ0FBQWxCLENBQUEsRUFBQVEsQ0FBQSxHQUFBQSxDQUFBO0FBRXpDLElBQU1XLHNCQUF5QyxHQUFBQyxPQUFBLENBQUFELHNCQUFBLEdBQ3BERSxpQkFBUSxDQUFDQyxFQUFFLEtBQUssU0FBUyxHQUNyQjtFQUNFQyxlQUFlLEVBQUUsZUFBZTtFQUNoQ0Msa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO0VBQ3RCQyxnQkFBZ0IsRUFBRTtJQUNoQkMsc0JBQXNCLEVBQUU7TUFDdEJDLGdCQUFnQixFQUFFO0lBQ3BCLENBQUM7SUFDREMsb0JBQW9CLEVBQUU7TUFDcEJELGdCQUFnQixFQUFFO0lBQ3BCLENBQUM7SUFDREUsU0FBUyxFQUFFO01BQ1RGLGdCQUFnQixFQUFFO0lBQ3BCLENBQUM7SUFDREcsa0JBQWtCLEVBQUU7TUFDbEJILGdCQUFnQixFQUFFO0lBQ3BCLENBQUM7SUFDREksZ0JBQWdCLEVBQUU7TUFDaEJKLGdCQUFnQixFQUFFO0lBQ3BCO0VBQ0YsQ0FBQztFQUNESyxlQUFlLEVBQUU7SUFDZkMsYUFBYSxFQUFFO01BQ2JDLElBQUksRUFBRXZDLE9BQU8sQ0FBQyxxQ0FBcUM7SUFDckQsQ0FBQztJQUNEd0MsZ0JBQWdCLEVBQUUsSUFBSTtJQUN0QkMsdUJBQXVCLEVBQUUsSUFBSTtJQUM3QkMsYUFBYSxFQUFFLElBQUk7SUFDbkJDLGFBQWEsRUFBRSxJQUFJO0lBQ25CQyw0QkFBNEIsRUFBRSxJQUFJO0lBQ2xDQyxlQUFlLEVBQUUsSUFBSTtJQUNyQkMsU0FBUyxFQUFFLElBQUk7SUFDZkMsY0FBYyxFQUFFLElBQUk7SUFDcEJDLGFBQWEsRUFBRSxJQUFJO0lBQ25CQyxXQUFXLEVBQUUsSUFBSTtJQUNqQkMsc0JBQXNCLEVBQUUsSUFBSTtJQUM1QkMsdUJBQXVCLEVBQUUsSUFBSTtJQUM3QkMsa0JBQWtCLEVBQUUsSUFBSTtJQUN4QkMsWUFBWSxFQUFFLElBQUk7SUFDbEJDLG1CQUFtQixFQUFFLElBQUk7SUFDekJDLFdBQVcsRUFBRSxJQUFJO0lBQ2pCQyxnQkFBZ0IsRUFBRTtNQUNoQkMsT0FBTyxFQUFFekQsT0FBTyxDQUFDLCtCQUErQixDQUFDLENBQUNVO0lBQ3BELENBQUM7SUFDRGdELFdBQVcsRUFBRTtNQUNYRCxPQUFPLEVBQUV6RCxPQUFPLENBQUMsK0JBQStCLENBQUMsQ0FBQ1U7SUFDcEQsQ0FBQztJQUNEaUQsaUJBQWlCLEVBQUU7TUFDakJGLE9BQU8sRUFBRXpELE9BQU8sQ0FBQywrQkFBK0IsQ0FBQyxDQUFDVTtJQUNwRCxDQUFDO0lBQ0RrRCxtQkFBbUIsRUFBRSxJQUFJO0lBQ3pCQyxZQUFZLEVBQUU7TUFDWkosT0FBTyxFQUFFekQsT0FBTyxDQUFDLCtCQUErQixDQUFDLENBQUNVO0lBQ3BELENBQUM7SUFDRG9ELGdCQUFnQixFQUFFLElBQUk7SUFDdEJDLGNBQWMsRUFBRSxJQUFJO0lBQ3BCQyxtQkFBbUIsRUFBRSxJQUFJO0lBQ3pCQyxhQUFhLEVBQUUsSUFBSTtJQUNuQkMsY0FBYyxFQUFFO01BQ2RULE9BQU8sRUFBRXpELE9BQU8sQ0FBQywrQkFBK0IsQ0FBQyxDQUFDVTtJQUNwRCxDQUFDO0lBQ0R5RCxxQkFBcUIsRUFBRSxJQUFJO0lBQzNCQyxvQkFBb0IsRUFBRSxJQUFJO0lBQzFCQyxlQUFlLEVBQUU7TUFDZlosT0FBTyxFQUFFekQsT0FBTyxDQUFDLCtCQUErQixDQUFDLENBQUNVO0lBQ3BELENBQUM7SUFDRDRELGFBQWEsRUFBRSxJQUFJO0lBQ25CQyx5QkFBeUIsRUFBRTtFQUM3QjtBQUNGLENBQUMsR0FDRDtFQUNFM0MsZUFBZSxFQUFFLGVBQWU7RUFDaENDLGtCQUFrQixFQUFFLENBQUMsQ0FBQztFQUN0QkMsZ0JBQWdCLEVBQUU7SUFDaEJDLHNCQUFzQixFQUFFO01BQ3RCQyxnQkFBZ0IsRUFBRTtJQUNwQixDQUFDO0lBQ0RDLG9CQUFvQixFQUFFO01BQ3BCRCxnQkFBZ0IsRUFBRTtJQUNwQixDQUFDO0lBQ0RFLFNBQVMsRUFBRTtNQUNURixnQkFBZ0IsRUFBRTtJQUNwQixDQUFDO0lBQ0RHLGtCQUFrQixFQUFFO01BQ2xCSCxnQkFBZ0IsRUFBRTtJQUNwQixDQUFDO0lBQ0RJLGdCQUFnQixFQUFFO01BQ2hCSixnQkFBZ0IsRUFBRTtJQUNwQixDQUFDO0lBQ0R3QyxjQUFjLEVBQUU7TUFDZHhDLGdCQUFnQixFQUFFO0lBQ3BCO0VBQ0YsQ0FBQztFQUNESyxlQUFlLEVBQUFyQixNQUFBLENBQUF5RCxNQUFBO0lBQ2JDLHNCQUFzQixFQUFFLElBQUk7SUFDNUJDLG9CQUFvQixFQUFFLElBQUk7SUFDMUJDLGdDQUFnQyxFQUFFLElBQUk7SUFDdENDLGlDQUFpQyxFQUFFLElBQUk7SUFDdkNDLHlDQUF5QyxFQUFFLElBQUk7SUFDL0NDLE9BQU8sRUFBRSxJQUFJO0lBQ2JDLFdBQVcsRUFBRSxJQUFJO0lBQ2pCQyx1QkFBdUIsRUFBRSxJQUFJO0lBQzdCQyxhQUFhLEVBQUUsSUFBSTtJQUNuQkMsWUFBWSxFQUFFO01BQ1o1QyxJQUFJLEVBQUV2QyxPQUFPLENBQUMscUNBQXFDO0lBQ3JELENBQUM7SUFDRHNDLGFBQWEsRUFBRTtNQUNiQyxJQUFJLEVBQUV2QyxPQUFPLENBQUMscUNBQXFDO0lBQ3JELENBQUM7SUFDRG9GLDhCQUE4QixFQUFFLElBQUk7SUFDcEM1QyxnQkFBZ0IsRUFBRSxJQUFJO0lBQ3RCNkMsc0JBQXNCLEVBQUUsSUFBSTtJQUM1QjVDLHVCQUF1QixFQUFFLElBQUk7SUFDN0I2QyxjQUFjLEVBQUUsSUFBSTtJQUNwQkMsUUFBUSxFQUFFLElBQUk7SUFDZEMsbUJBQW1CLEVBQUUsSUFBSTtJQUN6QkMsOEJBQThCLEVBQUUsSUFBSTtJQUNwQ0MsZ0JBQWdCLEVBQUUsSUFBSTtJQUN0QkMsZ0JBQWdCLEVBQUUsSUFBSTtJQUN0QmpELGFBQWEsRUFBRSxJQUFJO0lBQ25Ca0QsbUJBQW1CLEVBQUUsSUFBSTtJQUN6QmpELGFBQWEsRUFBRSxJQUFJO0lBQ25Ca0QsbUJBQW1CLEVBQUUsSUFBSTtJQUN6QkMscUJBQXFCLEVBQUU7TUFDckJ2RCxJQUFJLEVBQUV2QyxPQUFPLENBQUMscUNBQXFDO0lBQ3JELENBQUM7SUFDRCtGLHVCQUF1QixFQUFFLElBQUk7SUFDN0JDLFlBQVksRUFBRSxJQUFJO0lBQ2xCQyw4QkFBOEIsRUFBRSxJQUFJO0lBQ3BDckQsNEJBQTRCLEVBQUUsSUFBSTtJQUNsQ0MsZUFBZSxFQUFFLElBQUk7SUFDckJDLFNBQVMsRUFBRSxJQUFJO0lBQ2ZDLGNBQWMsRUFBRSxJQUFJO0lBQ3BCQyxhQUFhLEVBQUUsSUFBSTtJQUNuQkMsV0FBVyxFQUFFLElBQUk7SUFDakJpRCxTQUFTLEVBQUU7RUFBSSxHQUNaLElBQUFDLG1EQUFpQyxFQUFDO0lBQ25DQyxpQkFBaUIsRUFBRSxJQUFJO0lBQ3ZCQyxtQkFBbUIsRUFBRSxJQUFJO0lBQ3pCQyxlQUFlLEVBQUUsSUFBSTtJQUNyQkMscUJBQXFCLEVBQUUsSUFBSTtJQUMzQkMsYUFBYSxFQUFFLElBQUk7SUFDbkJDLFFBQVEsRUFBRTtFQUNaLENBQUMsQ0FBQztBQUVOLENBQUM7QUFFUCxJQUFNQyx5QkFBK0MsR0FDbkQ1Ryx1QkFBdUIsQ0FBQ2MsR0FBRyxDQUN6QixlQUFlLEVBQ2Y7RUFBQSxPQUFNWSxzQkFBc0I7QUFBQSxDQUM5QixDQUFDO0FBQUMsSUFBQW1GLFFBQUEsR0FBQWxGLE9BQUEsQ0FBQWYsT0FBQSxHQUVXZ0cseUJBQXlCIiwiaWdub3JlTGlzdCI6W119