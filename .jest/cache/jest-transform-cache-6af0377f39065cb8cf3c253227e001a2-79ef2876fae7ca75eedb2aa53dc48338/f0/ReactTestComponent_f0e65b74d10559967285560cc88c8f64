531bdf791a5523bb3a13541120fb3630
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.test = exports.serialize = exports.default = void 0;
var _markup = require('./lib/markup');
var Symbol = globalThis['jest-symbol-do-not-touch'] || globalThis.Symbol;
var testSymbol = typeof Symbol === 'function' && Symbol.for ? Symbol.for('react.test.json') : 0xea71357;
var getPropKeys = function getPropKeys(object) {
  var props = object.props;
  return props ? Object.keys(props).filter(function (key) {
    return props[key] !== undefined;
  }).sort() : [];
};
var serialize = function serialize(object, config, indentation, depth, refs, printer) {
  return ++depth > config.maxDepth ? (0, _markup.printElementAsLeaf)(object.type, config) : (0, _markup.printElement)(object.type, object.props ? (0, _markup.printProps)(getPropKeys(object), object.props, config, indentation + config.indent, depth, refs, printer) : '', object.children ? (0, _markup.printChildren)(object.children, config, indentation + config.indent, depth, refs, printer) : '', config, indentation);
};
exports.serialize = serialize;
var test = function test(val) {
  return val && val.$$typeof === testSymbol;
};
exports.test = test;
var plugin = {
  serialize: serialize,
  test: test
};
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRlc3QiLCJzZXJpYWxpemUiLCJkZWZhdWx0IiwiX21hcmt1cCIsInJlcXVpcmUiLCJTeW1ib2wiLCJnbG9iYWxUaGlzIiwidGVzdFN5bWJvbCIsImZvciIsImdldFByb3BLZXlzIiwib2JqZWN0IiwicHJvcHMiLCJrZXlzIiwiZmlsdGVyIiwia2V5IiwidW5kZWZpbmVkIiwic29ydCIsImNvbmZpZyIsImluZGVudGF0aW9uIiwiZGVwdGgiLCJyZWZzIiwicHJpbnRlciIsIm1heERlcHRoIiwicHJpbnRFbGVtZW50QXNMZWFmIiwidHlwZSIsInByaW50RWxlbWVudCIsInByaW50UHJvcHMiLCJpbmRlbnQiLCJjaGlsZHJlbiIsInByaW50Q2hpbGRyZW4iLCJ2YWwiLCIkJHR5cGVvZiIsInBsdWdpbiIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiUmVhY3RUZXN0Q29tcG9uZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnRlc3QgPSBleHBvcnRzLnNlcmlhbGl6ZSA9IGV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfbWFya3VwID0gcmVxdWlyZSgnLi9saWIvbWFya3VwJyk7XG52YXIgU3ltYm9sID0gZ2xvYmFsVGhpc1snamVzdC1zeW1ib2wtZG8tbm90LXRvdWNoJ10gfHwgZ2xvYmFsVGhpcy5TeW1ib2w7XG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8vIENoaWxkIGNhbiBiZSBgbnVtYmVyYCBpbiBTdGFjayByZW5kZXJlciBidXQgbm90IGluIEZpYmVyIHJlbmRlcmVyLlxuXG5jb25zdCB0ZXN0U3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yXG4gICAgPyBTeW1ib2wuZm9yKCdyZWFjdC50ZXN0Lmpzb24nKVxuICAgIDogMHhlYTcxMzU3O1xuY29uc3QgZ2V0UHJvcEtleXMgPSBvYmplY3QgPT4ge1xuICBjb25zdCB7cHJvcHN9ID0gb2JqZWN0O1xuICByZXR1cm4gcHJvcHNcbiAgICA/IE9iamVjdC5rZXlzKHByb3BzKVxuICAgICAgICAuZmlsdGVyKGtleSA9PiBwcm9wc1trZXldICE9PSB1bmRlZmluZWQpXG4gICAgICAgIC5zb3J0KClcbiAgICA6IFtdO1xufTtcbmNvbnN0IHNlcmlhbGl6ZSA9IChvYmplY3QsIGNvbmZpZywgaW5kZW50YXRpb24sIGRlcHRoLCByZWZzLCBwcmludGVyKSA9PlxuICArK2RlcHRoID4gY29uZmlnLm1heERlcHRoXG4gICAgPyAoMCwgX21hcmt1cC5wcmludEVsZW1lbnRBc0xlYWYpKG9iamVjdC50eXBlLCBjb25maWcpXG4gICAgOiAoMCwgX21hcmt1cC5wcmludEVsZW1lbnQpKFxuICAgICAgICBvYmplY3QudHlwZSxcbiAgICAgICAgb2JqZWN0LnByb3BzXG4gICAgICAgICAgPyAoMCwgX21hcmt1cC5wcmludFByb3BzKShcbiAgICAgICAgICAgICAgZ2V0UHJvcEtleXMob2JqZWN0KSxcbiAgICAgICAgICAgICAgb2JqZWN0LnByb3BzLFxuICAgICAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgICAgIGluZGVudGF0aW9uICsgY29uZmlnLmluZGVudCxcbiAgICAgICAgICAgICAgZGVwdGgsXG4gICAgICAgICAgICAgIHJlZnMsXG4gICAgICAgICAgICAgIHByaW50ZXJcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6ICcnLFxuICAgICAgICBvYmplY3QuY2hpbGRyZW5cbiAgICAgICAgICA/ICgwLCBfbWFya3VwLnByaW50Q2hpbGRyZW4pKFxuICAgICAgICAgICAgICBvYmplY3QuY2hpbGRyZW4sXG4gICAgICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICAgICAgaW5kZW50YXRpb24gKyBjb25maWcuaW5kZW50LFxuICAgICAgICAgICAgICBkZXB0aCxcbiAgICAgICAgICAgICAgcmVmcyxcbiAgICAgICAgICAgICAgcHJpbnRlclxuICAgICAgICAgICAgKVxuICAgICAgICAgIDogJycsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgaW5kZW50YXRpb25cbiAgICAgICk7XG5leHBvcnRzLnNlcmlhbGl6ZSA9IHNlcmlhbGl6ZTtcbmNvbnN0IHRlc3QgPSB2YWwgPT4gdmFsICYmIHZhbC4kJHR5cGVvZiA9PT0gdGVzdFN5bWJvbDtcbmV4cG9ydHMudGVzdCA9IHRlc3Q7XG5jb25zdCBwbHVnaW4gPSB7XG4gIHNlcmlhbGl6ZSxcbiAgdGVzdFxufTtcbnZhciBfZGVmYXVsdCA9IHBsdWdpbjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsSUFBSSxHQUFHRixPQUFPLENBQUNHLFNBQVMsR0FBR0gsT0FBTyxDQUFDSSxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBQzNELElBQUlDLE9BQU8sR0FBR0MsT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUNyQyxJQUFJQyxNQUFNLEdBQUdDLFVBQVUsQ0FBQywwQkFBMEIsQ0FBQyxJQUFJQSxVQUFVLENBQUNELE1BQU07QUFTeEUsSUFBTUUsVUFBVSxHQUNkLE9BQU9GLE1BQU0sS0FBSyxVQUFVLElBQUlBLE1BQU0sQ0FBQ0csR0FBRyxHQUN0Q0gsTUFBTSxDQUFDRyxHQUFHLENBQUMsaUJBQWlCLENBQUMsR0FDN0IsU0FBUztBQUNmLElBQU1DLFdBQVcsR0FBRyxTQUFkQSxXQUFXQSxDQUFHQyxNQUFNLEVBQUk7RUFDNUIsSUFBT0MsS0FBSyxHQUFJRCxNQUFNLENBQWZDLEtBQUs7RUFDWixPQUFPQSxLQUFLLEdBQ1JmLE1BQU0sQ0FBQ2dCLElBQUksQ0FBQ0QsS0FBSyxDQUFDLENBQ2ZFLE1BQU0sQ0FBQyxVQUFBQyxHQUFHO0lBQUEsT0FBSUgsS0FBSyxDQUFDRyxHQUFHLENBQUMsS0FBS0MsU0FBUztFQUFBLEVBQUMsQ0FDdkNDLElBQUksQ0FBQyxDQUFDLEdBQ1QsRUFBRTtBQUNSLENBQUM7QUFDRCxJQUFNZixTQUFTLEdBQUcsU0FBWkEsU0FBU0EsQ0FBSVMsTUFBTSxFQUFFTyxNQUFNLEVBQUVDLFdBQVcsRUFBRUMsS0FBSyxFQUFFQyxJQUFJLEVBQUVDLE9BQU87RUFBQSxPQUNsRSxFQUFFRixLQUFLLEdBQUdGLE1BQU0sQ0FBQ0ssUUFBUSxHQUNyQixDQUFDLENBQUMsRUFBRW5CLE9BQU8sQ0FBQ29CLGtCQUFrQixFQUFFYixNQUFNLENBQUNjLElBQUksRUFBRVAsTUFBTSxDQUFDLEdBQ3BELENBQUMsQ0FBQyxFQUFFZCxPQUFPLENBQUNzQixZQUFZLEVBQ3RCZixNQUFNLENBQUNjLElBQUksRUFDWGQsTUFBTSxDQUFDQyxLQUFLLEdBQ1IsQ0FBQyxDQUFDLEVBQUVSLE9BQU8sQ0FBQ3VCLFVBQVUsRUFDcEJqQixXQUFXLENBQUNDLE1BQU0sQ0FBQyxFQUNuQkEsTUFBTSxDQUFDQyxLQUFLLEVBQ1pNLE1BQU0sRUFDTkMsV0FBVyxHQUFHRCxNQUFNLENBQUNVLE1BQU0sRUFDM0JSLEtBQUssRUFDTEMsSUFBSSxFQUNKQyxPQUNGLENBQUMsR0FDRCxFQUFFLEVBQ05YLE1BQU0sQ0FBQ2tCLFFBQVEsR0FDWCxDQUFDLENBQUMsRUFBRXpCLE9BQU8sQ0FBQzBCLGFBQWEsRUFDdkJuQixNQUFNLENBQUNrQixRQUFRLEVBQ2ZYLE1BQU0sRUFDTkMsV0FBVyxHQUFHRCxNQUFNLENBQUNVLE1BQU0sRUFDM0JSLEtBQUssRUFDTEMsSUFBSSxFQUNKQyxPQUNGLENBQUMsR0FDRCxFQUFFLEVBQ05KLE1BQU0sRUFDTkMsV0FDRixDQUFDO0FBQUE7QUFDUHBCLE9BQU8sQ0FBQ0csU0FBUyxHQUFHQSxTQUFTO0FBQzdCLElBQU1ELElBQUksR0FBRyxTQUFQQSxJQUFJQSxDQUFHOEIsR0FBRztFQUFBLE9BQUlBLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxRQUFRLEtBQUt4QixVQUFVO0FBQUE7QUFDdERULE9BQU8sQ0FBQ0UsSUFBSSxHQUFHQSxJQUFJO0FBQ25CLElBQU1nQyxNQUFNLEdBQUc7RUFDYi9CLFNBQVMsRUFBVEEsU0FBUztFQUNURCxJQUFJLEVBQUpBO0FBQ0YsQ0FBQztBQUNELElBQUlpQyxRQUFRLEdBQUdELE1BQU07QUFDckJsQyxPQUFPLENBQUNJLE9BQU8sR0FBRytCLFFBQVEiLCJpZ25vcmVMaXN0IjpbXX0=