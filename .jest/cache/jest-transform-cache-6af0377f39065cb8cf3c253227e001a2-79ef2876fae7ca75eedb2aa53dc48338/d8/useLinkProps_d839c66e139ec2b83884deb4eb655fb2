f62f56887e851b2f8c9184242ae6ae7e
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useLinkProps;
var _core = require("@react-navigation/core");
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _LinkingContext = _interopRequireDefault(require("./LinkingContext"));
var _useLinkTo = _interopRequireDefault(require("./useLinkTo"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
var getStateFromParams = function getStateFromParams(params) {
  if (params !== null && params !== void 0 && params.state) {
    return params.state;
  }
  if (params !== null && params !== void 0 && params.screen) {
    return {
      routes: [{
        name: params.screen,
        params: params.params,
        state: params.screen ? getStateFromParams(params.params) : undefined
      }]
    };
  }
  return undefined;
};
function useLinkProps(_ref) {
  var _ref2;
  var to = _ref.to,
    action = _ref.action;
  var root = React.useContext(_core.NavigationContainerRefContext);
  var navigation = React.useContext(_core.NavigationHelpersContext);
  var _React$useContext = React.useContext(_LinkingContext.default),
    options = _React$useContext.options;
  var linkTo = (0, _useLinkTo.default)();
  var onPress = function onPress(e) {
    var _e$currentTarget;
    var shouldHandle = false;
    if (_reactNative.Platform.OS !== 'web' || !e) {
      shouldHandle = e ? !e.defaultPrevented : true;
    } else if (!e.defaultPrevented && !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0) && [undefined, null, '', 'self'].includes((_e$currentTarget = e.currentTarget) === null || _e$currentTarget === void 0 ? void 0 : _e$currentTarget.target)) {
      e.preventDefault();
      shouldHandle = true;
    }
    if (shouldHandle) {
      if (action) {
        if (navigation) {
          navigation.dispatch(action);
        } else if (root) {
          root.dispatch(action);
        } else {
          throw new Error("Couldn't find a navigation object. Is your component inside NavigationContainer?");
        }
      } else {
        linkTo(to);
      }
    }
  };
  var getPathFromStateHelper = (_ref2 = options === null || options === void 0 ? void 0 : options.getPathFromState) != null ? _ref2 : _core.getPathFromState;
  var href = typeof to === 'string' ? to : getPathFromStateHelper({
    routes: [{
      name: to.screen,
      params: to.params,
      state: getStateFromParams(to.params)
    }]
  }, options === null || options === void 0 ? void 0 : options.config);
  return {
    href: href,
    accessibilityRole: 'link',
    onPress: onPress
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29yZSIsInJlcXVpcmUiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3JlYWN0TmF0aXZlIiwiX0xpbmtpbmdDb250ZXh0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl91c2VMaW5rVG8iLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiZ2V0U3RhdGVGcm9tUGFyYW1zIiwicGFyYW1zIiwic3RhdGUiLCJzY3JlZW4iLCJyb3V0ZXMiLCJuYW1lIiwidW5kZWZpbmVkIiwidXNlTGlua1Byb3BzIiwiX3JlZiIsIl9yZWYyIiwidG8iLCJhY3Rpb24iLCJyb290IiwidXNlQ29udGV4dCIsIk5hdmlnYXRpb25Db250YWluZXJSZWZDb250ZXh0IiwibmF2aWdhdGlvbiIsIk5hdmlnYXRpb25IZWxwZXJzQ29udGV4dCIsIl9SZWFjdCR1c2VDb250ZXh0Iiwib3B0aW9ucyIsImxpbmtUbyIsIm9uUHJlc3MiLCJlIiwiX2UkY3VycmVudFRhcmdldCIsInNob3VsZEhhbmRsZSIsIlBsYXRmb3JtIiwiT1MiLCJkZWZhdWx0UHJldmVudGVkIiwibWV0YUtleSIsImFsdEtleSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImJ1dHRvbiIsImluY2x1ZGVzIiwiY3VycmVudFRhcmdldCIsInRhcmdldCIsInByZXZlbnREZWZhdWx0IiwiZGlzcGF0Y2giLCJFcnJvciIsImdldFBhdGhGcm9tU3RhdGVIZWxwZXIiLCJnZXRQYXRoRnJvbVN0YXRlIiwiaHJlZiIsImNvbmZpZyIsImFjY2Vzc2liaWxpdHlSb2xlIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3VzZUxpbmtQcm9wcy50c3giXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLEtBQUEsR0FBQUMsT0FBQTtBQVNBLElBQUFDLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFHLFlBQUEsR0FBQUgsT0FBQTtBQUVBLElBQUFJLGVBQUEsR0FBQUMsc0JBQUEsQ0FBQUwsT0FBQTtBQUNBLElBQUFNLFVBQUEsR0FBQUQsc0JBQUEsQ0FBQUwsT0FBQTtBQUE0QyxTQUFBSyx1QkFBQUUsR0FBQTtFQUFBLE9BQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUE7SUFBQUUsT0FBQSxFQUFBRjtFQUFBO0FBQUE7QUFBQSxTQUFBRyx5QkFBQUMsV0FBQTtFQUFBLFdBQUFDLE9BQUE7RUFBQSxJQUFBQyxpQkFBQSxPQUFBRCxPQUFBO0VBQUEsSUFBQUUsZ0JBQUEsT0FBQUYsT0FBQTtFQUFBLFFBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxXQUFBO0lBQUEsT0FBQUEsV0FBQSxHQUFBRyxnQkFBQSxHQUFBRCxpQkFBQTtFQUFBLEdBQUFGLFdBQUE7QUFBQTtBQUFBLFNBQUFULHdCQUFBSyxHQUFBLEVBQUFJLFdBQUE7RUFBQSxLQUFBQSxXQUFBLElBQUFKLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBO0lBQUEsT0FBQUQsR0FBQTtFQUFBO0VBQUEsSUFBQUEsR0FBQSxvQkFBQUEsR0FBQSx3QkFBQUEsR0FBQTtJQUFBO01BQUFFLE9BQUEsRUFBQUY7SUFBQTtFQUFBO0VBQUEsSUFBQVEsS0FBQSxHQUFBTCx3QkFBQSxDQUFBQyxXQUFBO0VBQUEsSUFBQUksS0FBQSxJQUFBQSxLQUFBLENBQUFDLEdBQUEsQ0FBQVQsR0FBQTtJQUFBLE9BQUFRLEtBQUEsQ0FBQUUsR0FBQSxDQUFB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UUFBUSxDQUFDLEtBRWxEVCxDQUFDLENBQUNVLE1BQU0sSUFBSSxJQUFJLElBQUlWLENBQUMsQ0FBQ1UsTUFBTSxLQUFLLENBQUMsQ0FBQyxJQUVwQyxDQUFDekIsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMwQixRQUFRLEVBQUFWLGdCQUFBLEdBQUNELENBQUMsQ0FBQ1ksYUFBYSxjQUFBWCxnQkFBQSx1QkFBZkEsZ0JBQUEsQ0FBaUJZLE1BQU0sQ0FBQyxFQUMvRDtNQUNBYixDQUFDLENBQUNjLGNBQWMsRUFBRTtNQUNsQlosWUFBWSxHQUFHLElBQUk7SUFDckI7SUFFQSxJQUFJQSxZQUFZLEVBQUU7TUFDaEIsSUFBSVosTUFBTSxFQUFFO1FBQ1YsSUFBSUksVUFBVSxFQUFFO1VBQ2RBLFVBQVUsQ0FBQ3FCLFFBQVEsQ0FBQ3pCLE1BQU0sQ0FBQztRQUM3QixDQUFDLE1BQU0sSUFBSUMsSUFBSSxFQUFFO1VBQ2ZBLElBQUksQ0FBQ3dCLFFBQVEsQ0FBQ3pCLE1BQU0sQ0FBQztRQUN2QixDQUFDLE1BQU07VUFDTCxNQUFNLElBQUkwQixLQUFLLENBQ2Isa0ZBQWtGLENBQ25GO1FBQ0g7TUFDRixDQUFDLE1BQU07UUFDTGxCLE1BQU0sQ0FBQ1QsRUFBRSxDQUFDO01BQ1o7SUFDRjtFQUNGLENBQUM7RUFFRCxJQUFNNEIsc0JBQXNCLElBQUE3QixLQUFBLEdBQUdTLE9BQU8sYUFBUEEsT0FBTyx1QkFBUEEsT0FBTyxDQUFFcUIsZ0JBQWdCLFlBQUE5QixLQUFBLEdBQUl2QyxLQUFBLENBQUFxRSxnQkFBZ0I7RUFFNUUsSUFBTUMsSUFBSSxHQUNSLE9BQU85QixFQUFFLEtBQUssUUFBUSxHQUNsQkEsRUFBRSxHQUNGNEIsc0JBQXNCLENBQ3BCO0lBQ0VsQyxNQUFNLEVBQUUsQ0FDTjtNQUNFQyxJQUFJLEVBQUVLLEVBQUUsQ0FBQ1AsTUFBTTtNQUVmRixNQUFNLEVBQUVTLEVBQUUsQ0FBQ1QsTUFBTTtNQUVqQkMsS0FBSyxFQUFFRixrQkFBa0IsQ0FBQ1UsRUFBRSxDQUFDVCxNQUFNO0lBQ3JDLENBQUM7RUFFTCxDQUFDLEVBQ0RpQixPQUFPLGFBQVBBLE9BQU8sdUJBQVBBLE9BQU8sQ0FBRXVCLE1BQU0sQ0FDaEI7RUFFUCxPQUFPO0lBQ0xELElBQUksRUFBSkEsSUFBSTtJQUNKRSxpQkFBaUIsRUFBRSxNQUFlO0lBQ2xDdEIsT0FBQSxFQUFBQTtFQUNGLENBQUM7QUFDSCIsImlnbm9yZUxpc3QiOltdfQ==