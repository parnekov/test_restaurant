44c72ec406cfea78cd271037634151ce
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFabricUIManager = getFabricUIManager;
var _defineLazyObjectProperty = _interopRequireDefault(require("../Utilities/defineLazyObjectProperty"));
var nativeFabricUIManagerProxy;
var CACHED_PROPERTIES = ['createNode', 'cloneNode', 'cloneNodeWithNewChildren', 'cloneNodeWithNewProps', 'cloneNodeWithNewChildrenAndProps', 'createChildSet', 'appendChild', 'appendChildToSet', 'completeRoot', 'measure', 'measureInWindow', 'measureLayout', 'configureNextLayoutAnimation', 'sendAccessibilityEvent', 'findShadowNodeByTag_DEPRECATED', 'setNativeProps', 'dispatchCommand', 'getParentNode', 'getChildNodes', 'isConnected', 'compareDocumentPosition', 'getTextContent', 'getBoundingClientRect', 'getOffset', 'getScrollPosition', 'getScrollSize', 'getInnerSize', 'getBorderSize', 'getTagName', 'hasPointerCapture', 'setPointerCapture', 'releasePointerCapture'];
function getFabricUIManager() {
  if (nativeFabricUIManagerProxy == null && global.nativeFabricUIManager != null) {
    nativeFabricUIManagerProxy = createProxyWithCachedProperties(global.nativeFabricUIManager, CACHED_PROPERTIES);
  }
  return nativeFabricUIManagerProxy;
}
function createProxyWithCachedProperties(implementation, propertiesToCache) {
  var proxy = Object.create(implementation);
  var _loop = function _loop(propertyName) {
    (0, _defineLazyObjectProperty.default)(proxy, propertyName, {
      get: function get() {
        return implementation[propertyName];
      }
    });
  };
  for (var propertyName of propertiesToCache) {
    _loop(propertyName);
  }
  return proxy;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,