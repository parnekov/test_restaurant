{"version":3,"names":["_PressabilityDebug","require","_UIManager","_interopRequireDefault","_Platform","_SoundManager","_BoundingDimensions","_Position","React","_interopRequireWildcard","_jsxRuntime","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","extractSingleTouch","nativeEvent","touches","changedTouches","hasTouches","length","hasChangedTouches","States","NOT_RESPONDER","RESPONDER_INACTIVE_PRESS_IN","RESPONDER_INACTIVE_PRESS_OUT","RESPONDER_ACTIVE_PRESS_IN","RESPONDER_ACTIVE_PRESS_OUT","RESPONDER_ACTIVE_LONG_PRESS_IN","RESPONDER_ACTIVE_LONG_PRESS_OUT","ERROR","baseStatesConditions","IsActive","assign","IsPressingIn","IsLongPressingIn","Signals","DELAY","RESPONDER_GRANT","RESPONDER_RELEASE","RESPONDER_TERMINATED","ENTER_PRESS_RECT","LEAVE_PRESS_RECT","LONG_PRESS_DETECTED","Transitions","error","HIGHLIGHT_DELAY_MS","PRESS_EXPAND_PX","LONG_PRESS_THRESHOLD","LONG_PRESS_DELAY_MS","LONG_PRESS_ALLOWED_MOVEMENT","TouchableMixin","componentDidMount","Platform","isTV","componentWillUnmount","touchableDelayTimeout","clearTimeout","longPressDelayTimeout","pressOutDelayTimeout","touchableGetInitialState","touchable","touchState","undefined","responderID","touchableHandleResponderTerminationRequest","props","rejectResponderTermination","touchableHandleStartShouldSetResponder","disabled","touchableLongPressCancelsPress","touchableHandleResponderGrant","dispatchID","currentTarget","persist","state","_receiveSignal","delayMS","touchableGetHighlightDelayMS","Math","max","isNaN","setTimeout","_handleDelay","bind","longDelayMS","touchableGetLongPressDelayMS","_handleLongDelay","touchableHandleResponderRelease","pressInLocation","touchableHandleResponderTerminate","touchableHandleResponderMove","positionOnActivate","dimensionsOnActivate","pressRectOffset","touchableGetPressRectOffset","left","right","top","bottom","pressExpandLeft","pressExpandTop","pressExpandRight","pressExpandBottom","hitSlop","touchableGetHitSlop","touch","pageX","pageY","movedDistance","_getDistanceBetweenPoints","_cancelLongPressDelayTimeout","isTouchWithinActive","width","height","prevState","curState","touchableHandleFocus","onFocus","touchableHandleBlur","onBlur","_remeasureMetricsOnActivation","UIManager","measure","_handleQueryLayout","l","w","h","globalX","globalY","Position","release","BoundingDimensions","getPooled","signal","nextState","Error","_performSideEffectsForTransition","_isHighlight","_savePressInLocation","locationX","locationY","aX","aY","bX","bY","deltaX","deltaY","sqrt","curIsHighlight","newIsHighlight","isFinalSignal","isInitialTransition","isActiveTransition","touchableHandleLongPress","_startHighlight","_endHighlight","hasLongPressHandler","onLongPress","pressIsLongButStillCallOnPress","shouldInvokePress","touchableHandlePress","OS","touchSoundDisabled","SoundManager","playTouchSound","touchableHandleActivePressIn","_this","touchableHandleActivePressOut","touchableGetPressOutDelayMS","withoutDefaultFocusAndBlur","TouchableMixinWithoutDefaultFocusAndBlur","_objectWithoutProperties2","Touchable","Mixin","renderDebugView","_ref","color","__DEV__","jsx","PressabilityDebugView","_default","exports"],"sources":["Touchable.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport type {EdgeInsetsProp} from '../../StyleSheet/EdgeInsetsPropType';\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\nimport type {PressEvent} from '../../Types/CoreEventTypes';\n\nimport {PressabilityDebugView} from '../../Pressability/PressabilityDebug';\nimport UIManager from '../../ReactNative/UIManager';\nimport Platform from '../../Utilities/Platform';\nimport SoundManager from '../Sound/SoundManager';\nimport BoundingDimensions from './BoundingDimensions';\nimport Position from './Position';\nimport * as React from 'react';\n\nconst extractSingleTouch = (nativeEvent: {\n  +changedTouches: $ReadOnlyArray<PressEvent['nativeEvent']>,\n  +force?: number,\n  +identifier: number,\n  +locationX: number,\n  +locationY: number,\n  +pageX: number,\n  +pageY: number,\n  +target: ?number,\n  +timestamp: number,\n  +touches: $ReadOnlyArray<PressEvent['nativeEvent']>,\n}) => {\n  const touches = nativeEvent.touches;\n  const changedTouches = nativeEvent.changedTouches;\n  const hasTouches = touches && touches.length > 0;\n  const hasChangedTouches = changedTouches && changedTouches.length > 0;\n\n  return !hasTouches && hasChangedTouches\n    ? changedTouches[0]\n    : hasTouches\n    ? touches[0]\n    : nativeEvent;\n};\n\n/**\n * `Touchable`: Taps done right.\n *\n * You hook your `ResponderEventPlugin` events into `Touchable`. `Touchable`\n * will measure time/geometry and tells you when to give feedback to the user.\n *\n * ====================== Touchable Tutorial ===============================\n * The `Touchable` mixin helps you handle the \"press\" interaction. It analyzes\n * the geometry of elements, and observes when another responder (scroll view\n * etc) has stolen the touch lock. It notifies your component when it should\n * give feedback to the user. (bouncing/highlighting/unhighlighting).\n *\n * - When a touch was activated (typically you highlight)\n * - When a touch was deactivated (typically you unhighlight)\n * - When a touch was \"pressed\" - a touch ended while still within the geometry\n *   of the element, and no other element (like scroller) has \"stolen\" touch\n *   lock (\"responder\") (Typically you bounce the element).\n *\n * A good tap interaction isn't as simple as you might think. There should be a\n * slight delay before showing a highlight when starting a touch. If a\n * subsequent touch move exceeds the boundary of the element, it should\n * unhighlight, but if that same touch is brought back within the boundary, it\n * should rehighlight again. A touch can move in and out of that boundary\n * several times, each time toggling highlighting, but a \"press\" is only\n * triggered if that touch ends while within the element's boundary and no\n * scroller (or anything else) has stolen the lock on touches.\n *\n * To create a new type of component that handles interaction using the\n * `Touchable` mixin, do the following:\n *\n * - Initialize the `Touchable` state.\n *\n *   getInitialState: function() {\n *     return merge(this.touchableGetInitialState(), yourComponentState);\n *   }\n *\n * - Choose the rendered component who's touches should start the interactive\n *   sequence. On that rendered node, forward all `Touchable` responder\n *   handlers. You can choose any rendered node you like. Choose a node whose\n *   hit target you'd like to instigate the interaction sequence:\n *\n *   // In render function:\n *   return (\n *     <View\n *       onStartShouldSetResponder={this.touchableHandleStartShouldSetResponder}\n *       onResponderTerminationRequest={this.touchableHandleResponderTerminationRequest}\n *       onResponderGrant={this.touchableHandleResponderGrant}\n *       onResponderMove={this.touchableHandleResponderMove}\n *       onResponderRelease={this.touchableHandleResponderRelease}\n *       onResponderTerminate={this.touchableHandleResponderTerminate}>\n *       <View>\n *         Even though the hit detection/interactions are triggered by the\n *         wrapping (typically larger) node, we usually end up implementing\n *         custom logic that highlights this inner one.\n *       </View>\n *     </View>\n *   );\n *\n * - You may set up your own handlers for each of these events, so long as you\n *   also invoke the `touchable*` handlers inside of your custom handler.\n *\n * - Implement the handlers on your component class in order to provide\n *   feedback to the user. See documentation for each of these class methods\n *   that you should implement.\n *\n *   touchableHandlePress: function() {\n *      this.performBounceAnimation();  // or whatever you want to do.\n *   },\n *   touchableHandleActivePressIn: function() {\n *     this.beginHighlighting(...);  // Whatever you like to convey activation\n *   },\n *   touchableHandleActivePressOut: function() {\n *     this.endHighlighting(...);  // Whatever you like to convey deactivation\n *   },\n *\n * - There are more advanced methods you can implement (see documentation below):\n *   touchableGetHighlightDelayMS: function() {\n *     return 20;\n *   }\n *   // In practice, *always* use a predeclared constant (conserve memory).\n *   touchableGetPressRectOffset: function() {\n *     return {top: 20, left: 20, right: 20, bottom: 100};\n *   }\n */\n\n/**\n * Touchable states.\n */\n\nconst States = {\n  NOT_RESPONDER: 'NOT_RESPONDER', // Not the responder\n  RESPONDER_INACTIVE_PRESS_IN: 'RESPONDER_INACTIVE_PRESS_IN', // Responder, inactive, in the `PressRect`\n  RESPONDER_INACTIVE_PRESS_OUT: 'RESPONDER_INACTIVE_PRESS_OUT', // Responder, inactive, out of `PressRect`\n  RESPONDER_ACTIVE_PRESS_IN: 'RESPONDER_ACTIVE_PRESS_IN', // Responder, active, in the `PressRect`\n  RESPONDER_ACTIVE_PRESS_OUT: 'RESPONDER_ACTIVE_PRESS_OUT', // Responder, active, out of `PressRect`\n  RESPONDER_ACTIVE_LONG_PRESS_IN: 'RESPONDER_ACTIVE_LONG_PRESS_IN', // Responder, active, in the `PressRect`, after long press threshold\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT', // Responder, active, out of `PressRect`, after long press threshold\n  ERROR: 'ERROR',\n};\n\ntype State =\n  | typeof States.NOT_RESPONDER\n  | typeof States.RESPONDER_INACTIVE_PRESS_IN\n  | typeof States.RESPONDER_INACTIVE_PRESS_OUT\n  | typeof States.RESPONDER_ACTIVE_PRESS_IN\n  | typeof States.RESPONDER_ACTIVE_PRESS_OUT\n  | typeof States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  | typeof States.RESPONDER_ACTIVE_LONG_PRESS_OUT\n  | typeof States.ERROR;\n\n/*\n * Quick lookup map for states that are considered to be \"active\"\n */\n\nconst baseStatesConditions = {\n  NOT_RESPONDER: false,\n  RESPONDER_INACTIVE_PRESS_IN: false,\n  RESPONDER_INACTIVE_PRESS_OUT: false,\n  RESPONDER_ACTIVE_PRESS_IN: false,\n  RESPONDER_ACTIVE_PRESS_OUT: false,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: false,\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: false,\n  ERROR: false,\n};\n\nconst IsActive = {\n  ...baseStatesConditions,\n  RESPONDER_ACTIVE_PRESS_OUT: true,\n  RESPONDER_ACTIVE_PRESS_IN: true,\n};\n\n/**\n * Quick lookup for states that are considered to be \"pressing\" and are\n * therefore eligible to result in a \"selection\" if the press stops.\n */\nconst IsPressingIn = {\n  ...baseStatesConditions,\n  RESPONDER_INACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true,\n};\n\nconst IsLongPressingIn = {\n  ...baseStatesConditions,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true,\n};\n\n/**\n * Inputs to the state machine.\n */\nconst Signals = {\n  DELAY: 'DELAY',\n  RESPONDER_GRANT: 'RESPONDER_GRANT',\n  RESPONDER_RELEASE: 'RESPONDER_RELEASE',\n  RESPONDER_TERMINATED: 'RESPONDER_TERMINATED',\n  ENTER_PRESS_RECT: 'ENTER_PRESS_RECT',\n  LEAVE_PRESS_RECT: 'LEAVE_PRESS_RECT',\n  LONG_PRESS_DETECTED: 'LONG_PRESS_DETECTED',\n};\n\ntype Signal =\n  | typeof Signals.DELAY\n  | typeof Signals.RESPONDER_GRANT\n  | typeof Signals.RESPONDER_RELEASE\n  | typeof Signals.RESPONDER_TERMINATED\n  | typeof Signals.ENTER_PRESS_RECT\n  | typeof Signals.LEAVE_PRESS_RECT\n  | typeof Signals.LONG_PRESS_DETECTED;\n\n/**\n * Mapping from States x Signals => States\n */\nconst Transitions = {\n  NOT_RESPONDER: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.ERROR,\n    RESPONDER_TERMINATED: States.ERROR,\n    ENTER_PRESS_RECT: States.ERROR,\n    LEAVE_PRESS_RECT: States.ERROR,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_INACTIVE_PRESS_IN: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_IN,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_INACTIVE_PRESS_OUT: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_ACTIVE_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n  },\n  RESPONDER_ACTIVE_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  error: {\n    DELAY: States.NOT_RESPONDER,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.NOT_RESPONDER,\n    LEAVE_PRESS_RECT: States.NOT_RESPONDER,\n    LONG_PRESS_DETECTED: States.NOT_RESPONDER,\n  },\n};\n\n// ==== Typical Constants for integrating into UI components ====\n// var HIT_EXPAND_PX = 20;\n// var HIT_VERT_OFFSET_PX = 10;\nconst HIGHLIGHT_DELAY_MS = 130;\n\nconst PRESS_EXPAND_PX = 20;\n\nconst LONG_PRESS_THRESHOLD = 500;\n\nconst LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;\n\nconst LONG_PRESS_ALLOWED_MOVEMENT = 10;\n\n// Default amount \"active\" region protrudes beyond box\n\n/**\n * By convention, methods prefixed with underscores are meant to be @private,\n * and not @protected. Mixers shouldn't access them - not even to provide them\n * as callback handlers.\n *\n *\n * ========== Geometry =========\n * `Touchable` only assumes that there exists a `HitRect` node. The `PressRect`\n * is an abstract box that is extended beyond the `HitRect`.\n *\n *  +--------------------------+\n *  |                          | - \"Start\" events in `HitRect` cause `HitRect`\n *  |  +--------------------+  |   to become the responder.\n *  |  |  +--------------+  |  | - `HitRect` is typically expanded around\n *  |  |  |              |  |  |   the `VisualRect`, but shifted downward.\n *  |  |  |  VisualRect  |  |  | - After pressing down, after some delay,\n *  |  |  |              |  |  |   and before letting up, the Visual React\n *  |  |  +--------------+  |  |   will become \"active\". This makes it eligible\n *  |  |     HitRect        |  |   for being highlighted (so long as the\n *  |  +--------------------+  |   press remains in the `PressRect`).\n *  |        PressRect     o   |\n *  +----------------------|---+\n *           Out Region    |\n *                         +-----+ This gap between the `HitRect` and\n *                                 `PressRect` allows a touch to move far away\n *                                 from the original hit rect, and remain\n *                                 highlighted, and eligible for a \"Press\".\n *                                 Customize this via\n *                                 `touchableGetPressRectOffset()`.\n *\n *\n *\n * ======= State Machine =======\n *\n * +-------------+ <---+ RESPONDER_RELEASE\n * |NOT_RESPONDER|\n * +-------------+ <---+ RESPONDER_TERMINATED\n *     +\n *     | RESPONDER_GRANT (HitRect)\n *     v\n * +---------------------------+  DELAY   +-------------------------+  T + DELAY     +------------------------------+\n * |RESPONDER_INACTIVE_PRESS_IN|+-------->|RESPONDER_ACTIVE_PRESS_IN| +------------> |RESPONDER_ACTIVE_LONG_PRESS_IN|\n * +---------------------------+          +-------------------------+                +------------------------------+\n *     +            ^                         +           ^                                 +           ^\n *     |LEAVE_      |ENTER_                   |LEAVE_     |ENTER_                           |LEAVE_     |ENTER_\n *     |PRESS_RECT  |PRESS_RECT               |PRESS_RECT |PRESS_RECT                       |PRESS_RECT |PRESS_RECT\n *     |            |                         |           |                                 |           |\n *     v            +                         v           +                                 v           +\n * +----------------------------+  DELAY  +--------------------------+               +-------------------------------+\n * |RESPONDER_INACTIVE_PRESS_OUT|+------->|RESPONDER_ACTIVE_PRESS_OUT|               |RESPONDER_ACTIVE_LONG_PRESS_OUT|\n * +----------------------------+         +--------------------------+               +-------------------------------+\n *\n * T + DELAY => LONG_PRESS_DELAY_MS + DELAY\n *\n * Not drawn are the side effects of each transition. The most important side\n * effect is the `touchableHandlePress` abstract method invocation that occurs\n * when a responder is released while in either of the \"Press\" states.\n *\n * The other important side effects are the highlight abstract method\n * invocations (internal callbacks) to be implemented by the mixer.\n *\n *\n * @lends Touchable.prototype\n */\nconst TouchableMixin = {\n  componentDidMount: function () {\n    if (!Platform.isTV) {\n      return;\n    }\n  },\n\n  /**\n   * Clear all timeouts on unmount\n   */\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  componentWillUnmount: function () {\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n  },\n\n  /**\n   * It's prefer that mixins determine state in this way, having the class\n   * explicitly mix the state in the one and only `getInitialState` method.\n   *\n   * @return {object} State object to be placed inside of\n   * `this.state.touchable`.\n   */\n  touchableGetInitialState: function (): {\n    touchable: {\n      touchState: ?State,\n      responderID: ?PressEvent['currentTarget'],\n    },\n  } {\n    return {\n      touchable: {touchState: undefined, responderID: null},\n    };\n  },\n\n  // ==== Hooks to Gesture Responder system ====\n  /**\n   * Must return true if embedded in a native platform scroll view.\n   */\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  touchableHandleResponderTerminationRequest: function (): any {\n    return !this.props.rejectResponderTermination;\n  },\n\n  /**\n   * Must return true to start the process of `Touchable`.\n   */\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  touchableHandleStartShouldSetResponder: function (): any {\n    return !this.props.disabled;\n  },\n\n  /**\n   * Return true to cancel press on long press.\n   */\n  touchableLongPressCancelsPress: function (): boolean {\n    return true;\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderGrant` event.\n   * @param {SyntheticEvent} e Synthetic event from event system.\n   *\n   */\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  touchableHandleResponderGrant: function (e: PressEvent) {\n    const dispatchID = e.currentTarget;\n    // Since e is used in a callback invoked on another event loop\n    // (as in setTimeout etc), we need to call e.persist() on the\n    // event to make sure it doesn't get reused in the event object pool.\n    e.persist();\n\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n    this.pressOutDelayTimeout = null;\n\n    this.state.touchable.touchState = States.NOT_RESPONDER;\n    this.state.touchable.responderID = dispatchID;\n    this._receiveSignal(Signals.RESPONDER_GRANT, e);\n    let delayMS =\n      this.touchableGetHighlightDelayMS !== undefined\n        ? Math.max(this.touchableGetHighlightDelayMS(), 0)\n        : HIGHLIGHT_DELAY_MS;\n    delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;\n    if (delayMS !== 0) {\n      this.touchableDelayTimeout = setTimeout(\n        this._handleDelay.bind(this, e),\n        delayMS,\n      );\n    } else {\n      this._handleDelay(e);\n    }\n\n    let longDelayMS =\n      this.touchableGetLongPressDelayMS !== undefined\n        ? Math.max(this.touchableGetLongPressDelayMS(), 10)\n        : LONG_PRESS_DELAY_MS;\n    longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;\n    this.longPressDelayTimeout = setTimeout(\n      this._handleLongDelay.bind(this, e),\n      longDelayMS + delayMS,\n    );\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderRelease` event.\n   */\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  touchableHandleResponderRelease: function (e: PressEvent) {\n    this.pressInLocation = null;\n    this._receiveSignal(Signals.RESPONDER_RELEASE, e);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderTerminate` event.\n   */\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  touchableHandleResponderTerminate: function (e: PressEvent) {\n    this.pressInLocation = null;\n    this._receiveSignal(Signals.RESPONDER_TERMINATED, e);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderMove` event.\n   */\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  touchableHandleResponderMove: function (e: PressEvent) {\n    // Measurement may not have returned yet.\n    if (!this.state.touchable.positionOnActivate) {\n      return;\n    }\n\n    const positionOnActivate = this.state.touchable.positionOnActivate;\n    const dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;\n    const pressRectOffset = this.touchableGetPressRectOffset\n      ? this.touchableGetPressRectOffset()\n      : {\n          left: PRESS_EXPAND_PX,\n          right: PRESS_EXPAND_PX,\n          top: PRESS_EXPAND_PX,\n          bottom: PRESS_EXPAND_PX,\n        };\n\n    let pressExpandLeft = pressRectOffset.left;\n    let pressExpandTop = pressRectOffset.top;\n    let pressExpandRight = pressRectOffset.right;\n    let pressExpandBottom = pressRectOffset.bottom;\n\n    const hitSlop = this.touchableGetHitSlop\n      ? this.touchableGetHitSlop()\n      : null;\n\n    if (hitSlop) {\n      pressExpandLeft += hitSlop.left || 0;\n      pressExpandTop += hitSlop.top || 0;\n      pressExpandRight += hitSlop.right || 0;\n      pressExpandBottom += hitSlop.bottom || 0;\n    }\n\n    const touch = extractSingleTouch(e.nativeEvent);\n    const pageX = touch && touch.pageX;\n    const pageY = touch && touch.pageY;\n\n    if (this.pressInLocation) {\n      const movedDistance = this._getDistanceBetweenPoints(\n        pageX,\n        pageY,\n        this.pressInLocation.pageX,\n        this.pressInLocation.pageY,\n      );\n      if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {\n        this._cancelLongPressDelayTimeout();\n      }\n    }\n\n    const isTouchWithinActive =\n      pageX > positionOnActivate.left - pressExpandLeft &&\n      pageY > positionOnActivate.top - pressExpandTop &&\n      pageX <\n        positionOnActivate.left +\n          dimensionsOnActivate.width +\n          pressExpandRight &&\n      pageY <\n        positionOnActivate.top +\n          dimensionsOnActivate.height +\n          pressExpandBottom;\n    if (isTouchWithinActive) {\n      const prevState = this.state.touchable.touchState;\n      this._receiveSignal(Signals.ENTER_PRESS_RECT, e);\n      const curState = this.state.touchable.touchState;\n      if (\n        curState === States.RESPONDER_INACTIVE_PRESS_IN &&\n        prevState !== States.RESPONDER_INACTIVE_PRESS_IN\n      ) {\n        // fix for t7967420\n        this._cancelLongPressDelayTimeout();\n      }\n    } else {\n      this._cancelLongPressDelayTimeout();\n      this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);\n    }\n  },\n\n  /**\n   * Invoked when the item receives focus. Mixers might override this to\n   * visually distinguish the `VisualRect` so that the user knows that it\n   * currently has the focus. Most platforms only support a single element being\n   * focused at a time, in which case there may have been a previously focused\n   * element that was blurred just prior to this. This can be overridden when\n   * using `Touchable.Mixin.withoutDefaultFocusAndBlur`.\n   */\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  touchableHandleFocus: function (e: Event) {\n    this.props.onFocus && this.props.onFocus(e);\n  },\n\n  /**\n   * Invoked when the item loses focus. Mixers might override this to\n   * visually distinguish the `VisualRect` so that the user knows that it\n   * no longer has focus. Most platforms only support a single element being\n   * focused at a time, in which case the focus may have moved to another.\n   * This can be overridden when using\n   * `Touchable.Mixin.withoutDefaultFocusAndBlur`.\n   */\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  touchableHandleBlur: function (e: Event) {\n    this.props.onBlur && this.props.onBlur(e);\n  },\n\n  // ==== Abstract Application Callbacks ====\n\n  /**\n   * Invoked when the item should be highlighted. Mixers should implement this\n   * to visually distinguish the `VisualRect` so that the user knows that\n   * releasing a touch will result in a \"selection\" (analog to click).\n   *\n   * @abstract\n   * touchableHandleActivePressIn: function,\n   */\n\n  /**\n   * Invoked when the item is \"active\" (in that it is still eligible to become\n   * a \"select\") but the touch has left the `PressRect`. Usually the mixer will\n   * want to unhighlight the `VisualRect`. If the user (while pressing) moves\n   * back into the `PressRect` `touchableHandleActivePressIn` will be invoked\n   * again and the mixer should probably highlight the `VisualRect` again. This\n   * event will not fire on an `touchEnd/mouseUp` event, only move events while\n   * the user is depressing the mouse/touch.\n   *\n   * @abstract\n   * touchableHandleActivePressOut: function\n   */\n\n  /**\n   * Invoked when the item is \"selected\" - meaning the interaction ended by\n   * letting up while the item was either in the state\n   * `RESPONDER_ACTIVE_PRESS_IN` or `RESPONDER_INACTIVE_PRESS_IN`.\n   *\n   * @abstract\n   * touchableHandlePress: function\n   */\n\n  /**\n   * Invoked when the item is long pressed - meaning the interaction ended by\n   * letting up while the item was in `RESPONDER_ACTIVE_LONG_PRESS_IN`. If\n   * `touchableHandleLongPress` is *not* provided, `touchableHandlePress` will\n   * be called as it normally is. If `touchableHandleLongPress` is provided, by\n   * default any `touchableHandlePress` callback will not be invoked. To\n   * override this default behavior, override `touchableLongPressCancelsPress`\n   * to return false. As a result, `touchableHandlePress` will be called when\n   * lifting up, even if `touchableHandleLongPress` has also been called.\n   *\n   * @abstract\n   * touchableHandleLongPress: function\n   */\n\n  /**\n   * Returns the number of millis to wait before triggering a highlight.\n   *\n   * @abstract\n   * touchableGetHighlightDelayMS: function\n   */\n\n  /**\n   * Returns the amount to extend the `HitRect` into the `PressRect`. Positive\n   * numbers mean the size expands outwards.\n   *\n   * @abstract\n   * touchableGetPressRectOffset: function\n   */\n\n  // ==== Internal Logic ====\n\n  /**\n   * Measures the `HitRect` node on activation. The Bounding rectangle is with\n   * respect to viewport - not page, so adding the `pageXOffset/pageYOffset`\n   * should result in points that are in the same coordinate system as an\n   * event's `globalX/globalY` data values.\n   *\n   * - Consider caching this for the lifetime of the component, or possibly\n   *   being able to share this cache between any `ScrollMap` view.\n   *\n   * @sideeffects\n   * @private\n   */\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  _remeasureMetricsOnActivation: function () {\n    const responderID = this.state.touchable.responderID;\n    if (responderID == null) {\n      return;\n    }\n\n    if (typeof responderID === 'number') {\n      UIManager.measure(responderID, this._handleQueryLayout);\n    } else {\n      responderID.measure(this._handleQueryLayout);\n    }\n  },\n\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  _handleQueryLayout: function (\n    l: number,\n    t: number,\n    w: number,\n    h: number,\n    globalX: number,\n    globalY: number,\n  ) {\n    //don't do anything UIManager failed to measure node\n    if (!l && !t && !w && !h && !globalX && !globalY) {\n      return;\n    }\n    this.state.touchable.positionOnActivate &&\n      Position.release(this.state.touchable.positionOnActivate);\n    this.state.touchable.dimensionsOnActivate &&\n      BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);\n    this.state.touchable.positionOnActivate = Position.getPooled(\n      globalX,\n      globalY,\n    );\n    this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(\n      w,\n      h,\n    );\n  },\n\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  _handleDelay: function (e: PressEvent) {\n    this.touchableDelayTimeout = null;\n    this._receiveSignal(Signals.DELAY, e);\n  },\n\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  _handleLongDelay: function (e: PressEvent) {\n    this.longPressDelayTimeout = null;\n    const curState = this.state.touchable.touchState;\n    if (\n      curState === States.RESPONDER_ACTIVE_PRESS_IN ||\n      curState === States.RESPONDER_ACTIVE_LONG_PRESS_IN\n    ) {\n      this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);\n    }\n  },\n\n  /**\n   * Receives a state machine signal, performs side effects of the transition\n   * and stores the new state. Validates the transition as well.\n   *\n   * @param {Signals} signal State machine signal.\n   * @throws Error if invalid state transition or unrecognized signal.\n   * @sideeffects\n   */\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  _receiveSignal: function (signal: Signal, e: PressEvent) {\n    const responderID = this.state.touchable.responderID;\n    const curState = this.state.touchable.touchState;\n    const nextState = Transitions[curState] && Transitions[curState][signal];\n    if (!responderID && signal === Signals.RESPONDER_RELEASE) {\n      return;\n    }\n    if (!nextState) {\n      throw new Error(\n        'Unrecognized signal `' +\n          signal +\n          '` or state `' +\n          curState +\n          '` for Touchable responder `' +\n          typeof this.state.touchable.responderID ===\n        'number'\n          ? this.state.touchable.responderID\n          : 'host component' + '`',\n      );\n    }\n    if (nextState === States.ERROR) {\n      throw new Error(\n        'Touchable cannot transition from `' +\n          curState +\n          '` to `' +\n          signal +\n          '` for responder `' +\n          typeof this.state.touchable.responderID ===\n        'number'\n          ? this.state.touchable.responderID\n          : '<<host component>>' + '`',\n      );\n    }\n    if (curState !== nextState) {\n      this._performSideEffectsForTransition(curState, nextState, signal, e);\n      this.state.touchable.touchState = nextState;\n    }\n  },\n\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  _cancelLongPressDelayTimeout: function () {\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.longPressDelayTimeout = null;\n  },\n\n  _isHighlight: function (state: State): boolean {\n    return (\n      state === States.RESPONDER_ACTIVE_PRESS_IN ||\n      state === States.RESPONDER_ACTIVE_LONG_PRESS_IN\n    );\n  },\n\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  _savePressInLocation: function (e: PressEvent) {\n    const touch = extractSingleTouch(e.nativeEvent);\n    const pageX = touch && touch.pageX;\n    const pageY = touch && touch.pageY;\n    const locationX = touch && touch.locationX;\n    const locationY = touch && touch.locationY;\n    this.pressInLocation = {pageX, pageY, locationX, locationY};\n  },\n\n  _getDistanceBetweenPoints: function (\n    aX: number,\n    aY: number,\n    bX: number,\n    bY: number,\n  ): number {\n    const deltaX = aX - bX;\n    const deltaY = aY - bY;\n    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n  },\n\n  /**\n   * Will perform a transition between touchable states, and identify any\n   * highlighting or unhighlighting that must be performed for this particular\n   * transition.\n   *\n   * @param {States} curState Current Touchable state.\n   * @param {States} nextState Next Touchable state.\n   * @param {Signal} signal Signal that triggered the transition.\n   * @param {Event} e Native event.\n   * @sideeffects\n   */\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  _performSideEffectsForTransition: function (\n    curState: State,\n    nextState: State,\n    signal: Signal,\n    e: PressEvent,\n  ) {\n    const curIsHighlight = this._isHighlight(curState);\n    const newIsHighlight = this._isHighlight(nextState);\n\n    const isFinalSignal =\n      signal === Signals.RESPONDER_TERMINATED ||\n      signal === Signals.RESPONDER_RELEASE;\n\n    if (isFinalSignal) {\n      this._cancelLongPressDelayTimeout();\n    }\n\n    const isInitialTransition =\n      curState === States.NOT_RESPONDER &&\n      nextState === States.RESPONDER_INACTIVE_PRESS_IN;\n\n    const isActiveTransition = !IsActive[curState] && IsActive[nextState];\n    if (isInitialTransition || isActiveTransition) {\n      this._remeasureMetricsOnActivation();\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {\n      this.touchableHandleLongPress && this.touchableHandleLongPress(e);\n    }\n\n    if (newIsHighlight && !curIsHighlight) {\n      this._startHighlight(e);\n    } else if (!newIsHighlight && curIsHighlight) {\n      this._endHighlight(e);\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {\n      const hasLongPressHandler = !!this.props.onLongPress;\n      const pressIsLongButStillCallOnPress =\n        IsLongPressingIn[curState] && // We *are* long pressing.. // But either has no long handler\n        (!hasLongPressHandler || !this.touchableLongPressCancelsPress()); // or we're told to ignore it.\n\n      const shouldInvokePress =\n        !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;\n      if (shouldInvokePress && this.touchableHandlePress) {\n        if (!newIsHighlight && !curIsHighlight) {\n          // we never highlighted because of delay, but we should highlight now\n          this._startHighlight(e);\n          this._endHighlight(e);\n        }\n        if (Platform.OS === 'android' && !this.props.touchSoundDisabled) {\n          SoundManager.playTouchSound();\n        }\n        this.touchableHandlePress(e);\n      }\n    }\n\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.touchableDelayTimeout = null;\n  },\n\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  _startHighlight: function (e: PressEvent) {\n    this._savePressInLocation(e);\n    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);\n  },\n\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  _endHighlight: function (e: PressEvent) {\n    if (this.touchableHandleActivePressOut) {\n      if (\n        this.touchableGetPressOutDelayMS &&\n        this.touchableGetPressOutDelayMS()\n      ) {\n        this.pressOutDelayTimeout = setTimeout(() => {\n          this.touchableHandleActivePressOut(e);\n        }, this.touchableGetPressOutDelayMS());\n      } else {\n        this.touchableHandleActivePressOut(e);\n      }\n    }\n  },\n\n  withoutDefaultFocusAndBlur: ({}: {...}),\n};\n\n/**\n * Provide an optional version of the mixin where `touchableHandleFocus` and\n * `touchableHandleBlur` can be overridden. This allows appropriate defaults to\n * be set on TV platforms, without breaking existing implementations of\n * `Touchable`.\n */\nconst {\n  touchableHandleFocus,\n  touchableHandleBlur,\n  ...TouchableMixinWithoutDefaultFocusAndBlur\n} = TouchableMixin;\nTouchableMixin.withoutDefaultFocusAndBlur =\n  TouchableMixinWithoutDefaultFocusAndBlur;\n\nconst Touchable = {\n  Mixin: TouchableMixin,\n  /**\n   * Renders a debugging overlay to visualize touch target with hitSlop (might not work on Android).\n   */\n  renderDebugView: ({\n    color,\n    hitSlop,\n  }: {\n    color: ColorValue,\n    hitSlop: EdgeInsetsProp,\n    ...\n  }): null | React.Node => {\n    if (__DEV__) {\n      return <PressabilityDebugView color={color} hitSlop={hitSlop} />;\n    }\n    return null;\n  },\n};\n\nexport default Touchable;\n"],"mappings":"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","ignoreList":[]}