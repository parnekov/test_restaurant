dfc64e835863ebe97479bd09abdf0d83
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setOrders = exports.selectRestaurantQrCodeName = exports.selectRestaurantName = exports.selectRestaurantId = exports.selectOrders = exports.selectMyOrder = exports.postOrdersThunk = exports.ordersSlice = exports.initialState = exports.getOrdersThunk = exports.default = exports.checkUncheckMyOrderItems = exports.checkUncheckAllOrderItemsByOrdersItem = exports.checkUncheckAllOrderItemsByOrder = exports.checkUncheckAllOrderItems = exports.changeAmountOrderItem = exports.changeAmountMyOrderItem = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("react-native");
var _toolkit = require("@reduxjs/toolkit");
var _orders = require("../../api/orders");
var initialState = exports.initialState = {
  order: {
    restaurantId: '',
    restaurantName: '',
    qrCodeName: '',
    myOrder: null,
    orders: null
  },
  loading: false,
  error: ''
};
var getOrdersThunk = exports.getOrdersThunk = (0, _toolkit.createAsyncThunk)('getOrdersThunk', (0, _asyncToGenerator2.default)(function* () {
  var response = yield (0, _orders.getOrders)();
  return response;
}));
var postOrdersThunk = exports.postOrdersThunk = (0, _toolkit.createAsyncThunk)('postOrdersThunk', function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (_ref2) {
    var restaurantId = _ref2.restaurantId,
      qrCodeName = _ref2.qrCodeName,
      body = _ref2.body;
    var response = yield (0, _orders.payOrders)({
      restaurantId: restaurantId,
      qrCodeName: qrCodeName,
      body: body
    });
    return response;
  });
  return function (_x) {
    return _ref3.apply(this, arguments);
  };
}());
var ordersSlice = exports.ordersSlice = (0, _toolkit.createSlice)({
  name: 'order',
  initialState: initialState,
  reducers: {
    setOrders: function setOrders(state, action) {
      state.order.orders = action.payload;
    },
    checkUncheckMyOrderItems: function checkUncheckMyOrderItems(state, action) {
      var _state$order, _state$order3;
      if (((_state$order = state.order) == null ? void 0 : _state$order.myOrder) !== null && !action.payload.itemId) {
        var _state$order2;
        var updatedMyOrderItems = (_state$order2 = state.order) == null ? void 0 : _state$order2.myOrder.orderItems.map(function (item) {
          return Object.assign({}, item, {
            checked: action.payload.checked
          });
        });
        state.order.myOrder.orderItems = updatedMyOrderItems;
      } else if (((_state$order3 = state.order) == null ? void 0 : _state$order3.myOrder) !== null && action.payload.itemId) {
        var _state$order4;
        var _updatedMyOrderItems = (_state$order4 = state.order) == null ? void 0 : _state$order4.myOrder.orderItems.map(function (item) {
          if (item.id === action.payload.itemId) {
            return Object.assign({}, item, {
              checked: action.payload.checked
            });
          } else {
            return item;
          }
        });
        state.order.myOrder.orderItems = _updatedMyOrderItems;
      }
    },
    checkUncheckAllOrderItems: function checkUncheckAllOrderItems(state, action) {
      var _state$order5;
      if (((_state$order5 = state.order) == null ? void 0 : _state$order5.orders) !== null) {
        var updatedAllOrders = state.order.orders.map(function (item) {
          return Object.assign({}, item, {
            orderItems: item.orderItems.map(function (i) {
              return Object.assign({}, i, {
                checked: action.payload.checked
              });
            })
          });
        });
        state.order.orders = updatedAllOrders;
      }
    },
    checkUncheckAllOrderItemsByOrder: function checkUncheckAllOrderItemsByOrder(state, action) {
      var _state$order6, _state$order7;
      if (((_state$order6 = state.order) == null ? void 0 : _state$order6.orders) !== null && !action.payload.itemId) {
        var updatedAllOrders = state.order.orders.map(function (item) {
          return Object.assign({}, item, {
            checked: action.payload.checked
          });
        });
        state.order.orders = updatedAllOrders;
      } else if (((_state$order7 = state.order) == null ? void 0 : _state$order7.orders) !== null && action.payload.itemId) {
        var _updatedAllOrders = state.order.orders.map(function (item) {
          if (item.id === action.payload.itemId) {
            return Object.assign({}, item, {
              orderItems: item.orderItems.map(function (i) {
                return Object.assign({}, i, {
                  checked: action.payload.checked
                });
              })
            });
          } else {
            return item;
          }
        });
        state.order.orders = _updatedAllOrders;
      }
    },
    checkUncheckAllOrderItemsByOrdersItem: function checkUncheckAllOrderItemsByOrdersItem(state, action) {
      var _state$order8, _state$order9;
      if (((_state$order8 = state.order) == null ? void 0 : _state$order8.orders) !== null && !action.payload.itemId) {
        var updatedAllOrders = state.order.orders.map(function (item) {
          return Object.assign({}, item, {
            checked: action.payload.checked
          });
        });
        state.order.orders = updatedAllOrders;
      } else if (((_state$order9 = state.order) == null ? void 0 : _state$order9.orders) !== null && action.payload.itemId) {
        var _updatedAllOrders2 = state.order.orders.map(function (item) {
          return Object.assign({}, item, {
            orderItems: item.orderItems.map(function (i) {
              if (i.id === action.payload.itemId) {
                return Object.assign({}, i, {
                  checked: action.payload.checked
                });
              } else {
                return i;
              }
            })
          });
        });
        state.order.orders = _updatedAllOrders2;
      }
    },
    changeAmountMyOrderItem: function changeAmountMyOrderItem(state, action) {
      if (state.order.myOrder !== null) {
        var updatedMyOrderItems = state.order.myOrder.orderItems.map(function (item) {
          if (item.id === action.payload.itemId) {
            return Object.assign({}, item, {
              amount: action.payload.updatedAmount
            });
          } else {
            return item;
          }
        });
        state.order.myOrder.orderItems = updatedMyOrderItems;
      }
    },
    changeAmountOrderItem: function changeAmountOrderItem(state, action) {
      var _state$order10;
      if (((_state$order10 = state.order) == null ? void 0 : _state$order10.orders) !== null) {
        var updatedAllOrders = state.order.orders.map(function (item) {
          return Object.assign({}, item, {
            orderItems: item.orderItems.map(function (i) {
              if (i.id === action.payload.itemId) {
                return Object.assign({}, i, {
                  amount: action.payload.updatedAmount
                });
              } else {
                return i;
              }
            })
          });
        });
        state.order.orders = updatedAllOrders;
      }
    }
  },
  extraReducers: function extraReducers(builder) {
    builder.addCase(getOrdersThunk.pending, function (state) {
      state.loading = true;
    }).addCase(getOrdersThunk.fulfilled, function (state, action) {
      state.loading = false;
      var payload = action.payload;
      var updatedMyOrderItems = payload.myOrder.orderItems.map(function (item) {
        return Object.assign({}, item, {
          checked: true
        });
      });
      var updatedAllOrders = payload.orders.map(function (item) {
        return Object.assign({}, item, {
          orderItems: item.orderItems.map(function (i) {
            return Object.assign({}, i, {
              checked: true
            });
          })
        });
      });
      state.order = Object.assign({}, payload, {
        myOrder: Object.assign({}, payload.myOrder, {
          orderItems: updatedMyOrderItems
        }),
        orders: updatedAllOrders
      });
    }).addCase(getOrdersThunk.rejected, function (state, action) {
      state.loading = false;
      state.error = action.error.message;
    }).addCase(postOrdersThunk.pending, function (state) {
      state.loading = true;
    }).addCase(postOrdersThunk.fulfilled, function (state) {
      state.loading = false;
      _reactNative.Alert.alert('Order Paid!');
    }).addCase(postOrdersThunk.rejected, function (state, action) {
      state.loading = false;
      _reactNative.Alert.alert('Order Paid Error!');
      state.error = action.error.message;
    });
  }
});
var _ordersSlice$actions = ordersSlice.actions,
  setOrders = exports.setOrders = _ordersSlice$actions.setOrders,
  checkUncheckMyOrderItems = exports.checkUncheckMyOrderItems = _ordersSlice$actions.checkUncheckMyOrderItems,
  checkUncheckAllOrderItems = exports.checkUncheckAllOrderItems = _ordersSlice$actions.checkUncheckAllOrderItems,
  checkUncheckAllOrderItemsByOrder = exports.checkUncheckAllOrderItemsByOrder = _ordersSlice$actions.checkUncheckAllOrderItemsByOrder,
  checkUncheckAllOrderItemsByOrdersItem = exports.checkUncheckAllOrderItemsByOrdersItem = _ordersSlice$actions.checkUncheckAllOrderItemsByOrdersItem,
  changeAmountMyOrderItem = exports.changeAmountMyOrderItem = _ordersSlice$actions.changeAmountMyOrderItem,
  changeAmountOrderItem = exports.changeAmountOrderItem = _ordersSlice$actions.changeAmountOrderItem;
var selectOrders = exports.selectOrders = function selectOrders(state) {
  return state.order.order.orders;
};
var selectMyOrder = exports.selectMyOrder = function selectMyOrder(state) {
  return state.order.order.myOrder;
};
var selectRestaurantId = exports.selectRestaurantId = function selectRestaurantId(state) {
  return state.order.order.restaurantId;
};
var selectRestaurantName = exports.selectRestaurantName = function selectRestaurantName(state) {
  return state.order.order.restaurantName;
};
var selectRestaurantQrCodeName = exports.selectRestaurantQrCodeName = function selectRestaurantQrCodeName(state) {
  return state.order.order.qrCodeName;
};
var _default = exports.default = ordersSlice.reducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,