c18536a5bbd20337c44b1ab3740f0c05
"use strict";

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var React = __importStar(require("react"));
var useIsomorphicLayoutEffect_1 = __importDefault(require("./useIsomorphicLayoutEffect"));
function useLatestCallback(callback) {
  var ref = React.useRef(callback);
  var latestCallback = React.useRef(function latestCallback() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    return ref.current.apply(this, args);
  }).current;
  (0, useIsomorphicLayoutEffect_1.default)(function () {
    ref.current = callback;
  });
  return latestCallback;
}
exports.default = useLatestCallback;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX2NyZWF0ZUJpbmRpbmciLCJPYmplY3QiLCJjcmVhdGUiLCJvIiwibSIsImsiLCJrMiIsInVuZGVmaW5lZCIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2VzTW9kdWxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZGVmaW5lUHJvcGVydHkiLCJfX3NldE1vZHVsZURlZmF1bHQiLCJ2IiwidmFsdWUiLCJfX2ltcG9ydFN0YXIiLCJtb2QiLCJyZXN1bHQiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJfX2ltcG9ydERlZmF1bHQiLCJleHBvcnRzIiwiUmVhY3QiLCJyZXF1aXJlIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdF8xIiwidXNlTGF0ZXN0Q2FsbGJhY2siLCJjYWxsYmFjayIsInJlZiIsInVzZVJlZiIsImxhdGVzdENhbGxiYWNrIiwiYXJncyIsIl9pIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiY3VycmVudCIsImFwcGx5IiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgUmVhY3QgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFwiKSk7XG4vKipcbiAqIFJlYWN0IGhvb2sgd2hpY2ggcmV0dXJucyB0aGUgbGF0ZXN0IGNhbGxiYWNrIHdpdGhvdXQgY2hhbmdpbmcgdGhlIHJlZmVyZW5jZS5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbmZ1bmN0aW9uIHVzZUxhdGVzdENhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgdmFyIHJlZiA9IFJlYWN0LnVzZVJlZihjYWxsYmFjayk7XG4gICAgdmFyIGxhdGVzdENhbGxiYWNrID0gUmVhY3QudXNlUmVmKGZ1bmN0aW9uIGxhdGVzdENhbGxiYWNrKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWYuY3VycmVudC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9KS5jdXJyZW50O1xuICAgICgwLCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0XzEuZGVmYXVsdCkoZnVuY3Rpb24gKCkge1xuICAgICAgICByZWYuY3VycmVudCA9IGNhbGxiYWNrO1xuICAgIH0pO1xuICAgIHJldHVybiBsYXRlc3RDYWxsYmFjaztcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHVzZUxhdGVzdENhbGxiYWNrO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUNaLElBQUlBLGVBQWUsR0FBSSxJQUFJLElBQUksSUFBSSxDQUFDQSxlQUFlLEtB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