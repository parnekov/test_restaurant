1f2510135e4ab5d4051b9fb70912e424
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.EmittingTestRunner = exports.CallbackTestRunner = void 0;
var BaseTestRunner = (0, _createClass2.default)(function BaseTestRunner(_globalConfig, _context) {
  (0, _classCallCheck2.default)(this, BaseTestRunner);
  this._globalConfig = _globalConfig;
  this._context = _context;
});
var CallbackTestRunner = function (_BaseTestRunner) {
  function CallbackTestRunner() {
    var _this;
    (0, _classCallCheck2.default)(this, CallbackTestRunner);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, CallbackTestRunner, [].concat(args));
    _this.supportsEventEmitters = false;
    return _this;
  }
  (0, _inherits2.default)(CallbackTestRunner, _BaseTestRunner);
  return (0, _createClass2.default)(CallbackTestRunner);
}(BaseTestRunner);
exports.CallbackTestRunner = CallbackTestRunner;
var EmittingTestRunner = function (_BaseTestRunner2) {
  function EmittingTestRunner() {
    var _this2;
    (0, _classCallCheck2.default)(this, EmittingTestRunner);
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    _this2 = _callSuper(this, EmittingTestRunner, [].concat(args));
    _this2.supportsEventEmitters = true;
    return _this2;
  }
  (0, _inherits2.default)(EmittingTestRunner, _BaseTestRunner2);
  return (0, _createClass2.default)(EmittingTestRunner);
}(BaseTestRunner);
exports.EmittingTestRunner = EmittingTestRunner;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsIl9nZXRQcm90b3R5cGVPZjIiLCJfaW5oZXJpdHMyIiwiX2NyZWF0ZUNsYXNzMiIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY2FsbFN1cGVyIiwidCIsIm8iLCJlIiwiZGVmYXVsdCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiY29uc3RydWN0b3IiLCJhcHBseSIsIkJvb2xlYW4iLCJwcm90b3R5cGUiLCJ2YWx1ZU9mIiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRW1pdHRpbmdUZXN0UnVubmVyIiwiQ2FsbGJhY2tUZXN0UnVubmVyIiwiQmFzZVRlc3RSdW5uZXIiLCJfZ2xvYmFsQ29uZmlnIiwiX2NvbnRleHQiLCJfQmFzZVRlc3RSdW5uZXIiLCJfdGhpcyIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiY29uY2F0Iiwic3VwcG9ydHNFdmVudEVtaXR0ZXJzIiwiX0Jhc2VUZXN0UnVubmVyMiIsIl90aGlzMiIsIl9sZW4yIiwiX2tleTIiXSwic291cmNlcyI6WyJ0eXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5FbWl0dGluZ1Rlc3RSdW5uZXIgPSBleHBvcnRzLkNhbGxiYWNrVGVzdFJ1bm5lciA9IHZvaWQgMDtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5jbGFzcyBCYXNlVGVzdFJ1bm5lciB7XG4gIGlzU2VyaWFsO1xuICBjb25zdHJ1Y3RvcihfZ2xvYmFsQ29uZmlnLCBfY29udGV4dCkge1xuICAgIHRoaXMuX2dsb2JhbENvbmZpZyA9IF9nbG9iYWxDb25maWc7XG4gICAgdGhpcy5fY29udGV4dCA9IF9jb250ZXh0O1xuICB9XG59XG5jbGFzcyBDYWxsYmFja1Rlc3RSdW5uZXIgZXh0ZW5kcyBCYXNlVGVzdFJ1bm5lciB7XG4gIHN1cHBvcnRzRXZlbnRFbWl0dGVycyA9IGZhbHNlO1xufVxuZXhwb3J0cy5DYWxsYmFja1Rlc3RSdW5uZXIgPSBDYWxsYmFja1Rlc3RSdW5uZXI7XG5jbGFzcyBFbWl0dGluZ1Rlc3RSdW5uZXIgZXh0ZW5kcyBCYXNlVGVzdFJ1bm5lciB7XG4gIHN1cHBvcnRzRXZlbnRFbWl0dGVycyA9IHRydWU7XG59XG5leHBvcnRzLkVtaXR0aW5nVGVzdFJ1bm5lciA9IEVtaXR0aW5nVGVzdFJ1bm5lcjtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFBQyxJQUFBQSxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsMkJBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFFLGdCQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBRyxVQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBSSxhQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBSyxnQkFBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsU0FBQU0sV0FBQUMsQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsV0FBQUQsQ0FBQSxPQUFBTixnQkFBQSxDQUFBUSxPQUFBLEVBQUFGLENBQUEsT0FBQVAsMkJBQUEsQ0FBQVMsT0FBQSxFQUFBSCxDQUFBLEVBQUFJLHlCQUFBLEtB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