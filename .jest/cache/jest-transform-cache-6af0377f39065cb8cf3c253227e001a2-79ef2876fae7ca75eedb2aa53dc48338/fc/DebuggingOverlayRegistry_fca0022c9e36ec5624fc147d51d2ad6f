c71bcc16a0abaf73a53e8955ccbcdb51
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseBase"));
var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseKey"));
var _RendererProxy = require("../ReactNative/RendererProxy");
var _processColor = _interopRequireDefault(require("../StyleSheet/processColor"));
var reactDevToolsHook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
var _registry = (0, _classPrivateFieldLooseKey2.default)("registry");
var _reactDevToolsAgent = (0, _classPrivateFieldLooseKey2.default)("reactDevToolsAgent");
var _onReactDevToolsAgentAttached = (0, _classPrivateFieldLooseKey2.default)("onReactDevToolsAgentAttached");
var _getPublicInstanceFromInstance = (0, _classPrivateFieldLooseKey2.default)("getPublicInstanceFromInstance");
var _findLowestParentFromRegistryForInstance = (0, _classPrivateFieldLooseKey2.default)("findLowestParentFromRegistryForInstance");
var _findLowestParentFromRegistryForInstanceLegacy = (0, _classPrivateFieldLooseKey2.default)("findLowestParentFromRegistryForInstanceLegacy");
var _onDrawTraceUpdates = (0, _classPrivateFieldLooseKey2.default)("onDrawTraceUpdates");
var _drawTraceUpdatesModern = (0, _classPrivateFieldLooseKey2.default)("drawTraceUpdatesModern");
var _drawTraceUpdatesLegacy = (0, _classPrivateFieldLooseKey2.default)("drawTraceUpdatesLegacy");
var _onHighlightElements = (0, _classPrivateFieldLooseKey2.default)("onHighlightElements");
var _onHighlightElementsModern = (0, _classPrivateFieldLooseKey2.default)("onHighlightElementsModern");
var _onHighlightElementsLegacy = (0, _classPrivateFieldLooseKey2.default)("onHighlightElementsLegacy");
var _onClearElementsHighlights = (0, _classPrivateFieldLooseKey2.default)("onClearElementsHighlights");
var DebuggingOverlayRegistry = function () {
  function DebuggingOverlayRegistry() {
    var _this = this;
    (0, _classCallCheck2.default)(this, DebuggingOverlayRegistry);
    Object.defineProperty(this, _onHighlightElementsLegacy, {
      value: _onHighlightElementsLegacy2
    });
    Object.defineProperty(this, _onHighlightElementsModern, {
      value: _onHighlightElementsModern2
    });
    Object.defineProperty(this, _drawTraceUpdatesLegacy, {
      value: _drawTraceUpdatesLegacy2
    });
    Object.defineProperty(this, _drawTraceUpdatesModern, {
      value: _drawTraceUpdatesModern2
    });
    Object.defineProperty(this, _findLowestParentFromRegistryForInstanceLegacy, {
      value: _findLowestParentFromRegistryForInstanceLegacy2
    });
    Object.defineProperty(this, _findLowestParentFromRegistryForInstance, {
      value: _findLowestParentFromRegistryForInstance2
    });
    Object.defineProperty(this, _registry, {
      writable: true,
      value: new Set()
    });
    Object.defineProperty(this, _reactDevToolsAgent, {
      writable: true,
      value: null
    });
    Object.defineProperty(this, _onReactDevToolsAgentAttached, {
      writable: true,
      value: function value(agent) {
        (0, _classPrivateFieldLooseBase2.default)(_this, _reactDevToolsAgent)[_reactDevToolsAgent] = agent;
        agent.addListener('drawTraceUpdates', (0, _classPrivateFieldLooseBase2.default)(_this, _onDrawTraceUpdates)[_onDrawTraceUpdates]);
        agent.addListener('showNativeHighlight', (0, _classPrivateFieldLooseBase2.default)(_this, _onHighlightElements)[_onHighlightElements]);
        agent.addListener('hideNativeHighlight', (0, _classPrivateFieldLooseBase2.default)(_this, _onClearElementsHighlights)[_onClearElementsHighlights]);
      }
    });
    Object.defineProperty(this, _getPublicInstanceFromInstance, {
      writable: true,
      value: function value(instanceHandle) {
        var _instanceHandle$canon;
        if (((_instanceHandle$canon = instanceHandle.canonical) == null ? void 0 : _instanceHandle$canon.publicInstance) != null) {
          var _instanceHandle$canon2;
          return (_instanceHandle$canon2 = instanceHandle.canonical) == null ? void 0 : _instanceHandle$canon2.publicInstance;
        }
        if (instanceHandle.canonical != null) {
          return instanceHandle.canonical;
        }
        if (instanceHandle.measure != null) {
          return instanceHandle;
        }
        return null;
      }
    });
    Object.defineProperty(this, _onDrawTraceUpdates, {
      writable: true,
      value: function value(traceUpdates) {
        var modernNodesUpdates = [];
        var legacyNodesUpdates = [];
        for (var _ref of traceUpdates) {
          var node = _ref.node;
          var color = _ref.color;
          var publicInstance = (0, _classPrivateFieldLooseBase2.default)(_this, _getPublicInstanceFromInstance)[_getPublicInstanceFromInstance](node);
          if (publicInstance == null) {
            return;
          }
          var instanceReactTag = (0, _RendererProxy.findNodeHandle)(node);
          if (instanceReactTag == null) {
            return;
          }
          var ReactNativeElementClass = require('../../src/private/webapis/dom/nodes/ReactNativeElement').default;
          if (publicInstance instanceof ReactNativeElementClass) {
            modernNodesUpdates.push({
              id: instanceReactTag,
              instance: publicInstance,
              color: color
            });
          } else {
            legacyNodesUpdates.push({
              id: instanceReactTag,
              instance: publicInstance,
              color: color
            });
          }
        }
        if (modernNodesUpdates.length > 0) {
          (0, _classPrivateFieldLooseBase2.default)(_this, _drawTraceUpdatesModern)[_drawTraceUpdatesModern](modernNodesUpdates);
        }
        if (legacyNodesUpdates.length > 0) {
          (0, _classPrivateFieldLooseBase2.default)(_this, _drawTraceUpdatesLegacy)[_drawTraceUpdatesLegacy](legacyNodesUpdates);
        }
      }
    });
    Object.defineProperty(this, _onHighlightElements, {
      writable: true,
      value: function value(nodes) {
        for (var subscriber of (0, _classPrivateFieldLooseBase2.default)(_this, _registry)[_registry]) {
          var _subscriber$debugging;
          (_subscriber$debugging = subscriber.debuggingOverlayRef.current) == null ? void 0 : _subscriber$debugging.clearElementsHighlight();
        }
        var ReactNativeElementClass = require('../../src/private/webapis/dom/nodes/ReactNativeElement').default;
        var reactNativeElements = [];
        var legacyPublicInstances = [];
        for (var node of nodes) {
          var publicInstance = (0, _classPrivateFieldLooseBase2.default)(_this, _getPublicInstanceFromInstance)[_getPublicInstanceFromInstance](node);
          if (publicInstance == null) {
            continue;
          }
          if (publicInstance instanceof ReactNativeElementClass) {
            reactNativeElements.push(publicInstance);
          } else {
            legacyPublicInstances.push(publicInstance);
          }
        }
        if (reactNativeElements.length > 0) {
          (0, _classPrivateFieldLooseBase2.default)(_this, _onHighlightElementsModern)[_onHighlightElementsModern](reactNativeElements);
        }
        if (legacyPublicInstances.length > 0) {
          (0, _classPrivateFieldLooseBase2.default)(_this, _onHighlightElementsLegacy)[_onHighlightElementsLegacy](legacyPublicInstances);
        }
      }
    });
    Object.defineProperty(this, _onClearElementsHighlights, {
      writable: true,
      value: function value() {
        for (var subscriber of (0, _classPrivateFieldLooseBase2.default)(_this, _registry)[_registry]) {
          var _subscriber$debugging2;
          (_subscriber$debugging2 = subscriber.debuggingOverlayRef.current) == null ? void 0 : _subscriber$debugging2.clearElementsHighlight();
        }
      }
    });
    if ((reactDevToolsHook == null ? void 0 : reactDevToolsHook.reactDevtoolsAgent) != null) {
      (0, _classPrivateFieldLooseBase2.default)(this, _onReactDevToolsAgentAttached)[_onReactDevToolsAgentAttached](reactDevToolsHook.reactDevtoolsAgent);
      return;
    }
    reactDevToolsHook == null ? void 0 : reactDevToolsHook.on == null ? void 0 : reactDevToolsHook.on('react-devtools', (0, _classPrivateFieldLooseBase2.default)(this, _onReactDevToolsAgentAttached)[_onReactDevToolsAgentAttached]);
  }
  return (0, _createClass2.default)(DebuggingOverlayRegistry, [{
    key: "subscribe",
    value: function subscribe(subscriber) {
      (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry].add(subscriber);
    }
  }, {
    key: "unsubscribe",
    value: function unsubscribe(subscriber) {
      var wasPresent = (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry].delete(subscriber);
      if (!wasPresent) {
        console.error('[DebuggingOverlayRegistry] Unexpected argument for unsubscription, which was not previously subscribed:', subscriber);
      }
    }
  }]);
}();
function _findLowestParentFromRegistryForInstance2(instance) {
  var iterator = instance;
  while (iterator != null) {
    for (var subscriber of (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry]) {
      if (subscriber.rootViewRef.current === iterator) {
        return subscriber;
      }
    }
    iterator = iterator.parentElement;
  }
  return null;
}
function _findLowestParentFromRegistryForInstanceLegacy2(instance) {
  var candidates = [];
  for (var subscriber of (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry]) {
    if (subscriber.rootViewRef.current != null && (0, _RendererProxy.isChildPublicInstance)(subscriber.rootViewRef.current, instance)) {
      candidates.push(subscriber);
    }
  }
  if (candidates.length === 0) {
    return null;
  }
  if (candidates.length === 1) {
    return candidates[0];
  }
  var candidatesWithNoChildren = [];
  for (var potentialParent of candidates) {
    var shouldSkipThisParent = false;
    if (potentialParent.rootViewRef.current == null) {
      continue;
    }
    for (var potentialChild of candidates) {
      if (potentialChild === potentialParent) {
        continue;
      }
      if (potentialChild.rootViewRef.current == null) {
        continue;
      }
      if ((0, _RendererProxy.isChildPublicInstance)(potentialParent.rootViewRef.current, potentialChild.rootViewRef.current)) {
        shouldSkipThisParent = true;
        break;
      }
    }
    if (!shouldSkipThisParent) {
      candidatesWithNoChildren.push(potentialParent);
    }
  }
  if (candidatesWithNoChildren.length === 0) {
    console.error('[DebuggingOverlayRegistry] Unexpected circular relationship between AppContainers');
    return null;
  } else if (candidatesWithNoChildren.length > 1) {
    console.error('[DebuggingOverlayRegistry] Unexpected multiple options for lowest parent AppContainer');
    return null;
  }
  return candidatesWithNoChildren[0];
}
function _drawTraceUpdatesModern2(updates) {
  var parentToTraceUpdatesMap = new Map();
  for (var _ref2 of updates) {
    var id = _ref2.id;
    var instance = _ref2.instance;
    var color = _ref2.color;
    var parent = (0, _classPrivateFieldLooseBase2.default)(this, _findLowestParentFromRegistryForInstance)[_findLowestParentFromRegistryForInstance](instance);
    if (parent == null) {
      continue;
    }
    var traceUpdatesForParent = parentToTraceUpdatesMap.get(parent);
    if (traceUpdatesForParent == null) {
      traceUpdatesForParent = [];
      parentToTraceUpdatesMap.set(parent, traceUpdatesForParent);
    }
    var _instance$getBounding = instance.getBoundingClientRect(),
      x = _instance$getBounding.x,
      y = _instance$getBounding.y,
      width = _instance$getBounding.width,
      height = _instance$getBounding.height;
    var rootViewInstance = parent.rootViewRef.current;
    if (rootViewInstance == null) {
      continue;
    }
    var _rootViewInstance$get = rootViewInstance.getBoundingClientRect(),
      parentX = _rootViewInstance$get.x,
      parentY = _rootViewInstance$get.y;
    traceUpdatesForParent.push({
      id: id,
      rectangle: {
        x: x - parentX,
        y: y - parentY,
        width: width,
        height: height
      },
      color: (0, _processColor.default)(color)
    });
  }
  for (var _ref3 of parentToTraceUpdatesMap.entries()) {
    var _debuggingOverlayRef$;
    var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);
    var _parent = _ref4[0];
    var traceUpdates = _ref4[1];
    var debuggingOverlayRef = _parent.debuggingOverlayRef;
    (_debuggingOverlayRef$ = debuggingOverlayRef.current) == null ? void 0 : _debuggingOverlayRef$.highlightTraceUpdates(traceUpdates);
  }
}
function _drawTraceUpdatesLegacy2(updates) {
  var _this2 = this;
  var parentToTraceUpdatesPromisesMap = new Map();
  var _loop = function _loop(id, instance, color) {
    var parent = (0, _classPrivateFieldLooseBase2.default)(_this2, _findLowestParentFromRegistryForInstanceLegacy)[_findLowestParentFromRegistryForInstanceLegacy](instance);
    if (parent == null) {
      return 1;
    }
    var traceUpdatesPromisesForParent = parentToTraceUpdatesPromisesMap.get(parent);
    if (traceUpdatesPromisesForParent == null) {
      traceUpdatesPromisesForParent = [];
      parentToTraceUpdatesPromisesMap.set(parent, traceUpdatesPromisesForParent);
    }
    var frameToDrawPromise = new Promise(function (resolve, reject) {
      instance.measure(function (x, y, width, height, left, top) {
        if (left == null || top == null || width == null || height == null) {
          reject('Unexpectedly failed to call measure on an instance.');
        }
        resolve({
          id: id,
          rectangle: {
            x: left,
            y: top,
            width: width,
            height: height
          },
          color: (0, _processColor.default)(color)
        });
      });
    });
    traceUpdatesPromisesForParent.push(frameToDrawPromise);
  };
  for (var _ref5 of updates) {
    var id = _ref5.id;
    var instance = _ref5.instance;
    var color = _ref5.color;
    if (_loop(id, instance, color)) continue;
  }
  var _loop2 = function _loop2(parent) {
    Promise.all(traceUpdatesPromises).then(function (resolvedTraceUpdates) {
      var _parent$debuggingOver;
      return (_parent$debuggingOver = parent.debuggingOverlayRef.current) == null ? void 0 : _parent$debuggingOver.highlightTraceUpdates(resolvedTraceUpdates);
    }).catch(function () {});
  };
  for (var _ref6 of parentToTraceUpdatesPromisesMap.entries()) {
    var _ref7 = (0, _slicedToArray2.default)(_ref6, 2);
    var parent = _ref7[0];
    var traceUpdatesPromises = _ref7[1];
    _loop2(parent);
  }
}
function _onHighlightElementsModern2(elements) {
  var parentToElementsMap = new Map();
  for (var element of elements) {
    var parent = (0, _classPrivateFieldLooseBase2.default)(this, _findLowestParentFromRegistryForInstance)[_findLowestParentFromRegistryForInstance](element);
    if (parent == null) {
      continue;
    }
    var childElementOfAParent = parentToElementsMap.get(parent);
    if (childElementOfAParent == null) {
      childElementOfAParent = [];
      parentToElementsMap.set(parent, childElementOfAParent);
    }
    childElementOfAParent.push(element);
  }
  var _loop3 = function _loop3() {
      var _parent2$debuggingOve;
      var rootViewInstance = _parent2.rootViewRef.current;
      if (rootViewInstance == null) {
        return {
          v: void 0
        };
      }
      var _rootViewInstance$get2 = rootViewInstance.getBoundingClientRect(),
        parentX = _rootViewInstance$get2.x,
        parentY = _rootViewInstance$get2.y;
      var elementsRectangles = elementsToHighlight.map(function (element) {
        var _element$getBoundingC = element.getBoundingClientRect(),
          x = _element$getBoundingC.x,
          y = _element$getBoundingC.y,
          width = _element$getBoundingC.width,
          height = _element$getBoundingC.height;
        return {
          x: x - parentX,
          y: y - parentY,
          width: width,
          height: height
        };
      });
      (_parent2$debuggingOve = _parent2.debuggingOverlayRef.current) == null ? void 0 : _parent2$debuggingOve.highlightElements(elementsRectangles);
    },
    _ret;
  for (var _ref8 of parentToElementsMap.entries()) {
    var _ref9 = (0, _slicedToArray2.default)(_ref8, 2);
    var _parent2 = _ref9[0];
    var elementsToHighlight = _ref9[1];
    _ret = _loop3();
    if (_ret) return _ret.v;
  }
}
function _onHighlightElementsLegacy2(elements) {
  var parentToElementsMap = new Map();
  for (var element of elements) {
    var parent = (0, _classPrivateFieldLooseBase2.default)(this, _findLowestParentFromRegistryForInstanceLegacy)[_findLowestParentFromRegistryForInstanceLegacy](element);
    if (parent == null) {
      continue;
    }
    var childElementOfAParent = parentToElementsMap.get(parent);
    if (childElementOfAParent == null) {
      childElementOfAParent = [];
      parentToElementsMap.set(parent, childElementOfAParent);
    }
    childElementOfAParent.push(element);
  }
  var _loop4 = function _loop4(_parent3) {
    var promises = elementsToHighlight.map(function (element) {
      return new Promise(function (resolve, reject) {
        element.measure(function (x, y, width, height, left, top) {
          if (left == null || top == null || width == null || height == null) {
            reject('Unexpectedly failed to call measure on an instance.');
          }
          resolve({
            x: left,
            y: top,
            width: width,
            height: height
          });
        });
      });
    });
    Promise.all(promises).then(function (resolvedElementsRectangles) {
      var _parent3$debuggingOve;
      return (_parent3$debuggingOve = _parent3.debuggingOverlayRef.current) == null ? void 0 : _parent3$debuggingOve.highlightElements(resolvedElementsRectangles);
    }).catch(function () {});
  };
  for (var _ref10 of parentToElementsMap.entries()) {
    var _ref11 = (0, _slicedToArray2.default)(_ref10, 2);
    var _parent3 = _ref11[0];
    var elementsToHighlight = _ref11[1];
    _loop4(_parent3);
  }
}
var debuggingOverlayRegistryInstance = new DebuggingOverlayRegistry();
var _default = exports.default = debuggingOverlayRegistryInstance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,