bca2749bd57d69946ef5c8a38a96817b
'use strict';

var token = '%[a-f0-9]{2}';
var singleMatcher = new RegExp('(' + token + ')|([^%]+?)', 'gi');
var multiMatcher = new RegExp('(' + token + ')+', 'gi');
function decodeComponents(components, split) {
  try {
    return [decodeURIComponent(components.join(''))];
  } catch (err) {}
  if (components.length === 1) {
    return components;
  }
  split = split || 1;
  var left = components.slice(0, split);
  var right = components.slice(split);
  return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
}
function decode(input) {
  try {
    return decodeURIComponent(input);
  } catch (err) {
    var tokens = input.match(singleMatcher) || [];
    for (var i = 1; i < tokens.length; i++) {
      input = decodeComponents(tokens, i).join('');
      tokens = input.match(singleMatcher) || [];
    }
    return input;
  }
}
function customDecodeURIComponent(input) {
  var replaceMap = {
    '%FE%FF': "\uFFFD\uFFFD",
    '%FF%FE': "\uFFFD\uFFFD"
  };
  var match = multiMatcher.exec(input);
  while (match) {
    try {
      replaceMap[match[0]] = decodeURIComponent(match[0]);
    } catch (err) {
      var result = decode(match[0]);
      if (result !== match[0]) {
        replaceMap[match[0]] = result;
      }
    }
    match = multiMatcher.exec(input);
  }
  replaceMap['%C2'] = "\uFFFD";
  var entries = Object.keys(replaceMap);
  for (var i = 0; i < entries.length; i++) {
    var key = entries[i];
    input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
  }
  return input;
}
module.exports = function (encodedURI) {
  if (typeof encodedURI !== 'string') {
    throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
  }
  try {
    encodedURI = encodedURI.replace(/\+/g, ' ');
    return decodeURIComponent(encodedURI);
  } catch (err) {
    return customDecodeURIComponent(encodedURI);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0b2tlbiIsInNpbmdsZU1hdGNoZXIiLCJSZWdFeHAiLCJtdWx0aU1hdGNoZXIiLCJkZWNvZGVDb21wb25lbnRzIiwiY29tcG9uZW50cyIsInNwbGl0IiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwiam9pbiIsImVyciIsImxlbmd0aCIsImxlZnQiLCJzbGljZSIsInJpZ2h0IiwiQXJyYXkiLCJwcm90b3R5cGUiLCJjb25jYXQiLCJjYWxsIiwiZGVjb2RlIiwiaW5wdXQiLCJ0b2tlbnMiLCJtYXRjaCIsImkiLCJjdXN0b21EZWNvZGVVUklDb21wb25lbnQiLCJyZXBsYWNlTWFwIiwiZXhlYyIsInJlc3VsdCIsImVudHJpZXMiLCJPYmplY3QiLCJrZXlzIiwia2V5IiwicmVwbGFjZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJlbmNvZGVkVVJJIiwiVHlwZUVycm9yIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIHRva2VuID0gJyVbYS1mMC05XXsyfSc7XG52YXIgc2luZ2xlTWF0Y2hlciA9IG5ldyBSZWdFeHAoJygnICsgdG9rZW4gKyAnKXwoW14lXSs/KScsICdnaScpO1xudmFyIG11bHRpTWF0Y2hlciA9IG5ldyBSZWdFeHAoJygnICsgdG9rZW4gKyAnKSsnLCAnZ2knKTtcblxuZnVuY3Rpb24gZGVjb2RlQ29tcG9uZW50cyhjb21wb25lbnRzLCBzcGxpdCkge1xuXHR0cnkge1xuXHRcdC8vIFRyeSB0byBkZWNvZGUgdGhlIGVudGlyZSBzdHJpbmcgZmlyc3Rcblx0XHRyZXR1cm4gW2RlY29kZVVSSUNvbXBvbmVudChjb21wb25lbnRzLmpvaW4oJycpKV07XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIERvIG5vdGhpbmdcblx0fVxuXG5cdGlmIChjb21wb25lbnRzLmxlbmd0aCA9PT0gMSkge1xuXHRcdHJldHVybiBjb21wb25lbnRzO1xuXHR9XG5cblx0c3BsaXQgPSBzcGxpdCB8fCAxO1xuXG5cdC8vIFNwbGl0IHRoZSBhcnJheSBpbiAyIHBhcnRzXG5cdHZhciBsZWZ0ID0gY29tcG9uZW50cy5zbGljZSgwLCBzcGxpdCk7XG5cdHZhciByaWdodCA9IGNvbXBvbmVudHMuc2xpY2Uoc3BsaXQpO1xuXG5cdHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmNhbGwoW10sIGRlY29kZUNvbXBvbmVudHMobGVmdCksIGRlY29kZUNvbXBvbmVudHMocmlnaHQpKTtcbn1cblxuZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChpbnB1dCk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdHZhciB0b2tlbnMgPSBpbnB1dC5tYXRjaChzaW5nbGVNYXRjaGVyKSB8fCBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAxOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpbnB1dCA9IGRlY29kZUNvbXBvbmVudHModG9rZW5zLCBpKS5qb2luKCcnKTtcblxuXHRcdFx0dG9rZW5zID0gaW5wdXQubWF0Y2goc2luZ2xlTWF0Y2hlcikgfHwgW107XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGlucHV0O1xuXHR9XG59XG5cbmZ1bmN0aW9uIGN1c3RvbURlY29kZVVSSUNvbXBvbmVudChpbnB1dCkge1xuXHQvLyBLZWVwIHRyYWNrIG9mIGFsbCB0aGUgcmVwbGFjZW1lbnRzIGFuZCBwcmVmaWxsIHRoZSBtYXAgd2l0aCB0aGUgYEJPTWBcblx0dmFyIHJlcGxhY2VNYXAgPSB7XG5cdFx0JyVGRSVGRic6ICdcXHVGRkZEXFx1RkZGRCcsXG5cdFx0JyVGRiVGRSc6ICdcXHVGRkZEXFx1RkZGRCdcblx0fTtcblxuXHR2YXIgbWF0Y2ggPSBtdWx0aU1hdGNoZXIuZXhlYyhpbnB1dCk7XG5cdHdoaWxlIChtYXRjaCkge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBEZWNvZGUgYXMgYmlnIGNodW5rcyBhcyBwb3NzaWJsZVxuXHRcdFx0cmVwbGFjZU1hcFttYXRjaFswXV0gPSBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbMF0pO1xuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0dmFyIHJlc3VsdCA9IGRlY29kZShtYXRjaFswXSk7XG5cblx0XHRcdGlmIChyZXN1bHQgIT09IG1hdGNoWzBdKSB7XG5cdFx0XHRcdHJlcGxhY2VNYXBbbWF0Y2hbMF1dID0gcmVzdWx0O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG1hdGNoID0gbXVsdGlNYXRjaGVyLmV4ZWMoaW5wdXQpO1xuXHR9XG5cblx0Ly8gQWRkIGAlQzJgIGF0IHRoZSBlbmQgb2YgdGhlIG1hcCB0byBtYWtlIHN1cmUgaXQgZG9lcyBub3QgcmVwbGFjZSB0aGUgY29tYmluYXRvciBiZWZvcmUgZXZlcnl0aGluZyBlbHNlXG5cdHJlcGxhY2VNYXBbJyVDMiddID0gJ1xcdUZGRkQnO1xuXG5cdHZhciBlbnRyaWVzID0gT2JqZWN0LmtleXMocmVwbGFjZU1hcCk7XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Ly8gUmVwbGFjZSBhbGwgZGVjb2RlZCBjb21wb25lbnRzXG5cdFx0dmFyIGtleSA9IGVudHJpZXNbaV07XG5cdFx0aW5wdXQgPSBpbnB1dC5yZXBsYWNlKG5ldyBSZWdFeHAoa2V5LCAnZycpLCByZXBsYWNlTWFwW2tleV0pO1xuXHR9XG5cblx0cmV0dXJuIGlucHV0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChlbmNvZGVkVVJJKSB7XG5cdGlmICh0eXBlb2YgZW5jb2RlZFVSSSAhPT0gJ3N0cmluZycpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBgZW5jb2RlZFVSSWAgdG8gYmUgb2YgdHlwZSBgc3RyaW5nYCwgZ290IGAnICsgdHlwZW9mIGVuY29kZWRVUkkgKyAnYCcpO1xuXHR9XG5cblx0dHJ5IHtcblx0XHRlbmNvZGVkVVJJID0gZW5jb2RlZFVSSS5yZXBsYWNlKC9cXCsvZywgJyAnKTtcblxuXHRcdC8vIFRyeSB0aGUgYnVpbHQgaW4gZGVjb2RlciBmaXJzdFxuXHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZW5jb2RlZFVSSSk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIEZhbGxiYWNrIHRvIGEgbW9yZSBhZHZhbmNlZCBkZWNvZGVyXG5cdFx0cmV0dXJuIGN1c3RvbURlY29kZVVSSUNvbXBvbmVudChlbmNvZGVkVVJJKTtcblx0fVxufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWixJQUFJQSxLQUFLLEdBQUcsY0FBYztBQUMxQixJQUFJQyxhQUFhLEdBQUcsSUFBSUMsTUFBTSxDQUFDLEdBQUcsR0FBR0YsS0FBSyxHQUFHLFlBQVksRUFBRSxJQUFJLENBQUM7QUFDaEUsSUFBSUcsWUFBWSxHQUFHLElBQUlELE1BQU0sQ0FBQyxHQUFHLEdBQUdGLEtBQUssR0FBRyxJQUFJLEVBQUUsSUFBSSxDQUFDO0FBRXZELFNBQVNJLGdCQUFnQkEsQ0FBQ0MsVUFBVSxFQUFFQyxLQUFLLEVBQUU7RUFDNUMsSUFBSTtJQUVILE9BQU8sQ0FBQ0Msa0JBQWtCLENBQUNGLFVBQVUsQ0FBQ0csSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDakQsQ0FBQyxDQUFDLE9BQU9DLEdBQUcsRUFBRSxDQUVkO0VBRUEsSUFBSUosVUFBVSxDQUFDSyxNQUFNLEtBQUssQ0FBQyxFQUFFO0lBQzVCLE9BQU9MLFVBQVU7RUFDbEI7RUFFQUMsS0FBSyxHQUFHQSxLQUFLLElBQUksQ0FBQztFQUdsQixJQUFJSyxJQUFJLEdBQUdOLFVBQVUsQ0FBQ08sS0FBSyxDQUFDLENBQUMsRUFBRU4sS0FBSyxDQUFDO0VBQ3JDLElBQUlPLEtBQUssR0FBR1IsVUFBVSxDQUFDTyxLQUFLLENBQUNOLEtBQUssQ0FBQztFQUVuQyxPQUFPUSxLQUFLLENBQUNDLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDQyxJQUFJLENBQUMsRUFBRSxFQUFFYixnQkFBZ0IsQ0FBQ08sSUFBSSxDQUFDLEVBQUVQLGdCQUFnQixDQUFDUyxL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