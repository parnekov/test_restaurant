{"version":3,"names":["_interopRequireDefault2","require","_slicedToArray2","_wrapNativeSuper2","_asyncToGenerator2","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_inherits2","_classPrivateFieldLooseBase2","_classPrivateFieldLooseKey2","_callSuper","t","o","e","default","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","call","Object","defineProperty","exports","value","enumerable","get","_types","CallbackTestRunner","EmittingTestRunner","_chalk","data","_interopRequireDefault","_emittery","_pLimit","_jestUtil","_jestWorker","_runTest","obj","__esModule","_eventEmitter","_createInBandTestRun","_createParallelTestRun","TestRunner","_types$EmittingTestRu","_this","_len","arguments","length","_args","Array","_key","concat","_createParallelTestRun2","_createInBandTestRun2","writable","key","_runTests","tests","watcher","options","serial","runTests","_x","_x2","_x3","on","eventName","listener","_x4","_x5","_createInBandTestRun3","_this3","process","env","JEST_WORKER_ID","mutex","reduce","promise","test","then","isInterrupted","CancelRun","sendMessageToJest","args","emit","deepCyclicCopy","keepPrototype","path","_globalConfig","context","config","resolver","_context","result","error","Promise","resolve","_x6","_x7","_createParallelTestRun3","_this4","resolvers","Map","has","id","set","serializableModuleMap","moduleMap","toJSON","worker","Worker","enableWorkerThreads","workerThreads","exposedMethods","forkOptions","serialization","stdio","idleMemoryLimit","workerIdleMemoryLimit","undefined","maxRetries","numWorkers","maxWorkers","setupArgs","serializableResolvers","from","values","getStdout","pipe","stdout","getStderr","stderr","runTestInWorker","reject","assign","changedFiles","sourcesRelatedToTestsInChangedFiles","globalConfig","UNSTABLE_onCustomMessage","_ref3","_ref4","event","payload","onInterrupt","_","state","interrupted","runAllTests","all","map","cleanup","_ref5","_yield$worker$end","end","forceExited","console","yellow","race","_Error","message","_this2","name","Error"],"sources":["index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nObject.defineProperty(exports, 'CallbackTestRunner', {\n  enumerable: true,\n  get: function () {\n    return _types.CallbackTestRunner;\n  }\n});\nObject.defineProperty(exports, 'EmittingTestRunner', {\n  enumerable: true,\n  get: function () {\n    return _types.EmittingTestRunner;\n  }\n});\nexports.default = void 0;\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n  _chalk = function () {\n    return data;\n  };\n  return data;\n}\nfunction _emittery() {\n  const data = _interopRequireDefault(require('emittery'));\n  _emittery = function () {\n    return data;\n  };\n  return data;\n}\nfunction _pLimit() {\n  const data = _interopRequireDefault(require('p-limit'));\n  _pLimit = function () {\n    return data;\n  };\n  return data;\n}\nfunction _jestUtil() {\n  const data = require('jest-util');\n  _jestUtil = function () {\n    return data;\n  };\n  return data;\n}\nfunction _jestWorker() {\n  const data = require('jest-worker');\n  _jestWorker = function () {\n    return data;\n  };\n  return data;\n}\nvar _runTest = _interopRequireDefault(require('./runTest'));\nvar _types = require('./types');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nclass TestRunner extends _types.EmittingTestRunner {\n  #eventEmitter = new (_emittery().default)();\n  async runTests(tests, watcher, options) {\n    return options.serial\n      ? this.#createInBandTestRun(tests, watcher)\n      : this.#createParallelTestRun(tests, watcher);\n  }\n  async #createInBandTestRun(tests, watcher) {\n    process.env.JEST_WORKER_ID = '1';\n    const mutex = (0, _pLimit().default)(1);\n    return tests.reduce(\n      (promise, test) =>\n        mutex(() =>\n          promise\n            .then(async () => {\n              if (watcher.isInterrupted()) {\n                throw new CancelRun();\n              }\n\n              // `deepCyclicCopy` used here to avoid mem-leak\n              const sendMessageToJest = (eventName, args) =>\n                this.#eventEmitter.emit(\n                  eventName,\n                  (0, _jestUtil().deepCyclicCopy)(args, {\n                    keepPrototype: false\n                  })\n                );\n              await this.#eventEmitter.emit('test-file-start', [test]);\n              return (0, _runTest.default)(\n                test.path,\n                this._globalConfig,\n                test.context.config,\n                test.context.resolver,\n                this._context,\n                sendMessageToJest\n              );\n            })\n            .then(\n              result =>\n                this.#eventEmitter.emit('test-file-success', [test, result]),\n              error =>\n                this.#eventEmitter.emit('test-file-failure', [test, error])\n            )\n        ),\n      Promise.resolve()\n    );\n  }\n  async #createParallelTestRun(tests, watcher) {\n    const resolvers = new Map();\n    for (const test of tests) {\n      if (!resolvers.has(test.context.config.id)) {\n        resolvers.set(test.context.config.id, {\n          config: test.context.config,\n          serializableModuleMap: test.context.moduleMap.toJSON()\n        });\n      }\n    }\n    const worker = new (_jestWorker().Worker)(require.resolve('./testWorker'), {\n      enableWorkerThreads: this._globalConfig.workerThreads,\n      exposedMethods: ['worker'],\n      forkOptions: {\n        serialization: 'json',\n        stdio: 'pipe'\n      },\n      // The workerIdleMemoryLimit should've been converted to a number during\n      // the normalization phase.\n      idleMemoryLimit:\n        typeof this._globalConfig.workerIdleMemoryLimit === 'number'\n          ? this._globalConfig.workerIdleMemoryLimit\n          : undefined,\n      maxRetries: 3,\n      numWorkers: this._globalConfig.maxWorkers,\n      setupArgs: [\n        {\n          serializableResolvers: Array.from(resolvers.values())\n        }\n      ]\n    });\n    if (worker.getStdout()) worker.getStdout().pipe(process.stdout);\n    if (worker.getStderr()) worker.getStderr().pipe(process.stderr);\n    const mutex = (0, _pLimit().default)(this._globalConfig.maxWorkers);\n\n    // Send test suites to workers continuously instead of all at once to track\n    // the start time of individual tests.\n    const runTestInWorker = test =>\n      mutex(async () => {\n        if (watcher.isInterrupted()) {\n          return Promise.reject();\n        }\n        await this.#eventEmitter.emit('test-file-start', [test]);\n        const promise = worker.worker({\n          config: test.context.config,\n          context: {\n            ...this._context,\n            changedFiles:\n              this._context.changedFiles &&\n              Array.from(this._context.changedFiles),\n            sourcesRelatedToTestsInChangedFiles:\n              this._context.sourcesRelatedToTestsInChangedFiles &&\n              Array.from(this._context.sourcesRelatedToTestsInChangedFiles)\n          },\n          globalConfig: this._globalConfig,\n          path: test.path\n        });\n        if (promise.UNSTABLE_onCustomMessage) {\n          // TODO: Get appropriate type for `onCustomMessage`\n          promise.UNSTABLE_onCustomMessage(([event, payload]) =>\n            this.#eventEmitter.emit(event, payload)\n          );\n        }\n        return promise;\n      });\n    const onInterrupt = new Promise((_, reject) => {\n      watcher.on('change', state => {\n        if (state.interrupted) {\n          reject(new CancelRun());\n        }\n      });\n    });\n    const runAllTests = Promise.all(\n      tests.map(test =>\n        runTestInWorker(test).then(\n          result =>\n            this.#eventEmitter.emit('test-file-success', [test, result]),\n          error => this.#eventEmitter.emit('test-file-failure', [test, error])\n        )\n      )\n    );\n    const cleanup = async () => {\n      const {forceExited} = await worker.end();\n      if (forceExited) {\n        console.error(\n          _chalk().default.yellow(\n            'A worker process has failed to exit gracefully and has been force exited. ' +\n              'This is likely caused by tests leaking due to improper teardown. ' +\n              'Try running with --detectOpenHandles to find leaks. ' +\n              'Active timers can also cause this, ensure that .unref() was called on them.'\n          )\n        );\n      }\n    };\n    return Promise.race([runAllTests, onInterrupt]).then(cleanup, cleanup);\n  }\n  on(eventName, listener) {\n    return this.#eventEmitter.on(eventName, listener);\n  }\n}\nexports.default = TestRunner;\nclass CancelRun extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'CancelRun';\n  }\n}\n"],"mappings":"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","ignoreList":[]}