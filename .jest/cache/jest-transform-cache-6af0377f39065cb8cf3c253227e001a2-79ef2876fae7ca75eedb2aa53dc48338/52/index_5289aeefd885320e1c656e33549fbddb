d004a4a87215d087b8fa15a6ecd6ea83
'use strict';

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
var _wrapNativeSuper2 = _interopRequireDefault2(require("@babel/runtime/helpers/wrapNativeSuper"));
var _asyncToGenerator2 = _interopRequireDefault2(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));
var _classPrivateFieldLooseBase2 = _interopRequireDefault2(require("@babel/runtime/helpers/classPrivateFieldLooseBase"));
var _classPrivateFieldLooseKey2 = _interopRequireDefault2(require("@babel/runtime/helpers/classPrivateFieldLooseKey"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
Object.defineProperty(exports, '__esModule', {
  value: true
});
Object.defineProperty(exports, 'CallbackTestRunner', {
  enumerable: true,
  get: function get() {
    return _types.CallbackTestRunner;
  }
});
Object.defineProperty(exports, 'EmittingTestRunner', {
  enumerable: true,
  get: function get() {
    return _types.EmittingTestRunner;
  }
});
exports.default = void 0;
function _chalk() {
  var data = _interopRequireDefault(require('chalk'));
  _chalk = function _chalk() {
    return data;
  };
  return data;
}
function _emittery() {
  var data = _interopRequireDefault(require('emittery'));
  _emittery = function _emittery() {
    return data;
  };
  return data;
}
function _pLimit() {
  var data = _interopRequireDefault(require('p-limit'));
  _pLimit = function _pLimit() {
    return data;
  };
  return data;
}
function _jestUtil() {
  var data = require('jest-util');
  _jestUtil = function _jestUtil() {
    return data;
  };
  return data;
}
function _jestWorker() {
  var data = require('jest-worker');
  _jestWorker = function _jestWorker() {
    return data;
  };
  return data;
}
var _runTest = _interopRequireDefault(require('./runTest'));
var _types = require('./types');
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var _eventEmitter = (0, _classPrivateFieldLooseKey2.default)("eventEmitter");
var _createInBandTestRun = (0, _classPrivateFieldLooseKey2.default)("createInBandTestRun");
var _createParallelTestRun = (0, _classPrivateFieldLooseKey2.default)("createParallelTestRun");
var TestRunner = function (_types$EmittingTestRu) {
  function TestRunner() {
    var _this;
    (0, _classCallCheck2.default)(this, TestRunner);
    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }
    _this = _callSuper(this, TestRunner, [].concat(_args));
    Object.defineProperty(_this, _createParallelTestRun, {
      value: _createParallelTestRun2
    });
    Object.defineProperty(_this, _createInBandTestRun, {
      value: _createInBandTestRun2
    });
    Object.defineProperty(_this, _eventEmitter, {
      writable: true,
      value: new (_emittery().default)()
    });
    return _this;
  }
  (0, _inherits2.default)(TestRunner, _types$EmittingTestRu);
  return (0, _createClass2.default)(TestRunner, [{
    key: "runTests",
    value: function () {
      var _runTests = (0, _asyncToGenerator2.default)(function* (tests, watcher, options) {
        return options.serial ? (0, _classPrivateFieldLooseBase2.default)(this, _createInBandTestRun)[_createInBandTestRun](tests, watcher) : (0, _classPrivateFieldLooseBase2.default)(this, _createParallelTestRun)[_createParallelTestRun](tests, watcher);
      });
      function runTests(_x, _x2, _x3) {
        return _runTests.apply(this, arguments);
      }
      return runTests;
    }()
  }, {
    key: "on",
    value: function on(eventName, listener) {
      return (0, _classPrivateFieldLooseBase2.default)(this, _eventEmitter)[_eventEmitter].on(eventName, listener);
    }
  }]);
}(_types.EmittingTestRunner);
function _createInBandTestRun2(_x4, _x5) {
  return _createInBandTestRun3.apply(this, arguments);
}
function _createInBandTestRun3() {
  _createInBandTestRun3 = (0, _asyncToGenerator2.default)(function* (tests, watcher) {
    var _this3 = this;
    process.env.JEST_WORKER_ID = '1';
    var mutex = (0, _pLimit().default)(1);
    return tests.reduce(function (promise, test) {
      return mutex(function () {
        return promise.then((0, _asyncToGenerator2.default)(function* () {
          if (watcher.isInterrupted()) {
            throw new CancelRun();
          }
          var sendMessageToJest = function sendMessageToJest(eventName, args) {
            return (0, _classPrivateFieldLooseBase2.default)(_this3, _eventEmitter)[_eventEmitter].emit(eventName, (0, _jestUtil().deepCyclicCopy)(args, {
              keepPrototype: false
            }));
          };
          yield (0, _classPrivateFieldLooseBase2.default)(_this3, _eventEmitter)[_eventEmitter].emit('test-file-start', [test]);
          return (0, _runTest.default)(test.path, _this3._globalConfig, test.context.config, test.context.resolver, _this3._context, sendMessageToJest);
        })).then(function (result) {
          return (0, _classPrivateFieldLooseBase2.default)(_this3, _eventEmitter)[_eventEmitter].emit('test-file-success', [test, result]);
        }, function (error) {
          return (0, _classPrivateFieldLooseBase2.default)(_this3, _eventEmitter)[_eventEmitter].emit('test-file-failure', [test, error]);
        });
      });
    }, Promise.resolve());
  });
  return _createInBandTestRun3.apply(this, arguments);
}
function _createParallelTestRun2(_x6, _x7) {
  return _createParallelTestRun3.apply(this, arguments);
}
function _createParallelTestRun3() {
  _createParallelTestRun3 = (0, _asyncToGenerator2.default)(function* (tests, watcher) {
    var _this4 = this;
    var resolvers = new Map();
    for (var test of tests) {
      if (!resolvers.has(test.context.config.id)) {
        resolvers.set(test.context.config.id, {
          config: test.context.config,
          serializableModuleMap: test.context.moduleMap.toJSON()
        });
      }
    }
    var worker = new (_jestWorker().Worker)(require.resolve('./testWorker'), {
      enableWorkerThreads: this._globalConfig.workerThreads,
      exposedMethods: ['worker'],
      forkOptions: {
        serialization: 'json',
        stdio: 'pipe'
      },
      idleMemoryLimit: typeof this._globalConfig.workerIdleMemoryLimit === 'number' ? this._globalConfig.workerIdleMemoryLimit : undefined,
      maxRetries: 3,
      numWorkers: this._globalConfig.maxWorkers,
      setupArgs: [{
        serializableResolvers: Array.from(resolvers.values())
      }]
    });
    if (worker.getStdout()) worker.getStdout().pipe(process.stdout);
    if (worker.getStderr()) worker.getStderr().pipe(process.stderr);
    var mutex = (0, _pLimit().default)(this._globalConfig.maxWorkers);
    var runTestInWorker = function runTestInWorker(test) {
      return mutex((0, _asyncToGenerator2.default)(function* () {
        if (watcher.isInterrupted()) {
          return Promise.reject();
        }
        yield (0, _classPrivateFieldLooseBase2.default)(_this4, _eventEmitter)[_eventEmitter].emit('test-file-start', [test]);
        var promise = worker.worker({
          config: test.context.config,
          context: Object.assign({}, _this4._context, {
            changedFiles: _this4._context.changedFiles && Array.from(_this4._context.changedFiles),
            sourcesRelatedToTestsInChangedFiles: _this4._context.sourcesRelatedToTestsInChangedFiles && Array.from(_this4._context.sourcesRelatedToTestsInChangedFiles)
          }),
          globalConfig: _this4._globalConfig,
          path: test.path
        });
        if (promise.UNSTABLE_onCustomMessage) {
          promise.UNSTABLE_onCustomMessage(function (_ref3) {
            var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
              event = _ref4[0],
              payload = _ref4[1];
            return (0, _classPrivateFieldLooseBase2.default)(_this4, _eventEmitter)[_eventEmitter].emit(event, payload);
          });
        }
        return promise;
      }));
    };
    var onInterrupt = new Promise(function (_, reject) {
      watcher.on('change', function (state) {
        if (state.interrupted) {
          reject(new CancelRun());
        }
      });
    });
    var runAllTests = Promise.all(tests.map(function (test) {
      return runTestInWorker(test).then(function (result) {
        return (0, _classPrivateFieldLooseBase2.default)(_this4, _eventEmitter)[_eventEmitter].emit('test-file-success', [test, result]);
      }, function (error) {
        return (0, _classPrivateFieldLooseBase2.default)(_this4, _eventEmitter)[_eventEmitter].emit('test-file-failure', [test, error]);
      });
    }));
    var cleanup = function () {
      var _ref5 = (0, _asyncToGenerator2.default)(function* () {
        var _yield$worker$end = yield worker.end(),
          forceExited = _yield$worker$end.forceExited;
        if (forceExited) {
          console.error(_chalk().default.yellow('A worker process has failed to exit gracefully and has been force exited. ' + 'This is likely caused by tests leaking due to improper teardown. ' + 'Try running with --detectOpenHandles to find leaks. ' + 'Active timers can also cause this, ensure that .unref() was called on them.'));
        }
      });
      return function cleanup() {
        return _ref5.apply(this, arguments);
      };
    }();
    return Promise.race([runAllTests, onInterrupt]).then(cleanup, cleanup);
  });
  return _createParallelTestRun3.apply(this, arguments);
}
exports.default = TestRunner;
var CancelRun = function (_Error) {
  function CancelRun(message) {
    var _this2;
    (0, _classCallCheck2.default)(this, CancelRun);
    _this2 = _callSuper(this, CancelRun, [message]);
    _this2.name = 'CancelRun';
    return _this2;
  }
  (0, _inherits2.default)(CancelRun, _Error);
  return (0, _createClass2.default)(CancelRun);
}((0, _wrapNativeSuper2.default)(Error));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MiIsInJlcXVpcmUiLCJfc2xpY2VkVG9BcnJheTIiLCJfd3JhcE5hdGl2ZVN1cGVyMiIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2dldFByb3RvdHlwZU9mMiIsIl9pbmhlcml0czIiLCJfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UyIiwiX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkyIiwiX2NhbGxTdXBlciIsInQiLCJvIiwiZSIsImRlZmF1bHQiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImNvbnN0cnVjdG9yIiwiYXBwbHkiLCJCb29sZWFuIiwicHJvdG90eXBlIiwidmFsdWVPZiIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJfdHlwZXMiLCJDYWxsYmFja1Rlc3RSdW5uZXIiLCJFbWl0dGluZ1Rlc3RSdW5uZXIiLCJfY2hhbGsiLCJkYXRhIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9lbWl0dGVyeSIsIl9wTGltaXQiLCJfamVzdFV0aWwiLCJfamVzdFdvcmtlciIsIl9ydW5UZXN0Iiwib2JqIiwiX19lc01vZHVsZSIsIl9ldmVudEVtaXR0ZXIiLCJfY3JlYXRlSW5CYW5kVGVzdFJ1biIsIl9jcmVhdGVQYXJhbGxlbFRlc3RSdW4iLCJUZXN0UnVubmVyIiwiX3R5cGVzJEVtaXR0aW5nVGVzdFJ1IiwiX3RoaXMiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiX2FyZ3MiLCJBcnJheSIsIl9rZXkiLCJjb25jYXQiLCJfY3JlYXRlUGFyYWxsZWxUZXN0UnVuMiIsIl9jcmVhdGVJbkJhbmRUZXN0UnVuMiIsIndyaXRhYmxlIiwia2V5IiwiX3J1blRlc3RzIiwidGVzdHMiLCJ3YXRjaGVyIiwib3B0aW9ucyIsInNlcmlhbCIsInJ1blRlc3RzIiwiX3giLCJfeDIiLCJfeDMiLCJvbiIsImV2ZW50TmFtZSIsImxpc3RlbmVyIiwiX3g0IiwiX3g1IiwiX2NyZWF0ZUluQmFuZFRlc3RSdW4zIiwiX3RoaXMzIiwicHJvY2VzcyIsImVudiIsIkpFU1RfV09SS0VSX0lEIiwibXV0ZXgiLCJyZWR1Y2UiLCJwcm9taXNlIiwidGVzdCIsInRoZW4iLCJpc0ludGVycnVwdGVkIiwiQ2FuY2VsUnVuIiwic2VuZE1lc3NhZ2VUb0plc3QiLCJhcmdzIiwiZW1pdCIsImRlZXBDeWNsaWNDb3B5Iiwia2VlcFByb3RvdHlwZSIsInBhdGgiLCJfZ2xvYmFsQ29uZmlnIiwiY29udGV4dCIsImNvbmZpZyIsInJlc29sdmVyIiwiX2NvbnRleHQiLCJyZXN1bHQiLCJlcnJvciIsIlByb21pc2UiLCJyZXNvbHZlIiwiX3g2IiwiX3g3IiwiX2NyZWF0ZVBhcmFsbGVsVGVzdFJ1bjMiLCJfdGhpczQiLCJyZXNvbHZlcnMiLCJNYXAiLCJoYXMiLCJpZCIsInNldCIsInNlcmlhbGl6YWJsZU1vZHVsZU1hcCIsIm1vZHVsZU1hcCIsInRvSlNPTiIsIndvcmtlciIsIldvcmtlciIsImVuYWJsZVdvcmtlclRocmVhZHMiLCJ3b3JrZXJUaHJlYWRzIiwiZXhwb3NlZE1ldGhvZHMiLCJmb3JrT3B0aW9ucyIsInNlcmlhbGl6YXRpb24iLCJzdGRpbyIsImlkbGVNZW1vcnlMaW1pdCIsIndvcmtlcklkbGVNZW1vcnlMaW1pdCIsInVuZGVmaW5lZCIsIm1heFJldHJpZXMiLCJudW1Xb3JrZXJzIiwibWF4V29ya2VycyIsInNldHVwQXJncyIsInNlcmlhbGl6YWJsZVJlc29sdmVycyIsImZyb20iLCJ2YWx1ZXMiLCJnZXRTdGRvdXQiLCJwaXBlIiwic3Rkb3V0IiwiZ2V0U3RkZXJyIiwic3RkZXJyIiwicnVuVGVzdEluV29ya2VyIiwicmVqZWN0IiwiYXNzaWduIiwiY2hhbmdlZEZpbGVzIiwic291cmNlc1JlbGF0ZWRUb1Rlc3RzSW5DaGFuZ2VkRmlsZXMiLCJnbG9iYWxDb25maWciLCJVTlNUQUJMRV9vbkN1c3RvbU1lc3NhZ2UiLCJfcmVmMyIsIl9yZWY0IiwiZXZlbnQiLCJwYXlsb2FkIiwib25JbnRlcnJ1cHQiLCJfIiwic3RhdGUiLCJpbnRlcnJ1cHRlZCIsInJ1bkFsbFRlc3RzIiwiYWxsIiwibWFwIiwiY2xlYW51cCIsIl9yZWY1IiwiX3lpZWxkJHdvcmtlciRlbmQiLCJlbmQiLCJmb3JjZUV4aXRlZCIsImNvbnNvbGUiLCJ5ZWxsb3ciLCJyYWNlIiwiX0Vycm9yIiwibWVzc2FnZSIsIl90aGlzMiIsIm5hbWUiLCJFcnJvciJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0NhbGxiYWNrVGVzdFJ1bm5lcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90eXBlcy5DYWxsYmFja1Rlc3RSdW5uZXI7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdFbWl0dGluZ1Rlc3RSdW5uZXInLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdHlwZXMuRW1pdHRpbmdUZXN0UnVubmVyO1xuICB9XG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbmZ1bmN0aW9uIF9jaGFsaygpIHtcbiAgY29uc3QgZGF0YSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgnY2hhbGsnKSk7XG4gIF9jaGFsayA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcbiAgcmV0dXJuIGRhdGE7XG59XG5mdW5jdGlvbiBfZW1pdHRlcnkoKSB7XG4gIGNvbnN0IGRhdGEgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoJ2VtaXR0ZXJ5JykpO1xuICBfZW1pdHRlcnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG4gIHJldHVybiBkYXRhO1xufVxuZnVuY3Rpb24gX3BMaW1pdCgpIHtcbiAgY29uc3QgZGF0YSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgncC1saW1pdCcpKTtcbiAgX3BMaW1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcbiAgcmV0dXJuIGRhdGE7XG59XG5mdW5jdGlvbiBfamVzdFV0aWwoKSB7XG4gIGNvbnN0IGRhdGEgPSByZXF1aXJlKCdqZXN0LXV0aWwnKTtcbiAgX2plc3RVdGlsID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xuICByZXR1cm4gZGF0YTtcbn1cbmZ1bmN0aW9uIF9qZXN0V29ya2VyKCkge1xuICBjb25zdCBkYXRhID0gcmVxdWlyZSgnamVzdC13b3JrZXInKTtcbiAgX2plc3RXb3JrZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG4gIHJldHVybiBkYXRhO1xufVxudmFyIF9ydW5UZXN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCcuL3J1blRlc3QnKSk7XG52YXIgX3R5cGVzID0gcmVxdWlyZSgnLi90eXBlcycpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtkZWZhdWx0OiBvYmp9O1xufVxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmNsYXNzIFRlc3RSdW5uZXIgZXh0ZW5kcyBfdHlwZXMuRW1pdHRpbmdUZXN0UnVubmVyIHtcbiAgI2V2ZW50RW1pdHRlciA9IG5ldyAoX2VtaXR0ZXJ5KCkuZGVmYXVsdCkoKTtcbiAgYXN5bmMgcnVuVGVzdHModGVzdHMsIHdhdGNoZXIsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5zZXJpYWxcbiAgICAgID8gdGhpcy4jY3JlYXRlSW5CYW5kVGVzdFJ1bih0ZXN0cywgd2F0Y2hlcilcbiAgICAgIDogdGhpcy4jY3JlYXRlUGFyYWxsZWxUZXN0UnVuKHRlc3RzLCB3YXRjaGVyKTtcbiAgfVxuICBhc3luYyAjY3JlYXRlSW5CYW5kVGVzdFJ1bih0ZXN0cywgd2F0Y2hlcikge1xuICAgIHByb2Nlc3MuZW52LkpFU1RfV09SS0VSX0lEID0gJzEnO1xuICAgIGNvbnN0IG11dGV4ID0gKDAsIF9wTGltaXQoKS5kZWZhdWx0KSgxKTtcbiAgICByZXR1cm4gdGVzdHMucmVkdWNlKFxuICAgICAgKHByb21pc2UsIHRlc3QpID0+XG4gICAgICAgIG11dGV4KCgpID0+XG4gICAgICAgICAgcHJvbWlzZVxuICAgICAgICAgICAgLnRoZW4oYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICBpZiAod2F0Y2hlci5pc0ludGVycnVwdGVkKCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQ2FuY2VsUnVuKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBgZGVlcEN5Y2xpY0NvcHlgIHVzZWQgaGVyZSB0byBhdm9pZCBtZW0tbGVha1xuICAgICAgICAgICAgICBjb25zdCBzZW5kTWVzc2FnZVRvSmVzdCA9IChldmVudE5hbWUsIGFyZ3MpID0+XG4gICAgICAgICAgICAgICAgdGhpcy4jZXZlbnRFbWl0dGVyLmVtaXQoXG4gICAgICAgICAgICAgICAgICBldmVudE5hbWUsXG4gICAgICAgICAgICAgICAgICAoMCwgX2plc3RVdGlsKCkuZGVlcEN5Y2xpY0NvcHkpKGFyZ3MsIHtcbiAgICAgICAgICAgICAgICAgICAga2VlcFByb3RvdHlwZTogZmFsc2VcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgYXdhaXQgdGhpcy4jZXZlbnRFbWl0dGVyLmVtaXQoJ3Rlc3QtZmlsZS1zdGFydCcsIFt0ZXN0XSk7XG4gICAgICAgICAgICAgIHJldHVybiAoMCwgX3J1blRlc3QuZGVmYXVsdCkoXG4gICAgICAgICAgICAgICAgdGVzdC5wYXRoLFxuICAgICAgICAgICAgICAgIHRoaXMuX2dsb2JhbENvbmZpZyxcbiAgICAgICAgICAgICAgICB0ZXN0LmNvbnRleHQuY29uZmlnLFxuICAgICAgICAgICAgICAgIHRlc3QuY29udGV4dC5yZXNvbHZlcixcbiAgICAgICAgICAgICAgICB0aGlzLl9jb250ZXh0LFxuICAgICAgICAgICAgICAgIHNlbmRNZXNzYWdlVG9KZXN0XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICAgIHJlc3VsdCA9PlxuICAgICAgICAgICAgICAgIHRoaXMuI2V2ZW50RW1pdHRlci5lbWl0KCd0ZXN0LWZpbGUtc3VjY2VzcycsIFt0ZXN0LCByZXN1bHRdKSxcbiAgICAgICAgICAgICAgZXJyb3IgPT5cbiAgICAgICAgICAgICAgICB0aGlzLiNldmVudEVtaXR0ZXIuZW1pdCgndGVzdC1maWxlLWZhaWx1cmUnLCBbdGVzdCwgZXJyb3JdKVxuICAgICAgICAgICAgKVxuICAgICAgICApLFxuICAgICAgUHJvbWlzZS5yZXNvbHZlKClcbiAgICApO1xuICB9XG4gIGFzeW5jICNjcmVhdGVQYXJhbGxlbFRlc3RSdW4odGVzdHMsIHdhdGNoZXIpIHtcbiAgICBjb25zdCByZXNvbHZlcnMgPSBuZXcgTWFwKCk7XG4gICAgZm9yIChjb25zdCB0ZXN0IG9mIHRlc3RzKSB7XG4gICAgICBpZiAoIXJlc29sdmVycy5oYXModGVzdC5jb250ZXh0LmNvbmZpZy5pZCkpIHtcbiAgICAgICAgcmVzb2x2ZXJzLnNldCh0ZXN0LmNvbnRleHQuY29uZmlnLmlkLCB7XG4gICAgICAgICAgY29uZmlnOiB0ZXN0LmNvbnRleHQuY29uZmlnLFxuICAgICAgICAgIHNlcmlhbGl6YWJsZU1vZHVsZU1hcDogdGVzdC5jb250ZXh0Lm1vZHVsZU1hcC50b0pTT04oKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgd29ya2VyID0gbmV3IChfamVzdFdvcmtlcigpLldvcmtlcikocmVxdWlyZS5yZXNvbHZlKCcuL3Rlc3RXb3JrZXInKSwge1xuICAgICAgZW5hYmxlV29ya2VyVGhyZWFkczogdGhpcy5fZ2xvYmFsQ29uZmlnLndvcmtlclRocmVhZHMsXG4gICAgICBleHBvc2VkTWV0aG9kczogWyd3b3JrZXInXSxcbiAgICAgIGZvcmtPcHRpb25zOiB7XG4gICAgICAgIHNlcmlhbGl6YXRpb246ICdqc29uJyxcbiAgICAgICAgc3RkaW86ICdwaXBlJ1xuICAgICAgfSxcbiAgICAgIC8vIFRoZSB3b3JrZXJJZGxlTWVtb3J5TGltaXQgc2hvdWxkJ3ZlIGJlZW4gY29udmVydGVkIHRvIGEgbnVtYmVyIGR1cmluZ1xuICAgICAgLy8gdGhlIG5vcm1hbGl6YXRpb24gcGhhc2UuXG4gICAgICBpZGxlTWVtb3J5TGltaXQ6XG4gICAgICAgIHR5cGVvZiB0aGlzLl9nbG9iYWxDb25maWcud29ya2VySWRsZU1lbW9yeUxpbWl0ID09PSAnbnVtYmVyJ1xuICAgICAgICAgID8gdGhpcy5fZ2xvYmFsQ29uZmlnLndvcmtlcklkbGVNZW1vcnlMaW1pdFxuICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgbWF4UmV0cmllczogMyxcbiAgICAgIG51bVdvcmtlcnM6IHRoaXMuX2dsb2JhbENvbmZpZy5tYXhXb3JrZXJzLFxuICAgICAgc2V0dXBBcmdzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBzZXJpYWxpemFibGVSZXNvbHZlcnM6IEFycmF5LmZyb20ocmVzb2x2ZXJzLnZhbHVlcygpKVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSk7XG4gICAgaWYgKHdvcmtlci5nZXRTdGRvdXQoKSkgd29ya2VyLmdldFN0ZG91dCgpLnBpcGUocHJvY2Vzcy5zdGRvdXQpO1xuICAgIGlmICh3b3JrZXIuZ2V0U3RkZXJyKCkpIHdvcmtlci5nZXRTdGRlcnIoKS5waXBlKHByb2Nlc3Muc3RkZXJyKTtcbiAgICBjb25zdCBtdXRleCA9ICgwLCBfcExpbWl0KCkuZGVmYXVsdCkodGhpcy5fZ2xvYmFsQ29uZmlnLm1heFdvcmtlcnMpO1xuXG4gICAgLy8gU2VuZCB0ZXN0IHN1aXRlcyB0byB3b3JrZXJzIGNvbnRpbnVvdXNseSBpbnN0ZWFkIG9mIGFsbCBhdCBvbmNlIHRvIHRyYWNrXG4gICAgLy8gdGhlIHN0YXJ0IHRpbWUgb2YgaW5kaXZpZHVhbCB0ZXN0cy5cbiAgICBjb25zdCBydW5UZXN0SW5Xb3JrZXIgPSB0ZXN0ID0+XG4gICAgICBtdXRleChhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmICh3YXRjaGVyLmlzSW50ZXJydXB0ZWQoKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMuI2V2ZW50RW1pdHRlci5lbWl0KCd0ZXN0LWZpbGUtc3RhcnQnLCBbdGVzdF0pO1xuICAgICAgICBjb25zdCBwcm9taXNlID0gd29ya2VyLndvcmtlcih7XG4gICAgICAgICAgY29uZmlnOiB0ZXN0LmNvbnRleHQuY29uZmlnLFxuICAgICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2NvbnRleHQsXG4gICAgICAgICAgICBjaGFuZ2VkRmlsZXM6XG4gICAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuY2hhbmdlZEZpbGVzICYmXG4gICAgICAgICAgICAgIEFycmF5LmZyb20odGhpcy5fY29udGV4dC5jaGFuZ2VkRmlsZXMpLFxuICAgICAgICAgICAgc291cmNlc1JlbGF0ZWRUb1Rlc3RzSW5DaGFuZ2VkRmlsZXM6XG4gICAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuc291cmNlc1JlbGF0ZWRUb1Rlc3RzSW5DaGFuZ2VkRmlsZXMgJiZcbiAgICAgICAgICAgICAgQXJyYXkuZnJvbSh0aGlzLl9jb250ZXh0LnNvdXJjZXNSZWxhdGVkVG9UZXN0c0luQ2hhbmdlZEZpbGVzKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZ2xvYmFsQ29uZmlnOiB0aGlzLl9nbG9iYWxDb25maWcsXG4gICAgICAgICAgcGF0aDogdGVzdC5wYXRoXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocHJvbWlzZS5VTlNUQUJMRV9vbkN1c3RvbU1lc3NhZ2UpIHtcbiAgICAgICAgICAvLyBUT0RPOiBHZXQgYXBwcm9wcmlhdGUgdHlwZSBmb3IgYG9uQ3VzdG9tTWVzc2FnZWBcbiAgICAgICAgICBwcm9taXNlLlVOU1RBQkxFX29uQ3VzdG9tTWVzc2FnZSgoW2V2ZW50LCBwYXlsb2FkXSkgPT5cbiAgICAgICAgICAgIHRoaXMuI2V2ZW50RW1pdHRlci5lbWl0KGV2ZW50LCBwYXlsb2FkKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICB9KTtcbiAgICBjb25zdCBvbkludGVycnVwdCA9IG5ldyBQcm9taXNlKChfLCByZWplY3QpID0+IHtcbiAgICAgIHdhdGNoZXIub24oJ2NoYW5nZScsIHN0YXRlID0+IHtcbiAgICAgICAgaWYgKHN0YXRlLmludGVycnVwdGVkKSB7XG4gICAgICAgICAgcmVqZWN0KG5ldyBDYW5jZWxSdW4oKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGNvbnN0IHJ1bkFsbFRlc3RzID0gUHJvbWlzZS5hbGwoXG4gICAgICB0ZXN0cy5tYXAodGVzdCA9PlxuICAgICAgICBydW5UZXN0SW5Xb3JrZXIodGVzdCkudGhlbihcbiAgICAgICAgICByZXN1bHQgPT5cbiAgICAgICAgICAgIHRoaXMuI2V2ZW50RW1pdHRlci5lbWl0KCd0ZXN0LWZpbGUtc3VjY2VzcycsIFt0ZXN0LCByZXN1bHRdKSxcbiAgICAgICAgICBlcnJvciA9PiB0aGlzLiNldmVudEVtaXR0ZXIuZW1pdCgndGVzdC1maWxlLWZhaWx1cmUnLCBbdGVzdCwgZXJyb3JdKVxuICAgICAgICApXG4gICAgICApXG4gICAgKTtcbiAgICBjb25zdCBjbGVhbnVwID0gYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qge2ZvcmNlRXhpdGVkfSA9IGF3YWl0IHdvcmtlci5lbmQoKTtcbiAgICAgIGlmIChmb3JjZUV4aXRlZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgIF9jaGFsaygpLmRlZmF1bHQueWVsbG93KFxuICAgICAgICAgICAgJ0Egd29ya2VyIHByb2Nlc3MgaGFzIGZhaWxlZCB0byBleGl0IGdyYWNlZnVsbHkgYW5kIGhhcyBiZWVuIGZvcmNlIGV4aXRlZC4gJyArXG4gICAgICAgICAgICAgICdUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgdGVzdHMgbGVha2luZyBkdWUgdG8gaW1wcm9wZXIgdGVhcmRvd24uICcgK1xuICAgICAgICAgICAgICAnVHJ5IHJ1bm5pbmcgd2l0aCAtLWRldGVjdE9wZW5IYW5kbGVzIHRvIGZpbmQgbGVha3MuICcgK1xuICAgICAgICAgICAgICAnQWN0aXZlIHRpbWVycyBjYW4gYWxzbyBjYXVzZSB0aGlzLCBlbnN1cmUgdGhhdCAudW5yZWYoKSB3YXMgY2FsbGVkIG9uIHRoZW0uJ1xuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBQcm9taXNlLnJhY2UoW3J1bkFsbFRlc3RzLCBvbkludGVycnVwdF0pLnRoZW4oY2xlYW51cCwgY2xlYW51cCk7XG4gIH1cbiAgb24oZXZlbnROYW1lLCBsaXN0ZW5lcikge1xuICAgIHJldHVybiB0aGlzLiNldmVudEVtaXR0ZXIub24oZXZlbnROYW1lLCBsaXN0ZW5lcik7XG4gIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFRlc3RSdW5uZXI7XG5jbGFzcyBDYW5jZWxSdW4gZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLm5hbWUgPSAnQ2FuY2VsUnVuJztcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUFDLElBQUFBLHVCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxlQUFBLEdBQUFGLHVCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBRSxpQkFBQSxHQUFBSCx1QkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUcsa0JBQUEsR0FBQUosdUJBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFJLGdCQUFBLEdBQUFMLHVCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBSyxhQUFBLEdBQUFOLHVCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBTSwyQkFBQSxHQUFBUCx1QkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQU8sZ0JBQUEsR0FBQVIsdUJBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFRLFVBQUEsR0FBQVQsdUJBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFTLDRCQUFBLEdBQUFWLHVCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBVSwyQkFBQSxHQUFBWCx1QkFBQSxDQUFBQyxPQUFBO0FBQUEsU0FBQVcsV0FBQUMsQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsV0FBQUQsQ0FBQSxPQUFBTixnQkFBQSxDQUFBUSxPQUFBLEVBQUFGLENBQUEsT0FBQVAsMkJBQUEsQ0FBQVMsT0FBQSxFQUFBSCxDQUFBLEVBQUFJLHlCQUFBLEtBQUFDLE9BQUEsQ0FBQUMsU0FBQSxDQUFBTCxDQUFBLEVBQUFDLENBQUEsWUFBQVAsZ0JBQUEsQ0FBQVEsT0FBQSxFQUFBSCxDQUFBLEVBQUFPLFdBQUEsSUFBQU4sQ0FBQSxDQUFBTyxLQUFBLENB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