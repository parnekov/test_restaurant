f7b2ffdc60eefbd8e07d2625ca2ceb91
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));
var _excluded = ["style", "opacity", "viewBox", "children", "onLayout", "preserveAspectRatio"];
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _extractResponder = _interopRequireDefault(require("../lib/extract/extractResponder"));
var _extractViewBox = _interopRequireDefault(require("../lib/extract/extractViewBox"));
var _Shape = _interopRequireDefault(require("./Shape"));
var _G = _interopRequireDefault(require("./G"));
var _AndroidSvgViewNativeComponent = _interopRequireDefault(require("../fabric/AndroidSvgViewNativeComponent"));
var _IOSSvgViewNativeComponent = _interopRequireDefault(require("../fabric/IOSSvgViewNativeComponent"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var styles = _reactNative.StyleSheet.create({
  svg: {
    backgroundColor: 'transparent',
    borderWidth: 0
  }
});
var defaultStyle = styles.svg;
var Svg = function (_Shape$default) {
  function Svg() {
    var _this;
    (0, _classCallCheck2.default)(this, Svg);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, Svg, [].concat(args));
    _this.measureInWindow = function (callback) {
      var _this2 = _this,
        root = _this2.root;
      root && root.measureInWindow(callback);
    };
    _this.measure = function (callback) {
      var _this3 = _this,
        root = _this3.root;
      root && root.measure(callback);
    };
    _this.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      var _this4 = _this,
        root = _this4.root;
      root && root.measureLayout(relativeToNativeNode, onSuccess, onFail);
    };
    _this.setNativeProps = function (props) {
      var _this5 = _this,
        root = _this5.root;
      root && root.setNativeProps(props);
    };
    _this.toDataURL = function (callback, options) {
      if (!callback) {
        return;
      }
      var handle = (0, _reactNative.findNodeHandle)(_this.root);
      var RNSVGSvgViewModule = require('../fabric/NativeSvgViewModule').default;
      RNSVGSvgViewModule.toDataURL(handle, options, callback);
    };
    return _this;
  }
  (0, _inherits2.default)(Svg, _Shape$default);
  return (0, _createClass2.default)(Svg, [{
    key: "render",
    value: function render() {
      var _this6 = this;
      var _this$props = this.props,
        style = _this$props.style,
        opacity = _this$props.opacity,
        viewBox = _this$props.viewBox,
        children = _this$props.children,
        onLayout = _this$props.onLayout,
        preserveAspectRatio = _this$props.preserveAspectRatio,
        extracted = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
      var stylesAndProps = Object.assign({}, Array.isArray(style) ? Object.assign.apply(Object, [{}].concat((0, _toConsumableArray2.default)(style))) : style, extracted);
      var color = stylesAndProps.color,
        width = stylesAndProps.width,
        height = stylesAndProps.height,
        focusable = stylesAndProps.focusable,
        transform = stylesAndProps.transform,
        font = stylesAndProps.font,
        fill = stylesAndProps.fill,
        fillOpacity = stylesAndProps.fillOpacity,
        fillRule = stylesAndProps.fillRule,
        stroke = stylesAndProps.stroke,
        strokeWidth = stylesAndProps.strokeWidth,
        strokeOpacity = stylesAndProps.strokeOpacity,
        strokeDasharray = stylesAndProps.strokeDasharray,
        strokeDashoffset = stylesAndProps.strokeDashoffset,
        strokeLinecap = stylesAndProps.strokeLinecap,
        strokeLinejoin = stylesAndProps.strokeLinejoin,
        strokeMiterlimit = stylesAndProps.strokeMiterlimit;
      if (width === undefined && height === undefined) {
        width = height = '100%';
      }
      var props = extracted;
      props.focusable = Boolean(focusable) && focusable !== 'false';
      var rootStyles = [defaultStyle];
      if (style) {
        rootStyles.push(style);
      }
      var override = false;
      var overrideStyles = {};
      var o = opacity != null ? +opacity : NaN;
      if (!isNaN(o)) {
        override = true;
        overrideStyles.opacity = o;
      }
      if (width && height) {
        override = true;
        var w = parseInt(width, 10);
        var h = parseInt(height, 10);
        var doNotParseWidth = isNaN(w) || width[width.length - 1] === '%';
        var doNotParseHeight = isNaN(h) || height[height.length - 1] === '%';
        overrideStyles.width = doNotParseWidth ? width : w;
        overrideStyles.height = doNotParseHeight ? height : h;
        overrideStyles.flex = 0;
      }
      if (override) {
        rootStyles.push(overrideStyles);
      }
      props.style = rootStyles.length > 1 ? rootStyles : defaultStyle;
      if (width != null) {
        props.bbWidth = width;
      }
      if (height != null) {
        props.bbHeight = height;
      }
      (0, _extractResponder.default)(props, props, this);
      props.tintColor = color;
      if (onLayout != null) {
        props.onLayout = onLayout;
      }
      var gStyle = Object.assign({}, style);
      if (Array.isArray(transform) && typeof transform[0] === 'object') {
        gStyle.transform = undefined;
      } else {
        props.transform = undefined;
        gStyle.transform = transform;
      }
      var RNSVGSvg = _reactNative.Platform.OS === 'android' ? _AndroidSvgViewNativeComponent.default : _IOSSvgViewNativeComponent.default;
      return React.createElement(RNSVGSvg, _extends({}, props, {
        ref: function ref(_ref) {
          return _this6.refMethod(_ref);
        }
      }, (0, _extractViewBox.default)({
        viewBox: viewBox,
        preserveAspectRatio: preserveAspectRatio
      })), React.createElement(_G.default, {
        children: children,
        style: gStyle,
        font: font,
        fill: fill,
        fillOpacity: fillOpacity,
        fillRule: fillRule,
        stroke: stroke,
        strokeWidth: strokeWidth,
        strokeOpacity: strokeOpacity,
        strokeDasharray: strokeDasharray,
        strokeDashoffset: strokeDashoffset,
        strokeLinecap: strokeLinecap,
        strokeLinejoin: strokeLinejoin,
        strokeMiterlimit: strokeMiterlimit
      }));
    }
  }]);
}(_Shape.default);
Svg.displayName = 'Svg';
Svg.defaultProps = {
  preserveAspectRatio: 'xMidYMid meet'
};
exports.default = Svg;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,