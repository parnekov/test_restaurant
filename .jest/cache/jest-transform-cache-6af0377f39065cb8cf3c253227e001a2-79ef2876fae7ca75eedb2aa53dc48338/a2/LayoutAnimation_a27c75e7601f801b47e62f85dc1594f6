abc64e0396606862bbe763173f86977e
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var ReactNativeFeatureFlags = _interopRequireWildcard(require("../../src/private/featureflags/ReactNativeFeatureFlags"));
var _FabricUIManager = require("../ReactNative/FabricUIManager");
var _Platform = _interopRequireDefault(require("../Utilities/Platform"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var UIManager = require('../ReactNative/UIManager');
var isLayoutAnimationEnabled = ReactNativeFeatureFlags.isLayoutAnimationEnabled();
function setEnabled(value) {
  isLayoutAnimationEnabled = isLayoutAnimationEnabled;
}
function configureNext(config, onAnimationDidEnd, onAnimationDidFail) {
  var _config$duration;
  if (_Platform.default.isDisableAnimations) {
    return;
  }
  if (!isLayoutAnimationEnabled) {
    return;
  }
  var animationCompletionHasRun = false;
  var onAnimationComplete = function onAnimationComplete() {
    if (animationCompletionHasRun) {
      return;
    }
    animationCompletionHasRun = true;
    clearTimeout(raceWithAnimationId);
    onAnimationDidEnd == null ? void 0 : onAnimationDidEnd();
  };
  var raceWithAnimationId = setTimeout(onAnimationComplete, ((_config$duration = config.duration) != null ? _config$duration : 0) + 17);
  var FabricUIManager = (0, _FabricUIManager.getFabricUIManager)();
  if (FabricUIManager != null && FabricUIManager.configureNextLayoutAnimation) {
    var _global, _global$nativeFabricU;
    (_global = global) == null ? void 0 : (_global$nativeFabricU = _global.nativeFabricUIManager) == null ? void 0 : _global$nativeFabricU.configureNextLayoutAnimation(config, onAnimationComplete, onAnimationDidFail != null ? onAnimationDidFail : function () {});
    return;
  }
  if (UIManager != null && UIManager.configureNextLayoutAnimation) {
    UIManager.configureNextLayoutAnimation(config, onAnimationComplete != null ? onAnimationComplete : function () {}, onAnimationDidFail != null ? onAnimationDidFail : function () {});
  }
}
function create(duration, type, property) {
  return {
    duration: duration,
    create: {
      type: type,
      property: property
    },
    update: {
      type: type
    },
    delete: {
      type: type,
      property: property
    }
  };
}
var Presets = {
  easeInEaseOut: create(300, 'easeInEaseOut', 'opacity'),
  linear: create(500, 'linear', 'opacity'),
  spring: {
    duration: 700,
    create: {
      type: 'linear',
      property: 'opacity'
    },
    update: {
      type: 'spring',
      springDamping: 0.4
    },
    delete: {
      type: 'linear',
      property: 'opacity'
    }
  }
};
var LayoutAnimation = {
  configureNext: configureNext,
  create: create,
  Types: Object.freeze({
    spring: 'spring',
    linear: 'linear',
    easeInEaseOut: 'easeInEaseOut',
    easeIn: 'easeIn',
    easeOut: 'easeOut',
    keyboard: 'keyboard'
  }),
  Properties: Object.freeze({
    opacity: 'opacity',
    scaleX: 'scaleX',
    scaleY: 'scaleY',
    scaleXY: 'scaleXY'
  }),
  checkConfig: function checkConfig() {
    console.error('LayoutAnimation.checkConfig(...) has been disabled.');
  },
  Presets: Presets,
  easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),
  linear: configureNext.bind(null, Presets.linear),
  spring: configureNext.bind(null, Presets.spring),
  setEnabled: setEnabled
};
module.exports = LayoutAnimation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIlJlYWN0TmF0aXZlRmVhdHVyZUZsYWdzIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfRmFicmljVUlNYW5hZ2VyIiwiX1BsYXRmb3JtIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiVUlNYW5hZ2VyIiwiaXNMYXlvdXRBbmltYXRpb25FbmFibGVkIiwic2V0RW5hYmxlZCIsInZhbHVlIiwiY29uZmlndXJlTmV4dCIsImNvbmZpZyIsIm9uQW5pbWF0aW9uRGlkRW5kIiwib25BbmltYXRpb25EaWRGYWlsIiwiX2NvbmZpZyRkdXJhdGlvbiIsIlBsYXRmb3JtIiwiaXNEaXNhYmxlQW5pbWF0aW9ucyIsImFuaW1hdGlvbkNvbXBsZXRpb25IYXNSdW4iLCJvbkFuaW1hdGlvbkNvbXBsZXRlIiwiY2xlYXJUaW1lb3V0IiwicmFjZVdpdGhBbmltYXRpb25JZCIsInNldFRpbWVvdXQiLCJkdXJhdGlvbiIsIkZhYnJpY1VJTWFuYWdlciIsImdldEZhYnJpY1VJTWFuYWdlciIsImNvbmZpZ3VyZU5leHRMYXlvdXRBbmltYXRpb24iLCJfZ2xvYmFsIiwiX2dsb2JhbCRuYXRpdmVGYWJyaWNVIiwiZ2xvYmFsIiwibmF0aXZlRmFicmljVUlNYW5hZ2VyIiwiY3JlYXRlIiwidHlwZSIsInByb3BlcnR5IiwidXBkYXRlIiwiZGVsZXRlIiwiUHJlc2V0cyIsImVhc2VJbkVhc2VPdXQiLCJsaW5lYXIiLCJzcHJpbmciLCJzcHJpbmdEYW1waW5nIiwiTGF5b3V0QW5pbWF0aW9uIiwiVHlwZXMiLCJmcmVlemUiLCJlYXNlSW4iLCJlYXNlT3V0Iiwia2V5Ym9hcmQiLCJQcm9wZXJ0aWVzIiwib3BhY2l0eSIsInNjYWxlWCIsInNjYWxlWSIsInNjYWxlWFkiLCJjaGVja0NvbmZpZyIsImNvbnNvbGUiLCJlcnJvciIsImJpbmQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiTGF5b3V0QW5pbWF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0eXBlIHtcbiAgTGF5b3V0QW5pbWF0aW9uQ29uZmlnIGFzIExheW91dEFuaW1hdGlvbkNvbmZpZ18sXG4gIExheW91dEFuaW1hdGlvblByb3BlcnR5LFxuICBMYXlvdXRBbmltYXRpb25UeXBlLFxufSBmcm9tICcuLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZVR5cGVzJztcblxuaW1wb3J0ICogYXMgUmVhY3ROYXRpdmVGZWF0dXJlRmxhZ3MgZnJvbSAnLi4vLi4vc3JjL3ByaXZhdGUvZmVhdHVyZWZsYWdzL1JlYWN0TmF0aXZlRmVhdHVyZUZsYWdzJztcbmltcG9ydCB7Z2V0RmFicmljVUlNYW5hZ2VyfSBmcm9tICcuLi9SZWFjdE5hdGl2ZS9GYWJyaWNVSU1hbmFnZXInO1xuaW1wb3J0IFBsYXRmb3JtIGZyb20gJy4uL1V0aWxpdGllcy9QbGF0Zm9ybSc7XG5cbmNvbnN0IFVJTWFuYWdlciA9IHJlcXVpcmUoJy4uL1JlYWN0TmF0aXZlL1VJTWFuYWdlcicpO1xuXG4vLyBSZWV4cG9ydCB0eXBlXG5leHBvcnQgdHlwZSBMYXlvdXRBbmltYXRpb25Db25maWcgPSBMYXlvdXRBbmltYXRpb25Db25maWdfO1xuXG50eXBlIE9uQW5pbWF0aW9uRGlkRW5kQ2FsbGJhY2sgPSAoKSA9PiB2b2lkO1xudHlwZSBPbkFuaW1hdGlvbkRpZEZhaWxDYWxsYmFjayA9ICgpID0+IHZvaWQ7XG5cbmxldCBpc0xheW91dEFuaW1hdGlvbkVuYWJsZWQ6IGJvb2xlYW4gPVxuICBSZWFjdE5hdGl2ZUZlYXR1cmVGbGFncy5pc0xheW91dEFuaW1hdGlvbkVuYWJsZWQoKTtcblxuZnVuY3Rpb24gc2V0RW5hYmxlZCh2YWx1ZTogYm9vbGVhbikge1xuICBpc0xheW91dEFuaW1hdGlvbkVuYWJsZWQgPSBpc0xheW91dEFuaW1hdGlvbkVuYWJsZWQ7XG59XG5cbi8qKlxuICogQ29uZmlndXJlcyB0aGUgbmV4dCBjb21taXQgdG8gYmUgYW5pbWF0ZWQuXG4gKlxuICogb25BbmltYXRpb25EaWRFbmQgaXMgZ3VhcmFudGVlZCB0byBiZSBjYWxsZWQgd2hlbiB0aGUgYW5pbWF0aW9uIGNvbXBsZXRlcy5cbiAqIG9uQW5pbWF0aW9uRGlkRmFpbCBpcyAqbmV2ZXIqIGNhbGxlZCBpbiB0aGUgY2xhc3NpYywgcHJlLUZhYnJpYyByZW5kZXJlcixcbiAqIGFuZCBuZXZlciBoYXMgYmVlbi4gSW4gdGhlIG5ldyByZW5kZXJlciAoRmFicmljKSBpdCBpcyBjYWxsZWQgb25seSBpZiBjb25maWd1cmF0aW9uXG4gKiBwYXJzaW5nIGZhaWxzLlxuICovXG5mdW5jdGlvbiBjb25maWd1cmVOZXh0KFxuICBjb25maWc6IExheW91dEFuaW1hdGlvbkNvbmZpZyxcbiAgb25BbmltYXRpb25EaWRFbmQ/OiBPbkFuaW1hdGlvbkRpZEVuZENhbGxiYWNrLFxuICBvbkFuaW1hdGlvbkRpZEZhaWw/OiBPbkFuaW1hdGlvbkRpZEZhaWxDYWxsYmFjayxcbikge1xuICBpZiAoUGxhdGZvcm0uaXNEaXNhYmxlQW5pbWF0aW9ucykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghaXNMYXlvdXRBbmltYXRpb25FbmFibGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gU2luY2UgTGF5b3V0QW5pbWF0aW9ucyBtYXkgcG9zc2libHkgYmUgZGlzYWJsZWQgZm9yIG5vdyBvbiBpT1MgKEZhYnJpYyksXG4gIC8vIG9yIEFuZHJvaWQgKG5vbi1GYWJyaWMpIHdlIHJhY2UgYSBzZXRUaW1lb3V0IHdpdGggYW5pbWF0aW9uIGNvbXBsZXRpb24sXG4gIC8vIGluIGNhc2Ugb25Db21wbGV0ZSBpcyBuZXZlciBjYWxsZWRcbiAgLy8gZnJvbSBuYXRpdmUuIE9uY2UgTGF5b3V0QW5pbWF0aW9ucytGYWJyaWMgdW5jb25kaXRpb25hbGx5IHNoaXAgZXZlcnl3aGVyZSwgd2UgY2FuXG4gIC8vIGRlbGV0ZSB0aGlzIG1lY2hhbmlzbSBhdCBsZWFzdCBpbiB0aGUgRmFicmljIGJyYW5jaC5cbiAgbGV0IGFuaW1hdGlvbkNvbXBsZXRpb25IYXNSdW4gPSBmYWxzZTtcbiAgY29uc3Qgb25BbmltYXRpb25Db21wbGV0ZSA9ICgpID0+IHtcbiAgICBpZiAoYW5pbWF0aW9uQ29tcGxldGlvbkhhc1J1bikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhbmltYXRpb25Db21wbGV0aW9uSGFzUnVuID0gdHJ1ZTtcbiAgICBjbGVhclRpbWVvdXQocmFjZVdpdGhBbmltYXRpb25JZCk7XG4gICAgb25BbmltYXRpb25EaWRFbmQ/LigpO1xuICB9O1xuICBjb25zdCByYWNlV2l0aEFuaW1hdGlvbklkID0gc2V0VGltZW91dChcbiAgICBvbkFuaW1hdGlvbkNvbXBsZXRlLFxuICAgIChjb25maWcuZHVyYXRpb24gPz8gMCkgKyAxNyAvKiBvbmUgZnJhbWUgKyAxbXMgKi8sXG4gICk7XG5cbiAgLy8gSW4gRmFicmljLCBMYXlvdXRBbmltYXRpb25zIGFyZSB1bmNvbmRpdGlvbmFsbHkgZW5hYmxlZCBmb3IgQW5kcm9pZCwgYW5kXG4gIC8vIGNvbmRpdGlvbmFsbHkgZW5hYmxlZCBvbiBpT1MgKHBlbmRpbmcgZnVsbHkgc2hpcHBpbmc7IHRoaXMgaXMgYSB0ZW1wb3Jhcnkgc3RhdGUpLlxuICBjb25zdCBGYWJyaWNVSU1hbmFnZXIgPSBnZXRGYWJyaWNVSU1hbmFnZXIoKTtcbiAgaWYgKEZhYnJpY1VJTWFuYWdlcj8uY29uZmlndXJlTmV4dExheW91dEFuaW1hdGlvbikge1xuICAgIGdsb2JhbD8ubmF0aXZlRmFicmljVUlNYW5hZ2VyPy5jb25maWd1cmVOZXh0TGF5b3V0QW5pbWF0aW9uKFxuICAgICAgY29uZmlnLFxuICAgICAgb25BbmltYXRpb25Db21wbGV0ZSxcbiAgICAgIG9uQW5pbWF0aW9uRGlkRmFpbCA/P1xuICAgICAgICBmdW5jdGlvbiAoKSB7fSAvKiB0aGlzIHdpbGwgb25seSBiZSBjYWxsZWQgaWYgY29uZmlndXJhdGlvbiBwYXJzaW5nIGZhaWxzICovLFxuICAgICk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVGhpcyB3aWxsIG9ubHkgcnVuIGlmIEZhYnJpYyBpcyAqbm90KiBpbnN0YWxsZWQuXG4gIC8vIElmIHlvdSBoYXZlIEZhYnJpYyArIG5vbi1GYWJyaWMgcnVubmluZyBpbiB0aGUgc2FtZSBWTSwgbm9uLUZhYnJpYyBMYXlvdXRBbmltYXRpb25zXG4gIC8vIHdpbGwgbm90IHdvcmsuXG4gIGlmIChVSU1hbmFnZXI/LmNvbmZpZ3VyZU5leHRMYXlvdXRBbmltYXRpb24pIHtcbiAgICBVSU1hbmFnZXIuY29uZmlndXJlTmV4dExheW91dEFuaW1hdGlvbihcbiAgICAgIGNvbmZpZyxcbiAgICAgIG9uQW5pbWF0aW9uQ29tcGxldGUgPz8gZnVuY3Rpb24gKCkge30sXG4gICAgICBvbkFuaW1hdGlvbkRpZEZhaWwgPz9cbiAgICAgICAgZnVuY3Rpb24gKCkge30gLyogdGhpcyBzaG91bGQgbmV2ZXIgYmUgY2FsbGVkIGluIE5vbi1GYWJyaWMgKi8sXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGUoXG4gIGR1cmF0aW9uOiBudW1iZXIsXG4gIHR5cGU6IExheW91dEFuaW1hdGlvblR5cGUsXG4gIHByb3BlcnR5OiBMYXlvdXRBbmltYXRpb25Qcm9wZXJ0eSxcbik6IExheW91dEFuaW1hdGlvbkNvbmZpZyB7XG4gIHJldHVybiB7XG4gICAgZHVyYXRpb24sXG4gICAgY3JlYXRlOiB7dHlwZSwgcHJvcGVydHl9LFxuICAgIHVwZGF0ZToge3R5cGV9LFxuICAgIGRlbGV0ZToge3R5cGUsIHByb3BlcnR5fSxcbiAgfTtcbn1cblxuY29uc3QgUHJlc2V0cyA9IHtcbiAgZWFzZUluRWFzZU91dDogKGNyZWF0ZShcbiAgICAzMDAsXG4gICAgJ2Vhc2VJbkVhc2VPdXQnLFxuICAgICdvcGFjaXR5JyxcbiAgKTogTGF5b3V0QW5pbWF0aW9uQ29uZmlnKSxcbiAgbGluZWFyOiAoY3JlYXRlKDUwMCwgJ2xpbmVhcicsICdvcGFjaXR5Jyk6IExheW91dEFuaW1hdGlvbkNvbmZpZyksXG4gIHNwcmluZzoge1xuICAgIGR1cmF0aW9uOiA3MDAsXG4gICAgY3JlYXRlOiB7XG4gICAgICB0eXBlOiAnbGluZWFyJyxcbiAgICAgIHByb3BlcnR5OiAnb3BhY2l0eScsXG4gICAgfSxcbiAgICB1cGRhdGU6IHtcbiAgICAgIHR5cGU6ICdzcHJpbmcnLFxuICAgICAgc3ByaW5nRGFtcGluZzogMC40LFxuICAgIH0sXG4gICAgZGVsZXRlOiB7XG4gICAgICB0eXBlOiAnbGluZWFyJyxcbiAgICAgIHByb3BlcnR5OiAnb3BhY2l0eScsXG4gICAgfSxcbiAgfSxcbn07XG5cbi8qKlxuICogQXV0b21hdGljYWxseSBhbmltYXRlcyB2aWV3cyB0byB0aGVpciBuZXcgcG9zaXRpb25zIHdoZW4gdGhlXG4gKiBuZXh0IGxheW91dCBoYXBwZW5zLlxuICpcbiAqIEEgY29tbW9uIHdheSB0byB1c2UgdGhpcyBBUEkgaXMgdG8gY2FsbCBpdCBiZWZvcmUgY2FsbGluZyBgc2V0U3RhdGVgLlxuICpcbiAqIE5vdGUgdGhhdCBpbiBvcmRlciB0byBnZXQgdGhpcyB0byB3b3JrIG9uICoqQW5kcm9pZCoqIHlvdSBuZWVkIHRvIHNldCB0aGUgZm9sbG93aW5nIGZsYWdzIHZpYSBgVUlNYW5hZ2VyYDpcbiAqXG4gKiAgICAgVUlNYW5hZ2VyLnNldExheW91dEFuaW1hdGlvbkVuYWJsZWRFeHBlcmltZW50YWwgJiYgVUlNYW5hZ2VyLnNldExheW91dEFuaW1hdGlvbkVuYWJsZWRFeHBlcmltZW50YWwodHJ1ZSk7XG4gKi9cbmNvbnN0IExheW91dEFuaW1hdGlvbiA9IHtcbiAgLyoqXG4gICAqIFNjaGVkdWxlcyBhbiBhbmltYXRpb24gdG8gaGFwcGVuIG9uIHRoZSBuZXh0IGxheW91dC5cbiAgICpcbiAgICogQHBhcmFtIGNvbmZpZyBTcGVjaWZpZXMgYW5pbWF0aW9uIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAgLSBgZHVyYXRpb25gIGluIG1pbGxpc2Vjb25kc1xuICAgKiAgIC0gYGNyZWF0ZWAsIGBBbmltYXRpb25Db25maWdgIGZvciBhbmltYXRpbmcgaW4gbmV3IHZpZXdzXG4gICAqICAgLSBgdXBkYXRlYCwgYEFuaW1hdGlvbkNvbmZpZ2AgZm9yIGFuaW1hdGluZyB2aWV3cyB0aGF0IGhhdmUgYmVlbiB1cGRhdGVkXG4gICAqXG4gICAqIEBwYXJhbSBvbkFuaW1hdGlvbkRpZEVuZCBDYWxsZWQgd2hlbiB0aGUgYW5pbWF0aW9uIGZpbmlzaGVkLlxuICAgKiBPbmx5IHN1cHBvcnRlZCBvbiBpT1MuXG4gICAqIEBwYXJhbSBvbkVycm9yIENhbGxlZCBvbiBlcnJvci4gT25seSBzdXBwb3J0ZWQgb24gaU9TLlxuICAgKi9cbiAgY29uZmlndXJlTmV4dCxcbiAgLyoqXG4gICAqIEhlbHBlciBmb3IgY3JlYXRpbmcgYSBjb25maWcgZm9yIGBjb25maWd1cmVOZXh0YC5cbiAgICovXG4gIGNyZWF0ZSxcbiAgVHlwZXM6IE9iamVjdC5mcmVlemUoe1xuICAgIHNwcmluZzogJ3NwcmluZycsXG4gICAgbGluZWFyOiAnbGluZWFyJyxcbiAgICBlYXNlSW5FYXNlT3V0OiAnZWFzZUluRWFzZU91dCcsXG4gICAgZWFzZUluOiAnZWFzZUluJyxcbiAgICBlYXNlT3V0OiAnZWFzZU91dCcsXG4gICAga2V5Ym9hcmQ6ICdrZXlib2FyZCcsXG4gIH0pLFxuICBQcm9wZXJ0aWVzOiBPYmplY3QuZnJlZXplKHtcbiAgICBvcGFjaXR5OiAnb3BhY2l0eScsXG4gICAgc2NhbGVYOiAnc2NhbGVYJyxcbiAgICBzY2FsZVk6ICdzY2FsZVknLFxuICAgIHNjYWxlWFk6ICdzY2FsZVhZJyxcbiAgfSksXG4gIGNoZWNrQ29uZmlnKC4uLmFyZ3M6IEFycmF5PG1peGVkPikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0xheW91dEFuaW1hdGlvbi5jaGVja0NvbmZpZyguLi4pIGhhcyBiZWVuIGRpc2FibGVkLicpO1xuICB9LFxuICBQcmVzZXRzLFxuICBlYXNlSW5FYXNlT3V0OiAoY29uZmlndXJlTmV4dC5iaW5kKG51bGwsIFByZXNldHMuZWFzZUluRWFzZU91dCk6IChcbiAgICBvbkFuaW1hdGlvbkRpZEVuZD86IE9uQW5pbWF0aW9uRGlkRW5kQ2FsbGJhY2ssXG4gICkgPT4gdm9pZCksXG4gIGxpbmVhcjogKGNvbmZpZ3VyZU5leHQuYmluZChudWxsLCBQcmVzZXRzLmxpbmVhcik6IChcbiAgICBvbkFuaW1hdGlvbkRpZEVuZD86IE9uQW5pbWF0aW9uRGlkRW5kQ2FsbGJhY2ssXG4gICkgPT4gdm9pZCksXG4gIHNwcmluZzogKGNvbmZpZ3VyZU5leHQuYmluZChudWxsLCBQcmVzZXRzLnNwcmluZyk6IChcbiAgICBvbkFuaW1hdGlvbkRpZEVuZD86IE9uQW5pbWF0aW9uRGlkRW5kQ2FsbGJhY2ssXG4gICkgPT4gdm9pZCksXG4gIHNldEVuYWJsZWQsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExheW91dEFuaW1hdGlvbjtcbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTs7QUFBQyxJQUFBQSxzQkFBQSxHQUFBQyxPQUFBO0FBUWIsSUFBQUMsdUJBQUEsR0FBQUMsdUJBQUEsQ0FBQUYsT0FBQTtBQUNB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