5fffd4df0a1092cdbc71e4c44e478a74
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _flattenStyle = _interopRequireDefault(require("../../StyleSheet/flattenStyle"));
var _TextAncestor = _interopRequireDefault(require("../../Text/TextAncestor"));
var _ViewNativeComponent = _interopRequireDefault(require("./ViewNativeComponent"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["accessibilityElementsHidden", "accessibilityLabel", "accessibilityLabelledBy", "accessibilityLiveRegion", "accessibilityState", "accessibilityValue", "aria-busy", "aria-checked", "aria-disabled", "aria-expanded", "aria-hidden", "aria-label", "aria-labelledby", "aria-live", "aria-selected", "aria-valuemax", "aria-valuemin", "aria-valuenow", "aria-valuetext", "focusable", "id", "importantForAccessibility", "nativeID", "pointerEvents", "tabIndex"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var View = React.forwardRef(function (_ref, forwardedRef) {
  var _ariaLabelledBy$split;
  var accessibilityElementsHidden = _ref.accessibilityElementsHidden,
    accessibilityLabel = _ref.accessibilityLabel,
    accessibilityLabelledBy = _ref.accessibilityLabelledBy,
    accessibilityLiveRegion = _ref.accessibilityLiveRegion,
    accessibilityState = _ref.accessibilityState,
    accessibilityValue = _ref.accessibilityValue,
    ariaBusy = _ref['aria-busy'],
    ariaChecked = _ref['aria-checked'],
    ariaDisabled = _ref['aria-disabled'],
    ariaExpanded = _ref['aria-expanded'],
    ariaHidden = _ref['aria-hidden'],
    ariaLabel = _ref['aria-label'],
    ariaLabelledBy = _ref['aria-labelledby'],
    ariaLive = _ref['aria-live'],
    ariaSelected = _ref['aria-selected'],
    ariaValueMax = _ref['aria-valuemax'],
    ariaValueMin = _ref['aria-valuemin'],
    ariaValueNow = _ref['aria-valuenow'],
    ariaValueText = _ref['aria-valuetext'],
    focusable = _ref.focusable,
    id = _ref.id,
    importantForAccessibility = _ref.importantForAccessibility,
    nativeID = _ref.nativeID,
    pointerEvents = _ref.pointerEvents,
    tabIndex = _ref.tabIndex,
    otherProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var hasTextAncestor = React.useContext(_TextAncestor.default);
  var _accessibilityLabelledBy = (_ariaLabelledBy$split = ariaLabelledBy == null ? void 0 : ariaLabelledBy.split(/\s*,\s*/g)) != null ? _ariaLabelledBy$split : accessibilityLabelledBy;
  var _accessibilityState;
  if (accessibilityState != null || ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) {
    _accessibilityState = {
      busy: ariaBusy != null ? ariaBusy : accessibilityState == null ? void 0 : accessibilityState.busy,
      checked: ariaChecked != null ? ariaChecked : accessibilityState == null ? void 0 : accessibilityState.checked,
      disabled: ariaDisabled != null ? ariaDisabled : accessibilityState == null ? void 0 : accessibilityState.disabled,
      expanded: ariaExpanded != null ? ariaExpanded : accessibilityState == null ? void 0 : accessibilityState.expanded,
      selected: ariaSelected != null ? ariaSelected : accessibilityState == null ? void 0 : accessibilityState.selected
    };
  }
  var _accessibilityValue;
  if (accessibilityValue != null || ariaValueMax != null || ariaValueMin != null || ariaValueNow != null || ariaValueText != null) {
    _accessibilityValue = {
      max: ariaValueMax != null ? ariaValueMax : accessibilityValue == null ? void 0 : accessibilityValue.max,
      min: ariaValueMin != null ? ariaValueMin : accessibilityValue == null ? void 0 : accessibilityValue.min,
      now: ariaValueNow != null ? ariaValueNow : accessibilityValue == null ? void 0 : accessibilityValue.now,
      text: ariaValueText != null ? ariaValueText : accessibilityValue == null ? void 0 : accessibilityValue.text
    };
  }
  var style = (0, _flattenStyle.default)(otherProps.style);
  var newPointerEvents = (style == null ? void 0 : style.pointerEvents) || pointerEvents;
  var actualView = (0, _jsxRuntime.jsx)(_ViewNativeComponent.default, Object.assign({}, otherProps, {
    accessibilityLiveRegion: ariaLive === 'off' ? 'none' : ariaLive != null ? ariaLive : accessibilityLiveRegion,
    accessibilityLabel: ariaLabel != null ? ariaLabel : accessibilityLabel,
    focusable: tabIndex !== undefined ? !tabIndex : focusable,
    accessibilityState: _accessibilityState,
    accessibilityElementsHidden: ariaHidden != null ? ariaHidden : accessibilityElementsHidden,
    accessibilityLabelledBy: _accessibilityLabelledBy,
    accessibilityValue: _accessibilityValue,
    importantForAccessibility: ariaHidden === true ? 'no-hide-descendants' : importantForAccessibility,
    nativeID: id != null ? id : nativeID,
    style: style,
    pointerEvents: newPointerEvents,
    ref: forwardedRef
  }));
  if (hasTextAncestor) {
    return (0, _jsxRuntime.jsx)(_TextAncestor.default.Provider, {
      value: false,
      children: actualView
    });
  }
  return actualView;
});
View.displayName = 'View';
module.exports = View;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZmxhdHRlblN0eWxlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfVGV4dEFuY2VzdG9yIiwiX1ZpZXdOYXRpdmVDb21wb25lbnQiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2pzeFJ1bnRpbWUiLCJfZXhjbHVkZWQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJWaWV3IiwiZm9yd2FyZFJlZiIsIl9yZWYiLCJmb3J3YXJkZWRSZWYiLCJfYXJpYUxhYmVsbGVkQnkkc3BsaXQiLCJhY2Nlc3NpYmlsaXR5RWxlbWVudHNIaWRkZW4iLCJhY2Nlc3NpYmlsaXR5TGFiZWwiLCJhY2Nlc3NpYmlsaXR5TGFiZWxsZWRCeSIsImFjY2Vzc2liaWxpdHlMaXZlUmVnaW9uIiwiYWNjZXNzaWJpbGl0eVN0YXRlIiwiYWNjZXNzaWJpbGl0eVZhbHVlIiwiYXJpYUJ1c3kiLCJhcmlhQ2hlY2tlZCIsImFyaWFEaXNhYmxlZCIsImFyaWFFeHBhbmRlZCIsImFyaWFIaWRkZW4iLCJhcmlhTGFiZWwiLCJhcmlhTGFiZWxsZWRCeSIsImFyaWFMaXZlIiwiYXJpYVNlbGVjdGVkIiwiYXJpYVZhbHVlTWF4IiwiYXJpYVZhbHVlTWluIiwiYXJpYVZhbHVlTm93IiwiYXJpYVZhbHVlVGV4dCIsImZvY3VzYWJsZSIsImlkIiwiaW1wb3J0YW50Rm9yQWNjZXNzaWJpbGl0eSIsIm5hdGl2ZUlEIiwicG9pbnRlckV2ZW50cyIsInRhYkluZGV4Iiwib3RoZXJQcm9wcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllczIiLCJoYXNUZXh0QW5jZXN0b3IiLCJ1c2VDb250ZXh0IiwiVGV4dEFuY2VzdG9yIiwiX2FjY2Vzc2liaWxpdHlMYWJlbGxlZEJ5Iiwic3BsaXQiLCJfYWNjZXNzaWJpbGl0eVN0YXRlIiwiYnVzeSIsImNoZWNrZWQiLCJkaXNhYmxlZCIsImV4cGFuZGVkIiwic2VsZWN0ZWQiLCJfYWNjZXNzaWJpbGl0eVZhbHVlIiwibWF4IiwibWluIiwibm93IiwidGV4dCIsInN0eWxlIiwiZmxhdHRlblN0eWxlIiwibmV3UG9pbnRlckV2ZW50cyIsImFjdHVhbFZpZXciLCJqc3giLCJhc3NpZ24iLCJ1bmRlZmluZWQiLCJyZWYiLCJQcm92aWRlciIsInZhbHVlIiwiY2hpbGRyZW4iLCJkaXNwbGF5TmFtZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJWaWV3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG5pbXBvcnQgdHlwZSB7Vmlld1Byb3BzfSBmcm9tICcuL1ZpZXdQcm9wVHlwZXMnO1xuXG5pbXBvcnQgZmxhdHRlblN0eWxlIGZyb20gJy4uLy4uL1N0eWxlU2hlZXQvZmxhdHRlblN0eWxlJztcbmltcG9ydCBUZXh0QW5jZXN0b3IgZnJvbSAnLi4vLi4vVGV4dC9UZXh0QW5jZXN0b3InO1xuaW1wb3J0IFZpZXdOYXRpdmVDb21wb25lbnQgZnJvbSAnLi9WaWV3TmF0aXZlQ29tcG9uZW50JztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IHR5cGUgUHJvcHMgPSBWaWV3UHJvcHM7XG5cbi8qKlxuICogVGhlIG1vc3QgZnVuZGFtZW50YWwgY29tcG9uZW50IGZvciBidWlsZGluZyBhIFVJLCBWaWV3IGlzIGEgY29udGFpbmVyIHRoYXRcbiAqIHN1cHBvcnRzIGxheW91dCB3aXRoIGZsZXhib3gsIHN0eWxlLCBzb21lIHRvdWNoIGhhbmRsaW5nLCBhbmQgYWNjZXNzaWJpbGl0eVxuICogY29udHJvbHMuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3ZpZXdcbiAqL1xuY29uc3QgVmlldzogUmVhY3QuQWJzdHJhY3RDb21wb25lbnQ8XG4gIFZpZXdQcm9wcyxcbiAgUmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgVmlld05hdGl2ZUNvbXBvbmVudD4sXG4+ID0gUmVhY3QuZm9yd2FyZFJlZihcbiAgKFxuICAgIHtcbiAgICAgIGFjY2Vzc2liaWxpdHlFbGVtZW50c0hpZGRlbixcbiAgICAgIGFjY2Vzc2liaWxpdHlMYWJlbCxcbiAgICAgIGFjY2Vzc2liaWxpdHlMYWJlbGxlZEJ5LFxuICAgICAgYWNjZXNzaWJpbGl0eUxpdmVSZWdpb24sXG4gICAgICBhY2Nlc3NpYmlsaXR5U3RhdGUsXG4gICAgICBhY2Nlc3NpYmlsaXR5VmFsdWUsXG4gICAgICAnYXJpYS1idXN5JzogYXJpYUJ1c3ksXG4gICAgICAnYXJpYS1jaGVja2VkJzogYXJpYUNoZWNrZWQsXG4gICAgICAnYXJpYS1kaXNhYmxlZCc6IGFyaWFEaXNhYmxlZCxcbiAgICAgICdhcmlhLWV4cGFuZGVkJzogYXJpYUV4cGFuZGVkLFxuICAgICAgJ2FyaWEtaGlkZGVuJzogYXJpYUhpZGRlbixcbiAgICAgICdhcmlhLWxhYmVsJzogYXJpYUxhYmVsLFxuICAgICAgJ2FyaWEtbGFiZWxsZWRieSc6IGFyaWFMYWJlbGxlZEJ5LFxuICAgICAgJ2FyaWEtbGl2ZSc6IGFyaWFMaXZlLFxuICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiBhcmlhU2VsZWN0ZWQsXG4gICAgICAnYXJpYS12YWx1ZW1heCc6IGFyaWFWYWx1ZU1heCxcbiAgICAgICdhcmlhLXZhbHVlbWluJzogYXJpYVZhbHVlTWluLFxuICAgICAgJ2FyaWEtdmFsdWVub3cnOiBhcmlhVmFsdWVOb3csXG4gICAgICAnYXJpYS12YWx1ZXRleHQnOiBhcmlhVmFsdWVUZXh0LFxuICAgICAgZm9jdXNhYmxlLFxuICAgICAgaWQsXG4gICAgICBpbXBvcnRhbnRGb3JBY2Nlc3NpYmlsaXR5LFxuICAgICAgbmF0aXZlSUQsXG4gICAgICBwb2ludGVyRXZlbnRzLFxuICAgICAgdGFiSW5kZXgsXG4gICAgICAuLi5vdGhlclByb3BzXG4gICAgfTogVmlld1Byb3BzLFxuICAgIGZvcndhcmRlZFJlZixcbiAgKSA9PiB7XG4gICAgY29uc3QgaGFzVGV4dEFuY2VzdG9yID0gUmVhY3QudXNlQ29udGV4dChUZXh0QW5jZXN0b3IpO1xuICAgIGNvbnN0IF9hY2Nlc3NpYmlsaXR5TGFiZWxsZWRCeSA9XG4gICAgICBhcmlhTGFiZWxsZWRCeT8uc3BsaXQoL1xccyosXFxzKi9nKSA/PyBhY2Nlc3NpYmlsaXR5TGFiZWxsZWRCeTtcblxuICAgIGxldCBfYWNjZXNzaWJpbGl0eVN0YXRlO1xuICAgIGlmIChcbiAgICAgIGFjY2Vzc2liaWxpdHlTdGF0ZSAhPSBudWxsIHx8XG4gICAgICBhcmlhQnVzeSAhPSBudWxsIHx8XG4gICAgICBhcmlhQ2hlY2tlZCAhPSBudWxsIHx8XG4gICAgICBhcmlhRGlzYWJsZWQgIT0gbnVsbCB8fFxuICAgICAgYXJpYUV4cGFuZGVkICE9IG51bGwgfHxcbiAgICAgIGFyaWFTZWxlY3RlZCAhPSBudWxsXG4gICAgKSB7XG4gICAgICBfYWNjZXNzaWJpbGl0eVN0YXRlID0ge1xuICAgICAgICBidXN5OiBhcmlhQnVzeSA/PyBhY2Nlc3NpYmlsaXR5U3RhdGU/LmJ1c3ksXG4gICAgICAgIGNoZWNrZWQ6IGFyaWFDaGVja2VkID8/IGFjY2Vzc2liaWxpdHlTdGF0ZT8uY2hlY2tlZCxcbiAgICAgICAgZGlzYWJsZWQ6IGFyaWFEaXNhYmxlZCA/PyBhY2Nlc3NpYmlsaXR5U3RhdGU/LmRpc2FibGVkLFxuICAgICAgICBleHBhbmRlZDogYXJpYUV4cGFuZGVkID8/IGFjY2Vzc2liaWxpdHlTdGF0ZT8uZXhwYW5kZWQsXG4gICAgICAgIHNlbGVjdGVkOiBhcmlhU2VsZWN0ZWQgPz8gYWNjZXNzaWJpbGl0eVN0YXRlPy5zZWxlY3RlZCxcbiAgICAgIH07XG4gICAgfVxuICAgIGxldCBfYWNjZXNzaWJpbGl0eVZhbHVlO1xuICAgIGlmIChcbiAgICAgIGFjY2Vzc2liaWxpdHlWYWx1ZSAhPSBudWxsIHx8XG4gICAgICBhcmlhVmFsdWVNYXggIT0gbnVsbCB8fFxuICAgICAgYXJpYVZhbHVlTWluICE9IG51bGwgfHxcbiAgICAgIGFyaWFWYWx1ZU5vdyAhPSBudWxsIHx8XG4gICAgICBhcmlhVmFsdWVUZXh0ICE9IG51bGxcbiAgICApIHtcbiAgICAgIF9hY2Nlc3NpYmlsaXR5VmFsdWUgPSB7XG4gICAgICAgIG1heDogYXJpYVZhbHVlTWF4ID8/IGFjY2Vzc2liaWxpdHlWYWx1ZT8ubWF4LFxuICAgICAgICBtaW46IGFyaWFWYWx1ZU1pbiA/PyBhY2Nlc3NpYmlsaXR5VmFsdWU/Lm1pbixcbiAgICAgICAgbm93OiBhcmlhVmFsdWVOb3cgPz8gYWNjZXNzaWJpbGl0eVZhbHVlPy5ub3csXG4gICAgICAgIHRleHQ6IGFyaWFWYWx1ZVRleHQgPz8gYWNjZXNzaWJpbGl0eVZhbHVlPy50ZXh0LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyAkRmxvd0ZpeE1lW3VuZGVyY29uc3RyYWluZWQtaW1wbGljaXQtaW5zdGFudGlhdGlvbl1cbiAgICBsZXQgc3R5bGUgPSBmbGF0dGVuU3R5bGUob3RoZXJQcm9wcy5zdHlsZSk7XG5cbiAgICAvLyAkRmxvd0ZpeE1lW3NrZXRjaHktbnVsbC1taXhlZF1cbiAgICBjb25zdCBuZXdQb2ludGVyRXZlbnRzID0gc3R5bGU/LnBvaW50ZXJFdmVudHMgfHwgcG9pbnRlckV2ZW50cztcblxuICAgIGNvbnN0IGFjdHVhbFZpZXcgPSAoXG4gICAgICA8Vmlld05hdGl2ZUNvbXBvbmVudFxuICAgICAgICB7Li4ub3RoZXJQcm9wc31cbiAgICAgICAgYWNjZXNzaWJpbGl0eUxpdmVSZWdpb249e1xuICAgICAgICAgIGFyaWFMaXZlID09PSAnb2ZmJyA/ICdub25lJyA6IGFyaWFMaXZlID8/IGFjY2Vzc2liaWxpdHlMaXZlUmVnaW9uXG4gICAgICAgIH1cbiAgICAgICAgYWNjZXNzaWJpbGl0eUxhYmVsPXthcmlhTGFiZWwgPz8gYWNjZXNzaWJpbGl0eUxhYmVsfVxuICAgICAgICBmb2N1c2FibGU9e3RhYkluZGV4ICE9PSB1bmRlZmluZWQgPyAhdGFiSW5kZXggOiBmb2N1c2FibGV9XG4gICAgICAgIGFjY2Vzc2liaWxpdHlTdGF0ZT17X2FjY2Vzc2liaWxpdHlTdGF0ZX1cbiAgICAgICAgYWNjZXNzaWJpbGl0eUVsZW1lbnRzSGlkZGVuPXthcmlhSGlkZGVuID8/IGFjY2Vzc2liaWxpdHlFbGVtZW50c0hpZGRlbn1cbiAgICAgICAgYWNjZXNzaWJpbGl0eUxhYmVsbGVkQnk9e19hY2Nlc3NpYmlsaXR5TGFiZWxsZWRCeX1cbiAgICAgICAgYWNjZXNzaWJpbGl0eVZhbHVlPXtfYWNjZXNzaWJpbGl0eVZhbHVlfVxuICAgICAgICBpbXBvcnRhbnRGb3JBY2Nlc3NpYmlsaXR5PXtcbiAgICAgICAgICBhcmlhSGlkZGVuID09PSB0cnVlXG4gICAgICAgICAgICA/ICduby1oaWRlLWRlc2NlbmRhbnRzJ1xuICAgICAgICAgICAgOiBpbXBvcnRhbnRGb3JBY2Nlc3NpYmlsaXR5XG4gICAgICAgIH1cbiAgICAgICAgbmF0aXZlSUQ9e2lkID8/IG5hdGl2ZUlEfVxuICAgICAgICBzdHlsZT17c3R5bGV9XG4gICAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGVdXG4gICAgICAgIHBvaW50ZXJFdmVudHM9e25ld1BvaW50ZXJFdmVudHN9XG4gICAgICAgIHJlZj17Zm9yd2FyZGVkUmVmfVxuICAgICAgLz5cbiAgICApO1xuXG4gICAgaWYgKGhhc1RleHRBbmNlc3Rvcikge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFRleHRBbmNlc3Rvci5Qcm92aWRlciB2YWx1ZT17ZmFsc2V9PlxuICAgICAgICAgIHthY3R1YWxWaWV3fVxuICAgICAgICA8L1RleHRBbmNlc3Rvci5Qcm92aWRlcj5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdHVhbFZpZXc7XG4gIH0sXG4pO1xuXG5WaWV3LmRpc3BsYXlOYW1lID0gJ1ZpZXcnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZpZXc7XG4iXSwibWFwcGluZ3MiOiI7O0FBWUEsSUFBQUEsYUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsb0JBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUosT0FBQTtBQUErQixJQUFBSyxXQUFBLEdBQUFMLE9BQUE7QUFBQSxJQUFBTSxTQUFBO0FBQUEsU0FBQUMseUJBQUFDLENBQUEsNkJBQUFDLE9BQUEsbUJBQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLENBQUEsV0FBQUEsQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUEsS0FBQUYsQ0FBQTtBQUFBLFNBQUFKLHdCQUFBSSxDQUFBLEVBQUFFLENBQUEsU0FBQUEsQ0FBQSxJQUFBRixDQUFBLElBQUFBLENBQUEsQ0FBQUksVUFBQSxTQUFBSixDQUFBLGVBQUFBLENBQUEsdUJBQUFBLENBQUEseUJBQUFBLENBQUEsV0FBQUssT0FBQSxFQUFBTCxDQUFBLFFBQUFHLENBQUEsR0FBQUosd0JBQUEsQ0FBQUcsQ0FBQSxPQUFBQyxDQUFBLElBQUFBLENBQUEsQ0FBQUcsR0FBQSxDQUFBTixDQUFBLFVBQUFHLENBQUEsQ0FBQUksR0FBQSxDQUFBUCxDQUFBLE9BQUFRLENBQUEsS0FB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