73bfcd4996c98a5e3ad60ff3c7f5031f
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.emitTypingEvents = emitTypingEvents;
exports.type = type;
var _hostComponentNames = require("../../helpers/host-component-names");
var _eventBuilder = require("../event-builder");
var _errors = require("../../helpers/errors");
var _textInput = require("../../helpers/text-input");
var _pointerEvents = require("../../helpers/pointer-events");
var _utils = require("../utils");
var _parseKeys = require("./parse-keys");
function type(_x, _x2, _x3) {
  return _type.apply(this, arguments);
}
function _type() {
  _type = (0, _asyncToGenerator2.default)(function* (element, text, options) {
    var _ref, _element$props$value, _element$props$value3;
    if (!(0, _hostComponentNames.isHostTextInput)(element)) {
      throw new _errors.ErrorWithStack(`type() works only with host "TextInput" elements. Passed element has type "${element.type}".`, type);
    }
    if (!(0, _textInput.isTextInputEditable)(element) || !(0, _pointerEvents.isPointerEventEnabled)(element)) {
      return;
    }
    var keys = (0, _parseKeys.parseKeys)(text);
    if (!(options != null && options.skipPress)) {
      (0, _utils.dispatchEvent)(element, 'pressIn', _eventBuilder.EventBuilder.Common.touch());
    }
    (0, _utils.dispatchEvent)(element, 'focus', _eventBuilder.EventBuilder.Common.focus());
    if (!(options != null && options.skipPress)) {
      yield (0, _utils.wait)(this.config);
      (0, _utils.dispatchEvent)(element, 'pressOut', _eventBuilder.EventBuilder.Common.touch());
    }
    var currentText = (_ref = (_element$props$value = element.props.value) != null ? _element$props$value : element.props.defaultValue) != null ? _ref : '';
    for (var key of keys) {
      var _element$props$value2;
      var previousText = (_element$props$value2 = element.props.value) != null ? _element$props$value2 : currentText;
      currentText = applyKey(previousText, key);
      yield emitTypingEvents(this.config, element, key, currentText, previousText);
    }
    var finalText = (_element$props$value3 = element.props.value) != null ? _element$props$value3 : currentText;
    yield (0, _utils.wait)(this.config);
    if (options != null && options.submitEditing) {
      (0, _utils.dispatchEvent)(element, 'submitEditing', _eventBuilder.EventBuilder.TextInput.submitEditing(finalText));
    }
    (0, _utils.dispatchEvent)(element, 'endEditing', _eventBuilder.EventBuilder.TextInput.endEditing(finalText));
    (0, _utils.dispatchEvent)(element, 'blur', _eventBuilder.EventBuilder.Common.blur());
  });
  return _type.apply(this, arguments);
}
function emitTypingEvents(_x4, _x5, _x6, _x7, _x8) {
  return _emitTypingEvents.apply(this, arguments);
}
function _emitTypingEvents() {
  _emitTypingEvents = (0, _asyncToGenerator2.default)(function* (config, element, key, currentText, previousText) {
    var isMultiline = element.props.multiline === true;
    yield (0, _utils.wait)(config);
    (0, _utils.dispatchEvent)(element, 'keyPress', _eventBuilder.EventBuilder.TextInput.keyPress(key));
    if (isMultiline) {
      (0, _utils.dispatchEvent)(element, 'textInput', _eventBuilder.EventBuilder.TextInput.textInput(currentText, previousText));
    }
    (0, _utils.dispatchEvent)(element, 'change', _eventBuilder.EventBuilder.TextInput.change(currentText));
    (0, _utils.dispatchEvent)(element, 'changeText', currentText);
    var selectionRange = {
      start: currentText.length,
      end: currentText.length
    };
    (0, _utils.dispatchEvent)(element, 'selectionChange', _eventBuilder.EventBuilder.TextInput.selectionChange(selectionRange));
    if (isMultiline) {
      var contentSize = (0, _utils.getTextContentSize)(currentText);
      (0, _utils.dispatchEvent)(element, 'contentSizeChange', _eventBuilder.EventBuilder.TextInput.contentSizeChange(contentSize));
    }
  });
  return _emitTypingEvents.apply(this, arguments);
}
function applyKey(text, key) {
  if (key === 'Enter') {
    return `${text}\n`;
  }
  if (key === 'Backspace') {
    return text.slice(0, -1);
  }
  return text + key;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaG9zdENvbXBvbmVudE5hbWVzIiwicmVxdWlyZSIsIl9ldmVudEJ1aWxkZXIiLCJfZXJyb3JzIiwiX3RleHRJbnB1dCIsIl9wb2ludGVyRXZlbnRzIiwiX3V0aWxzIiwiX3BhcnNlS2V5cyIsInR5cGUiLCJfeCIsIl94MiIsIl94MyIsIl90eXBlIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJkZWZhdWx0IiwiZWxlbWVudCIsInRleHQiLCJvcHRpb25zIiwiX3JlZiIsIl9lbGVtZW50JHByb3BzJHZhbHVlIiwiX2VsZW1lbnQkcHJvcHMkdmFsdWUzIiwiaXNIb3N0VGV4dElucHV0IiwiRXJyb3JXaXRoU3RhY2siLCJpc1RleHRJbnB1dEVkaXRhYmxlIiwiaXNQb2ludGVyRXZlbnRFbmFibGVkIiwia2V5cyIsInBhcnNlS2V5cyIsInNraXBQcmVzcyIsImRpc3BhdGNoRXZlbnQiLCJFdmVudEJ1aWxkZXIiLCJDb21tb24iLCJ0b3VjaCIsImZvY3VzIiwid2FpdCIsImNvbmZpZyIsImN1cnJlbnRUZXh0IiwicHJvcHMiLCJ2YWx1ZSIsImRlZmF1bHRWYWx1ZSIsImtleSIsIl9lbGVtZW50JHByb3BzJHZhbHVlMiIsInByZXZpb3VzVGV4dCIsImFwcGx5S2V5IiwiZW1pdFR5cGluZ0V2ZW50cyIsImZpbmFsVGV4dCIsInN1Ym1pdEVkaXRpbmciLCJUZXh0SW5wdXQiLCJlbmRFZGl0aW5nIiwiYmx1ciIsIl94NCIsIl94NSIsIl94NiIsIl94NyIsIl94OCIsIl9lbWl0VHlwaW5nRXZlbnRzIiwiaXNNdWx0aWxpbmUiLCJtdWx0aWxpbmUiLCJrZXlQcmVzcyIsInRleHRJbnB1dCIsImNoYW5nZSIsInNlbGVjdGlvblJhbmdlIiwic3RhcnQiLCJsZW5ndGgiLCJlbmQiLCJzZWxlY3Rpb25DaGFuZ2UiLCJjb250ZW50U2l6ZSIsImdldFRleHRDb250ZW50U2l6ZSIsImNvbnRlbnRTaXplQ2hhbmdlIiwic2xpY2UiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXNlci1ldmVudC90eXBlL3R5cGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVhY3RUZXN0SW5zdGFuY2UgfSBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcbmltcG9ydCB7IGlzSG9zdFRleHRJbnB1dCB9IGZyb20gJy4uLy4uL2hlbHBlcnMvaG9zdC1jb21wb25lbnQtbmFtZXMnO1xuaW1wb3J0IHsgRXZlbnRCdWlsZGVyIH0gZnJvbSAnLi4vZXZlbnQtYnVpbGRlcic7XG5pbXBvcnQgeyBFcnJvcldpdGhTdGFjayB9IGZyb20gJy4uLy4uL2hlbHBlcnMvZXJyb3JzJztcbmltcG9ydCB7IGlzVGV4dElucHV0RWRpdGFibGUgfSBmcm9tICcuLi8uLi9oZWxwZXJzL3RleHQtaW5wdXQnO1xuaW1wb3J0IHsgaXNQb2ludGVyRXZlbnRFbmFibGVkIH0gZnJvbSAnLi4vLi4vaGVscGVycy9wb2ludGVyLWV2ZW50cyc7XG5pbXBvcnQgeyBVc2VyRXZlbnRDb25maWcsIFVzZXJFdmVudEluc3RhbmNlIH0gZnJvbSAnLi4vc2V0dXAnO1xuaW1wb3J0IHsgZGlzcGF0Y2hFdmVudCwgd2FpdCwgZ2V0VGV4dENvbnRlbnRTaXplIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgcGFyc2VLZXlzIH0gZnJvbSAnLi9wYXJzZS1rZXlzJztcblxuZXhwb3J0IGludGVyZmFjZSBUeXBlT3B0aW9ucyB7XG4gIHNraXBQcmVzcz86IGJvb2xlYW47XG4gIHN1Ym1pdEVkaXRpbmc/OiBib29sZWFuO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdHlwZShcbiAgdGhpczogVXNlckV2ZW50SW5zdGFuY2UsXG4gIGVsZW1lbnQ6IFJlYWN0VGVzdEluc3RhbmNlLFxuICB0ZXh0OiBzdHJpbmcsXG4gIG9wdGlvbnM/OiBUeXBlT3B0aW9ucyxcbik6IFByb21pc2U8dm9pZD4ge1xuICBpZiAoIWlzSG9zdFRleHRJbnB1dChlbGVtZW50KSkge1xuICAgIHRocm93IG5ldyBFcnJvcldpdGhTdGFjayhcbiAgICAgIGB0eXBlKCkgd29ya3Mgb25seSB3aXRoIGhvc3QgXCJUZXh0SW5wdXRcIiBlbGVtZW50cy4gUGFzc2VkIGVsZW1lbnQgaGFzIHR5cGUgXCIke2VsZW1lbnQudHlwZX1cIi5gLFxuICAgICAgdHlwZSxcbiAgICApO1xuICB9XG5cbiAgLy8gU2tpcCBldmVudHMgaWYgdGhlIGVsZW1lbnQgaXMgZGlzYWJsZWRcbiAgaWYgKCFpc1RleHRJbnB1dEVkaXRhYmxlKGVsZW1lbnQpIHx8ICFpc1BvaW50ZXJFdmVudEVuYWJsZWQoZWxlbWVudCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBrZXlzID0gcGFyc2VLZXlzKHRleHQpO1xuXG4gIGlmICghb3B0aW9ucz8uc2tpcFByZXNzKSB7XG4gICAgZGlzcGF0Y2hFdmVudChlbGVtZW50LCAncHJlc3NJbicsIEV2ZW50QnVpbGRlci5Db21tb24udG91Y2goKSk7XG4gIH1cblxuICBkaXNwYXRjaEV2ZW50KGVsZW1lbnQsICdmb2N1cycsIEV2ZW50QnVpbGRlci5Db21tb24uZm9jdXMoKSk7XG5cbiAgaWYgKCFvcHRpb25zPy5za2lwUHJlc3MpIHtcbiAgICBhd2FpdCB3YWl0KHRoaXMuY29uZmlnKTtcbiAgICBkaXNwYXRjaEV2ZW50KGVsZW1lbnQsICdwcmVzc091dCcsIEV2ZW50QnVpbGRlci5Db21tb24udG91Y2goKSk7XG4gIH1cblxuICBsZXQgY3VycmVudFRleHQgPSBlbGVtZW50LnByb3BzLnZhbHVlID8/IGVsZW1lbnQucHJvcHMuZGVmYXVsdFZhbHVlID8/ICcnO1xuICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgY29uc3QgcHJldmlvdXNUZXh0ID0gZWxlbWVudC5wcm9wcy52YWx1ZSA/PyBjdXJyZW50VGV4dDtcbiAgICBjdXJyZW50VGV4dCA9IGFwcGx5S2V5KHByZXZpb3VzVGV4dCwga2V5KTtcblxuICAgIGF3YWl0IGVtaXRUeXBpbmdFdmVudHModGhpcy5jb25maWcsIGVsZW1lbnQsIGtleSwgY3VycmVudFRleHQsIHByZXZpb3VzVGV4dCk7XG4gIH1cblxuICBjb25zdCBmaW5hbFRleHQgPSBlbGVtZW50LnByb3BzLnZhbHVlID8/IGN1cnJlbnRUZXh0O1xuICBhd2FpdCB3YWl0KHRoaXMuY29uZmlnKTtcblxuICBpZiAob3B0aW9ucz8uc3VibWl0RWRpdGluZykge1xuICAgIGRpc3BhdGNoRXZlbnQoZWxlbWVudCwgJ3N1Ym1pdEVkaXRpbmcnLCBFdmVudEJ1aWxkZXIuVGV4dElucHV0LnN1Ym1pdEVkaXRpbmcoZmluYWxUZXh0KSk7XG4gIH1cblxuICBkaXNwYXRjaEV2ZW50KGVsZW1lbnQsICdlbmRFZGl0aW5nJywgRXZlbnRCdWlsZGVyLlRleHRJbnB1dC5lbmRFZGl0aW5nKGZpbmFsVGV4dCkpO1xuXG4gIGRpc3BhdGNoRXZlbnQoZWxlbWVudCwgJ2JsdXInLCBFdmVudEJ1aWxkZXIuQ29tbW9uLmJsdXIoKSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBlbWl0VHlwaW5nRXZlbnRzKFxuICBjb25maWc6IFVzZXJFdmVudENvbmZpZyxcbiAgZWxlbWVudDogUmVhY3RUZXN0SW5zdGFuY2UsXG4gIGtleTogc3RyaW5nLFxuICBjdXJyZW50VGV4dDogc3RyaW5nLFxuICBwcmV2aW91c1RleHQ6IHN0cmluZyxcbikge1xuICBjb25zdCBpc011bHRpbGluZSA9IGVsZW1lbnQucHJvcHMubXVsdGlsaW5lID09PSB0cnVlO1xuXG4gIGF3YWl0IHdhaXQoY29uZmlnKTtcbiAgZGlzcGF0Y2hFdmVudChlbGVtZW50LCAna2V5UHJlc3MnLCBFdmVudEJ1aWxkZXIuVGV4dElucHV0LmtleVByZXNzKGtleSkpO1xuXG4gIC8vIEFjY29yZGluZyB0byB0aGUgZG9jcyBvbmx5IG11bHRpbGluZSBUZXh0SW5wdXQgZW1pdHMgdGV4dElucHV0IGV2ZW50XG4gIC8vIEBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvYmxvYi80MmEyODk4NjE3ZGExZDdhOThlZjU3NGE1YjllNTAwNjgxYzhmNzM4L3BhY2thZ2VzL3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQ29tcG9uZW50cy9UZXh0SW5wdXQvVGV4dElucHV0LmQudHMjTDc1NFxuICBpZiAoaXNNdWx0aWxpbmUpIHtcbiAgICBkaXNwYXRjaEV2ZW50KFxuICAgICAgZWxlbWVudCxcbiAgICAgICd0ZXh0SW5wdXQnLFxuICAgICAgRXZlbnRCdWlsZGVyLlRleHRJbnB1dC50ZXh0SW5wdXQoY3VycmVudFRleHQsIHByZXZpb3VzVGV4dCksXG4gICAgKTtcbiAgfVxuXG4gIGRpc3BhdGNoRXZlbnQoZWxlbWVudCwgJ2NoYW5nZScsIEV2ZW50QnVpbGRlci5UZXh0SW5wdXQuY2hhbmdlKGN1cnJlbnRUZXh0KSk7XG4gIGRpc3BhdGNoRXZlbnQoZWxlbWVudCwgJ2NoYW5nZVRleHQnLCBjdXJyZW50VGV4dCk7XG5cbiAgY29uc3Qgc2VsZWN0aW9uUmFuZ2UgPSB7XG4gICAgc3RhcnQ6IGN1cnJlbnRUZXh0Lmxlbmd0aCxcbiAgICBlbmQ6IGN1cnJlbnRUZXh0Lmxlbmd0aCxcbiAgfTtcbiAgZGlzcGF0Y2hFdmVudChlbGVtZW50LCAnc2VsZWN0aW9uQ2hhbmdlJywgRXZlbnRCdWlsZGVyLlRleHRJbnB1dC5zZWxlY3Rpb25DaGFuZ2Uoc2VsZWN0aW9uUmFuZ2UpKTtcblxuICAvLyBBY2NvcmRpbmcgdG8gdGhlIGRvY3Mgb25seSBtdWx0aWxpbmUgVGV4dElucHV0IGVtaXRzIGNvbnRlbnRTaXplQ2hhbmdlIGV2ZW50XG4gIC8vIEBzZWU6IGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvdGV4dGlucHV0I29uY29udGVudHNpemVjaGFuZ2VcbiAgaWYgKGlzTXVsdGlsaW5lKSB7XG4gICAgY29uc3QgY29udGVudFNpemUgPSBnZXRUZXh0Q29udGVudFNpemUoY3VycmVudFRleHQpO1xuICAgIGRpc3BhdGNoRXZlbnQoXG4gICAgICBlbGVtZW50LFxuICAgICAgJ2NvbnRlbnRTaXplQ2hhbmdlJyxcbiAgICAgIEV2ZW50QnVpbGRlci5UZXh0SW5wdXQuY29udGVudFNpemVDaGFuZ2UoY29udGVudFNpemUpLFxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlLZXkodGV4dDogc3RyaW5nLCBrZXk6IHN0cmluZykge1xuICBpZiAoa2V5ID09PSAnRW50ZXInKSB7XG4gICAgcmV0dXJuIGAke3RleHR9XFxuYDtcbiAgfVxuXG4gIGlmIChrZXkgPT09ICdCYWNrc3BhY2UnKSB7XG4gICAgcmV0dXJuIHRleHQuc2xpY2UoMCwgLTEpO1xuICB9XG5cbiAgcmV0dXJuIHRleHQgKyBrZXk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNBLElBQUFBLG1CQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxhQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxVQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxjQUFBLEdBQUFKLE9BQUE7QUFFQSxJQUFBSyxNQUFBLEdBQUFMLE9BQUE7QUFDQSxJQUFBTSxVQUFBLEdBQUFOLE9BQUE7QUFBQSxTQU9zQk8sSUFBSUEsQ0FBQUMsRUFBQSxFQUFBQyxHQUFBLEVBQUFDLEdBQUE7RUFBQSxPQUFBQyxLQUFBLENBQUFDLEtBQUEsT0FBQUMsU0FBQTtBQUFBO0FBQUEsU0FBQUYsTUFBQTtFQUFBQSxLQUFBLE9BQUFHLGtCQUFBLENBQUFDLE9BQUEsRUFBbkIsV0FFTEMsT0FBMEIsRUFDMUJDLElBQVksRUFDWkMsT0FBcUIsRUFDTjtJQUFBLElBQUFDLElBQUEsRUFBQUMsb0JBQUEsRUFBQUMscUJBQUE7SUFDZixJQUFJLENBQUMsSUFBQXRCLG1CQUFBLENBQUF1QixlQUFlLEVBQUNOLE9BQU8sQ0FBQyxFQUFFO01BQzdCLE1BQU0sSUFBSWQsT0FBQSxDQUFBcUIsY0FBYyxDQUNyQiw4RUFBNkVQLE9BQU8sQ0FBQ1QsSUFBSyxJQUFHLEVBQzlGQSxJQUNGLENBQUM7SUFDSDtJQUdBLElBQUksQ0FBQyxJQUFBSixVQUFB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