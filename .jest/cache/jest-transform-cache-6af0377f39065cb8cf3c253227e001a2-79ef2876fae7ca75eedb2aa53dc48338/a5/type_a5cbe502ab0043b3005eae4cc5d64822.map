{"version":3,"names":["_hostComponentNames","require","_eventBuilder","_errors","_textInput","_pointerEvents","_utils","_parseKeys","type","_x","_x2","_x3","_type","apply","arguments","_asyncToGenerator2","default","element","text","options","_ref","_element$props$value","_element$props$value3","isHostTextInput","ErrorWithStack","isTextInputEditable","isPointerEventEnabled","keys","parseKeys","skipPress","dispatchEvent","EventBuilder","Common","touch","focus","wait","config","currentText","props","value","defaultValue","key","_element$props$value2","previousText","applyKey","emitTypingEvents","finalText","submitEditing","TextInput","endEditing","blur","_x4","_x5","_x6","_x7","_x8","_emitTypingEvents","isMultiline","multiline","keyPress","textInput","change","selectionRange","start","length","end","selectionChange","contentSize","getTextContentSize","contentSizeChange","slice"],"sources":["../../../src/user-event/type/type.ts"],"sourcesContent":["import { ReactTestInstance } from 'react-test-renderer';\nimport { isHostTextInput } from '../../helpers/host-component-names';\nimport { EventBuilder } from '../event-builder';\nimport { ErrorWithStack } from '../../helpers/errors';\nimport { isTextInputEditable } from '../../helpers/text-input';\nimport { isPointerEventEnabled } from '../../helpers/pointer-events';\nimport { UserEventConfig, UserEventInstance } from '../setup';\nimport { dispatchEvent, wait, getTextContentSize } from '../utils';\nimport { parseKeys } from './parse-keys';\n\nexport interface TypeOptions {\n  skipPress?: boolean;\n  submitEditing?: boolean;\n}\n\nexport async function type(\n  this: UserEventInstance,\n  element: ReactTestInstance,\n  text: string,\n  options?: TypeOptions,\n): Promise<void> {\n  if (!isHostTextInput(element)) {\n    throw new ErrorWithStack(\n      `type() works only with host \"TextInput\" elements. Passed element has type \"${element.type}\".`,\n      type,\n    );\n  }\n\n  // Skip events if the element is disabled\n  if (!isTextInputEditable(element) || !isPointerEventEnabled(element)) {\n    return;\n  }\n\n  const keys = parseKeys(text);\n\n  if (!options?.skipPress) {\n    dispatchEvent(element, 'pressIn', EventBuilder.Common.touch());\n  }\n\n  dispatchEvent(element, 'focus', EventBuilder.Common.focus());\n\n  if (!options?.skipPress) {\n    await wait(this.config);\n    dispatchEvent(element, 'pressOut', EventBuilder.Common.touch());\n  }\n\n  let currentText = element.props.value ?? element.props.defaultValue ?? '';\n  for (const key of keys) {\n    const previousText = element.props.value ?? currentText;\n    currentText = applyKey(previousText, key);\n\n    await emitTypingEvents(this.config, element, key, currentText, previousText);\n  }\n\n  const finalText = element.props.value ?? currentText;\n  await wait(this.config);\n\n  if (options?.submitEditing) {\n    dispatchEvent(element, 'submitEditing', EventBuilder.TextInput.submitEditing(finalText));\n  }\n\n  dispatchEvent(element, 'endEditing', EventBuilder.TextInput.endEditing(finalText));\n\n  dispatchEvent(element, 'blur', EventBuilder.Common.blur());\n}\n\nexport async function emitTypingEvents(\n  config: UserEventConfig,\n  element: ReactTestInstance,\n  key: string,\n  currentText: string,\n  previousText: string,\n) {\n  const isMultiline = element.props.multiline === true;\n\n  await wait(config);\n  dispatchEvent(element, 'keyPress', EventBuilder.TextInput.keyPress(key));\n\n  // According to the docs only multiline TextInput emits textInput event\n  // @see: https://github.com/facebook/react-native/blob/42a2898617da1d7a98ef574a5b9e500681c8f738/packages/react-native/Libraries/Components/TextInput/TextInput.d.ts#L754\n  if (isMultiline) {\n    dispatchEvent(\n      element,\n      'textInput',\n      EventBuilder.TextInput.textInput(currentText, previousText),\n    );\n  }\n\n  dispatchEvent(element, 'change', EventBuilder.TextInput.change(currentText));\n  dispatchEvent(element, 'changeText', currentText);\n\n  const selectionRange = {\n    start: currentText.length,\n    end: currentText.length,\n  };\n  dispatchEvent(element, 'selectionChange', EventBuilder.TextInput.selectionChange(selectionRange));\n\n  // According to the docs only multiline TextInput emits contentSizeChange event\n  // @see: https://reactnative.dev/docs/textinput#oncontentsizechange\n  if (isMultiline) {\n    const contentSize = getTextContentSize(currentText);\n    dispatchEvent(\n      element,\n      'contentSizeChange',\n      EventBuilder.TextInput.contentSizeChange(contentSize),\n    );\n  }\n}\n\nfunction applyKey(text: string, key: string) {\n  if (key === 'Enter') {\n    return `${text}\\n`;\n  }\n\n  if (key === 'Backspace') {\n    return text.slice(0, -1);\n  }\n\n  return text + key;\n}\n"],"mappings":"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","ignoreList":[]}