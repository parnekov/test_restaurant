91739a9e5bfbb59a1783769201c12c9b
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["id", "initialRouteName", "children", "screenListeners", "screenOptions"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _native = require("@react-navigation/native");
var React = _interopRequireWildcard(require("react"));
var _NativeStackView = _interopRequireDefault(require("../views/NativeStackView"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function NativeStackNavigator(_ref) {
  var id = _ref.id,
    initialRouteName = _ref.initialRouteName,
    children = _ref.children,
    screenListeners = _ref.screenListeners,
    screenOptions = _ref.screenOptions,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var _ref2 = (0, _native.useNavigationBuilder)(_native.StackRouter, {
      id: id,
      initialRouteName: initialRouteName,
      children: children,
      screenListeners: screenListeners,
      screenOptions: screenOptions
    }),
    state = _ref2.state,
    descriptors = _ref2.descriptors,
    navigation = _ref2.navigation,
    NavigationContent = _ref2.NavigationContent;
  React.useEffect(function () {
    var _navigation$addListen;
    return navigation === null || navigation === void 0 ? void 0 : (_navigation$addListen = navigation.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation, 'tabPress', function (e) {
      var isFocused = navigation.isFocused();
      requestAnimationFrame(function () {
        if (state.index > 0 && isFocused && !e.defaultPrevented) {
          navigation.dispatch(Object.assign({}, _native.StackActions.popToTop(), {
            target: state.key
          }));
        }
      });
    });
  }, [navigation, state.index, state.key]);
  return React.createElement(NavigationContent, null, React.createElement(_NativeStackView.default, _extends({}, rest, {
    state: state,
    navigation: navigation,
    descriptors: descriptors
  })));
}
var _default = (0, _native.createNavigatorFactory)(NativeStackNavigator);
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbmF0aXZlIiwicmVxdWlyZSIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfTmF0aXZlU3RhY2tWaWV3IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfZXh0ZW5kcyIsImFzc2lnbiIsImJpbmQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiYXBwbHkiLCJOYXRpdmVTdGFja05hdmlnYXRvciIsIl9yZWYiLCJpZCIsImluaXRpYWxSb3V0ZU5hbWUiLCJjaGlsZHJlbiIsInNjcmVlbkxpc3RlbmVycyIsInNjcmVlbk9wdGlvbnMiLCJyZXN0IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiIsIl9leGNsdWRlZCIsIl9yZWYyIiwidXNlTmF2aWdhdGlvbkJ1aWxkZXIiLCJTdGFja1JvdXRlciIsInN0YXRlIiwiZGVzY3JpcHRvcnMiLCJuYXZpZ2F0aW9uIiwiTmF2aWdhdGlvbkNvbnRlbnQiLCJ1c2VFZmZlY3QiLCJfbmF2aWdhdGlvbiRhZGRMaXN0ZW4iLCJhZGRMaXN0ZW5lciIsImUiLCJpc0ZvY3VzZWQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpbmRleCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJkaXNwYXRjaCIsIlN0YWNrQWN0aW9ucyIsInBvcFRvVG9wIiwiY3JlYXRlRWxlbWVudCIsIl9kZWZhdWx0IiwiY3JlYXRlTmF2aWdhdG9yRmFjdG9yeSIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbmF2aWdhdG9ycy9jcmVhdGVOYXRpdmVTdGFja05hdmlnYXRvci50c3giXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLElBQUFBLE9BQUEsR0FBQUMsT0FBQTtBQVdBLElBQUFDLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUYsT0FBQTtBQU9BLElBQUFHLGdCQUFBLEdBQUFDLHNCQUFBLENBQUFKLE9BQUE7QUFBdUQsU0FBQUksdUJBQUFDLEdBQUE7RUFBQSxPQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBO0lBQUFFLE9BQUEsRUFBQUY7RUFBQTtBQUFBO0FBQUEsU0FBQUcseUJBQUFDLFdBQUE7RUFBQSxXQUFBQyxPQUFBO0VBQUEsSUFBQUMsaUJBQUEsT0FBQUQsT0FBQTtFQUFBLElBQUFFLGdCQUFBLE9BQUFGLE9BQUE7RUFBQSxRQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsV0FBQTtJQUFBLE9BQUFBLFdBQUEsR0FBQUcsZ0JBQUEsR0FBQUQsaUJBQUE7RUFBQSxHQUFBRixXQUFBO0FBQUE7QUFBQSxTQUFBUCx3QkFBQUcsR0FBQSxFQUFBSSxXQUFBO0VBQUEsS0FBQUEsV0FBQSxJQUFBSixHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQTtJQUFBLE9BQUFELEdBQUE7RUFBQTtFQUFBLElBQUFBLEdBQUEsb0JBQUFBLEdBQUEsd0JBQUFBLEdBQUE7SUFBQTtNQUFBRSxPQUFBLEVBQUFGO0lBQUE7RUFBQTtFQUFBLElBQUFRLEtBQUEsR0FBQUwsd0JBQUEsQ0FBQUMsV0FBQTtFQUFBLElBQUFJLEtBQUEsSUFBQUEsS0FBQSxDQUFBQyxHQUFBLENBQUFULEdBQUE7SUFBQSxPQUFBUSxLQUFBLENBQUFFLEdBQUEsQ0FBQVYsR0FBQTtFQUFBO0VBQUEsSUFBQVcsTUFBQTtFQUFBLElBQUFDLHFCQUFBLEdBQUFDLE1B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