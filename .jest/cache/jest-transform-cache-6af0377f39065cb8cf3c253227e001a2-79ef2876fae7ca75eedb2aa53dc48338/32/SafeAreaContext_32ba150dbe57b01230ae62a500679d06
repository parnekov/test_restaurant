4496872e76e91e220676b0902d5fd355
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["children", "initialMetrics", "initialSafeAreaInsets", "style"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SafeAreaInsetsContext = exports.SafeAreaFrameContext = exports.SafeAreaContext = exports.SafeAreaConsumer = void 0;
exports.SafeAreaProvider = SafeAreaProvider;
exports.useSafeArea = useSafeArea;
exports.useSafeAreaFrame = useSafeAreaFrame;
exports.useSafeAreaInsets = useSafeAreaInsets;
exports.withSafeAreaInsets = withSafeAreaInsets;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _NativeSafeAreaProvider = require("./NativeSafeAreaProvider");
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var isDev = process.env.NODE_ENV !== 'production';
var SafeAreaInsetsContext = exports.SafeAreaInsetsContext = React.createContext(null);
if (isDev) {
  SafeAreaInsetsContext.displayName = 'SafeAreaInsetsContext';
}
var SafeAreaFrameContext = exports.SafeAreaFrameContext = React.createContext(null);
if (isDev) {
  SafeAreaFrameContext.displayName = 'SafeAreaFrameContext';
}
function SafeAreaProvider(_ref) {
  var _ref2, _ref3, _initialMetrics$inset, _ref4, _initialMetrics$frame;
  var children = _ref.children,
    initialMetrics = _ref.initialMetrics,
    initialSafeAreaInsets = _ref.initialSafeAreaInsets,
    style = _ref.style,
    others = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var parentInsets = useParentSafeAreaInsets();
  var parentFrame = useParentSafeAreaFrame();
  var _React$useState = React.useState((_ref2 = (_ref3 = (_initialMetrics$inset = initialMetrics == null ? void 0 : initialMetrics.insets) != null ? _initialMetrics$inset : initialSafeAreaInsets) != null ? _ref3 : parentInsets) != null ? _ref2 : null),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    insets = _React$useState2[0],
    setInsets = _React$useState2[1];
  var _React$useState3 = React.useState((_ref4 = (_initialMetrics$frame = initialMetrics == null ? void 0 : initialMetrics.frame) != null ? _initialMetrics$frame : parentFrame) != null ? _ref4 : {
      x: 0,
      y: 0,
      width: _reactNative.Dimensions.get('window').width,
      height: _reactNative.Dimensions.get('window').height
    }),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    frame = _React$useState4[0],
    setFrame = _React$useState4[1];
  var onInsetsChange = React.useCallback(function (event) {
    var _event$nativeEvent = event.nativeEvent,
      nextFrame = _event$nativeEvent.frame,
      nextInsets = _event$nativeEvent.insets;
    setFrame(function (curFrame) {
      if (nextFrame && (nextFrame.height !== curFrame.height || nextFrame.width !== curFrame.width || nextFrame.x !== curFrame.x || nextFrame.y !== curFrame.y)) {
        return nextFrame;
      } else {
        return curFrame;
      }
    });
    setInsets(function (curInsets) {
      if (!curInsets || nextInsets.bottom !== curInsets.bottom || nextInsets.left !== curInsets.left || nextInsets.right !== curInsets.right || nextInsets.top !== curInsets.top) {
        return nextInsets;
      } else {
        return curInsets;
      }
    });
  }, []);
  return React.createElement(_NativeSafeAreaProvider.NativeSafeAreaProvider, _extends({
    style: [styles.fill, style],
    onInsetsChange: onInsetsChange
  }, others), insets != null ? React.createElement(SafeAreaFrameContext.Provider, {
    value: frame
  }, React.createElement(SafeAreaInsetsContext.Provider, {
    value: insets
  }, children)) : null);
}
var styles = _reactNative.StyleSheet.create({
  fill: {
    flex: 1
  }
});
function useParentSafeAreaInsets() {
  return React.useContext(SafeAreaInsetsContext);
}
function useParentSafeAreaFrame() {
  return React.useContext(SafeAreaFrameContext);
}
var NO_INSETS_ERROR = 'No safe area value available. Make sure you are rendering `<SafeAreaProvider>` at the top of your app.';
function useSafeAreaInsets() {
  var insets = React.useContext(SafeAreaInsetsContext);
  if (insets == null) {
    throw new Error(NO_INSETS_ERROR);
  }
  return insets;
}
function useSafeAreaFrame() {
  var frame = React.useContext(SafeAreaFrameContext);
  if (frame == null) {
    throw new Error(NO_INSETS_ERROR);
  }
  return frame;
}
function withSafeAreaInsets(WrappedComponent) {
  return React.forwardRef(function (props, ref) {
    var insets = useSafeAreaInsets();
    return React.createElement(WrappedComponent, _extends({}, props, {
      insets: insets,
      ref: ref
    }));
  });
}
function useSafeArea() {
  return useSafeAreaInsets();
}
var SafeAreaConsumer = exports.SafeAreaConsumer = SafeAreaInsetsContext.Consumer;
var SafeAreaContext = exports.SafeAreaContext = SafeAreaInsetsContext;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,