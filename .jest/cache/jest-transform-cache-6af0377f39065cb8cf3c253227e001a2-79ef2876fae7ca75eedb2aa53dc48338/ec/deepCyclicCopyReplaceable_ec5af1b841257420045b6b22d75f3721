84df975b695013fcbe1265ca13d91ee9
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = deepCyclicCopyReplaceable;
var _prettyFormat = require('pretty-format');
var builtInObject = [Array, Date, Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, Map, Set, RegExp, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray];
if (typeof Buffer !== 'undefined') {
  builtInObject.push(Buffer);
}
var isBuiltInObject = function isBuiltInObject(object) {
  return builtInObject.includes(object.constructor);
};
var isMap = function isMap(value) {
  return value.constructor === Map;
};
function deepCyclicCopyReplaceable(value) {
  var cycles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new WeakMap();
  if (typeof value !== 'object' || value === null) {
    return value;
  } else if (cycles.has(value)) {
    return cycles.get(value);
  } else if (Array.isArray(value)) {
    return deepCyclicCopyArray(value, cycles);
  } else if (isMap(value)) {
    return deepCyclicCopyMap(value, cycles);
  } else if (isBuiltInObject(value)) {
    return value;
  } else if (_prettyFormat.plugins.DOMElement.test(value)) {
    return value.cloneNode(true);
  } else {
    return deepCyclicCopyObject(value, cycles);
  }
}
function deepCyclicCopyObject(object, cycles) {
  var newObject = Object.create(Object.getPrototypeOf(object));
  var descriptors = {};
  var obj = object;
  do {
    descriptors = Object.assign({}, Object.getOwnPropertyDescriptors(obj), descriptors);
  } while ((obj = Object.getPrototypeOf(obj)) && obj !== Object.getPrototypeOf({}));
  cycles.set(object, newObject);
  var newDescriptors = [].concat((0, _toConsumableArray2.default)(Object.keys(descriptors)), (0, _toConsumableArray2.default)(Object.getOwnPropertySymbols(descriptors))).reduce(function (newDescriptors, key) {
    var enumerable = descriptors[key].enumerable;
    newDescriptors[key] = {
      configurable: true,
      enumerable: enumerable,
      value: deepCyclicCopyReplaceable(object[key], cycles),
      writable: true
    };
    return newDescriptors;
  }, {});
  return Object.defineProperties(newObject, newDescriptors);
}
function deepCyclicCopyArray(array, cycles) {
  var newArray = new (Object.getPrototypeOf(array).constructor)(array.length);
  var length = array.length;
  cycles.set(array, newArray);
  for (var i = 0; i < length; i++) {
    newArray[i] = deepCyclicCopyReplaceable(array[i], cycles);
  }
  return newArray;
}
function deepCyclicCopyMap(map, cycles) {
  var newMap = new Map();
  cycles.set(map, newMap);
  map.forEach(function (value, key) {
    newMap.set(key, deepCyclicCopyReplaceable(value, cycles));
  });
  return newMap;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl90b0NvbnN1bWFibGVBcnJheTIiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJkZWVwQ3ljbGljQ29weVJlcGxhY2VhYmxlIiwiX3ByZXR0eUZvcm1hdCIsImJ1aWx0SW5PYmplY3QiLCJBcnJheSIsIkRhdGUiLCJGbG9hdDMyQXJyYXkiLCJGbG9hdDY0QXJyYXkiLCJJbnQxNkFycmF5IiwiSW50MzJBcnJheSIsIkludDhBcnJheSIsIk1hcCIsIlNldCIsIlJlZ0V4cCIsIlVpbnQxNkFycmF5IiwiVWludDMyQXJyYXkiLCJVaW50OEFycmF5IiwiVWludDhDbGFtcGVkQXJyYXkiLCJCdWZmZXIiLCJwdXNoIiwiaXNCdWlsdEluT2JqZWN0Iiwib2JqZWN0IiwiaW5jbHVkZXMiLCJjb25zdHJ1Y3RvciIsImlzTWFwIiwiY3ljbGVzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiV2Vha01hcCIsImhhcyIsImdldCIsImlzQXJyYXkiLCJkZWVwQ3ljbGljQ29weUFycmF5IiwiZGVlcEN5Y2xpY0NvcHlNYXAiLCJwbHVnaW5zIiwiRE9NRWxlbWVudCIsInRlc3QiLCJjbG9uZU5vZGUiLCJkZWVwQ3ljbGljQ29weU9iamVjdCIsIm5ld09iamVjdCIsImNyZWF0ZSIsImdldFByb3RvdHlwZU9mIiwiZGVzY3JpcHRvcnMiLCJvYmoiLCJhc3NpZ24iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwic2V0IiwibmV3RGVzY3JpcHRvcnMiLCJjb25jYXQiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicmVkdWNlIiwia2V5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZGVmaW5lUHJvcGVydGllcyIsImFycmF5IiwibmV3QXJyYXkiLCJpIiwibWFwIiwibmV3TWFwIiwiZm9yRWFjaCJdLCJzb3VyY2VzIjpbImRlZXBDeWNsaWNDb3B5UmVwbGFjZWFibGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZXBDeWNsaWNDb3B5UmVwbGFjZWFibGU7XG52YXIgX3ByZXR0eUZvcm1hdCA9IHJlcXVpcmUoJ3ByZXR0eS1mb3JtYXQnKTtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5jb25zdCBidWlsdEluT2JqZWN0ID0gW1xuICBBcnJheSxcbiAgRGF0ZSxcbiAgRmxvYXQzMkFycmF5LFxuICBGbG9hdDY0QXJyYXksXG4gIEludDE2QXJyYXksXG4gIEludDMyQXJyYXksXG4gIEludDhBcnJheSxcbiAgTWFwLFxuICBTZXQsXG4gIFJlZ0V4cCxcbiAgVWludDE2QXJyYXksXG4gIFVpbnQzMkFycmF5LFxuICBVaW50OEFycmF5LFxuICBVaW50OENsYW1wZWRBcnJheVxuXTtcbmlmICh0eXBlb2YgQnVmZmVyICE9PSAndW5kZWZpbmVkJykge1xuICBidWlsdEluT2JqZWN0LnB1c2goQnVmZmVyKTtcbn1cbmNvbnN0IGlzQnVpbHRJbk9iamVjdCA9IG9iamVjdCA9PiBidWlsdEluT2JqZWN0LmluY2x1ZGVzKG9iamVjdC5jb25zdHJ1Y3Rvcik7XG5jb25zdCBpc01hcCA9IHZhbHVlID0+IHZhbHVlLmNvbnN0cnVjdG9yID09PSBNYXA7XG5mdW5jdGlvbiBkZWVwQ3ljbGljQ29weVJlcGxhY2VhYmxlKHZhbHVlLCBjeWNsZXMgPSBuZXcgV2Vha01hcCgpKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8IHZhbHVlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9IGVsc2UgaWYgKGN5Y2xlcy5oYXModmFsdWUpKSB7XG4gICAgcmV0dXJuIGN5Y2xlcy5nZXQodmFsdWUpO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIGRlZXBDeWNsaWNDb3B5QXJyYXkodmFsdWUsIGN5Y2xlcyk7XG4gIH0gZWxzZSBpZiAoaXNNYXAodmFsdWUpKSB7XG4gICAgcmV0dXJuIGRlZXBDeWNsaWNDb3B5TWFwKHZhbHVlLCBjeWNsZXMpO1xuICB9IGVsc2UgaWYgKGlzQnVpbHRJbk9iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0gZWxzZSBpZiAoX3ByZXR0eUZvcm1hdC5wbHVnaW5zLkRPTUVsZW1lbnQudGVzdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUuY2xvbmVOb2RlKHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBkZWVwQ3ljbGljQ29weU9iamVjdCh2YWx1ZSwgY3ljbGVzKTtcbiAgfVxufVxuZnVuY3Rpb24gZGVlcEN5Y2xpY0NvcHlPYmplY3Qob2JqZWN0LCBjeWNsZXMpIHtcbiAgY29uc3QgbmV3T2JqZWN0ID0gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KSk7XG4gIGxldCBkZXNjcmlwdG9ycyA9IHt9O1xuICBsZXQgb2JqID0gb2JqZWN0O1xuICBkbyB7XG4gICAgZGVzY3JpcHRvcnMgPSBPYmplY3QuYXNzaWduKFxuICAgICAge30sXG4gICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmopLFxuICAgICAgZGVzY3JpcHRvcnNcbiAgICApO1xuICB9IHdoaWxlIChcbiAgICAob2JqID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikpICYmXG4gICAgb2JqICE9PSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yoe30pXG4gICk7XG4gIGN5Y2xlcy5zZXQob2JqZWN0LCBuZXdPYmplY3QpO1xuICBjb25zdCBuZXdEZXNjcmlwdG9ycyA9IFtcbiAgICAuLi5PYmplY3Qua2V5cyhkZXNjcmlwdG9ycyksXG4gICAgLi4uT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhkZXNjcmlwdG9ycylcbiAgXS5yZWR1Y2UoXG4gICAgLy9AdHMtZXhwZWN0LWVycm9yIGJlY2F1c2UgdHlwZXNjcmlwdCBkbyBub3Qgc3VwcG9ydCBzeW1ib2wga2V5IGluIG9iamVjdFxuICAgIC8vaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8xODYzXG4gICAgKG5ld0Rlc2NyaXB0b3JzLCBrZXkpID0+IHtcbiAgICAgIGNvbnN0IGVudW1lcmFibGUgPSBkZXNjcmlwdG9yc1trZXldLmVudW1lcmFibGU7XG4gICAgICBuZXdEZXNjcmlwdG9yc1trZXldID0ge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGUsXG4gICAgICAgIHZhbHVlOiBkZWVwQ3ljbGljQ29weVJlcGxhY2VhYmxlKFxuICAgICAgICAgIC8vIHRoaXMgYWNjZXNzZXMgdGhlIHZhbHVlIG9yIGdldHRlciwgZGVwZW5kaW5nLiBXZSBqdXN0IGNhcmUgYWJvdXQgdGhlIHZhbHVlIGFueXdheXMsIGFuZCB0aGlzIGFsbG93cyB1cyB0byBub3QgbWVzcyB3aXRoIGFjY2Vzc29yc1xuICAgICAgICAgIC8vIGl0IGhhcyB0aGUgc2lkZSBlZmZlY3Qgb2YgaW52b2tpbmcgdGhlIGdldHRlciBoZXJlIHRob3VnaCwgcmF0aGVyIHRoYW4gY29weWluZyBpdCBvdmVyXG4gICAgICAgICAgb2JqZWN0W2tleV0sXG4gICAgICAgICAgY3ljbGVzXG4gICAgICAgICksXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9O1xuICAgICAgcmV0dXJuIG5ld0Rlc2NyaXB0b3JzO1xuICAgIH0sXG4gICAge31cbiAgKTtcbiAgLy9AdHMtZXhwZWN0LWVycm9yIGJlY2F1c2UgdHlwZXNjcmlwdCBkbyBub3Qgc3VwcG9ydCBzeW1ib2wga2V5IGluIG9iamVjdFxuICAvL2h0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMTg2M1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMobmV3T2JqZWN0LCBuZXdEZXNjcmlwdG9ycyk7XG59XG5mdW5jdGlvbiBkZWVwQ3ljbGljQ29weUFycmF5KGFycmF5LCBjeWNsZXMpIHtcbiAgY29uc3QgbmV3QXJyYXkgPSBuZXcgKE9iamVjdC5nZXRQcm90b3R5cGVPZihhcnJheSkuY29uc3RydWN0b3IpKGFycmF5Lmxlbmd0aCk7XG4gIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgY3ljbGVzLnNldChhcnJheSwgbmV3QXJyYXkpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgbmV3QXJyYXlbaV0gPSBkZWVwQ3ljbGljQ29weVJlcGxhY2VhYmxlKGFycmF5W2ldLCBjeWNsZXMpO1xuICB9XG4gIHJldHVybiBuZXdBcnJheTtcbn1cbmZ1bmN0aW9uIGRlZXBDeWNsaWNDb3B5TWFwKG1hcCwgY3ljbGVzKSB7XG4gIGNvbnN0IG5ld01hcCA9IG5ldyBNYXAoKTtcbiAgY3ljbGVzLnNldChtYXAsIG5ld01hcCk7XG4gIG1hcC5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgbmV3TWFwLnNldChrZXksIGRlZXBDeWNsaWNDb3B5UmVwbGFjZWFibGUodmFsdWUsIGN5Y2xlcykpO1xuICB9KTtcbiAgcmV0dXJuIG5ld01hcDtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFBQyxJQUFBQSxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsbUJBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUViRSxNQUFNLENBQUNDLGNBQWMsQ0FB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