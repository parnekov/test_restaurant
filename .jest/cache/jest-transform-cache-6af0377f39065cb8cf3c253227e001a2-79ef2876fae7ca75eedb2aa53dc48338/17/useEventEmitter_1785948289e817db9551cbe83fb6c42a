a4da2bcb88935cbadaa63ac653cdea9d
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useEventEmitter;
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function useEventEmitter(listen) {
  var listenRef = React.useRef(listen);
  React.useEffect(function () {
    listenRef.current = listen;
  });
  var listeners = React.useRef(Object.create(null));
  var create = React.useCallback(function (target) {
    var removeListener = function removeListener(type, callback) {
      var callbacks = listeners.current[type] ? listeners.current[type][target] : undefined;
      if (!callbacks) {
        return;
      }
      var index = callbacks.indexOf(callback);
      if (index > -1) {
        callbacks.splice(index, 1);
      }
    };
    var addListener = function addListener(type, callback) {
      listeners.current[type] = listeners.current[type] || {};
      listeners.current[type][target] = listeners.current[type][target] || [];
      listeners.current[type][target].push(callback);
      var removed = false;
      return function () {
        if (!removed) {
          removed = true;
          removeListener(type, callback);
        }
      };
    };
    return {
      addListener: addListener,
      removeListener: removeListener
    };
  }, []);
  var emit = React.useCallback(function (_ref) {
    var _ref2;
    var _items$target, _listenRef$current;
    var type = _ref.type,
      data = _ref.data,
      target = _ref.target,
      canPreventDefault = _ref.canPreventDefault;
    var items = listeners.current[type] || {};
    var callbacks = target !== undefined ? (_items$target = items[target]) === null || _items$target === void 0 ? void 0 : _items$target.slice() : (_ref2 = []).concat.apply(_ref2, (0, _toConsumableArray2.default)(Object.keys(items).map(function (t) {
      return items[t];
    }))).filter(function (cb, i, self) {
      return self.lastIndexOf(cb) === i;
    });
    var event = {
      get type() {
        return type;
      }
    };
    if (target !== undefined) {
      Object.defineProperty(event, 'target', {
        enumerable: true,
        get: function get() {
          return target;
        }
      });
    }
    if (data !== undefined) {
      Object.defineProperty(event, 'data', {
        enumerable: true,
        get: function get() {
          return data;
        }
      });
    }
    if (canPreventDefault) {
      var defaultPrevented = false;
      Object.defineProperties(event, {
        defaultPrevented: {
          enumerable: true,
          get: function get() {
            return defaultPrevented;
          }
        },
        preventDefault: {
          enumerable: true,
          value: function value() {
            defaultPrevented = true;
          }
        }
      });
    }
    (_listenRef$current = listenRef.current) === null || _listenRef$current === void 0 ? void 0 : _listenRef$current.call(listenRef, event);
    callbacks === null || callbacks === void 0 ? void 0 : callbacks.forEach(function (cb) {
      return cb(event);
    });
    return event;
  }, []);
  return React.useMemo(function () {
    return {
      create: create,
      emit: emit
    };
  }, [create, emit]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJ1c2VFdmVudEVtaXR0ZXIiLCJsaXN0ZW4iLCJsaXN0ZW5SZWYiLCJ1c2VSZWYiLCJ1c2VFZmZlY3QiLCJjdXJyZW50IiwibGlzdGVuZXJzIiwiY3JlYXRlIiwidXNlQ2FsbGJhY2siLCJ0YXJnZXQiLCJyZW1vdmVMaXN0ZW5lciIsInR5cGUiLCJjYWxsYmFjayIsImNhbGxiYWNrcyIsInVuZGVmaW5lZCIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsImFkZExpc3RlbmVyIiwicHVzaCIsInJlbW92ZWQiLCJlbWl0IiwiX3JlZiIsIl9yZWYyIiwiX2l0ZW1zJHRhcmdldCIsIl9saXN0ZW5SZWYkY3VycmVudCIsImRhdGEiLCJjYW5QcmV2ZW50RGVmYXVsdCIsIml0ZW1zIiwic2xpY2UiLCJjb25jYXQiLCJhcHBseSIsIl90b0NvbnN1bWFibGVBcnJheTIiLCJrZXlzIiwibWFwIiwidCIsImZpbHRlciIsImNiIiwiaSIsInNlbGYiLCJsYXN0SW5kZXhPZiIsImV2ZW50IiwiZW51bWVyYWJsZSIsImRlZmF1bHRQcmV2ZW50ZWQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJldmVudERlZmF1bHQiLCJ2YWx1ZSIsImZvckVhY2giLCJ1c2VNZW1vIl0sInNvdXJjZXMiOlsiLi4vLi4vc3Jj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