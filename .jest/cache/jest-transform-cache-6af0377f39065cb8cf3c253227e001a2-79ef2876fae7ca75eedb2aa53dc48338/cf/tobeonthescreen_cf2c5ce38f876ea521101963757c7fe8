ff974c21d0994b68dd0b994a0cdc329a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toBeOnTheScreen = void 0;
var jest_matcher_utils_1 = require("jest-matcher-utils");
var utils_1 = require("./utils");
function toBeOnTheScreen(element) {
  var _this = this;
  if (element !== null) {
    (0, utils_1.checkReactElement)(element, toBeOnTheScreen, this);
  }
  var pass = element === null ? false : getScreenRoot() === getRootElement(element);
  var errorFound = function errorFound() {
    return `expected element tree not to contain element but found:\n${(0, utils_1.printElement)(element)}`;
  };
  var errorNotFound = function errorNotFound() {
    return `element could not be found in the element tree`;
  };
  return {
    pass: pass,
    message: function message() {
      return [(0, jest_matcher_utils_1.matcherHint)(`${_this.isNot ? '.not' : ''}.toBeOnTheScreen`, 'element', ''), '', (0, jest_matcher_utils_1.RECEIVED_COLOR)(_this.isNot ? errorFound() : errorNotFound())].join('\n');
    }
  };
}
exports.toBeOnTheScreen = toBeOnTheScreen;
function getRootElement(element) {
  var root = element;
  while (root.parent) {
    root = root.parent;
  }
  return root;
}
function getScreenRoot() {
  try {
    var _screen$UNSAFE_root;
    var _require = require('@testing-library/react-native'),
      screen = _require.screen;
    if (!screen) {
      throw new Error('screen is undefined');
    }
    return (_screen$UNSAFE_root = screen.UNSAFE_root) != null ? _screen$UNSAFE_root : screen.container;
  } catch (error) {
    throw new Error('Could not import `screen` object from @testing-library/react-native.\n\n' + 'Using toBeOnTheScreen() matcher requires @testing-library/react-native v10.1.0 or later to be added to your devDependencies.');
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvQmVPblRoZVNjcmVlbiIsImplc3RfbWF0Y2hlcl91dGlsc18xIiwicmVxdWlyZSIsInV0aWxzXzEiLCJlbGVtZW50IiwiX3RoaXMiLCJjaGVja1JlYWN0RWxlbWVudCIsInBhc3MiLCJnZXRTY3JlZW5Sb290IiwiZ2V0Um9vdEVsZW1lbnQiLCJlcnJvckZvdW5kIiwicHJpbnRFbGVtZW50IiwiZXJyb3JOb3RGb3VuZCIsIm1lc3NhZ2UiLCJtYXRjaGVySGludCIsImlzTm90IiwiUkVDRUlWRURfQ09MT1IiLCJqb2luIiwicm9vdCIsInBhcmVudCIsIl9zY3JlZW4kVU5TQUZFX3Jvb3QiLCJfcmVxdWlyZSIsInNjcmVlbiIsIkVycm9yIiwiVU5TQUZFX3Jvb3QiLCJjb250YWluZXIiLCJlcnJvciJdLCJzb3VyY2VzIjpbInRvLWJlLW9uLXRoZS1zY3JlZW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRvQmVPblRoZVNjcmVlbiA9IHZvaWQgMDtcbmNvbnN0IGplc3RfbWF0Y2hlcl91dGlsc18xID0gcmVxdWlyZShcImplc3QtbWF0Y2hlci11dGlsc1wiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmZ1bmN0aW9uIHRvQmVPblRoZVNjcmVlbihlbGVtZW50KSB7XG4gICAgaWYgKGVsZW1lbnQgIT09IG51bGwpIHtcbiAgICAgICAgKDAsIHV0aWxzXzEuY2hlY2tSZWFjdEVsZW1lbnQpKGVsZW1lbnQsIHRvQmVPblRoZVNjcmVlbiwgdGhpcyk7XG4gICAgfVxuICAgIGNvbnN0IHBhc3MgPSBlbGVtZW50ID09PSBudWxsID8gZmFsc2UgOiBnZXRTY3JlZW5Sb290KCkgPT09IGdldFJvb3RFbGVtZW50KGVsZW1lbnQpO1xuICAgIGNvbnN0IGVycm9yRm91bmQgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBgZXhwZWN0ZWQgZWxlbWVudCB0cmVlIG5vdCB0byBjb250YWluIGVsZW1lbnQgYnV0IGZvdW5kOlxcbiR7KDAsIHV0aWxzXzEucHJpbnRFbGVtZW50KShlbGVtZW50KX1gO1xuICAgIH07XG4gICAgY29uc3QgZXJyb3JOb3RGb3VuZCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGBlbGVtZW50IGNvdWxkIG5vdCBiZSBmb3VuZCBpbiB0aGUgZWxlbWVudCB0cmVlYDtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIHBhc3MsXG4gICAgICAgIG1lc3NhZ2U6ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgKDAsIGplc3RfbWF0Y2hlcl91dGlsc18xLm1hdGNoZXJIaW50KShgJHt0aGlzLmlzTm90ID8gJy5ub3QnIDogJyd9LnRvQmVPblRoZVNjcmVlbmAsICdlbGVtZW50JywgJycpLFxuICAgICAgICAgICAgICAgICcnLFxuICAgICAgICAgICAgICAgICgwLCBqZXN0X21hdGNoZXJfdXRpbHNfMS5SRUNFSVZFRF9DT0xPUikodGhpcy5pc05vdCA/IGVycm9yRm91bmQoKSA6IGVycm9yTm90Rm91bmQoKSksXG4gICAgICAgICAgICBdLmpvaW4oJ1xcbicpO1xuICAgICAgICB9LFxuICAgIH07XG59XG5leHBvcnRzLnRvQmVPblRoZVNjcmVlbiA9IHRvQmVPblRoZVNjcmVlbjtcbmZ1bmN0aW9uIGdldFJvb3RFbGVtZW50KGVsZW1lbnQpIHtcbiAgICBsZXQgcm9vdCA9IGVsZW1lbnQ7XG4gICAgd2hpbGUgKHJvb3QucGFyZW50KSB7XG4gICAgICAgIHJvb3QgPSByb290LnBhcmVudDtcbiAgICB9XG4gICAgcmV0dXJuIHJvb3Q7XG59XG5mdW5jdGlvbiBnZXRTY3JlZW5Sb290KCkge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXNcbiAgICAgICAgY29uc3QgeyBzY3JlZW4gfSA9IHJlcXVpcmUoJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJyk7XG4gICAgICAgIGlmICghc2NyZWVuKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NjcmVlbiBpcyB1bmRlZmluZWQnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2NyZWVuLlVOU0FGRV9yb290ID8/IHNjcmVlbi5jb250YWluZXI7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBpbXBvcnQgYHNjcmVlbmAgb2JqZWN0IGZyb20gQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUuXFxuXFxuJyArXG4gICAgICAgICAgICAnVXNpbmcgdG9CZU9uVGhlU2NyZWVuKCkgbWF0Y2hlciByZXF1aXJlcyBAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSB2MTAuMS4wIG9yIGxhdGVyIHRvIGJlIGFkZGVkIHRvIHlvdXIgZGV2RGVwZW5kZW5jaWVzLicpO1xuICAgIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFBRUMsS0FBSyxFQUFFO0FBQUssQ0FBQyxDQUFDO0FBQzdERCxPQUFPLENBQUNFLGVBQWUsR0FBRyxLQUFLLENBQUM7QUFDaEMsSUFBTUMsb0JBQW9CLEdBQUdDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztBQUMxRCxJQUFNQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDbEMsU0FBU0YsZUFBZUEsQ0FBQ0ksT0FBTyxFQUFFO0VBQUEsSUFBQUMsS0FBQTtFQUM5QixJQUFJRCxPQUFPLEtBQUssSUFBSSxFQUFFO0lBQ2xCLENBQUMsQ0FBQyxFQUFFRCxPQUFPLENBQUNHLGlCQUFpQixFQUFFRixPQUFPLEVBQUVKLGVBQWUsRUFBRSxJQUFJLENBQUM7RUFDbEU7RUFDQSxJQUFNTyxJQUFJLEdBQUdILE9BQU8sS0FBSyxJQUFJLEdBQUcsS0FBSyxHQUFHSSxhQUFhLENBQUMsQ0FBQyxLQUFLQyxjQUFjLENBQUNMLE9BQU8sQ0FBQztFQUNuRixJQUFNTSxVQUFVLEdBQUcsU0FBYkEsVUFBVUEsQ0FBQSxFQUFTO0lBQ3JCLE9BQVEsNERBQTJELENBQUMsQ0FBQyxFQUFFUCxPQUFPLENBQUNRLFlBQVksRUFBRVAsT0FBTyxDQUFFLEVBQUM7RUFDM0csQ0FBQztFQUNELElBQU1RLGFBQWEsR0FBRyxTQUFoQkEsYUFBYUEsQ0FBQSxFQUFTO0lBQ3hCLE9BQVEsZ0RBQStDO0VBQzNELENBQUM7RUFDRCxPQUFPO0lBQ0hMLElBQUksRUFBSkEsSUFBSTtJQUNKTSxPQUFPLEVBQUUsU0FBQUEsUUFBQSxFQUFNO01BQ1gsT0FBTyxDQUNILENBQUMsQ0FBQyxFQUFFWixvQkFBb0IsQ0FBQ2EsV0FBVyxFQUFHLEdBQUVULEtBQUksQ0FBQ1UsS0FBSyxHQUFHLE1BQU0sR0FBRyxFQUFHLGtCQUFpQixFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUMsRUFDbkcsRUFBRSxFQUNGLENBQUMsQ0FBQyxFQUFFZCxvQkFBb0IsQ0FBQ2UsY0FBYyxFQUFFWCxLQUFJLENBQUNVLEtBQUssR0FBR0wsVUFBVSxDQUFDLENBQUMsR0FBR0UsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUN4RixDQUFDSyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ2hCO0VBQ0osQ0FBQztBQUNMO0FBQ0FuQixPQUFPLENBQUNFLGVBQWUsR0FBR0EsZUFBZTtBQUN6QyxTQUFTUyxjQUFjQSxDQUFDTCxPQUFPLEVBQUU7RUFDN0IsSUFBSWMsSUFBSSxHQUFHZCxPQUFPO0VBQ2xCLE9BQU9jLElBQUksQ0FBQ0MsTUFBTSxFQUFFO0lBQ2hCRCxJQUFJLEdBQUdBLElBQUksQ0FBQ0MsTUFBTTtFQUN0QjtFQUNBLE9BQU9ELElBQUk7QUFDZjtBQUNBLFNBQVNWLGFBQWFBLENBQUEsRUFBRztFQUNyQixJQUFJO0lBQUEsSUFBQVksbUJBQUE7SUFFQSxJQUFBQyxRQUFBLEdBQW1CbkIsT0FBTyxDQUFDLCtCQUErQixDQUFDO01BQW5Eb0IsTUFBTSxHQUFBRCxRQUFBLENBQU5DLE1BQU07SUFDZCxJQUFJLENBQUNBLE1BQU0sRUFBRTtNQUNULE1BQU0sSUFBSUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDO0lBQzFDO0lBQ0EsUUFBQUgsbUJBQUEsR0FBT0UsTUFBTSxDQUFDRSxXQUFXLFlBQUFKLG1CQUFBLEdBQUlFLE1BQU0sQ0FBQ0csU0FBUztFQUNqRCxDQUFDLENBQ0QsT0FBT0MsS0FBSyxFQUFFO0lBQ1YsTUFBTSxJQUFJSCxLQUFLLENBQUMsMEVBQTBFLEdBQ3RGLDhIQUE4SCxDQUFDO0VBQ3ZJO0FBQ0oiLCJpZ25vcmVMaXN0IjpbXX0=