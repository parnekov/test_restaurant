6e5f0cc99f8bed31bb7204dd6681a7b9
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.test = exports.serialize = exports.default = void 0;
var _collections = require('../collections');
var Symbol = globalThis['jest-symbol-do-not-touch'] || globalThis.Symbol;
var asymmetricMatcher = typeof Symbol === 'function' && Symbol.for ? Symbol.for('jest.asymmetricMatcher') : 0x1357a5;
var SPACE = ' ';
var serialize = function serialize(val, config, indentation, depth, refs, printer) {
  var stringedValue = val.toString();
  if (stringedValue === 'ArrayContaining' || stringedValue === 'ArrayNotContaining') {
    if (++depth > config.maxDepth) {
      return `[${stringedValue}]`;
    }
    return `${stringedValue + SPACE}[${(0, _collections.printListItems)(val.sample, config, indentation, depth, refs, printer)}]`;
  }
  if (stringedValue === 'ObjectContaining' || stringedValue === 'ObjectNotContaining') {
    if (++depth > config.maxDepth) {
      return `[${stringedValue}]`;
    }
    return `${stringedValue + SPACE}{${(0, _collections.printObjectProperties)(val.sample, config, indentation, depth, refs, printer)}}`;
  }
  if (stringedValue === 'StringMatching' || stringedValue === 'StringNotMatching') {
    return stringedValue + SPACE + printer(val.sample, config, indentation, depth, refs);
  }
  if (stringedValue === 'StringContaining' || stringedValue === 'StringNotContaining') {
    return stringedValue + SPACE + printer(val.sample, config, indentation, depth, refs);
  }
  if (typeof val.toAsymmetricMatcher !== 'function') {
    throw new Error(`Asymmetric matcher ${val.constructor.name} does not implement toAsymmetricMatcher()`);
  }
  return val.toAsymmetricMatcher();
};
exports.serialize = serialize;
var test = function test(val) {
  return val && val.$$typeof === asymmetricMatcher;
};
exports.test = test;
var plugin = {
  serialize: serialize,
  test: test
};
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRlc3QiLCJzZXJpYWxpemUiLCJkZWZhdWx0IiwiX2NvbGxlY3Rpb25zIiwicmVxdWlyZSIsIlN5bWJvbCIsImdsb2JhbFRoaXMiLCJhc3ltbWV0cmljTWF0Y2hlciIsImZvciIsIlNQQUNFIiwidmFsIiwiY29uZmlnIiwiaW5kZW50YXRpb24iLCJkZXB0aCIsInJlZnMiLCJwcmludGVyIiwic3RyaW5nZWRWYWx1ZSIsInRvU3RyaW5nIiwibWF4RGVwdGgiLCJwcmludExpc3RJdGVtcyIsInNhbXBsZSIsInByaW50T2JqZWN0UHJvcGVydGllcyIsInRvQXN5bW1ldHJpY01hdGNoZXIiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibmFtZSIsIiQkdHlwZW9mIiwicGx1Z2luIiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyJBc3ltbWV0cmljTWF0Y2hlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy50ZXN0ID0gZXhwb3J0cy5zZXJpYWxpemUgPSBleHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2NvbGxlY3Rpb25zID0gcmVxdWlyZSgnLi4vY29sbGVjdGlvbnMnKTtcbnZhciBTeW1ib2wgPSBnbG9iYWxUaGlzWydqZXN0LXN5bWJvbC1kby1ub3QtdG91Y2gnXSB8fCBnbG9iYWxUaGlzLlN5bWJvbDtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuY29uc3QgYXN5bW1ldHJpY01hdGNoZXIgPVxuICB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5mb3JcbiAgICA/IFN5bWJvbC5mb3IoJ2plc3QuYXN5bW1ldHJpY01hdGNoZXInKVxuICAgIDogMHgxMzU3YTU7XG5jb25zdCBTUEFDRSA9ICcgJztcbmNvbnN0IHNlcmlhbGl6ZSA9ICh2YWwsIGNvbmZpZywgaW5kZW50YXRpb24sIGRlcHRoLCByZWZzLCBwcmludGVyKSA9PiB7XG4gIGNvbnN0IHN0cmluZ2VkVmFsdWUgPSB2YWwudG9TdHJpbmcoKTtcbiAgaWYgKFxuICAgIHN0cmluZ2VkVmFsdWUgPT09ICdBcnJheUNvbnRhaW5pbmcnIHx8XG4gICAgc3RyaW5nZWRWYWx1ZSA9PT0gJ0FycmF5Tm90Q29udGFpbmluZydcbiAgKSB7XG4gICAgaWYgKCsrZGVwdGggPiBjb25maWcubWF4RGVwdGgpIHtcbiAgICAgIHJldHVybiBgWyR7c3RyaW5nZWRWYWx1ZX1dYDtcbiAgICB9XG4gICAgcmV0dXJuIGAke3N0cmluZ2VkVmFsdWUgKyBTUEFDRX1bJHsoMCwgX2NvbGxlY3Rpb25zLnByaW50TGlzdEl0ZW1zKShcbiAgICAgIHZhbC5zYW1wbGUsXG4gICAgICBjb25maWcsXG4gICAgICBpbmRlbnRhdGlvbixcbiAgICAgIGRlcHRoLFxuICAgICAgcmVmcyxcbiAgICAgIHByaW50ZXJcbiAgICApfV1gO1xuICB9XG4gIGlmIChcbiAgICBzdHJpbmdlZFZhbHVlID09PSAnT2JqZWN0Q29udGFpbmluZycgfHxcbiAgICBzdHJpbmdlZFZhbHVlID09PSAnT2JqZWN0Tm90Q29udGFpbmluZydcbiAgKSB7XG4gICAgaWYgKCsrZGVwdGggPiBjb25maWcubWF4RGVwdGgpIHtcbiAgICAgIHJldHVybiBgWyR7c3RyaW5nZWRWYWx1ZX1dYDtcbiAgICB9XG4gICAgcmV0dXJuIGAke3N0cmluZ2VkVmFsdWUgKyBTUEFDRX17JHsoMCwgX2NvbGxlY3Rpb25zLnByaW50T2JqZWN0UHJvcGVydGllcykoXG4gICAgICB2YWwuc2FtcGxlLFxuICAgICAgY29uZmlnLFxuICAgICAgaW5kZW50YXRpb24sXG4gICAgICBkZXB0aCxcbiAgICAgIHJlZnMsXG4gICAgICBwcmludGVyXG4gICAgKX19YDtcbiAgfVxuICBpZiAoXG4gICAgc3RyaW5nZWRWYWx1ZSA9PT0gJ1N0cmluZ01hdGNoaW5nJyB8fFxuICAgIHN0cmluZ2VkVmFsdWUgPT09ICdTdHJpbmdOb3RNYXRjaGluZydcbiAgKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHN0cmluZ2VkVmFsdWUgK1xuICAgICAgU1BBQ0UgK1xuICAgICAgcHJpbnRlcih2YWwuc2FtcGxlLCBjb25maWcsIGluZGVudGF0aW9uLCBkZXB0aCwgcmVmcylcbiAgICApO1xuICB9XG4gIGlmIChcbiAgICBzdHJpbmdlZFZhbHVlID09PSAnU3RyaW5nQ29udGFpbmluZycgfHxcbiAgICBzdHJpbmdlZFZhbHVlID09PSAnU3RyaW5nTm90Q29udGFpbmluZydcbiAgKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHN0cmluZ2VkVmFsdWUgK1xuICAgICAgU1BBQ0UgK1xuICAgICAgcHJpbnRlcih2YWwuc2FtcGxlLCBjb25maWcsIGluZGVudGF0aW9uLCBkZXB0aCwgcmVmcylcbiAgICApO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsLnRvQXN5bW1ldHJpY01hdGNoZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgQXN5bW1ldHJpYyBtYXRjaGVyICR7dmFsLmNvbnN0cnVjdG9yLm5hbWV9IGRvZXMgbm90IGltcGxlbWVudCB0b0FzeW1tZXRyaWNNYXRjaGVyKClgXG4gICAgKTtcbiAgfVxuICByZXR1cm4gdmFsLnRvQXN5bW1ldHJpY01hdGNoZXIoKTtcbn07XG5leHBvcnRzLnNlcmlhbGl6ZSA9IHNlcmlhbGl6ZTtcbmNvbnN0IHRlc3QgPSB2YWwgPT4gdmFsICYmIHZhbC4kJHR5cGVvZiA9PT0gYXN5bW1ldHJpY01hdGNoZXI7XG5leHBvcnRzLnRlc3QgPSB0ZXN0O1xuY29uc3QgcGx1Z2luID0ge1xuICBzZXJpYWxpemUsXG4gIHRlc3Rcbn07XG52YXIgX2RlZmF1bHQgPSBwbHVnaW47XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLElBQUksR0FBR0YsT0FBTyxDQUFDRyxTQUFTLEdBQUdILE9BQU8sQ0FBQ0ksT0FBTyxHQUFHLEtBQUssQ0FBQztBQUMzRCxJQUFJQyxZQUFZLEdBQUdDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztBQUM1QyxJQUFJQyxNQUFNLEdBQUdDLFVBQVUsQ0FBQywwQkFBMEIsQ0FBQyxJQUFJQSxVQUFVLENBQUNELE1BQU07QUFPeEUsSUFBTUUsaUJBQWlCLEdBQ3JCLE9BQU9GLE1BQU0sS0FBSyxVQUFVLElBQUlBLE1BQU0sQ0FBQ0csR0FBRyxHQUN0Q0gsTUFBTSxDQUFDRyxHQUFHLENBQUMsd0JBQXdCLENBQUMsR0FDcEMsUUFBUTtBQUNkLElBQU1DLEtBQUssR0FBRyxHQUFHO0FBQ2pCLElBQU1SLFNBQVMsR0FBRyxTQUFaQSxTQUFTQSxDQUFJUyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsV0FBVyxFQUFFQyxLQUFLLEVBQUVDLElBQUksRUFBRUMsT0FBTyxFQUFLO0VBQ3BFLElBQU1DLGFBQWEsR0FBR04sR0FBRyxDQUFDTyxRQUFRLENBQUMsQ0FBQztFQUNwQyxJQUNFRCxhQUFhLEtBQUssaUJBQWlCLElBQ25DQSxhQUFhLEtBQUssb0JBQW9CLEVBQ3RDO0lBQ0EsSUFBSSxFQUFFSCxLQUFLLEdBQUdGLE1BQU0sQ0FBQ08sUUFBUSxFQUFFO01BQzdCLE9BQVEsSUFBR0YsYUFBYyxHQUFFO0lBQzdCO0lBQ0EsT0FBUSxHQUFFQSxhQUFhLEdBQUdQLEtBQU0sSUFBRyxDQUFDLENBQUMsRUFBRU4sWUFBWSxDQUFDZ0IsY0FBYyxFQUNoRVQsR0FBRyxDQUFDVSxNQUFNLEVBQ1ZULE1BQU0sRUFDTkMsV0FBVyxFQUNYQyxLQUFLLEVBQ0xDLElBQUksRUFDSkMsT0FDRixDQUFFLEdBQUU7RUFDTjtFQUNBLElBQ0VDLGFBQWEsS0FBSyxrQkFBa0IsSUFDcENBLGFBQWEsS0FBSyxxQkFBcUIsRUFDdkM7SUFDQSxJQUFJLEVBQUVILEtBQUssR0FBR0YsTUFBTSxDQUFDTyxRQUFRLEVBQUU7TUFDN0IsT0FBUSxJQUFHRixhQUFjLEdBQUU7SUFDN0I7SUFDQSxPQUFRLEdBQUVBLGFBQWEsR0FBR1AsS0FBTSxJQUFHLENBQUMsQ0FBQyxFQUFFTixZQUFZLENBQUNrQixxQkFBcUIsRUFDdkVYLEdBQUcsQ0FBQ1UsTUFBTSxFQUNWVCxNQUFNLEVBQ05DLFdBQVcsRUFDWEMsS0FBSyxFQUNMQyxJQUFJLEVBQ0pDLE9BQ0YsQ0FBRSxHQUFFO0VBQ047RUFDQSxJQUNFQyxhQUFhLEtBQUssZ0JBQWdCLElBQ2xDQSxhQUFhLEtBQUssbUJBQW1CLEVBQ3JDO0lBQ0EsT0FDRUEsYUFBYSxHQUNiUCxLQUFLLEdBQ0xNLE9BQU8sQ0FBQ0wsR0FBRyxDQUFDVSxNQUFNLEVBQUVULE1BQU0sRUFBRUMsV0FBVyxFQUFFQyxLQUFLLEVBQUVDLElBQUksQ0FBQztFQUV6RDtFQUNBLElBQ0VFLGFBQWEsS0FBSyxrQkFBa0IsSUFDcENBLGFBQWEsS0FBSyxxQkFBcUIsRUFDdkM7SUFDQSxPQUNFQSxhQUFhLEdBQ2JQLEtBQUssR0FDTE0sT0FBTyxDQUFDTCxHQUFHLENBQUNVLE1BQU0sRUFBRVQsTUFBTSxFQUFFQyxXQUFXLEVBQUVDLEtBQUssRUFBRUMsSUFBSSxDQUFDO0VBRXpEO0VBQ0EsSUFBSSxPQUFPSixHQUFHLENBQUNZLG1CQUFtQixLQUFLLFVBQVUsRUFBRTtJQUNqRCxNQUFNLElBQUlDLEtBQUssQ0FDWixzQkFBcUJiLEdBQUcsQ0FBQ2MsV0FBVyxDQUFDQyxJQUFLLDJDQUM3QyxDQUFDO0VBQ0g7RUFDQSxPQUFPZixHQUFHLENBQUNZLG1CQUFtQixDQUFDLENBQUM7QUFDbEMsQ0FBQztBQUNEeEIsT0FBTyxDQUFDRyxTQUFTLEdBQUdBLFNBQVM7QUFDN0IsSUFBTUQsSUFBSSxHQUFHLFNBQVBBLElBQUlBLENBQUdVLEdBQUc7RUFBQSxPQUFJQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ2dCLFFBQVEsS0FBS25CLGlCQUFpQjtBQUFBO0FBQzdEVCxPQUFPLENBQUNFLElBQUksR0FBR0EsSUFBSTtBQUNuQixJQUFNMkIsTUFBTSxHQUFHO0VBQ2IxQixTQUFTLEVBQVRBLFNBQVM7RUFDVEQsSUFBSSxFQUFKQTtBQUNGLENBQUM7QUFDRCxJQUFJNEIsUUFBUSxHQUFHRCxNQUFNO0FBQ3JCN0IsT0FBTyxDQUFDSSxPQUFPLEdBQUcwQixRQUFRIiwiaWdub3JlTGlzdCI6W119