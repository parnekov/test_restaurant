adbf08b61ca866f55f6747b3b3c73052
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _View = _interopRequireDefault(require("../Components/View/View"));
var _UIManager = _interopRequireDefault(require("../ReactNative/UIManager"));
var _StyleSheet = _interopRequireDefault(require("../StyleSheet/StyleSheet"));
var _DebuggingOverlayNativeComponent = _interopRequireWildcard(require("./DebuggingOverlayNativeComponent"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var useRef = React.useRef,
  useImperativeHandle = React.useImperativeHandle;
var isNativeComponentReady = _UIManager.default.hasViewManagerConfig('DebuggingOverlay');
function DebuggingOverlay(_props, ref) {
  useImperativeHandle(ref, function () {
    return {
      highlightTraceUpdates: function highlightTraceUpdates(updates) {
        if (!isNativeComponentReady) {
          return;
        }
        var nonEmptyRectangles = updates.filter(function (_ref) {
          var rectangle = _ref.rectangle,
            color = _ref.color;
          return rectangle.width >= 0 && rectangle.height >= 0;
        });
        if (nativeComponentRef.current != null) {
          _DebuggingOverlayNativeComponent.Commands.highlightTraceUpdates(nativeComponentRef.current, nonEmptyRectangles);
        }
      },
      highlightElements: function highlightElements(elements) {
        if (!isNativeComponentReady) {
          return;
        }
        if (nativeComponentRef.current != null) {
          _DebuggingOverlayNativeComponent.Commands.highlightElements(nativeComponentRef.current, elements);
        }
      },
      clearElementsHighlight: function clearElementsHighlight() {
        if (!isNativeComponentReady) {
          return;
        }
        if (nativeComponentRef.current != null) {
          _DebuggingOverlayNativeComponent.Commands.clearElementsHighlights(nativeComponentRef.current);
        }
      }
    };
  }, []);
  var nativeComponentRef = useRef(null);
  return isNativeComponentReady && (0, _jsxRuntime.jsx)(_View.default, {
    pointerEvents: "none",
    style: styles.overlay,
    children: (0, _jsxRuntime.jsx)(_DebuggingOverlayNativeComponent.default, {
      ref: nativeComponentRef,
      style: styles.overlay
    })
  });
}
var styles = _StyleSheet.default.create({
  overlay: {
    position: 'absolute',
    top: 0,
    bottom: 0,
    left: 0,
    right: 0
  }
});
var DebuggingOverlayWithForwardedRef = React.forwardRef(DebuggingOverlay);
var _default = exports.default = DebuggingOverlayWithForwardedRef;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,