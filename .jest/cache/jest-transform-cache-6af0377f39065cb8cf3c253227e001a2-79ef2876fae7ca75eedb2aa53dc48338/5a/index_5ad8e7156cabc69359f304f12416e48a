70efed90478d9578794f03303f71355c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _theme = require("../../utils/theme");
var _styles = _interopRequireDefault(require("./styles"));
var _jsxRuntime = require("react/jsx-runtime");
var Counter = function Counter(_ref) {
  var amount = _ref.amount,
    isEnabled = _ref.isEnabled,
    onChange = _ref.onChange;
  var onPlusPress = function onPlusPress() {
    onChange(amount + 1);
  };
  var onMinusPress = function onMinusPress() {
    if (amount !== 0) {
      onChange(amount - 1);
    }
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [_styles.default.container, !isEnabled ? {
      backgroundColor: _theme.COLORS.GRAY
    } : {}],
    children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      onPress: onMinusPress,
      disabled: !isEnabled,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: _styles.default.text,
        children: "-"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: _styles.default.text,
      children: amount
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      onPress: onPlusPress,
      disabled: !isEnabled,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: _styles.default.text,
        children: "+"
      })
    })]
  });
};
var _default = exports.default = Counter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl90aGVtZSIsIl9zdHlsZXMiLCJfanN4UnVudGltZSIsIkNvdW50ZXIiLCJfcmVmIiwiYW1vdW50IiwiaXNFbmFibGVkIiwib25DaGFuZ2UiLCJvblBsdXNQcmVzcyIsIm9uTWludXNQcmVzcyIsImpzeHMiLCJWaWV3Iiwic3R5bGUiLCJzdHlsZXMiLCJjb250YWluZXIiLCJiYWNrZ3JvdW5kQ29sb3IiLCJDT0xPUlMiLCJHUkFZIiwiY2hpbGRyZW4iLCJqc3giLCJUb3VjaGFibGVPcGFjaXR5Iiwib25QcmVzcyIsImRpc2FibGVkIiwiVGV4dCIsInRleHQiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIFJFQUNUICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtUb3VjaGFibGVPcGFjaXR5LCBWaWV3LCBUZXh0fSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuLyogVVRJTFMgKi9cbmltcG9ydCB7Q09MT1JTfSBmcm9tICcuLi8uLi91dGlscy90aGVtZSc7XG4vKiBTVFlMRVMgKi9cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMnO1xuXG50eXBlIFByb3BzID0ge1xuICBhbW91bnQ6IG51bWJlcjtcbiAgaXNFbmFibGVkOiBib29sZWFuO1xuICBvbkNoYW5nZTogRnVuY3Rpb247XG59O1xuXG5jb25zdCBDb3VudGVyID0gKHthbW91bnQsIGlzRW5hYmxlZCwgb25DaGFuZ2V9OiBQcm9wcykgPT4ge1xuICBjb25zdCBvblBsdXNQcmVzcyA9ICgpID0+IHtcbiAgICBvbkNoYW5nZShhbW91bnQgKyAxKTtcbiAgfTtcblxuICBjb25zdCBvbk1pbnVzUHJlc3MgPSAoKSA9PiB7XG4gICAgaWYgKGFtb3VudCAhPT0gMCkge1xuICAgICAgb25DaGFuZ2UoYW1vdW50IC0gMSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPFZpZXdcbiAgICAgIHN0eWxlPXtbXG4gICAgICAgIHN0eWxlcy5jb250YWluZXIsXG4gICAgICAgICFpc0VuYWJsZWQgPyB7YmFja2dyb3VuZENvbG9yOiBDT0xPUlMuR1JBWX0gOiB7fSxcbiAgICAgIF19PlxuICAgICAgPFRvdWNoYWJsZU9wYWNpdHkgb25QcmVzcz17b25NaW51c1ByZXNzfSBkaXNhYmxlZD17IWlzRW5hYmxlZH0+XG4gICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMudGV4dH0+LTwvVGV4dD5cbiAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cbiAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMudGV4dH0+e2Ftb3VudH08L1RleHQ+XG4gICAgICA8VG91Y2hhYmxlT3BhY2l0eSBvblByZXNzPXtvblBsdXNQcmVzc30gZGlzYWJsZWQ9eyFpc0VuYWJsZWR9PlxuICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLnRleHR9Pis8L1RleHQ+XG4gICAgICA8L1RvdWNoYWJsZU9wYWNpdHk+XG4gICAgPC9WaWV3PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQ291bnRlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFFQSxJQUFBRSxNQUFBLEdBQUFGLE9BQUE7QUFFQSxJQUFBRyxPQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFBOEIsSUFBQUksV0FBQSxHQUFBSixPQUFBO0FBUTlCLElBQU1LLE9BQU8sR0FBRyxTQUFWQSxPQUFPQSxDQUFBQyxJQUFBLEVBQTZDO0VBQUEsSUFBeENDLE1BQU0sR0FBQUQsSUFBQSxDQUFOQyxNQUFNO0lBQUVDLFNBQVMsR0FBQUYsSUFBQSxDQUFURSxTQUFTO0lBQUVDLFFBQVEsR0FBQUgsSUFBQSxDQUFSRyxRQUFRO0VBQzNDLElBQU1DLFdBQVcsR0FBRyxTQUFkQSxXQUFXQSxDQUFBLEVBQVM7SUFDeEJELFFBQVEsQ0FBQ0YsTUFBTSxHQUFHLENBQUMsQ0FBQztFQUN0QixDQUFDO0VBRUQsSUFBTUksWUFBWSxHQUFHLFNBQWZBLFlBQVlBLENBQUEsRUFBUztJQUN6QixJQUFJSixNQUFNLEtBQUssQ0FBQyxFQUFFO01BQ2hCRSxRQUFRLENBQUNGLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDdEI7RUFDRixDQUFDO0VBRUQsT0FDRSxJQUFBSCxXQUFBLENBQUFRLElBQUEsRUFBQ1gsWUFBQSxDQUFBWSxJQUFJO0lBQ0hDLEtBQUssRUFBRSxDQUNMQyxlQUFNLENBQUNDLFNBQVMsRUFDaEIsQ0FBQ1IsU0FBUyxHQUFHO01BQUNTLGVBQWUsRUFBRUMsYUFBTSxDQUFDQztJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDaEQ7SUFBQUMsUUFBQSxHQUNGLElBQUFoQixXQUFBLENBQUFpQixHQUFBLEVBQUNwQixZQUFBLENBQUFxQixnQkFBZ0I7TUFBQ0MsT0FBTyxFQUFFWixZQUFhO01BQUNhLFFBQVEsRUFBRSxDQUFDaEIsU0FBVTtNQUFBWSxRQUFBLEVBQzVELElBQUFoQixXQUFBLENBQUFpQixHQUFBLEVBQUNwQixZQUFBLENBQUF3QixJQUFJO1FBQUNYLEtBQUssRUFBRUMsZUFBTSxDQUFDVyxJQUFLO1FBQUFOLFFBQUEsRUFBQztNQUFDLENBQU07SUFBQyxDQUNsQixDQUFDLEVBQ25CLElBQUFoQixXQUFBLENBQUFpQixHQUFBLEVBQUNwQixZQUFBLENBQUF3QixJQUFJO01BQUNYLEtBQUssRUFBRUMsZUFBTSxDQUFDVyxJQUFLO01BQUFOLFFBQUEsRUFBRWI7SUFBTSxDQUFPLENBQUMsRUFDekMsSUFBQUgsV0FBQSxDQUFBaUIsR0FBQSxFQUFDcEIsWUFBQSxDQUFBcUIsZ0JBQWdCO01BQUNDLE9BQU8sRUFBRWIsV0FBWTtNQUFDYyxRQUFRLEVBQUUsQ0FBQ2hCLFNBQVU7TUFBQVksUUFBQSxFQUMzRCxJQUFBaEIsV0FBQSxDQUFBaUIsR0FBQSxFQUFDcEIsWUFBQSxDQUFBd0IsSUFBSTtRQUFDWCxLQUFLLEVBQUVDLGVBQU0sQ0FBQ1csSUFBSztRQUFBTixRQUFBLEVBQUM7TUFBQyxDQUFNO0lBQUMsQ0FDbEIsQ0FBQztFQUFBLENBQ2YsQ0FBQztBQUVYLENBQUM7QUFBQyxJQUFBTyxRQUFBLEdBQUFDLE9BQUEsQ0FBQUMsT0FBQSxHQUVheEIsT0FBTyIsImlnbm9yZUxpc3QiOltdfQ==