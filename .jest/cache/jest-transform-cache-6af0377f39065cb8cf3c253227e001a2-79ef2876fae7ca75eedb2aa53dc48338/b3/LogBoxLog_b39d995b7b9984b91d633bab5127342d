e650b6c917795a92be48f03cbf3f07c5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var LogBoxSymbolication = _interopRequireWildcard(require("./LogBoxSymbolication"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var LogBoxLog = function () {
  function LogBoxLog(data) {
    (0, _classCallCheck2.default)(this, LogBoxLog);
    this.symbolicated = {
      error: null,
      stack: null,
      status: 'NONE'
    };
    this.level = data.level;
    this.type = data.type;
    this.message = data.message;
    this.stack = data.stack;
    this.category = data.category;
    this.componentStack = data.componentStack;
    this.codeFrame = data.codeFrame;
    this.isComponentError = data.isComponentError;
    this.extraData = data.extraData;
    this.count = 1;
  }
  return (0, _createClass2.default)(LogBoxLog, [{
    key: "incrementCount",
    value: function incrementCount() {
      this.count += 1;
    }
  }, {
    key: "getAvailableStack",
    value: function getAvailableStack() {
      return this.symbolicated.status === 'COMPLETE' ? this.symbolicated.stack : this.stack;
    }
  }, {
    key: "retrySymbolicate",
    value: function retrySymbolicate(callback) {
      if (this.symbolicated.status !== 'COMPLETE') {
        LogBoxSymbolication.deleteStack(this.stack);
        this.handleSymbolicate(callback);
      }
    }
  }, {
    key: "symbolicate",
    value: function symbolicate(callback) {
      if (this.symbolicated.status === 'NONE') {
        this.handleSymbolicate(callback);
      }
    }
  }, {
    key: "handleSymbolicate",
    value: function handleSymbolicate(callback) {
      var _this = this;
      if (this.symbolicated.status !== 'PENDING') {
        this.updateStatus(null, null, null, callback);
        LogBoxSymbolication.symbolicate(this.stack, this.extraData).then(function (data) {
          _this.updateStatus(null, data == null ? void 0 : data.stack, data == null ? void 0 : data.codeFrame, callback);
        }, function (error) {
          _this.updateStatus(error, null, null, callback);
        });
      }
    }
  }, {
    key: "updateStatus",
    value: function updateStatus(error, stack, codeFrame, callback) {
      var lastStatus = this.symbolicated.status;
      if (error != null) {
        this.symbolicated = {
          error: error,
          stack: null,
          status: 'FAILED'
        };
      } else if (stack != null) {
        if (codeFrame) {
          this.codeFrame = codeFrame;
        }
        this.symbolicated = {
          error: null,
          stack: stack,
          status: 'COMPLETE'
        };
      } else {
        this.symbolicated = {
          error: null,
          stack: null,
          status: 'PENDING'
        };
      }
      if (callback && lastStatus !== this.symbolicated.status) {
        callback(this.symbolicated.status);
      }
    }
  }]);
}();
var _default = exports.default = LogBoxLog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMb2dCb3hTeW1ib2xpY2F0aW9uIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiTG9nQm94TG9nIiwiZGF0YSIsIl9jbGFzc0NhbGxDaGVjazIiLCJzeW1ib2xpY2F0ZWQiLCJlcnJvciIsInN0YWNrIiwic3RhdHVzIiwibGV2ZWwiLCJ0eXBlIiwibWVzc2FnZSIsImNhdGVnb3J5IiwiY29tcG9uZW50U3RhY2siLCJjb2RlRnJhbWUiLCJpc0NvbXBvbmVudEVycm9yIiwiZXh0cmFEYXRhIiwiY291bnQiLCJfY3JlYXRlQ2xhc3MyIiwia2V5IiwidmFsdWUiLCJpbmNyZW1lbnRDb3VudCIsImdldEF2YWlsYWJsZVN0YWNrIiwicmV0cnlTeW1ib2xpY2F0ZSIsImNhbGxiYWNrIiwiZGVsZXRlU3RhY2siLCJoYW5kbGVTeW1ib2xpY2F0ZSIsInN5bWJvbGljYXRlIiwiX3RoaXMiLCJ1cGRhdGVTdGF0dXMiLCJ0aGVuIiwibGFzdFN0YXR1cyIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkxvZ0JveExvZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0XG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IHR5cGUge1N0YWNrfSBmcm9tICcuL0xvZ0JveFN5bWJvbGljYXRpb24nO1xuaW1wb3J0IHR5cGUge1xuICBDYXRlZ29yeSxcbiAgQ29kZUZyYW1lLFxuICBDb21wb25lbnRTdGFjayxcbiAgTWVzc2FnZSxcbn0gZnJvbSAnLi9wYXJzZUxvZ0JveExvZyc7XG5cbmltcG9ydCAqIGFzIExvZ0JveFN5bWJvbGljYXRpb24gZnJvbSAnLi9Mb2dCb3hTeW1ib2xpY2F0aW9uJztcblxudHlwZSBTeW1ib2xpY2F0aW9uU3RhdHVzID0gJ05PTkUnIHwgJ1BFTkRJTkcnIHwgJ0NPTVBMRVRFJyB8ICdGQUlMRUQnO1xuXG5leHBvcnQgdHlwZSBMb2dMZXZlbCA9ICd3YXJuJyB8ICdlcnJvcicgfCAnZmF0YWwnIHwgJ3N5bnRheCc7XG5cbmV4cG9ydCB0eXBlIExvZ0JveExvZ0RhdGEgPSAkUmVhZE9ubHk8e3xcbiAgbGV2ZWw6IExvZ0xldmVsLFxuICB0eXBlPzogP3N0cmluZyxcbiAgbWVzc2FnZTogTWVzc2FnZSxcbiAgc3RhY2s6IFN0YWNrLFxuICBjYXRlZ29yeTogc3RyaW5nLFxuICBjb21wb25lbnRTdGFjazogQ29tcG9uZW50U3RhY2ssXG4gIGNvZGVGcmFtZT86ID9Db2RlRnJhbWUsXG4gIGlzQ29tcG9uZW50RXJyb3I6IGJvb2xlYW4sXG4gIGV4dHJhRGF0YT86IG1peGVkLFxufH0+O1xuXG5jbGFzcyBMb2dCb3hMb2cge1xuICBtZXNzYWdlOiBNZXNzYWdlO1xuICB0eXBlOiA/c3RyaW5nO1xuICBjYXRlZ29yeTogQ2F0ZWdvcnk7XG4gIGNvbXBvbmVudFN0YWNrOiBDb21wb25lbnRTdGFjaztcbiAgc3RhY2s6IFN0YWNrO1xuICBjb3VudDogbnVtYmVyO1xuICBsZXZlbDogTG9nTGV2ZWw7XG4gIGNvZGVGcmFtZTogP0NvZGVGcmFtZTtcbiAgaXNDb21wb25lbnRFcnJvcjogYm9vbGVhbjtcbiAgZXh0cmFEYXRhOiBtaXhlZCB8IHZvaWQ7XG4gIHN5bWJvbGljYXRlZDpcbiAgICB8ICRSZWFkT25seTx7fGVycm9yOiBudWxsLCBzdGFjazogbnVsbCwgc3RhdHVzOiAnTk9ORSd8fT5cbiAgICB8ICRSZWFkT25seTx7fGVycm9yOiBudWxsLCBzdGFjazogbnVsbCwgc3RhdHVzOiAnUEVORElORyd8fT5cbiAgICB8ICRSZWFkT25seTx7fGVycm9yOiBudWxsLCBzdGFjazogU3RhY2ssIHN0YXR1czogJ0NPTVBMRVRFJ3x9PlxuICAgIHwgJFJlYWRPbmx5PHt8ZXJyb3I6IEVycm9yLCBzdGFjazogbnVsbCwgc3RhdHVzOiAnRkFJTEVEJ3x9PiA9IHtcbiAgICBlcnJvcjogbnVsbCxcbiAgICBzdGFjazogbnVsbCxcbiAgICBzdGF0dXM6ICdOT05FJyxcbiAgfTtcblxuICBjb25zdHJ1Y3RvcihkYXRhOiBMb2dCb3hMb2dEYXRhKSB7XG4gICAgdGhpcy5sZXZlbCA9IGRhdGEubGV2ZWw7XG4gICAgdGhpcy50eXBlID0gZGF0YS50eXBlO1xuICAgIHRoaXMubWVzc2FnZSA9IGRhdGEubWVzc2FnZTtcbiAgICB0aGlzLnN0YWNrID0gZGF0YS5zdGFjaztcbiAgICB0aGlzLmNhdGVnb3J5ID0gZGF0YS5jYXRlZ29yeTtcbiAgICB0aGlzLmNvbXBvbmVudFN0YWNrID0gZGF0YS5jb21wb25lbnRTdGFjaztcbiAgICB0aGlzLmNvZGVGcmFtZSA9IGRhdGEuY29kZUZyYW1lO1xuICAgIHRoaXMuaXNDb21wb25lbnRFcnJvciA9IGRhdGEuaXNDb21wb25lbnRFcnJvcjtcbiAgICB0aGlzLmV4dHJhRGF0YSA9IGRhdGEuZXh0cmFEYXRhO1xuICAgIHRoaXMuY291bnQgPSAxO1xuICB9XG5cbiAgaW5jcmVtZW50Q291bnQoKTogdm9pZCB7XG4gICAgdGhpcy5jb3VudCArPSAxO1xuICB9XG5cbiAgZ2V0QXZhaWxhYmxlU3RhY2soKTogU3RhY2sge1xuICAgIHJldHVybiB0aGlzLnN5bWJvbGljYXRlZC5zdGF0dXMgPT09ICdDT01QTEVURSdcbiAgICAgID8gdGhpcy5zeW1ib2xpY2F0ZWQuc3RhY2tcbiAgICAgIDogdGhpcy5zdGFjaztcbiAgfVxuXG4gIHJldHJ5U3ltYm9saWNhdGUoY2FsbGJhY2s/OiAoc3RhdHVzOiBTeW1ib2xpY2F0aW9uU3RhdHVzKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc3ltYm9saWNhdGVkLnN0YXR1cyAhPT0gJ0NPTVBMRVRFJykge1xuICAgICAgTG9nQm94U3ltYm9saWNhdGlvbi5kZWxldGVTdGFjayh0aGlzLnN0YWNrKTtcbiAgICAgIHRoaXMuaGFuZGxlU3ltYm9saWNhdGUoY2FsbGJhY2spO1xuICAgIH1cbiAgfVxuXG4gIHN5bWJvbGljYXRlKGNhbGxiYWNrPzogKHN0YXR1czogU3ltYm9saWNhdGlvblN0YXR1cykgPT4gdm9pZCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnN5bWJvbGljYXRlZC5zdGF0dXMgPT09ICdOT05FJykge1xuICAgICAgdGhpcy5oYW5kbGVTeW1ib2xpY2F0ZShjYWxsYmFjayk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlU3ltYm9saWNhdGUoY2FsbGJhY2s/OiAoc3RhdHVzOiBTeW1ib2xpY2F0aW9uU3RhdHVzKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc3ltYm9saWNhdGVkLnN0YXR1cyAhPT0gJ1BFTkRJTkcnKSB7XG4gICAgICB0aGlzLnVwZGF0ZVN0YXR1cyhudWxsLCBudWxsLCBudWxsLCBjYWxsYmFjayk7XG4gICAgICBMb2dCb3hTeW1ib2xpY2F0aW9uLnN5bWJvbGljYXRlKHRoaXMuc3RhY2ssIHRoaXMuZXh0cmFEYXRhKS50aGVuKFxuICAgICAgICBkYXRhID0+IHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXR1cyhudWxsLCBkYXRhPy5zdGFjaywgZGF0YT8uY29kZUZyYW1lLCBjYWxsYmFjayk7XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yID0+IHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXR1cyhlcnJvciwgbnVsbCwgbnVsbCwgY2FsbGJhY2spO1xuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVTdGF0dXMoXG4gICAgZXJyb3I6ID9FcnJvcixcbiAgICBzdGFjazogP1N0YWNrLFxuICAgIGNvZGVGcmFtZTogP0NvZGVGcmFtZSxcbiAgICBjYWxsYmFjaz86IChzdGF0dXM6IFN5bWJvbGljYXRpb25TdGF0dXMpID0+IHZvaWQsXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IGxhc3RTdGF0dXMgPSB0aGlzLnN5bWJvbGljYXRlZC5zdGF0dXM7XG4gICAgaWYgKGVycm9yICE9IG51bGwpIHtcbiAgICAgIHRoaXMuc3ltYm9saWNhdGVkID0ge1xuICAgICAgICBlcnJvcixcbiAgICAgICAgc3RhY2s6IG51bGwsXG4gICAgICAgIHN0YXR1czogJ0ZBSUxFRCcsXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoc3RhY2sgIT0gbnVsbCkge1xuICAgICAgaWYgKGNvZGVGcmFtZSkge1xuICAgICAgICB0aGlzLmNvZGVGcmFtZSA9IGNvZGVGcmFtZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zeW1ib2xpY2F0ZWQgPSB7XG4gICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICBzdGFjayxcbiAgICAgICAgc3RhdHVzOiAnQ09NUExFVEUnLFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zeW1ib2xpY2F0ZWQgPSB7XG4gICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICBzdGFjazogbnVsbCxcbiAgICAgICAgc3RhdHVzOiAnUEVORElORycsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChjYWxsYmFjayAmJiBsYXN0U3RhdHVzICE9PSB0aGlzLnN5bWJvbGljYXRlZC5zdGF0dXMpIHtcbiAgICAgIGNhbGxiYWNrKHRoaXMuc3ltYm9saWNhdGVkLnN0YXR1cyk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IExvZ0JveExvZztcbiJdLCJtYXBw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