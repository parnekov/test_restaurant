ecd27ffb52ea6285adb2255a922b17ad
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toBeVisible = void 0;
var react_native_1 = require("react-native");
var jest_matcher_utils_1 = require("jest-matcher-utils");
var utils_1 = require("./utils");
var component_tree_1 = require("./component-tree");
function isVisibleForStyles(element) {
  var style = element.props.style || {};
  var _react_native_1$Style = react_native_1.StyleSheet.flatten(style),
    display = _react_native_1$Style.display,
    opacity = _react_native_1$Style.opacity;
  return display !== 'none' && opacity !== 0;
}
function isVisibleForAccessibility(element) {
  return !element.props.accessibilityElementsHidden && element.props.importantForAccessibility !== 'no-hide-descendants';
}
function isModalVisible(element) {
  return element.type !== react_native_1.Modal || element.props.visible !== false;
}
function isElementVisible(element) {
  var current = element;
  while (current) {
    if (!isVisibleForStyles(current) || !isVisibleForAccessibility(current) || !isModalVisible(current)) {
      return false;
    }
    current = (0, component_tree_1.getParentElement)(current, [react_native_1.Modal]);
  }
  return true;
}
function toBeVisible(element) {
  var _this = this;
  (0, utils_1.checkReactElement)(element, toBeVisible, this);
  var isVisible = isElementVisible(element);
  return {
    pass: isVisible,
    message: function message() {
      var is = isVisible ? 'is' : 'is not';
      return [(0, jest_matcher_utils_1.matcherHint)(`${_this.isNot ? '.not' : ''}.toBeVisible`, 'element', ''), '', `Received element ${is} visible:`, (0, utils_1.printElement)(element)].join('\n');
    }
  };
}
exports.toBeVisible = toBeVisible;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvQmVWaXNpYmxlIiwicmVhY3RfbmF0aXZlXzEiLCJyZXF1aXJlIiwiamVzdF9tYXRjaGVyX3V0aWxzXzEiLCJ1dGlsc18xIiwiY29tcG9uZW50X3RyZWVfMSIsImlzVmlzaWJsZUZvclN0eWxlcyIsImVsZW1lbnQiLCJzdHlsZSIsInByb3BzIiwiX3JlYWN0X25hdGl2ZV8xJFN0eWxlIiwiU3R5bGVTaGVldCIsImZsYXR0ZW4iLCJkaXNwbGF5Iiwib3BhY2l0eSIsImlzVmlzaWJsZUZvckFjY2Vzc2liaWxpdHkiLCJhY2Nlc3NpYmlsaXR5RWxlbWVudHNIaWRkZW4iLCJpbXBvcnRhbnRGb3JBY2Nlc3NpYmlsaXR5IiwiaXNNb2RhbFZpc2libGUiLCJ0eXBlIiwiTW9kYWwiLCJ2aXNpYmxlIiwiaXNFbGVtZW50VmlzaWJsZSIsImN1cnJlbnQiLCJnZXRQYXJlbnRFbGVtZW50IiwiX3RoaXMiLCJjaGVja1JlYWN0RWxlbWVudCIsImlzVmlzaWJsZSIsInBhc3MiLCJtZXNzYWdlIiwiaXMiLCJtYXRjaGVySGludCIsImlzTm90IiwicHJpbnRFbGVtZW50Iiwiam9pbiJdLCJzb3VyY2VzIjpbInRvLWJlLXZpc2libGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRvQmVWaXNpYmxlID0gdm9pZCAwO1xuY29uc3QgcmVhY3RfbmF0aXZlXzEgPSByZXF1aXJlKFwicmVhY3QtbmF0aXZlXCIpO1xuY29uc3QgamVzdF9tYXRjaGVyX3V0aWxzXzEgPSByZXF1aXJlKFwiamVzdC1tYXRjaGVyLXV0aWxzXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuY29uc3QgY29tcG9uZW50X3RyZWVfMSA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudC10cmVlXCIpO1xuZnVuY3Rpb24gaXNWaXNpYmxlRm9yU3R5bGVzKGVsZW1lbnQpIHtcbiAgICBjb25zdCBzdHlsZSA9IGVsZW1lbnQucHJvcHMuc3R5bGUgfHwge307XG4gICAgY29uc3QgeyBkaXNwbGF5LCBvcGFjaXR5IH0gPSByZWFjdF9uYXRpdmVfMS5TdHlsZVNoZWV0LmZsYXR0ZW4oc3R5bGUpO1xuICAgIHJldHVybiBkaXNwbGF5ICE9PSAnbm9uZScgJiYgb3BhY2l0eSAhPT0gMDtcbn1cbmZ1bmN0aW9uIGlzVmlzaWJsZUZvckFjY2Vzc2liaWxpdHkoZWxlbWVudCkge1xuICAgIHJldHVybiAoIWVsZW1lbnQucHJvcHMuYWNjZXNzaWJpbGl0eUVsZW1lbnRzSGlkZGVuICYmXG4gICAgICAgIGVsZW1lbnQucHJvcHMuaW1wb3J0YW50Rm9yQWNjZXNzaWJpbGl0eSAhPT0gJ25vLWhpZGUtZGVzY2VuZGFudHMnKTtcbn1cbmZ1bmN0aW9uIGlzTW9kYWxWaXNpYmxlKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudC50eXBlICE9PSByZWFjdF9uYXRpdmVfMS5Nb2RhbCB8fCBlbGVtZW50LnByb3BzLnZpc2libGUgIT09IGZhbHNlO1xufVxuZnVuY3Rpb24gaXNFbGVtZW50VmlzaWJsZShlbGVtZW50KSB7XG4gICAgbGV0IGN1cnJlbnQgPSBlbGVtZW50O1xuICAgIHdoaWxlIChjdXJyZW50KSB7XG4gICAgICAgIGlmICghaXNWaXNpYmxlRm9yU3R5bGVzKGN1cnJlbnQpIHx8XG4gICAgICAgICAgICAhaXNWaXNpYmxlRm9yQWNjZXNzaWJpbGl0eShjdXJyZW50KSB8fFxuICAgICAgICAgICAgIWlzTW9kYWxWaXNpYmxlKGN1cnJlbnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9ICgwLCBjb21wb25lbnRfdHJlZV8xLmdldFBhcmVudEVsZW1lbnQpKGN1cnJlbnQsIFtyZWFjdF9uYXRpdmVfMS5Nb2RhbF0pO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHRvQmVWaXNpYmxlKGVsZW1lbnQpIHtcbiAgICAoMCwgdXRpbHNfMS5jaGVja1JlYWN0RWxlbWVudCkoZWxlbWVudCwgdG9CZVZpc2libGUsIHRoaXMpO1xuICAgIGNvbnN0IGlzVmlzaWJsZSA9IGlzRWxlbWVudFZpc2libGUoZWxlbWVudCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcGFzczogaXNWaXNpYmxlLFxuICAgICAgICBtZXNzYWdlOiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpcyA9IGlzVmlzaWJsZSA/ICdpcycgOiAnaXMgbm90JztcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgKDAsIGplc3RfbWF0Y2hlcl91dGlsc18xLm1hdGNoZXJIaW50KShgJHt0aGlzLmlzTm90ID8gJy5ub3QnIDogJyd9LnRvQmVWaXNpYmxlYCwgJ2VsZW1lbnQnLCAnJyksXG4gICAgICAgICAgICAgICAgJycsXG4gICAgICAgICAgICAgICAgYFJlY2VpdmVkIGVsZW1lbnQgJHtpc30gdmlzaWJsZTpgLFxuICAgICAgICAgICAgICAgICgwLCB1dGlsc18xLnByaW50RWxlbWVudCkoZWxlbWVudCksXG4gICAgICAgICAgICBdLmpvaW4oJ1xcbicpO1xuICAgICAgICB9LFxuICAgIH07XG59XG5leHBvcnRzLnRvQmVWaXNpYmxlID0gdG9CZVZpc2libGU7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQ1pBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQUVDLEtBQUssRUFBRTtBQUFLLENBQUMsQ0FBQztBQUM3REQsT0FBTyxDQUFDRSxXQUFXLEdBQUcsS0FBSyxDQUFDO0FBQzVCLElBQU1DLGNBQWMsR0FBR0MsT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUM5QyxJQUFNQyxvQkFBb0IsR0FBR0QsT0FBTyxDQUFDLG9CQUFvQixDQUFDO0FBQzFELElBQU1F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