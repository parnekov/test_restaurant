4a68d08473137d0170c916c1688550ba
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = void 0;
var _jestUtil = require('jest-util');
var FRAMEWORK_INITIALIZER = require.resolve('./jestAdapterInit');
var jestAdapter = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (globalConfig, config, environment, runtime, testPath, sendMessageToJest) {
    var _runtime$requireInter = runtime.requireInternalModule(FRAMEWORK_INITIALIZER),
      initialize = _runtime$requireInter.initialize,
      runAndTransformResultsToJestFormat = _runtime$requireInter.runAndTransformResultsToJestFormat;
    var _yield$initialize = yield initialize({
        config: config,
        environment: environment,
        globalConfig: globalConfig,
        localRequire: runtime.requireModule.bind(runtime),
        parentProcess: process,
        sendMessageToJest: sendMessageToJest,
        setGlobalsForRuntime: runtime.setGlobalsForRuntime.bind(runtime),
        testPath: testPath
      }),
      globals = _yield$initialize.globals,
      snapshotState = _yield$initialize.snapshotState;
    if (config.fakeTimers.enableGlobally) {
      if (config.fakeTimers.legacyFakeTimers) {
        environment.fakeTimers.useFakeTimers();
      } else {
        environment.fakeTimersModern.useFakeTimers();
      }
    }
    globals.beforeEach(function () {
      if (config.resetModules) {
        runtime.resetModules();
      }
      if (config.clearMocks) {
        runtime.clearAllMocks();
      }
      if (config.resetMocks) {
        runtime.resetAllMocks();
        if (config.fakeTimers.enableGlobally && config.fakeTimers.legacyFakeTimers) {
          environment.fakeTimers.useFakeTimers();
        }
      }
      if (config.restoreMocks) {
        runtime.restoreAllMocks();
      }
    });
    for (var path of config.setupFilesAfterEnv) {
      var _esm = runtime.unstable_shouldLoadAsEsm(path);
      if (_esm) {
        yield runtime.unstable_importModule(path);
      } else {
        runtime.requireModule(path);
      }
    }
    var esm = runtime.unstable_shouldLoadAsEsm(testPath);
    if (esm) {
      yield runtime.unstable_importModule(testPath);
    } else {
      runtime.requireModule(testPath);
    }
    var results = yield runAndTransformResultsToJestFormat({
      config: config,
      globalConfig: globalConfig,
      testPath: testPath
    });
    _addSnapshotData(results, snapshotState);
    return (0, _jestUtil.deepCyclicCopy)(results, {
      keepPrototype: false
    });
  });
  return function jestAdapter(_x, _x2, _x3, _x4, _x5, _x6) {
    return _ref.apply(this, arguments);
  };
}();
var _addSnapshotData = function _addSnapshotData(results, snapshotState) {
  results.testResults.forEach(function (_ref2) {
    var fullName = _ref2.fullName,
      status = _ref2.status;
    if (status === 'pending' || status === 'failed') {
      snapshotState.markSnapshotsAsCheckedForTest(fullName);
    }
  });
  var uncheckedCount = snapshotState.getUncheckedCount();
  var uncheckedKeys = snapshotState.getUncheckedKeys();
  if (uncheckedCount) {
    snapshotState.removeUncheckedKeys();
  }
  var status = snapshotState.save();
  results.snapshot.fileDeleted = status.deleted;
  results.snapshot.added = snapshotState.added;
  results.snapshot.matched = snapshotState.matched;
  results.snapshot.unmatched = snapshotState.unmatched;
  results.snapshot.updated = snapshotState.updated;
  results.snapshot.unchecked = !status.deleted ? uncheckedCount : 0;
  results.snapshot.uncheckedKeys = Array.from(uncheckedKeys);
};
var _default = jestAdapter;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,