eacde710987d15a524cd34bdce91e978
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _prettyFormat = _interopRequireWildcard(require("pretty-format"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
var format = function format(input) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return (0, _prettyFormat.default)(input, {
    plugins: [getCustomPlugin(options.mapProps), _prettyFormat.plugins.ReactElement],
    highlight: true,
    printBasicPrototype: false
  });
};
var getCustomPlugin = function getCustomPlugin(mapProps) {
  return {
    test: function test(val) {
      return _prettyFormat.plugins.ReactTestComponent.test(val);
    },
    serialize: function serialize(val, config, indentation, depth, refs, printer) {
      var newVal = val;
      if (mapProps && val.props) {
        newVal = Object.assign({}, val, {
          props: mapProps(val.props, val)
        });
      }
      return _prettyFormat.plugins.ReactTestComponent.serialize(newVal, config, indentation, depth, refs, printer);
    }
  };
};
var _default = exports.default = format;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcHJldHR5Rm9ybWF0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiZm9ybWF0IiwiaW5wdXQiLCJvcHRpb25zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwicGx1Z2lucyIsImdldEN1c3RvbVBsdWdpbiIsIm1hcFByb3BzIiwiUmVhY3RFbGVtZW50IiwiaGlnaGxpZ2h0IiwicHJpbnRCYXNpY1Byb3RvdHlwZSIsInRlc3QiLCJ2YWwiLCJSZWFjdFRlc3RDb21wb25lbnQiLCJzZXJpYWxpemUiLCJjb25maWciLCJpbmRlbnRhdGlvbiIsImRlcHRoIiwicmVmcyIsInByaW50ZXIiLCJuZXdWYWwiLCJwcm9wcyIsImFzc2lnbiIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2Zvcm1hdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0VGVzdFJlbmRlcmVySlNPTiB9IGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInO1xuaW1wb3J0IHByZXR0eUZvcm1hdCwgeyBOZXdQbHVnaW4sIHBsdWdpbnMgfSBmcm9tICdwcmV0dHktZm9ybWF0JztcblxuZXhwb3J0IHR5cGUgTWFwUHJvcHNGdW5jdGlvbiA9IChcbiAgcHJvcHM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+LFxuICBub2RlOiBSZWFjdFRlc3RSZW5kZXJlckpTT04sXG4pID0+IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuXG5leHBvcnQgdHlwZSBGb3JtYXRPcHRpb25zID0ge1xuICBtYXBQcm9wcz86IE1hcFByb3BzRnVuY3Rpb247XG59O1xuXG5jb25zdCBmb3JtYXQgPSAoXG4gIGlucHV0OiBSZWFjdFRlc3RSZW5kZXJlckpTT04gfCBSZWFjdFRlc3RSZW5kZXJlckpTT05bXSxcbiAgb3B0aW9uczogRm9ybWF0T3B0aW9ucyA9IHt9LFxuKSA9PlxuICBwcmV0dHlGb3JtYXQoaW5wdXQsIHtcbiAgICBwbHVnaW5zOiBbZ2V0Q3VzdG9tUGx1Z2luKG9wdGlvbnMubWFwUHJvcHMpLCBwbHVnaW5zLlJlYWN0RWxlbWVudF0sXG4gICAgaGlnaGxpZ2h0OiB0cnVlLFxuICAgIHByaW50QmFzaWNQcm90b3R5cGU6IGZhbHNlLFxuICB9KTtcblxuY29uc3QgZ2V0Q3VzdG9tUGx1Z2luID0gKG1hcFByb3BzPzogTWFwUHJvcHNGdW5jdGlvbik6IE5ld1BsdWdpbiA9PiB7XG4gIHJldHVybiB7XG4gICAgdGVzdDogKHZhbCkgPT4gcGx1Z2lucy5SZWFjdFRlc3RDb21wb25lbnQudGVzdCh2YWwpLFxuICAgIHNlcmlhbGl6ZTogKHZhbCwgY29uZmlnLCBpbmRlbnRhdGlvbiwgZGVwdGgsIHJlZnMsIHByaW50ZXIpID0+IHtcbiAgICAgIGxldCBuZXdWYWwgPSB2YWw7XG4gICAgICBpZiAobWFwUHJvcHMgJiYgdmFsLnByb3BzKSB7XG4gICAgICAgIG5ld1ZhbCA9IHsgLi4udmFsLCBwcm9wczogbWFwUHJvcHModmFsLnByb3BzLCB2YWwpIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gcGx1Z2lucy5SZWFjdFRlc3RDb21wb25lbnQuc2VyaWFsaXplKFxuICAgICAgICBuZXdWYWwsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgaW5kZW50YXRpb24sXG4gICAgICAgIGRlcHRoLFxuICAgICAgICByZWZzLFxuICAgICAgICBwcmludGVyLFxuICAgICAgKTtcbiAgICB9LFxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0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