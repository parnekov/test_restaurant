b519f873801ac766ad64f0642c0d8f0b
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = void 0;
var _diffSequences = _interopRequireDefault(require('diff-sequences'));
var _cleanupSemantic = require('./cleanupSemantic');
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var diffStrings = function diffStrings(a, b) {
  var isCommon = function isCommon(aIndex, bIndex) {
    return a[aIndex] === b[bIndex];
  };
  var aIndex = 0;
  var bIndex = 0;
  var diffs = [];
  var foundSubsequence = function foundSubsequence(nCommon, aCommon, bCommon) {
    if (aIndex !== aCommon) {
      diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_DELETE, a.slice(aIndex, aCommon)));
    }
    if (bIndex !== bCommon) {
      diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_INSERT, b.slice(bIndex, bCommon)));
    }
    aIndex = aCommon + nCommon;
    bIndex = bCommon + nCommon;
    diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_EQUAL, b.slice(bCommon, bIndex)));
  };
  (0, _diffSequences.default)(a.length, b.length, isCommon, foundSubsequence);
  if (aIndex !== a.length) {
    diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_DELETE, a.slice(aIndex)));
  }
  if (bIndex !== b.length) {
    diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_INSERT, b.slice(bIndex)));
  }
  return diffs;
};
var _default = diffStrings;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfZGlmZlNlcXVlbmNlcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2NsZWFudXBTZW1hbnRpYyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkaWZmU3RyaW5ncyIsImEiLCJiIiwiaXNDb21tb24iLCJhSW5kZXgiLCJiSW5kZXgiLCJkaWZmcyIsImZvdW5kU3Vic2VxdWVuY2UiLCJuQ29tbW9uIiwiYUNvbW1vbiIsImJDb21tb24iLCJwdXNoIiwiRGlmZiIsIkRJRkZfREVMRVRFIiwic2xpY2UiLCJESUZGX0lOU0VSVCIsIkRJRkZfRVFVQUwiLCJsZW5ndGgiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbImRpZmZTdHJpbmdzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2RpZmZTZXF1ZW5jZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoJ2RpZmYtc2VxdWVuY2VzJykpO1xudmFyIF9jbGVhbnVwU2VtYW50aWMgPSByZXF1aXJlKCcuL2NsZWFudXBTZW1hbnRpYycpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtkZWZhdWx0OiBvYmp9O1xufVxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmNvbnN0IGRpZmZTdHJpbmdzID0gKGEsIGIpID0+IHtcbiAgY29uc3QgaXNDb21tb24gPSAoYUluZGV4LCBiSW5kZXgpID0+IGFbYUluZGV4XSA9PT0gYltiSW5kZXhdO1xuICBsZXQgYUluZGV4ID0gMDtcbiAgbGV0IGJJbmRleCA9IDA7XG4gIGNvbnN0IGRpZmZzID0gW107XG4gIGNvbnN0IGZvdW5kU3Vic2VxdWVuY2UgPSAobkNvbW1vbiwgYUNvbW1vbiwgYkNvbW1vbikgPT4ge1xuICAgIGlmIChhSW5kZXggIT09IGFDb21tb24pIHtcbiAgICAgIGRpZmZzLnB1c2goXG4gICAgICAgIG5ldyBfY2xlYW51cFNlbWFudGljLkRpZmYoXG4gICAgICAgICAgX2NsZWFudXBTZW1hbnRpYy5ESUZGX0RFTEVURSxcbiAgICAgICAgICBhLnNsaWNlKGFJbmRleCwgYUNvbW1vbilcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGJJbmRleCAhPT0gYkNvbW1vbikge1xuICAgICAgZGlmZnMucHVzaChcbiAgICAgICAgbmV3IF9jbGVhbnVwU2VtYW50aWMuRGlmZihcbiAgICAgICAgICBfY2xlYW51cFNlbWFudGljLkRJRkZfSU5TRVJULFxuICAgICAgICAgIGIuc2xpY2UoYkluZGV4LCBiQ29tbW9uKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgICBhSW5kZXggPSBhQ29tbW9uICsgbkNvbW1vbjsgLy8gbnVtYmVyIG9mIGNoYXJhY3RlcnMgY29tcGFyZWQgaW4gYVxuICAgIGJJbmRleCA9IGJDb21tb24gKyBuQ29tbW9uOyAvLyBudW1iZXIgb2YgY2hhcmFjdGVycyBjb21wYXJlZCBpbiBiXG4gICAgZGlmZnMucHVzaChcbiAgICAgIG5ldyBfY2xlYW51cFNlbWFudGljLkRpZmYoXG4gICAgICAgIF9jbGVhbnVwU2VtYW50aWMuRElGRl9FUVVBTCxcbiAgICAgICAgYi5zbGljZShiQ29tbW9uLCBiSW5kZXgpXG4gICAgICApXG4gICAgKTtcbiAgfTtcbiAgKDAsIF9kaWZmU2VxdWVuY2VzLmRlZmF1bHQpKGEubGVuZ3RoLCBiLmxlbmd0aCwgaXNDb21tb24sIGZvdW5kU3Vic2VxdWVuY2UpO1xuXG4gIC8vIEFmdGVyIHRoZSBsYXN0IGNvbW1vbiBzdWJzZXF1ZW5jZSwgcHVzaCByZW1haW5pbmcgY2hhbmdlIGl0ZW1zLlxuICBpZiAoYUluZGV4ICE9PSBhLmxlbmd0aCkge1xuICAgIGRpZmZzLnB1c2goXG4gICAgICBuZXcgX2NsZWFudXBTZW1hbnRpYy5EaWZmKF9jbGVhbnVwU2VtYW50aWMuRElGRl9ERUxFVEUsIGEuc2xpY2UoYUluZGV4KSlcbiAgICApO1xuICB9XG4gIGlmIChiSW5kZXggIT09IGIubGVuZ3RoKSB7XG4gICAgZGlmZnMucHVzaChcbiAgICAgIG5ldyBfY2xlYW51cFNlbWFudGljLkRpZmYoX2NsZWFudXBTZW1hbnRpYy5ESUZGX0lOU0VSVCwgYi5zbGljZShiSW5kZXgpKVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGRpZmZzO1xufTtcbnZhciBfZGVmYXVsdCA9IGRpZmZTdHJpbmdzO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLElBQUlDLGNBQWMsR0FBR0Msc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3RFLElBQUlDLGdCQUFnQixHQUFHRCxPQUFPLENBQUMsbUJBQW1CLENBQUM7QUFDbkQsU0FBU0Qsc0JBQXNCQSxDQUFDRyxHQUFHLEVBQUU7RUFDbkMsT0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVUsR0FBR0QsR0FBRyxHQUFHO0lBQUNMLE9BQU8sRUFBRUs7RUFBRyxDQUFDO0FBQ3JEO0FBUUEsSUFBTUUsV0FBVyxHQUFHLFNBQWRBLFdBQVdBLENBQUlDLENBQUMsRUFBRUMsQ0FBQyxFQUFLO0VBQzVCLElBQU1DLFFBQVEsR0FBRyxTQUFYQSxRQUFRQSxDQUFJQyxNQUFNLEVBQUVDLE1BQU07SUFBQSxPQUFLSixDQUFDLENBQUNHLE1BQU0sQ0FBQyxLQUFLRixDQUFDLENBQUNHLE1BQU0sQ0FBQztFQUFBO0VBQzVELElBQUlELE1BQU0sR0FBRyxDQUFDO0VBQ2QsSUFBSUMsTUFBTSxHQUFHLENBQUM7RUFDZCxJQUFNQyxLQUFLLEdBQUcsRUFBRTtFQUNoQixJQUFNQyxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQWdCQSxDQUFJQyxPQUFPLEVBQUVDLE9BQU8sRUFBRUMsT0FBTyxFQUFLO0lBQ3RELElBQUlOLE1BQU0sS0FBS0ssT0FBTyxFQUFFO01BQ3RCSCxLQUFLLENBQUNLLElBQUksQ0FDUixJQUFJZCxnQkFBZ0IsQ0FBQ2UsSUFBSSxDQUN2QmYsZ0JBQWdCLENBQUNnQixXQUFXLEVBQzVCWixDQUFDLENBQUNhLEtBQUssQ0FBQ1YsTUFBTSxFQUFFSyxPQUFPLENBQ3pCLENBQ0YsQ0FBQztJQUNIO0lBQ0EsSUFBSUosTUFBTSxLQUFLSyxPQUFPLEVBQUU7TUFDdEJKLEtBQUssQ0FBQ0ssSUFBSSxDQUNSLElBQUlkLGdCQUFnQixDQUFDZSxJQUFJLENBQ3ZCZixnQkFBZ0IsQ0FBQ2tCLFdBQVcsRUFDNUJiLENBQUMsQ0FBQ1ksS0FBSyxDQUFDVCxNQUFNLEVBQUVLLE9BQU8sQ0FDekIsQ0FDRixDQUFDO0lBQ0g7SUFDQU4sTUFBTSxHQUFHSyxPQUFPLEdBQUdELE9BQU87SUFDMUJILE1BQU0sR0FBR0ssT0FBTyxHQUFHRixPQUFPO0lBQzFCRixLQUFLLENBQUNLLElBQUksQ0FDUixJQUFJZCxnQkFBZ0IsQ0FBQ2UsSUFBSSxDQUN2QmYsZ0JBQWdCLENBQUNtQixVQUFVLEVBQzNCZCxDQUFDLENBQUNZLEtBQUssQ0FBQ0osT0FBTyxFQUFFTCxNQUFNLENBQ3pCLENBQ0YsQ0FBQztFQUNILENBQUM7RUFDRCxDQUFDLENBQUMsRUFBRVgsY0FBYyxDQUFDRCxPQUFPLEVBQUVRLENBQUMsQ0FBQ2dCLE1BQU0sRUFBRWYsQ0FBQyxDQUFDZSxNQUFNLEVBQUVkLFFBQVEsRUFBRUksZ0JBQWdCLENBQUM7RUFHM0UsSUFBSUgsTUFBTSxLQUFLSCxDQUFDLENBQUNnQixNQUFNLEVBQUU7SUFDdkJYLEtBQUssQ0FBQ0ssSUFBSSxDQUNSLElBQUlkLGdCQUFnQixDQUFDZSxJQUFJLENBQUNmLGdCQUFnQixDQUFDZ0IsV0FBVyxFQUFFWixDQUFDLENBQUNhLEtBQUssQ0FBQ1YsTUFBTSxDQUFDLENBQ3pFLENBQUM7RUFDSDtFQUNBLElBQUlDLE1BQU0sS0FBS0gsQ0FBQyxDQUFDZSxNQUFNLEVBQUU7SUFDdkJYLEtBQUssQ0FBQ0ssSUFBSSxDQUNSLElBQUlkLGdCQUFnQixDQUFDZSxJQUFJLENBQUNmLGdCQUFnQixDQUFDa0IsV0FBVyxFQUFFYixDQUFDLENBQUNZLEtBQUssQ0FBQ1QsTUFBTSxDQUFDLENBQ3pFLENBQUM7RUFDSDtFQUNBLE9BQU9DLEtBQUs7QUFDZCxDQUFDO0FBQ0QsSUFBSVksUUFBUSxHQUFHbEIsV0FBVztBQUMxQlQsT0FBTyxDQUFDRSxPQUFPLEdBQUd5QixRQUFRIiwiaWdub3JlTGlzdCI6W119