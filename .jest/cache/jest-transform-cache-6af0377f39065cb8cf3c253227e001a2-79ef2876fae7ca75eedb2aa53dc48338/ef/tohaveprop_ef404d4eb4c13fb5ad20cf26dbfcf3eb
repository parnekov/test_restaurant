a0f0615e2ce420dcb080ddbe6a1a389d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveProp = void 0;
var jest_matcher_utils_1 = require("jest-matcher-utils");
var utils_1 = require("./utils");
function printAttribute(name, value) {
  return value === undefined ? name : `${name}=${(0, jest_matcher_utils_1.stringify)(value)}`;
}
function getPropComment(name, value) {
  return value === undefined ? `element.hasProp(${name})` : `element.getAttribute(${name}) === ${(0, jest_matcher_utils_1.stringify)(value)}`;
}
function toHaveProp(element, name, expectedValue) {
  var _this = this;
  (0, utils_1.checkReactElement)(element, toHaveProp, this);
  var prop = element.props[name];
  var isDefined = expectedValue !== undefined;
  var hasProp = (name in element.props);
  return {
    pass: isDefined ? hasProp && this.equals(prop, expectedValue) : hasProp,
    message: function message() {
      var to = _this.isNot ? 'not to' : 'to';
      var receivedProp = hasProp ? printAttribute(name, prop) : null;
      var matcher = (0, jest_matcher_utils_1.matcherHint)(`${_this.isNot ? '.not' : ''}.toHaveProp`, 'element', (0, jest_matcher_utils_1.printExpected)(name), {
        secondArgument: isDefined ? (0, jest_matcher_utils_1.printExpected)(expectedValue) : undefined,
        comment: getPropComment(name, expectedValue)
      });
      return (0, utils_1.getMessage)(matcher, `Expected the element ${to} have prop`, printAttribute(name, expectedValue), 'Received', receivedProp);
    }
  };
}
exports.toHaveProp = toHaveProp;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvSGF2ZVByb3AiLCJqZXN0X21hdGNoZXJfdXRpbHNfMSIsInJlcXVpcmUiLCJ1dGlsc18xIiwicHJpbnRBdHRyaWJ1dGUiLCJuYW1lIiwidW5kZWZpbmVkIiwic3RyaW5naWZ5IiwiZ2V0UHJvcENvbW1lbnQiLCJlbGVtZW50IiwiZXhwZWN0ZWRWYWx1ZSIsIl90aGlzIiwiY2hlY2tSZWFjdEVsZW1lbnQiLCJwcm9wIiwicHJvcHMiLCJpc0RlZmluZWQiLCJoYXNQcm9wIiwicGFzcyIsImVxdWFscyIsIm1lc3NhZ2UiLCJ0byIsImlzTm90IiwicmVjZWl2ZWRQcm9wIiwibWF0Y2hlciIsIm1hdGNoZXJIaW50IiwicHJpbnRFeHBlY3RlZCIsInNlY29uZEFyZ3VtZW50IiwiY29tbWVudCIsImdldE1lc3NhZ2UiXSwic291cmNlcyI6WyJ0by1oYXZlLXByb3AuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRvSGF2ZVByb3AgPSB2b2lkIDA7XG5jb25zdCBqZXN0X21hdGNoZXJfdXRpbHNfMSA9IHJlcXVpcmUoXCJqZXN0LW1hdGNoZXItdXRpbHNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5mdW5jdGlvbiBwcmludEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gbmFtZSA6IGAke25hbWV9PSR7KDAsIGplc3RfbWF0Y2hlcl91dGlsc18xLnN0cmluZ2lmeSkodmFsdWUpfWA7XG59XG5mdW5jdGlvbiBnZXRQcm9wQ29tbWVudChuYW1lLCB2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gYGVsZW1lbnQuaGFzUHJvcCgke25hbWV9KWBcbiAgICAgICAgOiBgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJHtuYW1lfSkgPT09ICR7KDAsIGplc3RfbWF0Y2hlcl91dGlsc18xLnN0cmluZ2lmeSkodmFsdWUpfWA7XG59XG5mdW5jdGlvbiB0b0hhdmVQcm9wKGVsZW1lbnQsIG5hbWUsIGV4cGVjdGVkVmFsdWUpIHtcbiAgICAoMCwgdXRpbHNfMS5jaGVja1JlYWN0RWxlbWVudCkoZWxlbWVudCwgdG9IYXZlUHJvcCwgdGhpcyk7XG4gICAgY29uc3QgcHJvcCA9IGVsZW1lbnQucHJvcHNbbmFtZV07XG4gICAgY29uc3QgaXNEZWZpbmVkID0gZXhwZWN0ZWRWYWx1ZSAhPT0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IGhhc1Byb3AgPSBuYW1lIGluIGVsZW1lbnQucHJvcHM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcGFzczogaXNEZWZpbmVkID8gaGFzUHJvcCAmJiB0aGlzLmVxdWFscyhwcm9wLCBleHBlY3RlZFZhbHVlKSA6IGhhc1Byb3AsXG4gICAgICAgIG1lc3NhZ2U6ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRvID0gdGhpcy5pc05vdCA/ICdub3QgdG8nIDogJ3RvJztcbiAgICAgICAgICAgIGNvbnN0IHJlY2VpdmVkUHJvcCA9IGhhc1Byb3AgPyBwcmludEF0dHJpYnV0ZShuYW1lLCBwcm9wKSA6IG51bGw7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVyID0gKDAsIGplc3RfbWF0Y2hlcl91dGlsc18xLm1hdGNoZXJIaW50KShgJHt0aGlzLmlzTm90ID8gJy5ub3QnIDogJyd9LnRvSGF2ZVByb3BgLCAnZWxlbWVudCcsICgwLCBqZXN0X21hdGNoZXJfdXRpbHNfMS5wcmludEV4cGVjdGVkKShuYW1lKSwge1xuICAgICAgICAgICAgICAgIHNlY29uZEFyZ3VtZW50OiBpc0RlZmluZWQgPyAoMCwgamVzdF9tYXRjaGVyX3V0aWxzXzEucHJpbnRFeHBlY3RlZCkoZXhwZWN0ZWRWYWx1ZSkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgY29tbWVudDogZ2V0UHJvcENvbW1lbnQobmFtZSwgZXhwZWN0ZWRWYWx1ZSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiAoMCwgdXRpbHNfMS5nZXRNZXNzYWdlKShtYXRjaGVyLCBgRXhwZWN0ZWQgdGhlIGVsZW1lbnQgJHt0b30gaGF2ZSBwcm9wYCwgcHJpbnRBdHRyaWJ1dGUobmFtZSwgZXhwZWN0ZWRWYWx1ZSksICdSZWNlaXZlZCcsIHJlY2VpdmVkUHJvcCk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydHMudG9IYXZlUHJvcCA9IHRvSGF2ZVByb3A7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQ1pBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQUVDLEtBQUssRUFBRTtBQUFLLENBQUMsQ0FBQztBQUM3REQsT0FBTyxDQUFDRSxVQUFVLEdBQUcsS0FBSyxDQUFDO0FBQzNCLElBQU1DLG9CQUFvQixHQUFHQyxPQUFPLENBQUMsb0JBQW9CLENBQUM7QUFDMUQsSUFBTUMsT0FBTyxHQUFHRCxPQUFPLENBQUMsU0FBUyxDQUFDO0FBQ2xDLFNBQVNFLGNBQWNBLENBQUNDLElBQUksRUFBRU4sS0FBSyxFQUFFO0VBQ2pDLE9BQU9BLEtBQUssS0FBS08sU0FBUyxHQUFHRCxJQUFJLEdBQUksR0FBRUEsSUFBSyxJQUFHLENBQUMsQ0FBQyxFQUFFSixvQkFBb0IsQ0FBQ00sU0FBUyxFQUFFUixLQUFLLENBQUUsRUFBQztBQUMvRjtBQUNBLFNBQVNTLGNBQWNBLENBQUNILElBQUksRUFBRU4sS0FBSyxFQUFFO0VBQ2pDLE9BQU9BLEtBQUssS0FBS08sU0FBUyxHQUNuQixtQkFBa0JELElBQUssR0FBRSxHQUN6Qix3QkFBdUJBLElBQUssU0FBUSxDQUFDLENBQUMsRUFBRUosb0JBQW9CLENBQUNNLFNBQVMsRUFBRVIsS0FBSyxDQUFFLEVBQUM7QUFDM0Y7QUFDQSxTQUFTQyxVQUFVQSxDQUFDUyxPQUFPLEVBQUVKLElBQUksRUFBRUssYUFBYSxFQUFFO0VBQUEsSUFBQUMsS0FBQTtFQUM5QyxDQUFDLENBQUMsRUFBRVIsT0FBTyxDQUFDUyxpQkFBaUIsRUFBRUgsT0FBTyxFQUFFVCxVQUFVLEVBQUUsSUFBSSxDQUFDO0VBQ3pELElBQU1hLElBQUksR0FBR0osT0FBTyxDQUFDSyxLQUFLLENBQUNULElBQUksQ0FBQztFQUNoQyxJQUFNVSxTQUFTLEdBQUdMLGFBQWEsS0FBS0osU0FBUztFQUM3QyxJQUFNVSxPQUFPLElBQUdYLElBQUksSUFBSUksT0FBTyxDQUFDSyxLQUFLO0VBQ3JDLE9BQU87SUFDSEcsSUFBSSxFQUFFRixTQUFTLEdBQUdDLE9BQU8sSUFBSSxJQUFJLENBQUNFLE1BQU0sQ0FBQ0wsSUFBSSxFQUFFSCxhQUFhLENBQUMsR0FBR00sT0FBTztJQUN2RUcsT0FBTyxFQUFFLFNBQUFBLFFBQUEsRUFBTTtNQUNYLElBQU1DLEVBQUUsR0FBR1QsS0FBSSxDQUFDVSxLQUFLLEdBQUcsUUFBUSxHQUFHLElBQUk7TUFDdkMsSUFBTUMsWUFBWSxHQUFHTixPQUFPLEdBQUdaLGNBQWMsQ0FBQ0MsSUFBSSxFQUFFUSxJQUFJLENBQUMsR0FBRyxJQUFJO01BQ2hFLElBQU1VLE9BQU8sR0FBRyxDQUFDLENBQUMsRUFBRXRCLG9CQUFvQixDQUFDdUIsV0FBVyxFQUFHLEdBQUViLEtBQUksQ0FBQ1UsS0FBSyxHQUFHLE1BQU0sR0FBRyxFQUFHLGFBQVksRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUVwQixvQkFBb0IsQ0FBQ3dCLGFBQWEsRUFBRXBCLElBQUksQ0FBQyxFQUFFO1FBQ3RKcUIsY0FBYyxFQUFFWCxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUVkLG9CQUFvQixDQUFDd0IsYUFBYSxFQUFFZixhQUFhLENBQUMsR0FBR0osU0FBUztRQUM5RnFCLE9BQU8sRUFBRW5CLGNBQWMsQ0FBQ0gsSUFBSSxFQUFFSyxhQUFhO01BQy9DLENBQUMsQ0FBQztNQUNGLE9BQU8sQ0FBQyxDQUFDLEVBQUVQLE9BQU8sQ0FBQ3lCLFVBQVUsRUFBRUwsT0FBTyxFQUFHLHdCQUF1QkgsRUFBRyxZQUFXLEVBQUVoQixjQUFjLENBQUNDLElBQUksRUFBRUssYUFBYSxDQUFDLEVBQUUsVUFBVSxFQUFFWSxZQUFZLENBQUM7SUFDbEo7RUFDSixDQUFDO0FBQ0w7QUFDQXhCLE9BQU8sQ0FBQ0UsVUFBVSxHQUFHQSxVQUFVIiwiaWdub3JlTGlzdCI6W119