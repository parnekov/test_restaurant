15ca4c1269b985a748f01f21e99548e5
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.accessiblityValueKeys = exports.accessibilityStateKeys = void 0;
exports.getAccessibilityCheckedState = getAccessibilityCheckedState;
exports.getAccessibilityLabel = getAccessibilityLabel;
exports.getAccessibilityLabelledBy = getAccessibilityLabelledBy;
exports.getAccessibilityRole = getAccessibilityRole;
exports.getAccessibilityState = getAccessibilityState;
exports.getAccessibilityValue = getAccessibilityValue;
exports.getAccessibilityViewIsModal = getAccessibilityViewIsModal;
exports.getAccessibleName = getAccessibleName;
exports.isAccessibilityElement = isAccessibilityElement;
exports.isElementBusy = isElementBusy;
exports.isElementCollapsed = isElementCollapsed;
exports.isElementExpanded = isElementExpanded;
exports.isElementSelected = isElementSelected;
exports.isHiddenFromAccessibility = isHiddenFromAccessibility;
exports.isInaccessible = void 0;
var _reactNative = require("react-native");
var _componentTree = require("./component-tree");
var _hostComponentNames = require("./host-component-names");
var _textContent = require("./text-content");
var accessibilityStateKeys = exports.accessibilityStateKeys = ['disabled', 'selected', 'checked', 'busy', 'expanded'];
var accessiblityValueKeys = exports.accessiblityValueKeys = ['min', 'max', 'now', 'text'];
function isHiddenFromAccessibility(element) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
    cache = _ref.cache;
  if (element == null) {
    return true;
  }
  var current = element;
  while (current) {
    var isCurrentSubtreeInaccessible = cache == null ? void 0 : cache.get(current);
    if (isCurrentSubtreeInaccessible === undefined) {
      isCurrentSubtreeInaccessible = isSubtreeInaccessible(current);
      cache == null ? void 0 : cache.set(current, isCurrentSubtreeInaccessible);
    }
    if (isCurrentSubtreeInaccessible) {
      return true;
    }
    current = current.parent;
  }
  return false;
}
var isInaccessible = exports.isInaccessible = isHiddenFromAccessibility;
function isSubtreeInaccessible(element) {
  var _reactNative$StyleShe;
  if (element.props == null) {
    return false;
  }
  if (element.props['aria-hidden']) {
    return true;
  }
  if (element.props.accessibilityElementsHidden) {
    return true;
  }
  if (element.props.importantForAccessibility === 'no-hide-descendants') {
    return true;
  }
  var flatStyle = (_reactNative$StyleShe = _reactNative.StyleSheet.flatten(element.props.style)) != null ? _reactNative$StyleShe : {};
  if (flatStyle.display === 'none') return true;
  var hostSiblings = (0, _componentTree.getHostSiblings)(element);
  if (hostSiblings.some(function (sibling) {
    return getAccessibilityViewIsModal(sibling);
  })) {
    return true;
  }
  return false;
}
function isAccessibilityElement(element) {
  if (element == null) {
    return false;
  }
  if (element.props.accessible !== undefined) {
    return element.props.accessible;
  }
  var hostComponentNames = (0, _hostComponentNames.getHostComponentNames)();
  return (element == null ? void 0 : element.type) === (hostComponentNames == null ? void 0 : hostComponentNames.text) || (element == null ? void 0 : element.type) === (hostComponentNames == null ? void 0 : hostComponentNames.textInput) || (element == null ? void 0 : element.type) === (hostComponentNames == null ? void 0 : hostComponentNames.switch);
}
function getAccessibilityRole(element) {
  var _element$props$role;
  var explicitRole = (_element$props$role = element.props.role) != null ? _element$props$role : element.props.accessibilityRole;
  if (explicitRole) {
    return explicitRole;
  }
  if ((0, _hostComponentNames.isHostText)(element)) {
    return 'text';
  }
  return 'none';
}
function getAccessibilityViewIsModal(element) {
  var _element$props$ariaM;
  return (_element$props$ariaM = element.props['aria-modal']) != null ? _element$props$ariaM : element.props.accessibilityViewIsModal;
}
function getAccessibilityLabel(element) {
  var _element$props$ariaL;
  return (_element$props$ariaL = element.props['aria-label']) != null ? _element$props$ariaL : element.props.accessibilityLabel;
}
function getAccessibilityLabelledBy(element) {
  var _element$props$ariaL2;
  return (_element$props$ariaL2 = element.props['aria-labelledby']) != null ? _element$props$ariaL2 : element.props.accessibilityLabelledBy;
}
function getAccessibilityState(element) {
  var _element$props = element.props,
    accessibilityState = _element$props.accessibilityState,
    ariaBusy = _element$props['aria-busy'],
    ariaChecked = _element$props['aria-checked'],
    ariaDisabled = _element$props['aria-disabled'],
    ariaExpanded = _element$props['aria-expanded'],
    ariaSelected = _element$props['aria-selected'];
  var hasAnyAccessibilityStateProps = accessibilityState != null || ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null;
  if (!hasAnyAccessibilityStateProps) {
    return undefined;
  }
  return {
    busy: ariaBusy != null ? ariaBusy : accessibilityState == null ? void 0 : accessibilityState.busy,
    checked: ariaChecked != null ? ariaChecked : accessibilityState == null ? void 0 : accessibilityState.checked,
    disabled: ariaDisabled != null ? ariaDisabled : accessibilityState == null ? void 0 : accessibilityState.disabled,
    expanded: ariaExpanded != null ? ariaExpanded : accessibilityState == null ? void 0 : accessibilityState.expanded,
    selected: ariaSelected != null ? ariaSelected : accessibilityState == null ? void 0 : accessibilityState.selected
  };
}
function getAccessibilityCheckedState(element) {
  var _element$props2 = element.props,
    accessibilityState = _element$props2.accessibilityState,
    ariaChecked = _element$props2['aria-checked'];
  return ariaChecked != null ? ariaChecked : accessibilityState == null ? void 0 : accessibilityState.checked;
}
function getAccessibilityValue(element) {
  var _element$props3 = element.props,
    accessibilityValue = _element$props3.accessibilityValue,
    ariaValueMax = _element$props3['aria-valuemax'],
    ariaValueMin = _element$props3['aria-valuemin'],
    ariaValueNow = _element$props3['aria-valuenow'],
    ariaValueText = _element$props3['aria-valuetext'];
  var hasAnyAccessibilityValueProps = accessibilityValue != null || ariaValueMax != null || ariaValueMin != null || ariaValueNow != null || ariaValueText != null;
  if (!hasAnyAccessibilityValueProps) {
    return undefined;
  }
  return {
    max: ariaValueMax != null ? ariaValueMax : accessibilityValue == null ? void 0 : accessibilityValue.max,
    min: ariaValueMin != null ? ariaValueMin : accessibilityValue == null ? void 0 : accessibilityValue.min,
    now: ariaValueNow != null ? ariaValueNow : accessibilityValue == null ? void 0 : accessibilityValue.now,
    text: ariaValueText != null ? ariaValueText : accessibilityValue == null ? void 0 : accessibilityValue.text
  };
}
function isElementBusy(element) {
  var _ref2;
  var _element$props4 = element.props,
    accessibilityState = _element$props4.accessibilityState,
    ariaBusy = _element$props4['aria-busy'];
  return (_ref2 = ariaBusy != null ? ariaBusy : accessibilityState == null ? void 0 : accessibilityState.busy) != null ? _ref2 : false;
}
function isElementCollapsed(element) {
  var _element$props5 = element.props,
    accessibilityState = _element$props5.accessibilityState,
    ariaExpanded = _element$props5['aria-expanded'];
  return (ariaExpanded != null ? ariaExpanded : accessibilityState == null ? void 0 : accessibilityState.expanded) === false;
}
function isElementExpanded(element) {
  var _ref3;
  var _element$props6 = element.props,
    accessibilityState = _element$props6.accessibilityState,
    ariaExpanded = _element$props6['aria-expanded'];
  return (_ref3 = ariaExpanded != null ? ariaExpanded : accessibilityState == null ? void 0 : accessibilityState.expanded) != null ? _ref3 : false;
}
function isElementSelected(element) {
  var _ref4;
  var _element$props7 = element.props,
    accessibilityState = _element$props7.accessibilityState,
    ariaSelected = _element$props7['aria-selected'];
  return (_ref4 = ariaSelected != null ? ariaSelected : accessibilityState == null ? void 0 : accessibilityState.selected) != null ? _ref4 : false;
}
function getAccessibleName(element) {
  var label = getAccessibilityLabel(element);
  if (label) {
    return label;
  }
  var labelElementId = getAccessibilityLabelledBy(element);
  if (labelElementId) {
    var rootElement = (0, _componentTree.getUnsafeRootElement)(element);
    var labelElement = rootElement == null ? void 0 : rootElement.findByProps({
      nativeID: labelElementId
    });
    if (labelElement) {
      return (0, _textContent.getTextContent)(labelElement);
    }
  }
  return (0, _textContent.getTextContent)(element);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,