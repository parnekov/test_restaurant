1485b32514265f53bd657f49e6c2bf0a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindByPlaceholderTextQueries = void 0;
var _findAll = require("../helpers/find-all");
var _matches = require("../matches");
var _hostComponentNames = require("../helpers/host-component-names");
var _makeQueries = require("./make-queries");
var matchPlaceholderText = function matchPlaceholderText(node, placeholder) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var exact = options.exact,
    normalizer = options.normalizer;
  return (0, _matches.matches)(placeholder, node.props.placeholder, normalizer, exact);
};
var queryAllByPlaceholderText = function queryAllByPlaceholderText(instance) {
  return function queryAllByPlaceholderFn(placeholder, queryOptions) {
    return (0, _findAll.findAll)(instance, function (node) {
      return (0, _hostComponentNames.isHostTextInput)(node) && matchPlaceholderText(node, placeholder, queryOptions);
    }, queryOptions);
  };
};
var getMultipleError = function getMultipleError(placeholder) {
  return `Found multiple elements with placeholder: ${String(placeholder)} `;
};
var getMissingError = function getMissingError(placeholder) {
  return `Unable to find an element with placeholder: ${String(placeholder)}`;
};
var _ref = (0, _makeQueries.makeQueries)(queryAllByPlaceholderText, getMissingError, getMultipleError),
  getBy = _ref.getBy,
  getAllBy = _ref.getAllBy,
  queryBy = _ref.queryBy,
  queryAllBy = _ref.queryAllBy,
  findBy = _ref.findBy,
  findAllBy = _ref.findAllBy;
var bindByPlaceholderTextQueries = function bindByPlaceholderTextQueries(instance) {
  return {
    getByPlaceholderText: getBy(instance),
    getAllByPlaceholderText: getAllBy(instance),
    queryByPlaceholderText: queryBy(instance),
    queryAllByPlaceholderText: queryAllBy(instance),
    findByPlaceholderText: findBy(instance),
    findAllByPlaceholderText: findAllBy(instance)
  };
};
exports.bindByPlaceholderTextQueries = bindByPlaceholderTextQueries;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZmluZEFsbCIsInJlcXVpcmUiLCJfbWF0Y2hlcyIsIl9ob3N0Q29tcG9uZW50TmFtZXMiLCJfbWFrZVF1ZXJpZXMiLCJtYXRjaFBsYWNlaG9sZGVyVGV4dCIsIm5vZGUiLCJwbGFjZWhvbGRlciIsIm9wdGlvbnMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJleGFjdCIsIm5vcm1hbGl6ZXIiLCJtYXRjaGVzIiwicHJvcHMiLCJxdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0IiwiaW5zdGFuY2UiLCJxdWVyeUFsbEJ5UGxhY2Vob2xkZXJGbiIsInF1ZXJ5T3B0aW9ucyIsImZpbmRBbGwiLCJpc0hvc3RUZXh0SW5wdXQiLCJnZXRNdWx0aXBsZUVycm9yIiwiU3RyaW5nIiwiZ2V0TWlzc2luZ0Vycm9yIiwiX3JlZiIsIm1ha2VRdWVyaWVzIiwiZ2V0QnkiLCJnZXRBbGxCeSIsInF1ZXJ5QnkiLCJxdWVyeUFsbEJ5IiwiZmluZEJ5IiwiZmluZEFsbEJ5IiwiYmluZEJ5UGxhY2Vob2xkZXJUZXh0UXVlcmllcyIsImdldEJ5UGxhY2Vob2xkZXJUZXh0IiwiZ2V0QWxsQnlQbGFjZWhvbGRlclRleHQiLCJxdWVyeUJ5UGxhY2Vob2xkZXJUZXh0IiwiZmluZEJ5UGxhY2Vob2xkZXJUZXh0IiwiZmluZEFsbEJ5UGxhY2Vob2xkZXJUZXh0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9xdWVyaWVzL3BsYWNlaG9sZGVyLXRleHQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBSZWFjdFRlc3RJbnN0YW5jZSB9IGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInO1xuaW1wb3J0IHsgZmluZEFsbCB9IGZyb20gJy4uL2hlbHBlcnMvZmluZC1hbGwnO1xuaW1wb3J0IHsgbWF0Y2hlcywgVGV4dE1hdGNoLCBUZXh0TWF0Y2hPcHRpb25zIH0gZnJvbSAnLi4vbWF0Y2hlcyc7XG5pbXBvcnQgeyBpc0hvc3RUZXh0SW5wdXQgfSBmcm9tICcuLi9oZWxwZXJzL2hvc3QtY29tcG9uZW50LW5hbWVzJztcbmltcG9ydCB7IG1ha2VRdWVyaWVzIH0gZnJvbSAnLi9tYWtlLXF1ZXJpZXMnO1xuaW1wb3J0IHR5cGUge1xuICBGaW5kQWxsQnlRdWVyeSxcbiAgRmluZEJ5UXVlcnksXG4gIEdldEFsbEJ5UXVlcnksXG4gIEdldEJ5UXVlcnksXG4gIFF1ZXJ5QWxsQnlRdWVyeSxcbiAgUXVlcnlCeVF1ZXJ5LFxufSBmcm9tICcuL21ha2UtcXVlcmllcyc7XG5pbXBvcnQgdHlwZSB7IENvbW1vblF1ZXJ5T3B0aW9ucyB9IGZyb20gJy4vb3B0aW9ucyc7XG5cbnR5cGUgQnlQbGFjZWhvbGRlclRleHRPcHRpb25zID0gQ29tbW9uUXVlcnlPcHRpb25zICYgVGV4dE1hdGNoT3B0aW9ucztcblxuY29uc3QgbWF0Y2hQbGFjZWhvbGRlclRleHQgPSAoXG4gIG5vZGU6IFJlYWN0VGVzdEluc3RhbmNlLFxuICBwbGFjZWhvbGRlcjogVGV4dE1hdGNoLFxuICBvcHRpb25zOiBUZXh0TWF0Y2hPcHRpb25zID0ge30sXG4pID0+IHtcbiAgY29uc3QgeyBleGFjdCwgbm9ybWFsaXplciB9ID0gb3B0aW9ucztcbiAgcmV0dXJuIG1hdGNoZXMocGxhY2Vob2xkZXIsIG5vZGUucHJvcHMucGxhY2Vob2xkZXIsIG5vcm1hbGl6ZXIsIGV4YWN0KTtcbn07XG5cbmNvbnN0IHF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHQgPSAoXG4gIGluc3RhbmNlOiBSZWFjdFRlc3RJbnN0YW5jZSxcbik6IFF1ZXJ5QWxsQnlRdWVyeTxUZXh0TWF0Y2gsIEJ5UGxhY2Vob2xkZXJUZXh0T3B0aW9ucz4gPT5cbiAgZnVuY3Rpb24gcXVlcnlBbGxCeVBsYWNlaG9sZGVyRm4ocGxhY2Vob2xkZXIsIHF1ZXJ5T3B0aW9ucykge1xuICAgIHJldHVybiBmaW5kQWxsKFxuICAgICAgaW5zdGFuY2UsXG4gICAgICAobm9kZSkgPT4gaXNIb3N0VGV4dElucHV0KG5vZGUpICYmIG1hdGNoUGxhY2Vob2xkZXJUZXh0KG5vZGUsIHBsYWNlaG9sZGVyLCBxdWVyeU9wdGlvbnMpLFxuICAgICAgcXVlcnlPcHRpb25zLFxuICAgICk7XG4gIH07XG5cbmNvbnN0IGdldE11bHRpcGxlRXJyb3IgPSAocGxhY2Vob2xkZXI6IFRleHRNYXRjaCkgPT5cbiAgYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIHdpdGggcGxhY2Vob2xkZXI6ICR7U3RyaW5nKHBsYWNlaG9sZGVyKX0gYDtcbmNvbnN0IGdldE1pc3NpbmdFcnJvciA9IChwbGFjZWhvbGRlcjogVGV4dE1hdGNoKSA9PlxuICBgVW5hYmxlIHRvIGZpbmQgYW4gZWxlbWVudCB3aXRoIHBsYWNlaG9sZGVyOiAke1N0cmluZyhwbGFjZWhvbGRlcil9YDtcblxuY29uc3QgeyBnZXRCeSwgZ2V0QWxsQnksIHF1ZXJ5QnksIHF1ZXJ5QWxsQnksIGZpbmRCeSwgZmluZEFsbEJ5IH0gPSBtYWtlUXVlcmllcyhcbiAgcXVlcnlBbGxCeVBsYWNlaG9sZGVyVGV4dCxcbiAgZ2V0TWlzc2luZ0Vycm9yLFxuICBnZXRNdWx0aXBsZUVycm9yLFxuKTtcblxuZXhwb3J0IHR5cGUgQnlQbGFjZWhvbGRlclRleHRRdWVyaWVzID0ge1xuICBnZXRCeVBsYWNlaG9sZGVyVGV4dDogR2V0QnlRdWVyeTxUZXh0TWF0Y2gsIEJ5UGxhY2Vob2xkZXJUZXh0T3B0aW9ucz47XG4gIGdldEFsbEJ5UGxhY2Vob2xkZXJUZXh0OiBHZXRBbGxCeVF1ZXJ5PFRleHRNYXRjaCwgQnlQbGFjZWhvbGRlclRleHRPcHRpb25zPjtcbiAgcXVlcnlCeVBsYWNlaG9sZGVyVGV4dDogUXVlcnlCeVF1ZXJ5PFRleHRNYXRjaCwgQnlQbGFjZWhvbGRlclRleHRPcHRpb25zPjtcbiAgcXVlcnlBbGxCeVBsYWNlaG9sZGVyVGV4dDogUXVlcnlBbGxCeVF1ZXJ5PFRleHRNYXRjaCwgQnlQbGFjZWhvbGRlclRleHRPcHRpb25zPjtcbiAgZmluZEJ5UGxhY2Vob2xkZXJUZXh0OiBGaW5kQnlRdWVyeTxUZXh0TWF0Y2gsIEJ5UGxhY2Vob2xkZXJUZXh0T3B0aW9ucz47XG4gIGZpbmRBbGxCeVBsYWNlaG9sZGVyVGV4dDogRmluZEFsbEJ5UXVlcnk8VGV4dE1hdGNoLCBCeVBsYWNlaG9sZGVyVGV4dE9wdGlvbnM+O1xufTtcblxuZXhwb3J0IGNvbnN0IGJpbmRCeVBsYWNlaG9sZGVyVGV4dFF1ZXJpZXMgPSAoXG4gIGluc3RhbmNlOiBSZWFjdFRlc3RJbnN0YW5jZSxcbik6IEJ5UGxhY2Vob2xkZXJUZXh0UXVlcmllcyA9PiAoe1xuICBnZXRCeVBsYWNlaG9sZGVyVGV4dDogZ2V0QnkoaW5zdGFuY2UpLFxuICBnZXRBbGxCeVBsYWNlaG9sZGVyVGV4dDogZ2V0QWxsQnkoaW5zdGFuY2UpLFxuICBxdWVyeUJ5UGxhY2Vob2xkZXJUZXh0OiBxdWVyeUJ5KGluc3RhbmNlKSxcbiAgcXVlcnlBbGxCeVBsYWNlaG9sZGVyVGV4dDogcXVlcnlBbGxCeShpbnN0YW5jZSksXG4gIGZpbmRCeVBsYWNlaG9sZGVyVGV4dDogZmluZEJ5KGluc3RhbmNlKSxcbiAgZmluZEFsbEJ5UGxhY2Vob2xkZXJUZXh0OiBmaW5kQWxsQnkoaW5zdGFuY2UpLFxufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLElBQUFBLFFBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFFBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLG1CQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxZQUFBLEdBQUFILE9BQUE7QUFhQSxJQUFNSSxvQkFBb0IsR0FBRyxTQUF2QkEsb0JBQW9CQSxDQUN4QkMsSUFBdUIsRUFDdkJDLFdBQXNCLEVBRW5CO0VBQUEsSUFESEMsT0FBeUIsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQyxDQUFDO0VBRTlCLElBQVFHLEtBQUssR0FBaUJKLE9BQU8sQ0FBN0JJLEtBQUs7SUFBRUMsVUFBQSxHQUFlTCxPQUFPLENBQXRCSyxVQUFBO0VBQ2YsT0FBTyxJQUFBWCxRQUFBLENBQUFZLE9BQU8sRUFBQ1AsV0FBVyxFQUFFRCxJQUFJLENBQUNTLEtBQUssQ0FBQ1IsV0FBVyxFQUFFTSxVQUFVLEVBQUVELEtBQUssQ0FBQztBQUN4RSxDQUFDO0FBRUQsSUFBTUkseUJBQXlCLEdBQzdCLFNBRElBLHlCQUF5QkEsQ0FDN0JDLFFBQTJCO0VBQUEsT0FFM0IsU0FBU0MsdUJBQXVCQSxDQUFDWCxXQUFXLEVBQUVZLFlBQVksRUFBRTtJQUMxRCxPQUFPLElBQUFuQixRQUFBLENBQUFvQixPQUFPLEVBQ1pILFFBQVEsRUFDUCxVQUFBWCxJQUFJO01BQUEsT0FBSyxJQUFBSCxtQkFBQSxDQUFBa0IsZUFBZSxFQUFDZixJQUFJLENBQUMsSUFBSUQsb0JBQW9CLENBQUNDLElBQUksRUFBRUMsV0FBVyxFQUFFWSxZQUFZLENBQUM7SUFBQSxHQUN4RkEsWUFDRixDQUFDO0VBQ0gsQ0FBQztBQUFBO0FBRUgsSUFBTUcsZ0JBQWdCLEdBQUksU0FBcEJBLGdCQUFnQkEsQ0FBSWYsV0FBc0I7RUFBQSxPQUM3Qyw2Q0FBNENnQixNQUFNLENBQUNoQixXQUFXLENBQUUsR0FBRTtBQUFBO0FBQ3JFLElBQU1pQixlQUFlLEdBQUksU0FBbkJBLGVBQWVBLENBQUlqQixXQUFzQjtFQUFBLE9BQzVDLCtDQUE4Q2dCLE1BQU0sQ0FBQ2hCLFdBQVcsQ0FBRSxFQUFDO0FBQUE7QUFFdEUsSUFBQWtCLElBQUEsR0FBb0UsSUFBQXJCLFlBQUEsQ0FBQXNCLFdBQVcsRUFDN0VWLHlCQUF5QixFQUN6QlEsZUFBZSxFQUNmRixnQkFDRixDQUFDO0VBSk9LLEtBQUssR0FBQUYsSUFBQSxDQUFMRSxLQUFLO0VBQUVDLFFBQVEsR0FBQUgsSUFBQSxDQUFSRyxRQUFRO0VBQUVDLE9BQU8sR0FBQUosSUFBQSxDQUFQSSxPQUFPO0VBQUVDLFVBQVUsR0FBQUwsSUFBQSxDQUFWSyxVQUFVO0VBQUVDLE1BQU0sR0FBQU4sSUFBQSxDQUFOTSxNQUFNO0VBQUVDLFNBQUEsR0FBQVAsSUFBQSxDQUFBTyxTQUFBO0FBZS9DLElBQU1DLDRCQUE0QixHQUN2QyxTQURXQSw0QkFBNEJBLENBQ3ZDaEIsUUFBMkI7RUFBQSxPQUNHO0lBQzlCaUIsb0JBQW9CLEVBQUVQLEtBQUssQ0FBQ1YsUUFBUSxDQUFDO0lBQ3JDa0IsdUJBQXVCLEVBQUVQLFFBQVEsQ0FBQ1gsUUFBUSxDQUFDO0lBQzNDbUIsc0JBQXNCLEVBQUVQLE9BQU8sQ0FBQ1osUUFBUSxDQUFDO0lBQ3pDRCx5QkFBeUIsRUFBRWMsVUFBVSxDQUFDYixRQUFRLENBQUM7SUFDL0NvQixxQkFBcUIsRUFBRU4sTUFBTSxDQUFDZCxRQUFRLENBQUM7SUFDdkNxQix3QkFBd0IsRUFBRU4sU0FBUyxDQUFDZixRQUFRO0VBQzlDLENBQUM7QUFBQSxDQUFDO0FBQUNzQixPQUFBLENBQUFOLDRCQUFBLEdBQUFBLDRCQUFBIiwiaWdub3JlTGlzdCI6W119