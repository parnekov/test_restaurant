283d27ef88d246bce1d7e815d6023c83
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeMyOrderBodyToPost = exports.makeAllOrdersBodyToPost = void 0;
var makeMyOrderBodyToPost = exports.makeMyOrderBodyToPost = function makeMyOrderBodyToPost(myOrder) {
  var _myOrder$orderItems;
  if (myOrder != null && (_myOrder$orderItems = myOrder.orderItems) != null && _myOrder$orderItems.every(function (item) {
    return item.checked;
  })) {
    return {
      ordersToPay: [myOrder.id],
      itemsToPay: []
    };
  } else {
    var _myOrder$orderItems2;
    var itemsToPay = [];
    myOrder == null ? void 0 : (_myOrder$orderItems2 = myOrder.orderItems) == null ? void 0 : _myOrder$orderItems2.forEach(function (element) {
      if (element.checked) {
        itemsToPay.push({
          orderId: myOrder.id,
          itemId: element.id
        });
      }
    });
    return {
      ordersToPay: [],
      itemsToPay: itemsToPay
    };
  }
};
var makeAllOrdersBodyToPost = exports.makeAllOrdersBodyToPost = function makeAllOrdersBodyToPost(orders) {
  var ordersToPay = [];
  var itemsToPay = [];
  orders == null ? void 0 : orders.forEach(function (order) {
    var _order$orderItems;
    if (order != null && (_order$orderItems = order.orderItems) != null && _order$orderItems.every(function (item) {
      return item.checked;
    })) {
      ordersToPay.push(order.id);
    } else {
      var _order$orderItems2;
      order == null ? void 0 : (_order$orderItems2 = order.orderItems) == null ? void 0 : _order$orderItems2.forEach(function (item) {
        if (item.checked) {
          itemsToPay.push({
            orderId: order.id,
            itemId: item.id
          });
        }
      });
    }
  });
  return {
    ordersToPay: ordersToPay,
    itemsToPay: itemsToPay
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtYWtlTXlPcmRlckJvZHlUb1Bvc3QiLCJleHBvcnRzIiwibXlPcmRlciIsIl9teU9yZGVyJG9yZGVySXRlbXMiLCJvcmRlckl0ZW1zIiwiZXZlcnkiLCJpdGVtIiwiY2hlY2tlZCIsIm9yZGVyc1RvUGF5IiwiaWQiLCJpdGVtc1RvUGF5IiwiX215T3JkZXIkb3JkZXJJdGVtczIiLCJmb3JFYWNoIiwiZWxlbWVudCIsInB1c2giLCJvcmRlcklkIiwiaXRlbUlkIiwibWFrZUFsbE9yZGVyc0JvZHlUb1Bvc3QiLCJvcmRlcnMiLCJvcmRlciIsIl9vcmRlciRvcmRlckl0ZW1zIiwiX29yZGVyJG9yZGVySXRlbXMyIl0sInNvdXJjZXMiOlsiYnVpbGRlcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogVFlQRVMgKi9cbmltcG9ydCB7T3JkZXIsIEl0ZW1zVG9QYXl9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgbWFrZU15T3JkZXJCb2R5VG9Qb3N0ID0gKG15T3JkZXI6IE9yZGVyKSA9PiB7XG4gIGlmIChteU9yZGVyPy5vcmRlckl0ZW1zPy5ldmVyeShpdGVtID0+IGl0ZW0uY2hlY2tlZCkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb3JkZXJzVG9QYXk6IFtteU9yZGVyLmlkXSxcbiAgICAgIGl0ZW1zVG9QYXk6IFtdLFxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgaXRlbXNUb1BheTogSXRlbXNUb1BheSA9IFtdO1xuICAgIG15T3JkZXI/Lm9yZGVySXRlbXM/LmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICBpZiAoZWxlbWVudC5jaGVja2VkKSB7XG4gICAgICAgIGl0ZW1zVG9QYXkucHVzaCh7XG4gICAgICAgICAgb3JkZXJJZDogbXlPcmRlci5pZCxcbiAgICAgICAgICBpdGVtSWQ6IGVsZW1lbnQuaWQsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBvcmRlcnNUb1BheTogW10sXG4gICAgICBpdGVtc1RvUGF5OiBpdGVtc1RvUGF5LFxuICAgIH07XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBtYWtlQWxsT3JkZXJzQm9keVRvUG9zdCA9IChvcmRlcnM6IEFycmF5PE9yZGVyPiB8IG51bGwpID0+IHtcbiAgY29uc3Qgb3JkZXJzVG9QYXk6IEFycmF5PHN0cmluZz4gPSBbXTtcbiAgY29uc3QgaXRlbXNUb1BheTogSXRlbXNUb1BheSA9IFtdO1xuICBvcmRlcnM/LmZvckVhY2gob3JkZXIgPT4ge1xuICAgIGlmIChvcmRlcj8ub3JkZXJJdGVtcz8uZXZlcnkoaXRlbSA9PiBpdGVtLmNoZWNrZWQpKSB7XG4gICAgICBvcmRlcnNUb1BheS5wdXNoKG9yZGVyLmlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3JkZXI/Lm9yZGVySXRlbXM/LmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgIGlmIChpdGVtLmNoZWNrZWQpIHtcbiAgICAgICAgICBpdGVtc1RvUGF5LnB1c2goe1xuICAgICAgICAgICAgb3JkZXJJZDogb3JkZXIuaWQsXG4gICAgICAgICAgICBpdGVtSWQ6IGl0ZW0uaWQsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgb3JkZXJzVG9QYXksXG4gICAgaXRlbXNUb1BheSxcbiAgfTtcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7QUFHTyxJQUFNQSxxQkFBcUIsR0FBQUMsT0FBQSxDQUFBRCxxQkFBQSxHQUFHLFNBQXhCQSxxQkFBcUJBLENBQUlFLE9BQWMsRUFBSztFQUFBLElBQUFDLG1CQUFBO0VBQ3ZELElBQUlELE9BQU8sYUFBQUMsbUJBQUEsR0FBUEQsT0FBTyxDQUFFRSxVQUFVLGFBQW5CRCxtQkFBQSxDQUFxQkUsS0FBSyxDQUFDLFVBQUFDLElBQUk7SUFBQSxPQUFJQSxJQUFJLENBQUNDLE9BQU87RUFBQSxFQUFDLEVBQUU7SUFDcEQsT0FBTztNQUNMQyxXQUFXLEVBQUUsQ0FBQ04sT0FBTyxDQUFDTyxFQUFFLENBQUM7TUFDekJDLFVBQVUsRUFBRTtJQUNkLENBQUM7RUFDSCxDQUFDLE1BQU07SUFBQSxJQUFBQyxvQkFBQTtJQUNMLElBQU1ELFVBQXNCLEdBQUcsRUFBRTtJQUNqQ1IsT0FBTyxxQkFBQVMsb0JBQUEsR0FBUFQsT0FBTyxDQUFFRSxVQUFVLHFCQUFuQk8sb0JBQUEsQ0FBcUJDLE9BQU8sQ0FBQyxVQUFBQyxPQUFPLEVBQUk7TUFDdEMsSUFBSUEsT0FBTyxDQUFDTixPQUFPLEVBQUU7UUFDbkJHLFVBQVUsQ0FBQ0ksSUFBSSxDQUFDO1VBQ2RDLE9BQU8sRUFBRWIsT0FBTyxDQUFDTyxFQUFFO1VBQ25CTyxNQUFNLEVBQUVILE9BQU8sQ0FBQ0o7UUFDbEIsQ0FBQyxDQUFDO01BQ0o7SUFDRixDQUFDLENBQUM7SUFDRixPQUFPO01BQ0xELFdBQVcsRUFBRSxFQUFFO01BQ2ZFLFVBQVUsRUFBRUE7SUFDZCxDQUFDO0VBQ0g7QUFDRixDQUFDO0FBRU0sSUFBTU8sdUJBQXVCLEdBQUFoQixPQUFBLENBQUFnQix1QkFBQSxHQUFHLFNBQTFCQSx1QkFBdUJBLENBQUlDLE1BQTJCLEVBQUs7RUFDdEUsSUFBTVYsV0FBMEIsR0FBRyxFQUFFO0VBQ3JDLElBQU1FLFVBQXNCLEdBQUcsRUFBRTtFQUNqQ1EsTUFBTSxvQkFBTkEsTUFBTSxDQUFFTixPQUFPLENBQUMsVUFBQU8sS0FBSyxFQUFJO0lBQUEsSUFBQUMsaUJBQUE7SUFDdkIsSUFBSUQsS0FBSyxhQUFBQyxpQkFBQSxHQUFMRCxLQUFLLENBQUVmLFVBQVUsYUFBakJnQixpQkFBQSxDQUFtQmYsS0FBSyxDQUFDLFVBQUFDLElBQUk7TUFBQSxPQUFJQSxJQUFJLENBQUNDLE9BQU87SUFBQSxFQUFDLEVBQUU7TUFDbERDLFdBQVcsQ0FBQ00sSUFBSSxDQUFDSyxLQUFLLENBQUNWLEVBQUUsQ0FBQztJQUM1QixDQUFDLE1BQU07TUFBQSxJQUFBWSxrQkFBQTtNQUNMRixLQUFLLHFCQUFBRSxrQkFBQSxHQUFMRixLQUFLLENBQUVmLFVBQVUscUJBQWpCaUIsa0JBQUEsQ0FBbUJULE9BQU8sQ0FBQyxVQUFBTixJQUFJLEVBQUk7UUFDakMsSUFBSUEsSUFBSSxDQUFDQyxPQUFPLEVBQUU7VUFDaEJHLFVBQVUsQ0FBQ0ksSUFBSSxDQUFDO1lBQ2RDLE9BQU8sRUFBRUksS0FBSyxDQUFDVixFQUFFO1lBQ2pCTyxNQUFNLEVBQUVWLElBQUksQ0FBQ0c7VUFDZixDQUFDLENBQUM7UUFDSjtNQUNGLENBQUMsQ0FBQztJQUNKO0VBQ0YsQ0FBQyxDQUFDO0VBQ0YsT0FBTztJQUNMRCxXQUFXLEVBQVhBLFdBQVc7SUFDWEUsVUFBVSxFQUFWQTtFQUNGLENBQUM7QUFDSCxDQUFDIiwiaWdub3JlTGlzdCI6W119