{"version":3,"names":["_getJestObj","mock","actualNav","jest","requireActual","Object","assign","useNavigation","setOptions","fn","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_reactRedux","_store","_native","_MyOrder","_routes","_jsxRuntime","_require","testID","SCREEN_NAMES","MY_ORDER","ComponentToRender","jsx","Provider","store","children","NavigationContainer","default","describe","it","_render","render","queryByTestId","queryByText","expect","toBeTruthy"],"sources":["MyOrder.test.tsx"],"sourcesContent":["/* REACT */\nimport React from 'react';\n/* MODULES */\nimport {ReactTestInstance} from 'react-test-renderer';\nimport {render, fireEvent, waitFor} from '@testing-library/react-native';\n/* STORE */\nimport {Provider} from 'react-redux';\nimport {store} from '../src/store/store';\n/* COMPONENTS */\nimport {NavigationContainer} from '@react-navigation/native';\nimport MyOrder from '../src/screens/MyOrder';\n/* CONSTANTS */\nimport {SCREEN_NAMES} from '../src/navigation/routes';\n\nconst testID = SCREEN_NAMES.MY_ORDER;\n\njest.mock('@react-navigation/native', () => {\n  const actualNav = jest.requireActual('@react-navigation/native');\n  return {\n    ...actualNav,\n    useNavigation: () => ({\n      setOptions: jest.fn(),\n    }),\n  };\n});\n\nconst ComponentToRender = (\n  <Provider store={store}>\n    <NavigationContainer>\n      <MyOrder />\n    </NavigationContainer>\n  </Provider>\n);\n\ndescribe('MyOrder screen tests', () => {\n  it('MyOrder renders correctly', async () => {\n    const {queryByTestId, queryByText} = render(ComponentToRender);\n\n    expect(queryByTestId(`${testID}-container`)).toBeTruthy();\n    expect(queryByTestId(`${testID}-list`)).toBeTruthy();\n    expect(queryByTestId(`${testID}-list-header-checkbox`)).toBeTruthy();\n\n    expect(queryByText('Pay')).toBeTruthy();\n  });\n\n  // it('MyOrder matches snapshot', () => {\n  //   const component = render(ComponentToRender).toJSON();\n  //   expect(component).toMatchSnapshot();\n  // });\n});\n"],"mappings":"AAgBAA,WAAA,GAAKC,IAAI,CAAC,0BAA0B,EAAE,YAAM;EAC1C,IAAMC,SAAS,GAAGC,IAAI,CAACC,aAAa,CAAC,0BAA0B,CAAC;EAChE,OAAAC,MAAA,CAAAC,MAAA,KACKJ,SAAS;IACZK,aAAa,EAAE,SAAAA,cAAA;MAAA,OAAO;QACpBC,UAAU,EAAEL,IAAI,CAACM,EAAE,CAAC;MACtB,CAAC;IAAA;EAAC;AAEN,CAAC,CAAC;AAAC,IAAAC,sBAAA,GAAAC,OAAA;AAAA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAvBH,IAAAE,MAAA,GAAAH,sBAAA,CAAAC,OAAA;AAGA,IAAAG,YAAA,GAAAH,OAAA;AAEA,IAAAI,WAAA,GAAAJ,OAAA;AACA,IAAAK,MAAA,GAAAL,OAAA;AAEA,IAAAM,OAAA,GAAAN,OAAA;AACA,IAAAO,QAAA,GAAAR,sBAAA,CAAAC,OAAA;AAEA,IAAAQ,OAAA,GAAAR,OAAA;AAAsD,IAAAS,WAAA,GAAAT,OAAA;AAAA,SAAAX,YAAA;EAAA,IAAAqB,QAAA,GAAAV,OAAA;IAAAR,IAAA,GAAAkB,QAAA,CAAAlB,IAAA;EAAAH,WAAA,YAAAA,YAAA;IAAA,OAAAG,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAEtD,IAAMmB,MAAM,GAAGC,oBAAY,CAACC,QAAQ;AAYpC,IAAMC,iBAAiB,GACrB,IAAAL,WAAA,CAAAM,GAAA,EAACX,WAAA,CAAAY,QAAQ;EAACC,KAAK,EAAEA,YAAM;EAAAC,QAAA,EACrB,IAAAT,WAAA,CAAAM,GAAA,EAACT,OAAA,CAAAa,mBAAmB;IAAAD,QAAA,EAClB,IAAAT,WAAA,CAAAM,GAAA,EAACR,QAAA,CAAAa,OAAO,IAAE;EAAC,CACQ;AAAC,CACd,CACX;AAEDC,QAAQ,CAAC,sBAAsB,EAAE,YAAM;EACrCC,EAAE,CAAC,2BAA2B,MAAArB,kBAAA,CAAAmB,OAAA,EAAE,aAAY;IAC1C,IAAAG,OAAA,GAAqC,IAAAC,mBAAM,EAACV,iBAAiB,CAAC;MAAvDW,aAAa,GAAAF,OAAA,CAAbE,aAAa;MAAEC,WAAW,GAAAH,OAAA,CAAXG,WAAW;IAEjCC,MAAM,CAACF,aAAa,CAAE,GAAEd,MAAO,YAAW,CAAC,CAAC,CAACiB,UAAU,CAAC,CAAC;IACzDD,MAAM,CAACF,aAAa,CAAE,GAAEd,MAAO,OAAM,CAAC,CAAC,CAACiB,UAAU,CAAC,CAAC;IACpDD,MAAM,CAACF,aAAa,CAAE,GAAEd,MAAO,uBAAsB,CAAC,CAAC,CAACiB,UAAU,CAAC,CAAC;IAEpED,MAAM,CAACD,WAAW,CAAC,KAAK,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC;EACzC,CAAC,EAAC;AAMJ,CAAC,CAAC","ignoreList":[]}