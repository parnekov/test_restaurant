{"version":3,"names":["Object","defineProperty","exports","value","default","diffSequence","pkg","NOT_YET_SET","countCommonItemsF","aIndex","aEnd","bIndex","bEnd","isCommon","nCommon","countCommonItemsR","aStart","bStart","extendPathsF","d","bF","aIndexesF","iMaxF","iF","kF","aFirst","aIndexPrev1","nF","extendPathsR","bR","aIndexesR","iMaxR","iR","kR","nR","extendOverlappablePathsF","division","aLength","bLength","baDeltaLength","kMinOverlapF","kMaxOverlapF","insert","aLastPrev","bFirst","nCommonF","aLast","bLastPrev","nCommonR","aIndexPrevFirst","bIndexPrevFirst","aEndPreceding","bEndPreceding","nChangePreceding","nCommonPreceding","aCommonPreceding","bCommonPreceding","nCommonFollowing","aCommonFollowing","bCommonFollowing","aStartFollowing","bStartFollowing","nChangeFollowing","extendOverlappablePathsR","kMinOverlapR","kMaxOverlapR","bLast","divide","nChange","dMin","dMax","Error","findSubsequences","transposed","callbacks","length","_callbacks$","foundSubsequence","bCommon","aCommon","tStart","tEnd","_callbacks","validateLength","name","arg","TypeError","Number","isSafeInteger","RangeError","validateCallback","type","nCommonFR"],"sources":["index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = diffSequence;\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// This diff-sequences package implements the linear space variation in\n// An O(ND) Difference Algorithm and Its Variations by Eugene W. Myers\n\n// Relationship in notation between Myers paper and this package:\n// A is a\n// N is aLength, aEnd - aStart, and so on\n// x is aIndex, aFirst, aLast, and so on\n// B is b\n// M is bLength, bEnd - bStart, and so on\n// y is bIndex, bFirst, bLast, and so on\n// Δ = N - M is negative of baDeltaLength = bLength - aLength\n// D is d\n// k is kF\n// k + Δ is kF = kR - baDeltaLength\n// V is aIndexesF or aIndexesR (see comment below about Indexes type)\n// index intervals [1, N] and [1, M] are [0, aLength) and [0, bLength)\n// starting point in forward direction (0, 0) is (-1, -1)\n// starting point in reverse direction (N + 1, M + 1) is (aLength, bLength)\n\n// The “edit graph” for sequences a and b corresponds to items:\n// in a on the horizontal axis\n// in b on the vertical axis\n//\n// Given a-coordinate of a point in a diagonal, you can compute b-coordinate.\n//\n// Forward diagonals kF:\n// zero diagonal intersects top left corner\n// positive diagonals intersect top edge\n// negative diagonals insersect left edge\n//\n// Reverse diagonals kR:\n// zero diagonal intersects bottom right corner\n// positive diagonals intersect right edge\n// negative diagonals intersect bottom edge\n\n// The graph contains a directed acyclic graph of edges:\n// horizontal: delete an item from a\n// vertical: insert an item from b\n// diagonal: common item in a and b\n//\n// The algorithm solves dual problems in the graph analogy:\n// Find longest common subsequence: path with maximum number of diagonal edges\n// Find shortest edit script: path with minimum number of non-diagonal edges\n\n// Input callback function compares items at indexes in the sequences.\n\n// Output callback function receives the number of adjacent items\n// and starting indexes of each common subsequence.\n// Either original functions or wrapped to swap indexes if graph is transposed.\n// Indexes in sequence a of last point of forward or reverse paths in graph.\n// Myers algorithm indexes by diagonal k which for negative is bad deopt in V8.\n// This package indexes by iF and iR which are greater than or equal to zero.\n// and also updates the index arrays in place to cut memory in half.\n// kF = 2 * iF - d\n// kR = d - 2 * iR\n// Division of index intervals in sequences a and b at the middle change.\n// Invariant: intervals do not have common items at the start or end.\nconst pkg = 'diff-sequences'; // for error messages\nconst NOT_YET_SET = 0; // small int instead of undefined to avoid deopt in V8\n\n// Return the number of common items that follow in forward direction.\n// The length of what Myers paper calls a “snake” in a forward path.\nconst countCommonItemsF = (aIndex, aEnd, bIndex, bEnd, isCommon) => {\n  let nCommon = 0;\n  while (aIndex < aEnd && bIndex < bEnd && isCommon(aIndex, bIndex)) {\n    aIndex += 1;\n    bIndex += 1;\n    nCommon += 1;\n  }\n  return nCommon;\n};\n\n// Return the number of common items that precede in reverse direction.\n// The length of what Myers paper calls a “snake” in a reverse path.\nconst countCommonItemsR = (aStart, aIndex, bStart, bIndex, isCommon) => {\n  let nCommon = 0;\n  while (aStart <= aIndex && bStart <= bIndex && isCommon(aIndex, bIndex)) {\n    aIndex -= 1;\n    bIndex -= 1;\n    nCommon += 1;\n  }\n  return nCommon;\n};\n\n// A simple function to extend forward paths from (d - 1) to d changes\n// when forward and reverse paths cannot yet overlap.\nconst extendPathsF = (\n  d,\n  aEnd,\n  bEnd,\n  bF,\n  isCommon,\n  aIndexesF,\n  iMaxF // return the value because optimization might decrease it\n) => {\n  // Unroll the first iteration.\n  let iF = 0;\n  let kF = -d; // kF = 2 * iF - d\n  let aFirst = aIndexesF[iF]; // in first iteration always insert\n  let aIndexPrev1 = aFirst; // prev value of [iF - 1] in next iteration\n  aIndexesF[iF] += countCommonItemsF(\n    aFirst + 1,\n    aEnd,\n    bF + aFirst - kF + 1,\n    bEnd,\n    isCommon\n  );\n\n  // Optimization: skip diagonals in which paths cannot ever overlap.\n  const nF = d < iMaxF ? d : iMaxF;\n\n  // The diagonals kF are odd when d is odd and even when d is even.\n  for (iF += 1, kF += 2; iF <= nF; iF += 1, kF += 2) {\n    // To get first point of path segment, move one change in forward direction\n    // from last point of previous path segment in an adjacent diagonal.\n    // In last possible iteration when iF === d and kF === d always delete.\n    if (iF !== d && aIndexPrev1 < aIndexesF[iF]) {\n      aFirst = aIndexesF[iF]; // vertical to insert from b\n    } else {\n      aFirst = aIndexPrev1 + 1; // horizontal to delete from a\n\n      if (aEnd <= aFirst) {\n        // Optimization: delete moved past right of graph.\n        return iF - 1;\n      }\n    }\n\n    // To get last point of path segment, move along diagonal of common items.\n    aIndexPrev1 = aIndexesF[iF];\n    aIndexesF[iF] =\n      aFirst +\n      countCommonItemsF(aFirst + 1, aEnd, bF + aFirst - kF + 1, bEnd, isCommon);\n  }\n  return iMaxF;\n};\n\n// A simple function to extend reverse paths from (d - 1) to d changes\n// when reverse and forward paths cannot yet overlap.\nconst extendPathsR = (\n  d,\n  aStart,\n  bStart,\n  bR,\n  isCommon,\n  aIndexesR,\n  iMaxR // return the value because optimization might decrease it\n) => {\n  // Unroll the first iteration.\n  let iR = 0;\n  let kR = d; // kR = d - 2 * iR\n  let aFirst = aIndexesR[iR]; // in first iteration always insert\n  let aIndexPrev1 = aFirst; // prev value of [iR - 1] in next iteration\n  aIndexesR[iR] -= countCommonItemsR(\n    aStart,\n    aFirst - 1,\n    bStart,\n    bR + aFirst - kR - 1,\n    isCommon\n  );\n\n  // Optimization: skip diagonals in which paths cannot ever overlap.\n  const nR = d < iMaxR ? d : iMaxR;\n\n  // The diagonals kR are odd when d is odd and even when d is even.\n  for (iR += 1, kR -= 2; iR <= nR; iR += 1, kR -= 2) {\n    // To get first point of path segment, move one change in reverse direction\n    // from last point of previous path segment in an adjacent diagonal.\n    // In last possible iteration when iR === d and kR === -d always delete.\n    if (iR !== d && aIndexesR[iR] < aIndexPrev1) {\n      aFirst = aIndexesR[iR]; // vertical to insert from b\n    } else {\n      aFirst = aIndexPrev1 - 1; // horizontal to delete from a\n\n      if (aFirst < aStart) {\n        // Optimization: delete moved past left of graph.\n        return iR - 1;\n      }\n    }\n\n    // To get last point of path segment, move along diagonal of common items.\n    aIndexPrev1 = aIndexesR[iR];\n    aIndexesR[iR] =\n      aFirst -\n      countCommonItemsR(\n        aStart,\n        aFirst - 1,\n        bStart,\n        bR + aFirst - kR - 1,\n        isCommon\n      );\n  }\n  return iMaxR;\n};\n\n// A complete function to extend forward paths from (d - 1) to d changes.\n// Return true if a path overlaps reverse path of (d - 1) changes in its diagonal.\nconst extendOverlappablePathsF = (\n  d,\n  aStart,\n  aEnd,\n  bStart,\n  bEnd,\n  isCommon,\n  aIndexesF,\n  iMaxF,\n  aIndexesR,\n  iMaxR,\n  division // update prop values if return true\n) => {\n  const bF = bStart - aStart; // bIndex = bF + aIndex - kF\n  const aLength = aEnd - aStart;\n  const bLength = bEnd - bStart;\n  const baDeltaLength = bLength - aLength; // kF = kR - baDeltaLength\n\n  // Range of diagonals in which forward and reverse paths might overlap.\n  const kMinOverlapF = -baDeltaLength - (d - 1); // -(d - 1) <= kR\n  const kMaxOverlapF = -baDeltaLength + (d - 1); // kR <= (d - 1)\n\n  let aIndexPrev1 = NOT_YET_SET; // prev value of [iF - 1] in next iteration\n\n  // Optimization: skip diagonals in which paths cannot ever overlap.\n  const nF = d < iMaxF ? d : iMaxF;\n\n  // The diagonals kF = 2 * iF - d are odd when d is odd and even when d is even.\n  for (let iF = 0, kF = -d; iF <= nF; iF += 1, kF += 2) {\n    // To get first point of path segment, move one change in forward direction\n    // from last point of previous path segment in an adjacent diagonal.\n    // In first iteration when iF === 0 and kF === -d always insert.\n    // In last possible iteration when iF === d and kF === d always delete.\n    const insert = iF === 0 || (iF !== d && aIndexPrev1 < aIndexesF[iF]);\n    const aLastPrev = insert ? aIndexesF[iF] : aIndexPrev1;\n    const aFirst = insert\n      ? aLastPrev // vertical to insert from b\n      : aLastPrev + 1; // horizontal to delete from a\n\n    // To get last point of path segment, move along diagonal of common items.\n    const bFirst = bF + aFirst - kF;\n    const nCommonF = countCommonItemsF(\n      aFirst + 1,\n      aEnd,\n      bFirst + 1,\n      bEnd,\n      isCommon\n    );\n    const aLast = aFirst + nCommonF;\n    aIndexPrev1 = aIndexesF[iF];\n    aIndexesF[iF] = aLast;\n    if (kMinOverlapF <= kF && kF <= kMaxOverlapF) {\n      // Solve for iR of reverse path with (d - 1) changes in diagonal kF:\n      // kR = kF + baDeltaLength\n      // kR = (d - 1) - 2 * iR\n      const iR = (d - 1 - (kF + baDeltaLength)) / 2;\n\n      // If this forward path overlaps the reverse path in this diagonal,\n      // then this is the middle change of the index intervals.\n      if (iR <= iMaxR && aIndexesR[iR] - 1 <= aLast) {\n        // Unlike the Myers algorithm which finds only the middle “snake”\n        // this package can find two common subsequences per division.\n        // Last point of previous path segment is on an adjacent diagonal.\n        const bLastPrev = bF + aLastPrev - (insert ? kF + 1 : kF - 1);\n\n        // Because of invariant that intervals preceding the middle change\n        // cannot have common items at the end,\n        // move in reverse direction along a diagonal of common items.\n        const nCommonR = countCommonItemsR(\n          aStart,\n          aLastPrev,\n          bStart,\n          bLastPrev,\n          isCommon\n        );\n        const aIndexPrevFirst = aLastPrev - nCommonR;\n        const bIndexPrevFirst = bLastPrev - nCommonR;\n        const aEndPreceding = aIndexPrevFirst + 1;\n        const bEndPreceding = bIndexPrevFirst + 1;\n        division.nChangePreceding = d - 1;\n        if (d - 1 === aEndPreceding + bEndPreceding - aStart - bStart) {\n          // Optimization: number of preceding changes in forward direction\n          // is equal to number of items in preceding interval,\n          // therefore it cannot contain any common items.\n          division.aEndPreceding = aStart;\n          division.bEndPreceding = bStart;\n        } else {\n          division.aEndPreceding = aEndPreceding;\n          division.bEndPreceding = bEndPreceding;\n        }\n        division.nCommonPreceding = nCommonR;\n        if (nCommonR !== 0) {\n          division.aCommonPreceding = aEndPreceding;\n          division.bCommonPreceding = bEndPreceding;\n        }\n        division.nCommonFollowing = nCommonF;\n        if (nCommonF !== 0) {\n          division.aCommonFollowing = aFirst + 1;\n          division.bCommonFollowing = bFirst + 1;\n        }\n        const aStartFollowing = aLast + 1;\n        const bStartFollowing = bFirst + nCommonF + 1;\n        division.nChangeFollowing = d - 1;\n        if (d - 1 === aEnd + bEnd - aStartFollowing - bStartFollowing) {\n          // Optimization: number of changes in reverse direction\n          // is equal to number of items in following interval,\n          // therefore it cannot contain any common items.\n          division.aStartFollowing = aEnd;\n          division.bStartFollowing = bEnd;\n        } else {\n          division.aStartFollowing = aStartFollowing;\n          division.bStartFollowing = bStartFollowing;\n        }\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// A complete function to extend reverse paths from (d - 1) to d changes.\n// Return true if a path overlaps forward path of d changes in its diagonal.\nconst extendOverlappablePathsR = (\n  d,\n  aStart,\n  aEnd,\n  bStart,\n  bEnd,\n  isCommon,\n  aIndexesF,\n  iMaxF,\n  aIndexesR,\n  iMaxR,\n  division // update prop values if return true\n) => {\n  const bR = bEnd - aEnd; // bIndex = bR + aIndex - kR\n  const aLength = aEnd - aStart;\n  const bLength = bEnd - bStart;\n  const baDeltaLength = bLength - aLength; // kR = kF + baDeltaLength\n\n  // Range of diagonals in which forward and reverse paths might overlap.\n  const kMinOverlapR = baDeltaLength - d; // -d <= kF\n  const kMaxOverlapR = baDeltaLength + d; // kF <= d\n\n  let aIndexPrev1 = NOT_YET_SET; // prev value of [iR - 1] in next iteration\n\n  // Optimization: skip diagonals in which paths cannot ever overlap.\n  const nR = d < iMaxR ? d : iMaxR;\n\n  // The diagonals kR = d - 2 * iR are odd when d is odd and even when d is even.\n  for (let iR = 0, kR = d; iR <= nR; iR += 1, kR -= 2) {\n    // To get first point of path segment, move one change in reverse direction\n    // from last point of previous path segment in an adjacent diagonal.\n    // In first iteration when iR === 0 and kR === d always insert.\n    // In last possible iteration when iR === d and kR === -d always delete.\n    const insert = iR === 0 || (iR !== d && aIndexesR[iR] < aIndexPrev1);\n    const aLastPrev = insert ? aIndexesR[iR] : aIndexPrev1;\n    const aFirst = insert\n      ? aLastPrev // vertical to insert from b\n      : aLastPrev - 1; // horizontal to delete from a\n\n    // To get last point of path segment, move along diagonal of common items.\n    const bFirst = bR + aFirst - kR;\n    const nCommonR = countCommonItemsR(\n      aStart,\n      aFirst - 1,\n      bStart,\n      bFirst - 1,\n      isCommon\n    );\n    const aLast = aFirst - nCommonR;\n    aIndexPrev1 = aIndexesR[iR];\n    aIndexesR[iR] = aLast;\n    if (kMinOverlapR <= kR && kR <= kMaxOverlapR) {\n      // Solve for iF of forward path with d changes in diagonal kR:\n      // kF = kR - baDeltaLength\n      // kF = 2 * iF - d\n      const iF = (d + (kR - baDeltaLength)) / 2;\n\n      // If this reverse path overlaps the forward path in this diagonal,\n      // then this is a middle change of the index intervals.\n      if (iF <= iMaxF && aLast - 1 <= aIndexesF[iF]) {\n        const bLast = bFirst - nCommonR;\n        division.nChangePreceding = d;\n        if (d === aLast + bLast - aStart - bStart) {\n          // Optimization: number of changes in reverse direction\n          // is equal to number of items in preceding interval,\n          // therefore it cannot contain any common items.\n          division.aEndPreceding = aStart;\n          division.bEndPreceding = bStart;\n        } else {\n          division.aEndPreceding = aLast;\n          division.bEndPreceding = bLast;\n        }\n        division.nCommonPreceding = nCommonR;\n        if (nCommonR !== 0) {\n          // The last point of reverse path segment is start of common subsequence.\n          division.aCommonPreceding = aLast;\n          division.bCommonPreceding = bLast;\n        }\n        division.nChangeFollowing = d - 1;\n        if (d === 1) {\n          // There is no previous path segment.\n          division.nCommonFollowing = 0;\n          division.aStartFollowing = aEnd;\n          division.bStartFollowing = bEnd;\n        } else {\n          // Unlike the Myers algorithm which finds only the middle “snake”\n          // this package can find two common subsequences per division.\n          // Last point of previous path segment is on an adjacent diagonal.\n          const bLastPrev = bR + aLastPrev - (insert ? kR - 1 : kR + 1);\n\n          // Because of invariant that intervals following the middle change\n          // cannot have common items at the start,\n          // move in forward direction along a diagonal of common items.\n          const nCommonF = countCommonItemsF(\n            aLastPrev,\n            aEnd,\n            bLastPrev,\n            bEnd,\n            isCommon\n          );\n          division.nCommonFollowing = nCommonF;\n          if (nCommonF !== 0) {\n            // The last point of reverse path segment is start of common subsequence.\n            division.aCommonFollowing = aLastPrev;\n            division.bCommonFollowing = bLastPrev;\n          }\n          const aStartFollowing = aLastPrev + nCommonF; // aFirstPrev\n          const bStartFollowing = bLastPrev + nCommonF; // bFirstPrev\n\n          if (d - 1 === aEnd + bEnd - aStartFollowing - bStartFollowing) {\n            // Optimization: number of changes in forward direction\n            // is equal to number of items in following interval,\n            // therefore it cannot contain any common items.\n            division.aStartFollowing = aEnd;\n            division.bStartFollowing = bEnd;\n          } else {\n            division.aStartFollowing = aStartFollowing;\n            division.bStartFollowing = bStartFollowing;\n          }\n        }\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// Given index intervals and input function to compare items at indexes,\n// divide at the middle change.\n//\n// DO NOT CALL if start === end, because interval cannot contain common items\n// and because this function will throw the “no overlap” error.\nconst divide = (\n  nChange,\n  aStart,\n  aEnd,\n  bStart,\n  bEnd,\n  isCommon,\n  aIndexesF,\n  aIndexesR,\n  division // output\n) => {\n  const bF = bStart - aStart; // bIndex = bF + aIndex - kF\n  const bR = bEnd - aEnd; // bIndex = bR + aIndex - kR\n  const aLength = aEnd - aStart;\n  const bLength = bEnd - bStart;\n\n  // Because graph has square or portrait orientation,\n  // length difference is minimum number of items to insert from b.\n  // Corresponding forward and reverse diagonals in graph\n  // depend on length difference of the sequences:\n  // kF = kR - baDeltaLength\n  // kR = kF + baDeltaLength\n  const baDeltaLength = bLength - aLength;\n\n  // Optimization: max diagonal in graph intersects corner of shorter side.\n  let iMaxF = aLength;\n  let iMaxR = aLength;\n\n  // Initialize no changes yet in forward or reverse direction:\n  aIndexesF[0] = aStart - 1; // at open start of interval, outside closed start\n  aIndexesR[0] = aEnd; // at open end of interval\n\n  if (baDeltaLength % 2 === 0) {\n    // The number of changes in paths is 2 * d if length difference is even.\n    const dMin = (nChange || baDeltaLength) / 2;\n    const dMax = (aLength + bLength) / 2;\n    for (let d = 1; d <= dMax; d += 1) {\n      iMaxF = extendPathsF(d, aEnd, bEnd, bF, isCommon, aIndexesF, iMaxF);\n      if (d < dMin) {\n        iMaxR = extendPathsR(d, aStart, bStart, bR, isCommon, aIndexesR, iMaxR);\n      } else if (\n        // If a reverse path overlaps a forward path in the same diagonal,\n        // return a division of the index intervals at the middle change.\n        extendOverlappablePathsR(\n          d,\n          aStart,\n          aEnd,\n          bStart,\n          bEnd,\n          isCommon,\n          aIndexesF,\n          iMaxF,\n          aIndexesR,\n          iMaxR,\n          division\n        )\n      ) {\n        return;\n      }\n    }\n  } else {\n    // The number of changes in paths is 2 * d - 1 if length difference is odd.\n    const dMin = ((nChange || baDeltaLength) + 1) / 2;\n    const dMax = (aLength + bLength + 1) / 2;\n\n    // Unroll first half iteration so loop extends the relevant pairs of paths.\n    // Because of invariant that intervals have no common items at start or end,\n    // and limitation not to call divide with empty intervals,\n    // therefore it cannot be called if a forward path with one change\n    // would overlap a reverse path with no changes, even if dMin === 1.\n    let d = 1;\n    iMaxF = extendPathsF(d, aEnd, bEnd, bF, isCommon, aIndexesF, iMaxF);\n    for (d += 1; d <= dMax; d += 1) {\n      iMaxR = extendPathsR(\n        d - 1,\n        aStart,\n        bStart,\n        bR,\n        isCommon,\n        aIndexesR,\n        iMaxR\n      );\n      if (d < dMin) {\n        iMaxF = extendPathsF(d, aEnd, bEnd, bF, isCommon, aIndexesF, iMaxF);\n      } else if (\n        // If a forward path overlaps a reverse path in the same diagonal,\n        // return a division of the index intervals at the middle change.\n        extendOverlappablePathsF(\n          d,\n          aStart,\n          aEnd,\n          bStart,\n          bEnd,\n          isCommon,\n          aIndexesF,\n          iMaxF,\n          aIndexesR,\n          iMaxR,\n          division\n        )\n      ) {\n        return;\n      }\n    }\n  }\n\n  /* istanbul ignore next */\n  throw new Error(\n    `${pkg}: no overlap aStart=${aStart} aEnd=${aEnd} bStart=${bStart} bEnd=${bEnd}`\n  );\n};\n\n// Given index intervals and input function to compare items at indexes,\n// return by output function the number of adjacent items and starting indexes\n// of each common subsequence. Divide and conquer with only linear space.\n//\n// The index intervals are half open [start, end) like array slice method.\n// DO NOT CALL if start === end, because interval cannot contain common items\n// and because divide function will throw the “no overlap” error.\nconst findSubsequences = (\n  nChange,\n  aStart,\n  aEnd,\n  bStart,\n  bEnd,\n  transposed,\n  callbacks,\n  aIndexesF,\n  aIndexesR,\n  division // temporary memory, not input nor output\n) => {\n  if (bEnd - bStart < aEnd - aStart) {\n    // Transpose graph so it has portrait instead of landscape orientation.\n    // Always compare shorter to longer sequence for consistency and optimization.\n    transposed = !transposed;\n    if (transposed && callbacks.length === 1) {\n      // Lazily wrap callback functions to swap args if graph is transposed.\n      const {foundSubsequence, isCommon} = callbacks[0];\n      callbacks[1] = {\n        foundSubsequence: (nCommon, bCommon, aCommon) => {\n          foundSubsequence(nCommon, aCommon, bCommon);\n        },\n        isCommon: (bIndex, aIndex) => isCommon(aIndex, bIndex)\n      };\n    }\n    const tStart = aStart;\n    const tEnd = aEnd;\n    aStart = bStart;\n    aEnd = bEnd;\n    bStart = tStart;\n    bEnd = tEnd;\n  }\n  const {foundSubsequence, isCommon} = callbacks[transposed ? 1 : 0];\n\n  // Divide the index intervals at the middle change.\n  divide(\n    nChange,\n    aStart,\n    aEnd,\n    bStart,\n    bEnd,\n    isCommon,\n    aIndexesF,\n    aIndexesR,\n    division\n  );\n  const {\n    nChangePreceding,\n    aEndPreceding,\n    bEndPreceding,\n    nCommonPreceding,\n    aCommonPreceding,\n    bCommonPreceding,\n    nCommonFollowing,\n    aCommonFollowing,\n    bCommonFollowing,\n    nChangeFollowing,\n    aStartFollowing,\n    bStartFollowing\n  } = division;\n\n  // Unless either index interval is empty, they might contain common items.\n  if (aStart < aEndPreceding && bStart < bEndPreceding) {\n    // Recursely find and return common subsequences preceding the division.\n    findSubsequences(\n      nChangePreceding,\n      aStart,\n      aEndPreceding,\n      bStart,\n      bEndPreceding,\n      transposed,\n      callbacks,\n      aIndexesF,\n      aIndexesR,\n      division\n    );\n  }\n\n  // Return common subsequences that are adjacent to the middle change.\n  if (nCommonPreceding !== 0) {\n    foundSubsequence(nCommonPreceding, aCommonPreceding, bCommonPreceding);\n  }\n  if (nCommonFollowing !== 0) {\n    foundSubsequence(nCommonFollowing, aCommonFollowing, bCommonFollowing);\n  }\n\n  // Unless either index interval is empty, they might contain common items.\n  if (aStartFollowing < aEnd && bStartFollowing < bEnd) {\n    // Recursely find and return common subsequences following the division.\n    findSubsequences(\n      nChangeFollowing,\n      aStartFollowing,\n      aEnd,\n      bStartFollowing,\n      bEnd,\n      transposed,\n      callbacks,\n      aIndexesF,\n      aIndexesR,\n      division\n    );\n  }\n};\nconst validateLength = (name, arg) => {\n  if (typeof arg !== 'number') {\n    throw new TypeError(`${pkg}: ${name} typeof ${typeof arg} is not a number`);\n  }\n  if (!Number.isSafeInteger(arg)) {\n    throw new RangeError(`${pkg}: ${name} value ${arg} is not a safe integer`);\n  }\n  if (arg < 0) {\n    throw new RangeError(`${pkg}: ${name} value ${arg} is a negative integer`);\n  }\n};\nconst validateCallback = (name, arg) => {\n  const type = typeof arg;\n  if (type !== 'function') {\n    throw new TypeError(`${pkg}: ${name} typeof ${type} is not a function`);\n  }\n};\n\n// Compare items in two sequences to find a longest common subsequence.\n// Given lengths of sequences and input function to compare items at indexes,\n// return by output function the number of adjacent items and starting indexes\n// of each common subsequence.\nfunction diffSequence(aLength, bLength, isCommon, foundSubsequence) {\n  validateLength('aLength', aLength);\n  validateLength('bLength', bLength);\n  validateCallback('isCommon', isCommon);\n  validateCallback('foundSubsequence', foundSubsequence);\n\n  // Count common items from the start in the forward direction.\n  const nCommonF = countCommonItemsF(0, aLength, 0, bLength, isCommon);\n  if (nCommonF !== 0) {\n    foundSubsequence(nCommonF, 0, 0);\n  }\n\n  // Unless both sequences consist of common items only,\n  // find common items in the half-trimmed index intervals.\n  if (aLength !== nCommonF || bLength !== nCommonF) {\n    // Invariant: intervals do not have common items at the start.\n    // The start of an index interval is closed like array slice method.\n    const aStart = nCommonF;\n    const bStart = nCommonF;\n\n    // Count common items from the end in the reverse direction.\n    const nCommonR = countCommonItemsR(\n      aStart,\n      aLength - 1,\n      bStart,\n      bLength - 1,\n      isCommon\n    );\n\n    // Invariant: intervals do not have common items at the end.\n    // The end of an index interval is open like array slice method.\n    const aEnd = aLength - nCommonR;\n    const bEnd = bLength - nCommonR;\n\n    // Unless one sequence consists of common items only,\n    // therefore the other trimmed index interval consists of changes only,\n    // find common items in the trimmed index intervals.\n    const nCommonFR = nCommonF + nCommonR;\n    if (aLength !== nCommonFR && bLength !== nCommonFR) {\n      const nChange = 0; // number of change items is not yet known\n      const transposed = false; // call the original unwrapped functions\n      const callbacks = [\n        {\n          foundSubsequence,\n          isCommon\n        }\n      ];\n\n      // Indexes in sequence a of last points in furthest reaching paths\n      // from outside the start at top left in the forward direction:\n      const aIndexesF = [NOT_YET_SET];\n      // from the end at bottom right in the reverse direction:\n      const aIndexesR = [NOT_YET_SET];\n\n      // Initialize one object as output of all calls to divide function.\n      const division = {\n        aCommonFollowing: NOT_YET_SET,\n        aCommonPreceding: NOT_YET_SET,\n        aEndPreceding: NOT_YET_SET,\n        aStartFollowing: NOT_YET_SET,\n        bCommonFollowing: NOT_YET_SET,\n        bCommonPreceding: NOT_YET_SET,\n        bEndPreceding: NOT_YET_SET,\n        bStartFollowing: NOT_YET_SET,\n        nChangeFollowing: NOT_YET_SET,\n        nChangePreceding: NOT_YET_SET,\n        nCommonFollowing: NOT_YET_SET,\n        nCommonPreceding: NOT_YET_SET\n      };\n\n      // Find and return common subsequences in the trimmed index intervals.\n      findSubsequences(\n        nChange,\n        aStart,\n        aEnd,\n        bStart,\n        bEnd,\n        transposed,\n        callbacks,\n        aIndexesF,\n        aIndexesR,\n        division\n      );\n    }\n    if (nCommonR !== 0) {\n      foundSubsequence(nCommonR, aEnd, bEnd);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}