1549d973df1fa4da90b204d2c542461d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.isEventEnabled = isEventEnabled;
exports.isTouchResponder = isTouchResponder;
var _act = _interopRequireDefault(require("./act"));
var _componentTree = require("./helpers/component-tree");
var _hostComponentNames = require("./helpers/host-component-names");
var _pointerEvents = require("./helpers/pointer-events");
var _textInput = require("./helpers/text-input");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function isTouchResponder(element) {
  if (!(0, _componentTree.isHostElement)(element)) {
    return false;
  }
  return Boolean(element.props.onStartShouldSetResponder) || (0, _hostComponentNames.isHostTextInput)(element);
}
var eventsAffectedByPointerEventsProp = new Set(['press', 'onPress']);
var textInputEventsIgnoringEditableProp = new Set(['contentSizeChange', 'onContentSizeChange', 'layout', 'onLayout', 'scroll', 'onScroll']);
function isEventEnabled(element, eventName, nearestTouchResponder) {
  if ((0, _hostComponentNames.isHostTextInput)(nearestTouchResponder)) {
    return (0, _textInput.isTextInputEditable)(nearestTouchResponder) || textInputEventsIgnoringEditableProp.has(eventName);
  }
  if (eventsAffectedByPointerEventsProp.has(eventName) && !(0, _pointerEvents.isPointerEventEnabled)(element)) {
    return false;
  }
  var touchStart = nearestTouchResponder == null ? void 0 : nearestTouchResponder.props.onStartShouldSetResponder == null ? void 0 : nearestTouchResponder.props.onStartShouldSetResponder();
  var touchMove = nearestTouchResponder == null ? void 0 : nearestTouchResponder.props.onMoveShouldSetResponder == null ? void 0 : nearestTouchResponder.props.onMoveShouldSetResponder();
  if (touchStart || touchMove) {
    return true;
  }
  return touchStart === undefined && touchMove === undefined;
}
function findEventHandler(element, eventName, nearestTouchResponder) {
  var touchResponder = isTouchResponder(element) ? element : nearestTouchResponder;
  var handler = getEventHandler(element, eventName);
  if (handler && isEventEnabled(element, eventName, touchResponder)) return handler;
  if (element.parent === null || element.parent.parent === null) {
    return null;
  }
  return findEventHandler(element.parent, eventName, touchResponder);
}
function getEventHandler(element, eventName) {
  var eventHandlerName = getEventHandlerName(eventName);
  if (typeof element.props[eventHandlerName] === 'function') {
    return element.props[eventHandlerName];
  }
  if (typeof element.props[eventName] === 'function') {
    return element.props[eventName];
  }
  return undefined;
}
function getEventHandlerName(eventName) {
  return `on${eventName.charAt(0).toUpperCase()}${eventName.slice(1)}`;
}
function fireEvent(element, eventName) {
  for (var _len = arguments.length, data = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    data[_key - 2] = arguments[_key];
  }
  var handler = findEventHandler(element, eventName);
  if (!handler) {
    return;
  }
  var returnValue;
  void (0, _act.default)(function () {
    returnValue = handler.apply(void 0, data);
  });
  return returnValue;
}
fireEvent.press = function (element) {
  for (var _len2 = arguments.length, data = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    data[_key2 - 1] = arguments[_key2];
  }
  return fireEvent.apply(void 0, [element, 'press'].concat(data));
};
fireEvent.changeText = function (element) {
  for (var _len3 = arguments.length, data = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    data[_key3 - 1] = arguments[_key3];
  }
  return fireEvent.apply(void 0, [element, 'changeText'].concat(data));
};
fireEvent.scroll = function (element) {
  for (var _len4 = arguments.length, data = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    data[_key4 - 1] = arguments[_key4];
  }
  return fireEvent.apply(void 0, [element, 'scroll'].concat(data));
};
var _default = exports.default = fireEvent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,