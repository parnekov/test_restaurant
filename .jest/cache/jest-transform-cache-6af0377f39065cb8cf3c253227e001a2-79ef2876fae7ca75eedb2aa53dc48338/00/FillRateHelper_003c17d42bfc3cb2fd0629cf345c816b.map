{"version":3,"names":["_interopRequireDefault","require","_createClass2","_classCallCheck2","_ListMetricsAggregator","Info","default","any_blank_count","any_blank_ms","any_blank_speed_sum","mostly_blank_count","mostly_blank_ms","pixels_blank","pixels_sampled","pixels_scrolled","total_time_spent","sample_count","DEBUG","_listeners","_minSampleCount","_sampleRate","FillRateHelper","listMetrics","_anyBlankStartTime","_enabled","_info","_mostlyBlankStartTime","_samplesStartTime","_listMetrics","Math","random","_resetData","key","value","activate","console","debug","global","performance","now","deactivateAndFlush","start","info","Object","assign","derived","avg_blankness","avg_speed","avg_speed_when_any_blank","any_blank_per_min","any_blank_time_frac","mostly_blank_per_min","mostly_blank_time_frac","round","forEach","listener","computeBlankness","props","cellsAroundViewport","scrollMetrics","getItemCount","data","last","first","dOffset","offset","velocity","visibleLength","abs","scrollSpeed","blankTop","firstFrame","getCellMetrics","isMounted","min","max","blankBottom","lastFrame","bottomEdge","length","blankness","enabled","addListener","callback","warn","push","remove","filter","setSampleRate","sampleRate","setMinSampleCount","minSampleCount","module","exports"],"sources":["FillRateHelper.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {CellMetricProps} from './ListMetricsAggregator';\n\nimport ListMetricsAggregator from './ListMetricsAggregator';\n\nexport type FillRateInfo = Info;\n\nclass Info {\n  any_blank_count: number = 0;\n  any_blank_ms: number = 0;\n  any_blank_speed_sum: number = 0;\n  mostly_blank_count: number = 0;\n  mostly_blank_ms: number = 0;\n  pixels_blank: number = 0;\n  pixels_sampled: number = 0;\n  pixels_scrolled: number = 0;\n  total_time_spent: number = 0;\n  sample_count: number = 0;\n}\n\nconst DEBUG = false;\n\nlet _listeners: Array<(Info) => void> = [];\nlet _minSampleCount = 10;\nlet _sampleRate = DEBUG ? 1 : null;\n\n/**\n * A helper class for detecting when the maximem fill rate of `VirtualizedList` is exceeded.\n * By default the sampling rate is set to zero and this will do nothing. If you want to collect\n * samples (e.g. to log them), make sure to call `FillRateHelper.setSampleRate(0.0-1.0)`.\n *\n * Listeners and sample rate are global for all `VirtualizedList`s - typical usage will combine with\n * `SceneTracker.getActiveScene` to determine the context of the events.\n */\nclass FillRateHelper {\n  _anyBlankStartTime: ?number = null;\n  _enabled = false;\n  _listMetrics: ListMetricsAggregator;\n  _info: Info = new Info();\n  _mostlyBlankStartTime: ?number = null;\n  _samplesStartTime: ?number = null;\n\n  static addListener(callback: FillRateInfo => void): {\n    remove: () => void,\n    ...\n  } {\n    if (_sampleRate === null) {\n      console.warn('Call `FillRateHelper.setSampleRate` before `addListener`.');\n    }\n    _listeners.push(callback);\n    return {\n      remove: () => {\n        _listeners = _listeners.filter(listener => callback !== listener);\n      },\n    };\n  }\n\n  static setSampleRate(sampleRate: number) {\n    _sampleRate = sampleRate;\n  }\n\n  static setMinSampleCount(minSampleCount: number) {\n    _minSampleCount = minSampleCount;\n  }\n\n  constructor(listMetrics: ListMetricsAggregator) {\n    this._listMetrics = listMetrics;\n    this._enabled = (_sampleRate || 0) > Math.random();\n    this._resetData();\n  }\n\n  activate() {\n    if (this._enabled && this._samplesStartTime == null) {\n      DEBUG && console.debug('FillRateHelper: activate');\n      this._samplesStartTime = global.performance.now();\n    }\n  }\n\n  deactivateAndFlush() {\n    if (!this._enabled) {\n      return;\n    }\n    const start = this._samplesStartTime; // const for flow\n    if (start == null) {\n      DEBUG &&\n        console.debug('FillRateHelper: bail on deactivate with no start time');\n      return;\n    }\n    if (this._info.sample_count < _minSampleCount) {\n      // Don't bother with under-sampled events.\n      this._resetData();\n      return;\n    }\n    const total_time_spent = global.performance.now() - start;\n    const info: any = {\n      ...this._info,\n      total_time_spent,\n    };\n    if (DEBUG) {\n      const derived = {\n        avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,\n        avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),\n        avg_speed_when_any_blank:\n          this._info.any_blank_speed_sum / this._info.any_blank_count,\n        any_blank_per_min:\n          this._info.any_blank_count / (total_time_spent / 1000 / 60),\n        any_blank_time_frac: this._info.any_blank_ms / total_time_spent,\n        mostly_blank_per_min:\n          this._info.mostly_blank_count / (total_time_spent / 1000 / 60),\n        mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent,\n      };\n      for (const key in derived) {\n        // $FlowFixMe[prop-missing]\n        derived[key] = Math.round(1000 * derived[key]) / 1000;\n      }\n      console.debug('FillRateHelper deactivateAndFlush: ', {derived, info});\n    }\n    _listeners.forEach(listener => listener(info));\n    this._resetData();\n  }\n\n  computeBlankness(\n    props: {\n      ...CellMetricProps,\n      initialNumToRender?: ?number,\n      ...\n    },\n    cellsAroundViewport: {\n      first: number,\n      last: number,\n      ...\n    },\n    scrollMetrics: {\n      dOffset: number,\n      offset: number,\n      velocity: number,\n      visibleLength: number,\n      ...\n    },\n  ): number {\n    if (\n      !this._enabled ||\n      props.getItemCount(props.data) === 0 ||\n      cellsAroundViewport.last < cellsAroundViewport.first ||\n      this._samplesStartTime == null\n    ) {\n      return 0;\n    }\n    const {dOffset, offset, velocity, visibleLength} = scrollMetrics;\n\n    // Denominator metrics that we track for all events - most of the time there is no blankness and\n    // we want to capture that.\n    this._info.sample_count++;\n    this._info.pixels_sampled += Math.round(visibleLength);\n    this._info.pixels_scrolled += Math.round(Math.abs(dOffset));\n    const scrollSpeed = Math.round(Math.abs(velocity) * 1000); // px / sec\n\n    // Whether blank now or not, record the elapsed time blank if we were blank last time.\n    const now = global.performance.now();\n    if (this._anyBlankStartTime != null) {\n      this._info.any_blank_ms += now - this._anyBlankStartTime;\n    }\n    this._anyBlankStartTime = null;\n    if (this._mostlyBlankStartTime != null) {\n      this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;\n    }\n    this._mostlyBlankStartTime = null;\n\n    let blankTop = 0;\n    let first = cellsAroundViewport.first;\n    let firstFrame = this._listMetrics.getCellMetrics(first, props);\n    while (\n      first <= cellsAroundViewport.last &&\n      (!firstFrame || !firstFrame.isMounted)\n    ) {\n      firstFrame = this._listMetrics.getCellMetrics(first, props);\n      first++;\n    }\n    // Only count blankTop if we aren't rendering the first item, otherwise we will count the header\n    // as blank.\n    if (firstFrame && first > 0) {\n      blankTop = Math.min(\n        visibleLength,\n        Math.max(0, firstFrame.offset - offset),\n      );\n    }\n    let blankBottom = 0;\n    let last = cellsAroundViewport.last;\n    let lastFrame = this._listMetrics.getCellMetrics(last, props);\n    while (\n      last >= cellsAroundViewport.first &&\n      (!lastFrame || !lastFrame.isMounted)\n    ) {\n      lastFrame = this._listMetrics.getCellMetrics(last, props);\n      last--;\n    }\n    // Only count blankBottom if we aren't rendering the last item, otherwise we will count the\n    // footer as blank.\n    if (lastFrame && last < props.getItemCount(props.data) - 1) {\n      const bottomEdge = lastFrame.offset + lastFrame.length;\n      blankBottom = Math.min(\n        visibleLength,\n        Math.max(0, offset + visibleLength - bottomEdge),\n      );\n    }\n    const pixels_blank = Math.round(blankTop + blankBottom);\n    const blankness = pixels_blank / visibleLength;\n    if (blankness > 0) {\n      this._anyBlankStartTime = now;\n      this._info.any_blank_speed_sum += scrollSpeed;\n      this._info.any_blank_count++;\n      this._info.pixels_blank += pixels_blank;\n      if (blankness > 0.5) {\n        this._mostlyBlankStartTime = now;\n        this._info.mostly_blank_count++;\n      }\n    } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {\n      this.deactivateAndFlush();\n    }\n    return blankness;\n  }\n\n  enabled(): boolean {\n    return this._enabled;\n  }\n\n  _resetData() {\n    this._anyBlankStartTime = null;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n  }\n}\n\nmodule.exports = FillRateHelper;\n"],"mappings":"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","ignoreList":[]}