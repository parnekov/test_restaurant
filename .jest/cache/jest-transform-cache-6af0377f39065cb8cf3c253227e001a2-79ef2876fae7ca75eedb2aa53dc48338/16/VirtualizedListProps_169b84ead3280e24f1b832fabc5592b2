c28a8da3f51d8d7fe8c5d40bc98c329b
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.horizontalOrDefault = horizontalOrDefault;
exports.initialNumToRenderOrDefault = initialNumToRenderOrDefault;
exports.maxToRenderPerBatchOrDefault = maxToRenderPerBatchOrDefault;
exports.onEndReachedThresholdOrDefault = onEndReachedThresholdOrDefault;
exports.onStartReachedThresholdOrDefault = onStartReachedThresholdOrDefault;
exports.windowSizeOrDefault = windowSizeOrDefault;
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function horizontalOrDefault(horizontal) {
  return horizontal != null ? horizontal : false;
}
function initialNumToRenderOrDefault(initialNumToRender) {
  return initialNumToRender != null ? initialNumToRender : 10;
}
function maxToRenderPerBatchOrDefault(maxToRenderPerBatch) {
  return maxToRenderPerBatch != null ? maxToRenderPerBatch : 10;
}
function onStartReachedThresholdOrDefault(onStartReachedThreshold) {
  return onStartReachedThreshold != null ? onStartReachedThreshold : 2;
}
function onEndReachedThresholdOrDefault(onEndReachedThreshold) {
  return onEndReachedThreshold != null ? onEndReachedThreshold : 2;
}
function windowSizeOrDefault(windowSize) {
  return windowSize != null ? windowSize : 21;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,