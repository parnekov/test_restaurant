4003854536497a4f17d199e4b825a8c8
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _jsxRuntime = require("react/jsx-runtime");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var React = require('react');
function mockModal(BaseComponent) {
  var ModalMock = function (_BaseComponent) {
    function ModalMock() {
      (0, _classCallCheck2.default)(this, ModalMock);
      return _callSuper(this, ModalMock, arguments);
    }
    (0, _inherits2.default)(ModalMock, _BaseComponent);
    return (0, _createClass2.default)(ModalMock, [{
      key: "render",
      value: function render() {
        if (this.props.visible === false) {
          return null;
        }
        return (0, _jsxRuntime.jsx)(BaseComponent, Object.assign({}, this.props, {
          children: this.props.children
        }));
      }
    }]);
  }(BaseComponent);
  return ModalMock;
}
module.exports = mockModal;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2dldFByb3RvdHlwZU9mMiIsIl9pbmhlcml0czIiLCJfanN4UnVudGltZSIsIl9jYWxsU3VwZXIiLCJ0IiwibyIsImUiLCJkZWZhdWx0IiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJjb25zdHJ1Y3RvciIsImFwcGx5IiwiQm9vbGVhbiIsInByb3RvdHlwZSIsInZhbHVlT2YiLCJjYWxsIiwiUmVhY3QiLCJtb2NrTW9kYWwiLCJCYXNlQ29tcG9uZW50IiwiTW9kYWxNb2NrIiwiX0Jhc2VDb21wb25lbnQiLCJhcmd1bWVudHMiLCJrZXkiLCJ2YWx1ZSIsInJlbmRlciIsInByb3BzIiwidmlzaWJsZSIsImpzeCIsIk9iamVjdCIsImFzc2lnbiIsImNoaWxkcmVuIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIm1vY2tNb2RhbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKi9cblxuLyogZXNsaW50LWVudiBqZXN0ICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHR5cGVvZiBNb2RhbCBmcm9tICcuLi9MaWJyYXJpZXMvTW9kYWwvTW9kYWwnO1xuXG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbmZ1bmN0aW9uIG1vY2tNb2RhbChCYXNlQ29tcG9uZW50OiAkRmxvd0ZpeE1lKSB7XG4gIGNsYXNzIE1vZGFsTW9jayBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICAgIHJlbmRlcigpOiBSZWFjdC5FbGVtZW50PE1vZGFsPiB8IG51bGwge1xuICAgICAgaWYgKHRoaXMucHJvcHMudmlzaWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxCYXNlQ29tcG9uZW50IHsuLi50aGlzLnByb3BzfT57dGhpcy5wcm9wcy5jaGlsZHJlbn08L0Jhc2VDb21wb25lbnQ+XG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gTW9kYWxNb2NrO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IChtb2NrTW9kYWw6ICRGbG93Rml4TWUpO1xuIl0sIm1hcHBpbmdzIjoiQUFZQSxZQUFZOztBQUFDLElBQUFBLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxnQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUUsYUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUcsMkJBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFJLGdCQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBSyxVQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBTSxXQUFBLEdBQUFOLE9BQUE7QUFBQSxTQUFBTyxXQUFBQyxDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxXQUFBRCxDQUFBLE9BQUFMLGdCQUFBLENBQUFPLE9BQUEsRUFBQUYsQ0FBQSxPQUFBTiwyQkFBQSxDQUFBUSxPQUFBLEVBQUFILENBQUEsRUFBQUkseUJBQUEsS0FBQUMsT0FBQSxDQUFBQyxTQUFBLENBQUFMLENBQUEsRUFBQUMsQ0FBQSxZQUFBTixnQkFBQSxDQUFBTyxPQUFBLEVBQUFILENBQUEsRUFBQU8sV0FBQSxJQUFBTixDQUFBLENBQUFPLEtBQUEsQ0FBQVIsQ0FBQSxFQUFBRSxDQUFBO0FBQUEsU0FBQUUsMEJBQUEsY0FBQUosQ0FBQSxJQUFBUyxPQUFBLENBQUFDLFNBQUEsQ0FBQUMsT0FBQSxDQUFBQyxJQUFBLENBQUFQLE9BQUEsQ0FBQUMsU0FBQSxDQUFBRyxPQUFBLGlDQUFBVCxDQUFBLGFBQUFJLHlCQUFBLFlBQUFBLDBCQUFBLGFBQUFKLENBQUE7QUFJYixJQUFNYSxLQUFLLEdBQUdyQixPQUFPLENBQUMsT0FBTyxDQUFDO0FBRTlCLFNBQVNzQixTQUFTQSxDQUFDQyxhQUF5QixFQUFFO0VBQUEsSUFDdENDLFNBQVMsYUFBQUMsY0FBQTtJQUFBLFNBQUFELFVBQUE7TUFBQSxJQUFBdkIsZ0JBQUEsQ0FBQVUsT0FBQSxRQUFBYSxTQUFBO01BQUEsT0FBQWpCLFVBQUEsT0FBQWlCLFNBQUEsRUFBQUUsU0FBQTtJQUFBO0lBQUEsSUFBQXJCLFVBQUEsQ0FBQU0sT0FBQSxFQUFBYSxTQUFBLEVBQUFDLGNBQUE7SUFBQSxXQUFBdkIsYUFBQSxDQUFBUyxPQUFBLEVBQUFhLFNBQUE7TUFBQUcsR0FBQTtNQUFBQyxLQUFBLEVBQ2IsU0FBQUMsT0FBQSxFQUFzQztRQUNwQyxJQUFJLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxPQUFPLEtBQUssS0FBSyxFQUFFO1VBQ2hDLE9BQU8sSUFBSTtRQUNiO1FBRUEsT0FDRSxJQUFBekIsV0FBQSxDQUFBMEIsR0FBQSxFQUFDVCxhQUFhLEVBQUFVLE1BQUEsQ0FBQUMsTUFBQSxLQUFLLElBQUksQ0FBQ0osS0FBSztVQUFBSyxRQUFBLEVBQUcsSUFBSSxDQUFDTCxLQUFLLENBQUNLO1FBQVEsRUFBZ0IsQ0FBQztNQUV4RTtJQUFDO0VBQUEsRUFUcUJaLGFBQWE7RUFXckMsT0FBT0MsU0FBUztBQUNsQjtBQUVBWSxNQUFNLENBQUNDLE9BQU8sR0FBSWYsU0FBc0IiLCJpZ25vcmVMaXN0IjpbXX0=