{"version":3,"names":["_NativeReactNativeFeatureFlags","_interopRequireDefault","require","accessedFeatureFlags","Set","overrides","createGetter","configName","customValueGetter","defaultValue","cachedValue","_customValueGetter","add","createJavaScriptFlagGetter","_overrides","_overrides$configName","call","createNativeFlagGetter","_NativeReactNativeFea","NativeReactNativeFeatureFlags","getOverrides","setOverrides","newOverrides","Error","size","accessedFeatureFlagsStr","Array","from","join"],"sources":["ReactNativeFeatureFlagsBase.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {\n  ReactNativeFeatureFlagsJsOnly,\n  ReactNativeFeatureFlagsJsOnlyOverrides,\n} from './ReactNativeFeatureFlags';\n\nimport NativeReactNativeFeatureFlags from './NativeReactNativeFeatureFlags';\n\nconst accessedFeatureFlags: Set<string> = new Set();\nlet overrides: ?ReactNativeFeatureFlagsJsOnlyOverrides;\n\nexport type Getter<T> = () => T;\n\nfunction createGetter<T: boolean | number | string>(\n  configName: string,\n  customValueGetter: Getter<?T>,\n  defaultValue: T,\n): Getter<T> {\n  let cachedValue: ?T;\n\n  return () => {\n    if (cachedValue == null) {\n      accessedFeatureFlags.add(configName);\n      cachedValue = customValueGetter() ?? defaultValue;\n    }\n    return cachedValue;\n  };\n}\n\nexport function createJavaScriptFlagGetter<\n  K: $Keys<ReactNativeFeatureFlagsJsOnly>,\n>(\n  configName: K,\n  defaultValue: ReturnType<ReactNativeFeatureFlagsJsOnly[K]>,\n): Getter<ReturnType<ReactNativeFeatureFlagsJsOnly[K]>> {\n  return createGetter(\n    configName,\n    () => overrides?.[configName]?.(),\n    defaultValue,\n  );\n}\n\ntype NativeFeatureFlags = $NonMaybeType<typeof NativeReactNativeFeatureFlags>;\n\nexport function createNativeFlagGetter<K: $Keys<NativeFeatureFlags>>(\n  configName: K,\n  defaultValue: ReturnType<$NonMaybeType<NativeFeatureFlags[K]>>,\n): Getter<ReturnType<$NonMaybeType<NativeFeatureFlags[K]>>> {\n  return createGetter(\n    configName,\n    () => NativeReactNativeFeatureFlags?.[configName]?.(),\n    defaultValue,\n  );\n}\n\nexport function getOverrides(): ?ReactNativeFeatureFlagsJsOnlyOverrides {\n  return overrides;\n}\n\nexport function setOverrides(\n  newOverrides: ReactNativeFeatureFlagsJsOnlyOverrides,\n): void {\n  if (overrides != null) {\n    throw new Error('Feature flags cannot be overridden more than once');\n  }\n\n  if (accessedFeatureFlags.size > 0) {\n    const accessedFeatureFlagsStr = Array.from(accessedFeatureFlags).join(', ');\n    throw new Error(\n      `Feature flags were accessed before being overridden: ${accessedFeatureFlagsStr}`,\n    );\n  }\n\n  overrides = newOverrides;\n}\n"],"mappings":";;;;;;;;AAeA,IAAAA,8BAAA,GAAAC,sBAAA,CAAAC,OAAA;AAEA,IAAMC,oBAAiC,GAAG,IAAIC,GAAG,CAAC,CAAC;AACnD,IAAIC,SAAkD;AAItD,SAASC,YAAYA,CACnBC,UAAkB,EAClBC,iBAA6B,EAC7BC,YAAe,EACJ;EACX,IAAIC,WAAe;EAEnB,OAAO,YAAM;IACX,IAAIA,WAAW,IAAI,IAAI,EAAE;MAAA,IAAAC,kBAAA;MACvBR,oBAAoB,CAACS,GAAG,CAACL,UAAU,CAAC;MACpCG,WAAW,IAAAC,kBAAA,GAAGH,iBAAiB,CAAC,CAAC,YAAAG,kBAAA,GAAIF,YAAY;IACnD;IACA,OAAOC,WAAW;EACpB,CAAC;AACH;AAEO,SAASG,0BAA0BA,CAGxCN,UAAa,EACbE,YAA0D,EACJ;EACtD,OAAOH,YAAY,CACjBC,UAAU,EACV;IAAA,IAAAO,UAAA,EAAAC,qBAAA;IAAA,QAAAD,UAAA,GAAMT,SAAS,sBAAAU,qBAAA,GAATD,UAAA,CAAYP,UAAU,CAAC,qBAAvBQ,qBAAA,CAAAC,IAAA,CAAAF,UAA0B,CAAC;EAAA,GACjCL,YACF,CAAC;AACH;AAIO,SAASQ,sBAAsBA,CACpCV,UAAa,EACbE,YAA8D,EACJ;EAC1D,OAAOH,YAAY,CACjBC,UAAU,EACV;IAAA,IAAAW,qBAAA;IAAA,OAAMC,sCAA6B,qBAAAD,qBAAA,GAA7BC,sCAA6B,CAAGZ,UAAU,CAAC,qBAA3CW,qBAAA,CAAAF,IAAA,CAAAG,sCAA8C,CAAC;EAAA,GACrDV,YACF,CAAC;AACH;AAEO,SAASW,YAAYA,CAAA,EAA4C;EACtE,OAAOf,SAAS;AAClB;AAEO,SAASgB,YAAYA,CAC1BC,YAAoD,EAC9C;EACN,IAAIjB,SAAS,IAAI,IAAI,EAAE;IACrB,MAAM,IAAIkB,KAAK,CAAC,mDAAmD,CAAC;EACtE;EAEA,IAAIpB,oBAAoB,CAACqB,IAAI,GAAG,CAAC,EAAE;IACjC,IAAMC,uBAAuB,GAAGC,KAAK,CAACC,IAAI,CAACxB,oBAAoB,CAAC,CAACyB,IAAI,CAAC,IAAI,CAAC;IAC3E,MAAM,IAAIL,KAAK,CACZ,wDAAuDE,uBAAwB,EAClF,CAAC;EACH;EAEApB,SAAS,GAAGiB,YAAY;AAC1B","ignoreList":[]}