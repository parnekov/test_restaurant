afbdcf721cf6d5132d36ec9eed2f1e94
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createJavaScriptFlagGetter = createJavaScriptFlagGetter;
exports.createNativeFlagGetter = createNativeFlagGetter;
exports.getOverrides = getOverrides;
exports.setOverrides = setOverrides;
var _NativeReactNativeFeatureFlags = _interopRequireDefault(require("./NativeReactNativeFeatureFlags"));
var accessedFeatureFlags = new Set();
var overrides;
function createGetter(configName, customValueGetter, defaultValue) {
  var cachedValue;
  return function () {
    if (cachedValue == null) {
      var _customValueGetter;
      accessedFeatureFlags.add(configName);
      cachedValue = (_customValueGetter = customValueGetter()) != null ? _customValueGetter : defaultValue;
    }
    return cachedValue;
  };
}
function createJavaScriptFlagGetter(configName, defaultValue) {
  return createGetter(configName, function () {
    var _overrides, _overrides$configName;
    return (_overrides = overrides) == null ? void 0 : (_overrides$configName = _overrides[configName]) == null ? void 0 : _overrides$configName.call(_overrides);
  }, defaultValue);
}
function createNativeFlagGetter(configName, defaultValue) {
  return createGetter(configName, function () {
    var _NativeReactNativeFea;
    return _NativeReactNativeFeatureFlags.default == null ? void 0 : (_NativeReactNativeFea = _NativeReactNativeFeatureFlags.default[configName]) == null ? void 0 : _NativeReactNativeFea.call(_NativeReactNativeFeatureFlags.default);
  }, defaultValue);
}
function getOverrides() {
  return overrides;
}
function setOverrides(newOverrides) {
  if (overrides != null) {
    throw new Error('Feature flags cannot be overridden more than once');
  }
  if (accessedFeatureFlags.size > 0) {
    var accessedFeatureFlagsStr = Array.from(accessedFeatureFlags).join(', ');
    throw new Error(`Feature flags were accessed before being overridden: ${accessedFeatureFlagsStr}`);
  }
  overrides = newOverrides;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfTmF0aXZlUmVhY3ROYXRpdmVGZWF0dXJlRmxhZ3MiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsImFjY2Vzc2VkRmVhdHVyZUZsYWdzIiwiU2V0Iiwib3ZlcnJpZGVzIiwiY3JlYXRlR2V0dGVyIiwiY29uZmlnTmFtZSIsImN1c3RvbVZhbHVlR2V0dGVyIiwiZGVmYXVsdFZhbHVlIiwiY2FjaGVkVmFsdWUiLCJfY3VzdG9tVmFsdWVHZXR0ZXIiLCJhZGQiLCJjcmVhdGVKYXZhU2NyaXB0RmxhZ0dldHRlciIsIl9vdmVycmlkZXMiLCJfb3ZlcnJpZGVzJGNvbmZpZ05hbWUiLCJjYWxsIiwiY3JlYXRlTmF0aXZlRmxhZ0dldHRlciIsIl9OYXRpdmVSZWFjdE5hdGl2ZUZlYSIsIk5hdGl2ZVJlYWN0TmF0aXZlRmVhdHVyZUZsYWdzIiwiZ2V0T3ZlcnJpZGVzIiwic2V0T3ZlcnJpZGVzIiwibmV3T3ZlcnJpZGVzIiwiRXJyb3IiLCJzaXplIiwiYWNjZXNzZWRGZWF0dXJlRmxhZ3NTdHIiLCJBcnJheSIsImZyb20iLCJqb2luIl0sInNvdXJjZXMiOlsiUmVhY3ROYXRpdmVGZWF0dXJlRmxhZ3NCYXNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQgdHlwZSB7XG4gIFJlYWN0TmF0aXZlRmVhdHVyZUZsYWdzSnNPbmx5LFxuICBSZWFjdE5hdGl2ZUZlYXR1cmVGbGFnc0pzT25seU92ZXJyaWRlcyxcbn0gZnJvbSAnLi9SZWFjdE5hdGl2ZUZlYXR1cmVGbGFncyc7XG5cbmltcG9ydCBOYXRpdmVSZWFjdE5hdGl2ZUZlYXR1cmVGbGFncyBmcm9tICcuL05hdGl2ZVJlYWN0TmF0aXZlRmVhdHVyZUZsYWdzJztcblxuY29uc3QgYWNjZXNzZWRGZWF0dXJlRmxhZ3M6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpO1xubGV0IG92ZXJyaWRlczogP1JlYWN0TmF0aXZlRmVhdHVyZUZsYWdzSnNPbmx5T3ZlcnJpZGVzO1xuXG5leHBvcnQgdHlwZSBHZXR0ZXI8VD4gPSAoKSA9PiBUO1xuXG5mdW5jdGlvbiBjcmVhdGVHZXR0ZXI8VDogYm9vbGVhbiB8IG51bWJlciB8IHN0cmluZz4oXG4gIGNvbmZpZ05hbWU6IHN0cmluZyxcbiAgY3VzdG9tVmFsdWVHZXR0ZXI6IEdldHRlcjw/VD4sXG4gIGRlZmF1bHRWYWx1ZTogVCxcbik6IEdldHRlcjxUPiB7XG4gIGxldCBjYWNoZWRWYWx1ZTogP1Q7XG5cbiAgcmV0dXJuICgpID0+IHtcbiAgICBpZiAoY2FjaGVkVmFsdWUgPT0gbnVsbCkge1xuICAgICAgYWNjZXNzZWRGZWF0dXJlRmxhZ3MuYWRkKGNvbmZpZ05hbWUpO1xuICAgICAgY2FjaGVkVmFsdWUgPSBjdXN0b21WYWx1ZUdldHRlcigpID8/IGRlZmF1bHRWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlZFZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSmF2YVNjcmlwdEZsYWdHZXR0ZXI8XG4gIEs6ICRLZXlzPFJlYWN0TmF0aXZlRmVhdHVyZUZsYWdzSnNPbmx5Pixcbj4oXG4gIGNvbmZpZ05hbWU6IEssXG4gIGRlZmF1bHRWYWx1ZTogUmV0dXJuVHlwZTxSZWFjdE5hdGl2ZUZlYXR1cmVGbGFnc0pzT25seVtLXT4sXG4pOiBHZXR0ZXI8UmV0dXJuVHlwZTxSZWFjdE5hdGl2ZUZlYXR1cmVGbGFnc0pzT25seVtLXT4+IHtcbiAgcmV0dXJuIGNyZWF0ZUdldHRlcihcbiAgICBjb25maWdOYW1lLFxuICAgICgpID0+IG92ZXJyaWRlcz8uW2NvbmZpZ05hbWVdPy4oKSxcbiAgICBkZWZhdWx0VmFsdWUsXG4gICk7XG59XG5cbnR5cGUgTmF0aXZlRmVhdHVyZUZsYWdzID0gJE5vbk1heWJlVHlwZTx0eXBlb2YgTmF0aXZlUmVhY3ROYXRpdmVGZWF0dXJlRmxhZ3M+O1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTmF0aXZlRmxhZ0dldHRlcjxLOiAkS2V5czxOYXRpdmVGZWF0dXJlRmxhZ3M+PihcbiAgY29uZmlnTmFtZTogSyxcbiAgZGVmYXVsdFZhbHVlOiBSZXR1cm5UeXBlPCROb25NYXliZVR5cGU8TmF0aXZlRmVhdHVyZUZsYWdzW0tdPj4sXG4pOiBHZXR0ZXI8UmV0dXJuVHlwZTwkTm9uTWF5YmVUeXBlPE5hdGl2ZUZlYXR1cmVGbGFnc1tLXT4+PiB7XG4gIHJldHVybiBjcmVhdGVHZXR0ZXIoXG4gICAgY29uZmlnTmFtZSxcbiAgICAoKSA9PiBOYXRpdmVSZWFjdE5hdGl2ZUZlYXR1cmVGbGFncz8uW2NvbmZpZ05hbWVdPy4oKSxcbiAgICBkZWZhdWx0VmFsdWUsXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRPdmVycmlkZXMoKTogP1JlYWN0TmF0aXZlRmVhdHVyZUZsYWdzSnNPbmx5T3ZlcnJpZGVzIHtcbiAgcmV0dXJuIG92ZXJyaWRlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldE92ZXJyaWRlcyhcbiAgbmV3T3ZlcnJpZGVzOiBSZWFjdE5hdGl2ZUZlYXR1cmVGbGFnc0pzT25seU92ZXJyaWRlcyxcbik6IHZvaWQge1xuICBpZiAob3ZlcnJpZGVzICE9IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZlYXR1cmUgZmxhZ3MgY2Fubm90IGJlIG92ZXJyaWRkZW4gbW9yZSB0aGFuIG9uY2UnKTtcbiAgfVxuXG4gIGlmIChhY2Nlc3NlZEZlYXR1cmVGbGFncy5zaXplID4gMCkge1xuICAgIGNvbnN0IGFjY2Vzc2VkRmVhdHVyZUZsYWdzU3RyID0gQXJyYXkuZnJvbShhY2Nlc3NlZEZlYXR1cmVGbGFncykuam9pbignLCAnKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgRmVhdHVyZSBmbGFncyB3ZXJlIGFjY2Vzc2VkIGJlZm9yZSBiZWluZyBvdmVycmlkZGVuOiAke2FjY2Vzc2VkRmVhdHVyZUZsYWdzU3RyfWAsXG4gICAgKTtcbiAgfVxuXG4gIG92ZXJyaWRlcyA9IG5ld092ZXJyaWRlcztcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFlQSxJQUFBQSw4QkFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBTUMsb0JBQWlDLEdBQUcsSUFBSUMsR0FBRyxDQUFDLENBQUM7QUFDbkQsSUFBSUMsU0FBa0Q7QUFJdEQsU0FBU0MsWUFBWUEsQ0FDbkJDLFVBQWtCLEVBQ2xCQyxpQkFBNkIsRUFDN0JDLFlBQWUsRUFDSjtFQUNYLElBQUlDLFdBQWU7RUFFbkIsT0FBTyxZQUFNO0lBQ1gsSUFBSUEsV0FBVyxJQUFJLElBQUksRUFBRTtNQUFBLElBQUFDLGtCQUFBO01BQ3ZCUixvQkFBb0IsQ0FBQ1MsR0FBRyxDQUFDTCxVQUFVLENBQUM7TUFDcENHLFdBQVcsSUFBQUMsa0JBQUEsR0FBR0gsaUJBQWlCLENBQUMsQ0FBQyxZQUFBRyxrQkFBQSxHQUFJRixZQUFZO0lBQ25EO0lBQ0EsT0FBT0MsV0FBVztFQUNwQixDQUFDO0FBQ0g7QUFFTyxTQUFTRywwQkFBMEJBLENBR3hDTixVQUFhLEVBQ2JFLFlBQTBELEVBQ0o7RUFDdEQsT0FBT0gsWUFBWSxDQUNqQkMsVUFBVSxFQUNWO0lBQUEsSUFBQU8sVUFBQSxFQUFBQyxxQkFBQTtJQUFBLFFBQUFELFVBQUEsR0FBTVQsU0FBUyxzQkFBQVUscUJBQUEsR0FBVEQsVUFBQSxDQUFZUCxVQUFVLENBQUMscUJBQXZCUSxxQkFBQSxDQUFBQyxJQUFBLENBQUFGLFVBQTBCLENBQUM7RUFBQSxHQUNqQ0wsWUFDRixDQUFDO0FBQ0g7QUFJTyxTQUFTUSxzQkFBc0JBLENBQ3BDVixVQUFhLEVBQ2JFLFlBQThELEVBQ0o7RUFDMUQsT0FBT0gsWUFBWSxDQUNqQkMsVUFBVSxFQUNWO0lBQUEsSUFBQVcscUJBQUE7SUFBQSxPQUFNQyxzQ0FBNkIscUJBQUFELHFCQUFBLEdBQTdCQyxzQ0FBNkIsQ0FBR1osVUFBVSxDQUFDLHFCQUEzQ1cscUJBQUEsQ0FBQUYsSUFBQSxDQUFBRyxzQ0FBOEMsQ0FBQztFQUFBLEdBQ3JEVixZQUNGLENBQUM7QUFDSDtBQUVPLFNBQVNXLFlBQVlBLENBQUEsRUFBNEM7RUFDdEUsT0FBT2YsU0FBUztBQUNsQjtBQUVPLFNBQVNnQixZQUFZQSxDQUMxQkMsWUFBb0QsRUFDOUM7RUFDTixJQUFJakIsU0FBUyxJQUFJLElBQUksRUFBRTtJQUNyQixNQUFNLElBQUlrQixLQUFLLENBQUMsbURBQW1ELENBQUM7RUFDdEU7RUFFQSxJQUFJcEIsb0JBQW9CLENBQUNxQixJQUFJLEdBQUcsQ0FBQyxFQUFFO0lBQ2pDLElBQU1DLHVCQUF1QixHQUFHQyxLQUFLLENBQUNDLElBQUksQ0FBQ3hCLG9CQUFvQixDQUFDLENBQUN5QixJQUFJLENBQUMsSUFBSSxDQUFDO0lBQzNFLE1BQU0sSUFBSUwsS0FBSyxDQUNaLHdEQUF1REUsdUJBQXdCLEVBQ2xGLENBQUM7RUFDSDtFQUVBcEIsU0FBUyxHQUFHaUIsWUFBWTtBQUMxQiIsImlnbm9yZUxpc3QiOltdfQ==