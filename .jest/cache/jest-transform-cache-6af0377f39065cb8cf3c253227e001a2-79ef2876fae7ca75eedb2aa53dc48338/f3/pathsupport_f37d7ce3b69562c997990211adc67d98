34b83dc89f7b984ee8d3bb7e096a1741
'use strict';

var androidScaleSuffix = {
  '0.75': 'ldpi',
  '1': 'mdpi',
  '1.5': 'hdpi',
  '2': 'xhdpi',
  '3': 'xxhdpi',
  '4': 'xxxhdpi'
};
var ANDROID_BASE_DENSITY = 160;
function getAndroidAssetSuffix(scale) {
  if (scale.toString() in androidScaleSuffix) {
    return androidScaleSuffix[scale.toString()];
  }
  if (Number.isFinite(scale) && scale > 0) {
    return Math.round(scale * ANDROID_BASE_DENSITY) + 'dpi';
  }
  throw new Error('no such scale ' + scale.toString());
}
var drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'ktx', 'png', 'svg', 'webp', 'xml']);
function getAndroidResourceFolderName(asset, scale) {
  if (!drawableFileTypes.has(asset.type)) {
    return 'raw';
  }
  var suffix = getAndroidAssetSuffix(scale);
  if (!suffix) {
    throw new Error("Don't know which android drawable suffix to use for scale: " + scale + '\nAsset: ' + JSON.stringify(asset, null, '\t') + '\nPossible scales are:' + JSON.stringify(androidScaleSuffix, null, '\t'));
  }
  return 'drawable-' + suffix;
}
function getAndroidResourceIdentifier(asset) {
  return (getBasePath(asset) + '/' + asset.name).toLowerCase().replace(/\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');
}
function getBasePath(asset) {
  var basePath = asset.httpServerLocation;
  return basePath.startsWith('/') ? basePath.slice(1) : basePath;
}
module.exports = {
  getAndroidResourceFolderName: getAndroidResourceFolderName,
  getAndroidResourceIdentifier: getAndroidResourceIdentifier,
  getBasePath: getBasePath
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhbmRyb2lkU2NhbGVTdWZmaXgiLCJBTkRST0lEX0JBU0VfREVOU0lUWSIsImdldEFuZHJvaWRBc3NldFN1ZmZpeCIsInNjYWxlIiwidG9TdHJpbmciLCJOdW1iZXIiLCJpc0Zpbml0ZSIsIk1hdGgiLCJyb3VuZCIsIkVycm9yIiwiZHJhd2FibGVGaWxlVHlwZXMiLCJTZXQiLCJnZXRBbmRyb2lkUmVzb3VyY2VGb2xkZXJOYW1lIiwiYXNzZXQiLCJoYXMiLCJ0eXBlIiwic3VmZml4IiwiSlNPTiIsInN0cmluZ2lmeSIsImdldEFuZHJvaWRSZXNvdXJjZUlkZW50aWZpZXIiLCJnZXRCYXNlUGF0aCIsIm5hbWUiLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCJiYXNlUGF0aCIsImh0dHBTZXJ2ZXJMb2NhdGlvbiIsInN0YXJ0c1dpdGgiLCJzbGljZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJwYXRoLXN1cHBvcnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHR5cGUge1BhY2thZ2VyQXNzZXR9IGZyb20gJy4vcmVnaXN0cnkuanMnO1xuXG5jb25zdCBhbmRyb2lkU2NhbGVTdWZmaXggPSB7XG4gICcwLjc1JzogJ2xkcGknLFxuICAnMSc6ICdtZHBpJyxcbiAgJzEuNSc6ICdoZHBpJyxcbiAgJzInOiAneGhkcGknLFxuICAnMyc6ICd4eGhkcGknLFxuICAnNCc6ICd4eHhoZHBpJyxcbn07XG5cbmNvbnN0IEFORFJPSURfQkFTRV9ERU5TSVRZID0gMTYwO1xuXG4vKipcbiAqIEZJWE1FOiB1c2luZyBudW1iZXIgdG8gcmVwcmVzZW50IGRpc2NyZXRlIHNjYWxlIG51bWJlcnMgaXMgZnJhZ2lsZSBpbiBlc3NlbmNlIGJlY2F1c2Ugb2ZcbiAqIGZsb2F0aW5nIHBvaW50IG51bWJlcnMgaW1wcmVjaXNpb24uXG4gKi9cbmZ1bmN0aW9uIGdldEFuZHJvaWRBc3NldFN1ZmZpeChzY2FsZTogbnVtYmVyKTogc3RyaW5nIHtcbiAgaWYgKHNjYWxlLnRvU3RyaW5nKCkgaW4gYW5kcm9pZFNjYWxlU3VmZml4KSB7XG4gICAgcmV0dXJuIGFuZHJvaWRTY2FsZVN1ZmZpeFtzY2FsZS50b1N0cmluZygpXTtcbiAgfVxuICAvLyBOT1RFOiBBbmRyb2lkIEdyYWRsZSBQbHVnaW4gZG9lcyBub3QgZnVsbHkgc3VwcG9ydCB0aGUgbm5uZHBpIGZvcm1hdC5cbiAgLy8gU2VlIGh0dHBzOi8vaXNzdWV0cmFja2VyLmdvb2dsZS5jb20vaXNzdWVzLzcyODg0NDM1XG4gIGlmIChOdW1iZXIuaXNGaW5pdGUoc2NhbGUpICYmIHNjYWxlID4gMCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKHNjYWxlICogQU5EUk9JRF9CQVNFX0RFTlNJVFkpICsgJ2RwaSc7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdubyBzdWNoIHNjYWxlICcgKyBzY2FsZS50b1N0cmluZygpKTtcbn1cblxuLy8gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmFuZHJvaWQuY29tL2d1aWRlL3RvcGljcy9yZXNvdXJjZXMvZHJhd2FibGUtcmVzb3VyY2UuaHRtbFxuY29uc3QgZHJhd2FibGVGaWxlVHlwZXMgPSBuZXcgU2V0KFtcbiAgJ2dpZicsXG4gICdqcGVnJyxcbiAgJ2pwZycsXG4gICdrdHgnLFxuICAncG5nJyxcbiAgJ3N2ZycsXG4gICd3ZWJwJyxcbiAgJ3htbCcsXG5dKTtcblxuZnVuY3Rpb24gZ2V0QW5kcm9pZFJlc291cmNlRm9sZGVyTmFtZShcbiAgYXNzZXQ6IFBhY2thZ2VyQXNzZXQsXG4gIHNjYWxlOiBudW1iZXIsXG4pOiBzdHJpbmcgfCAkVEVNUE9SQVJZJHN0cmluZzwncmF3Jz4ge1xuICBpZiAoIWRyYXdhYmxlRmlsZVR5cGVzLmhhcyhhc3NldC50eXBlKSkge1xuICAgIHJldHVybiAncmF3JztcbiAgfVxuICBjb25zdCBzdWZmaXggPSBnZXRBbmRyb2lkQXNzZXRTdWZmaXgoc2NhbGUpO1xuICBpZiAoIXN1ZmZpeCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiRG9uJ3Qga25vdyB3aGljaCBhbmRyb2lkIGRyYXdhYmxlIHN1ZmZpeCB0byB1c2UgZm9yIHNjYWxlOiBcIiArXG4gICAgICAgIHNjYWxlICtcbiAgICAgICAgJ1xcbkFzc2V0OiAnICtcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoYXNzZXQsIG51bGwsICdcXHQnKSArXG4gICAgICAgICdcXG5Qb3NzaWJsZSBzY2FsZXMgYXJlOicgK1xuICAgICAgICBKU09OLnN0cmluZ2lmeShhbmRyb2lkU2NhbGVTdWZmaXgsIG51bGwsICdcXHQnKSxcbiAgICApO1xuICB9XG4gIHJldHVybiAnZHJhd2FibGUtJyArIHN1ZmZpeDtcbn1cblxuZnVuY3Rpb24gZ2V0QW5kcm9pZFJlc291cmNlSWRlbnRpZmllcihhc3NldDogUGFja2FnZXJBc3NldCk6IHN0cmluZyB7XG4gIHJldHVybiAoZ2V0QmFzZVBhdGgoYXNzZXQpICsgJy8nICsgYXNzZXQubmFtZSlcbiAgICAudG9Mb3dlckNhc2UoKVxuICAgIC5yZXBsYWNlKC9cXC8vZywgJ18nKSAvLyBFbmNvZGUgZm9sZGVyIHN0cnVjdHVyZSBpbiBmaWxlIG5hbWVcbiAgICAucmVwbGFjZSgvKFteYS16MC05X10pL2csICcnKSAvLyBSZW1vdmUgaWxsZWdhbCBjaGFyc1xuICAgIC5yZXBsYWNlKC9eYXNzZXRzXy8sICcnKTsgLy8gUmVtb3ZlIFwiYXNzZXRzX1wiIHByZWZpeFxufVxuXG5mdW5jdGlvbiBnZXRCYXNlUGF0aChhc3NldDogUGFja2FnZXJBc3NldCk6IHN0cmluZyB7XG4gIGNvbnN0IGJhc2VQYXRoID0gYXNzZXQuaHR0cFNlcnZlckxvY2F0aW9uO1xuICByZXR1cm4gYmFzZVBhdGguc3RhcnRzV2l0aCgnLycpID8gYmFzZVBhdGguc2xpY2UoMSkgOiBiYXNlUGF0aDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldEFuZHJvaWRSZXNvdXJjZUZvbGRlck5hbWUsXG4gIGdldEFuZHJvaWRSZXNvdXJjZUlkZW50aWZpZXIsXG4gIGdldEJhc2VQYXRoLFxufTtcbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTs7QUFJWixJQUFNQSxrQkFBa0IsR0FBRztFQUN6QixNQUFNLEVBQUUsTUFBTTtFQUNkLEdBQUcsRUFBRSxNQUFNO0VBQ1gsS0FBSyxFQUFFLE1BQU07RUFDYixHQUFHLEVBQUUsT0FBTztFQUNaLEdBQUcsRUFBRSxRQUFRO0VBQ2IsR0FBRyxFQUFFO0FBQ1AsQ0FBQztBQUVELElBQU1DLG9CQUFvQixHQUFHLEdBQUc7QUFNaEMsU0FBU0MscUJBQXFCQSxDQUFDQyxLQUFhLEVBQVU7RUFDcEQsSUFBSUEsS0FBSyxDQUFDQyxRQUFRLENBQUMsQ0FBQyxJQUFJSixrQkFBa0IsRUFBRTtJQUMxQyxPQUFPQSxrQkFBa0IsQ0FBQ0csS0FBSyxDQUFDQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0VBQzdDO0VBR0EsSUFBSUMsTUFBTSxDQUFDQyxRQUFRLENBQUNILEtBQUssQ0FBQyxJQUFJQSxLQUFLLEdBQUcsQ0FBQyxFQUFFO0lBQ3ZDLE9BQU9JLElBQUksQ0FBQ0MsS0FBSyxDQUFDTCxLQUFLLEdBQUdGLG9CQUFvQixDQUFDLEdBQUcsS0FBSztFQUN6RDtFQUNBLE1BQU0sSUFBSVEsS0FBSyxDQUFDLGdCQUFnQixHQUFHTixLQUFLLENBQUNDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDdEQ7QUFHQSxJQUFNTSxpQkFBaUIsR0FBRyxJQUFJQyxHQUFHLENBQUMsQ0FDaEMsS0FBSyxFQUNMLE1BQU0sRUFDTixLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0wsTUFBTSxFQUNOLEtBQUssQ0FDTixDQUFDO0FBRUYsU0FBU0MsNEJBQTRCQSxDQUNuQ0MsS0FBb0IsRUFDcEJWLEtBQWEsRUFDc0I7RUFDbkMsSUFBSSxDQUFDTyxpQkFBaUIsQ0FBQ0ksR0FBRyxDQUFDRCxLQUFLLENBQUNFLElBQUksQ0FBQyxFQUFFO0lBQ3RDLE9BQU8sS0FBSztFQUNkO0VBQ0EsSUFBTUMsTUFBTSxHQUFHZCxxQkFBcUIsQ0FBQ0MsS0FBSyxDQUFDO0VBQzNDLElBQUksQ0FBQ2EsTUFBTSxFQUFFO0lBQ1gsTUFBTSxJQUFJUCxLQUFLLENBQ2IsNkRBQTZELEdBQzNETixLQUFLLEdBQ0wsV0FBVyxHQUNYYyxJQUFJLENBQUNDLFNBQVMsQ0FBQ0wsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsR0FDakMsd0JBQXdCLEdBQ3hCSSxJQUFJLENBQUNDLFNBQVMsQ0FBQ2xCLGtCQUFrQixFQUFFLElBQUksRUFBRSxJQUFJLENBQ2pELENBQUM7RUFDSDtFQUNBLE9BQU8sV0FBVyxHQUFHZ0IsTUFBTTtBQUM3QjtBQUVBLFNBQVNHLDRCQUE0QkEsQ0FBQ04sS0FBb0IsRUFBVTtFQUNsRSxPQUFPLENBQUNPLFdBQVcsQ0FBQ1AsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHQSxLQUFLLENBQUNRLElBQUksRUFDMUNDLFdBQVcsQ0FBQyxDQUFDLENBQ2JDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQ25CQSxPQUFPLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FBQyxDQUM1QkEsT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUM7QUFDNUI7QUFFQSxTQUFTSCxXQUFXQSxDQUFDUCxLQUFvQixFQUFVO0VBQ2pELElBQU1XLFFBQVEsR0FBR1gsS0FBSyxDQUFDWSxrQkFBa0I7RUFDekMsT0FBT0QsUUFBUSxDQUFDRSxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUdGLFFBQVEsQ0FBQ0csS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHSCxRQUFRO0FBQ2hFO0FBRUFJLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZqQiw0QkFBNEIsRUFBNUJBLDRCQUE0QjtFQUM1Qk8sNEJBQTRCLEVBQTVCQSw0QkFBNEI7RUFDNUJDLFdBQVcsRUFBWEE7QUFDRixDQUFDIiwiaWdub3JlTGlzdCI6W119