54188e1c42a0065256a7e0e89ac711bf
_getJestObj().mock('@react-navigation/native', function () {
  var actualNav = jest.requireActual('@react-navigation/native');
  return Object.assign({}, actualNav, {
    useNavigation: function useNavigation() {
      return {
        setOptions: jest.fn()
      };
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactRedux = require("react-redux");
var _store = require("../src/store/store");
var _native = require("@react-navigation/native");
var _MyOrder = _interopRequireDefault(require("../src/screens/MyOrder"));
var _routes = require("../src/navigation/routes");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var testID = _routes.SCREEN_NAMES.MY_ORDER;
var ComponentToRender = (0, _jsxRuntime.jsx)(_reactRedux.Provider, {
  store: _store.store,
  children: (0, _jsxRuntime.jsx)(_native.NavigationContainer, {
    children: (0, _jsxRuntime.jsx)(_MyOrder.default, {})
  })
});
describe('MyOrder screen tests', function () {
  it('MyOrder renders correctly', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)(ComponentToRender),
      queryByTestId = _render.queryByTestId;
    expect(queryByTestId(`${testID}-container`)).toBeTruthy();
    expect(queryByTestId(`${testID}-list`)).toBeTruthy();
    expect(queryByTestId(`${testID}-list-header-checkbox`)).toBeTruthy();
    expect(queryByTestId(`${testID}-pay-button`)).toBeTruthy();
  }));
  it('MyOrder matches snapshot', function () {
    var component = (0, _reactNative.render)(ComponentToRender).toJSON();
    expect(component).toMatchSnapshot();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJhY3R1YWxOYXYiLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsIk9iamVjdCIsImFzc2lnbiIsInVzZU5hdmlnYXRpb24iLCJzZXRPcHRpb25zIiwiZm4iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdFJlZHV4IiwiX3N0b3JlIiwiX25hdGl2ZSIsIl9NeU9yZGVyIiwiX3JvdXRlcyIsIl9qc3hSdW50aW1lIiwiX3JlcXVpcmUiLCJ0ZXN0SUQiLCJTQ1JFRU5fTkFNRVMiLCJNWV9PUkRFUiIsIkNvbXBvbmVudFRvUmVuZGVyIiwianN4IiwiUHJvdmlkZXIiLCJzdG9yZSIsImNoaWxkcmVuIiwiTmF2aWdhdGlvbkNvbnRhaW5lciIsImRlZmF1bHQiLCJkZXNjcmliZSIsIml0IiwiX3JlbmRlciIsInJlbmRlciIsInF1ZXJ5QnlUZXN0SWQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiY29tcG9uZW50IiwidG9KU09OIiwidG9NYXRjaFNuYXBzaG90Il0sInNvdXJjZXMiOlsiTXlPcmRlci50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBSRUFDVCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8qIE1PRFVMRVMgKi9cbmltcG9ydCB7UmVhY3RUZXN0SW5zdGFuY2V9IGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInO1xuaW1wb3J0IHtyZW5kZXIsIGZpcmVFdmVudCwgd2FpdEZvcn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuLyogU1RPUkUgKi9cbmltcG9ydCB7UHJvdmlkZXJ9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7c3RvcmV9IGZyb20gJy4uL3NyYy9zdG9yZS9zdG9yZSc7XG4vKiBDT01QT05FTlRTICovXG5pbXBvcnQge05hdmlnYXRpb25Db250YWluZXJ9IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZSc7XG5pbXBvcnQgTXlPcmRlciBmcm9tICcuLi9zcmMvc2NyZWVucy9NeU9yZGVyJztcbi8qIENPTlNUQU5UUyAqL1xuaW1wb3J0IHtTQ1JFRU5fTkFNRVN9IGZyb20gJy4uL3NyYy9uYXZpZ2F0aW9uL3JvdXRlcyc7XG5cbmNvbnN0IHRlc3RJRCA9IFNDUkVFTl9OQU1FUy5NWV9PUkRFUjtcblxuamVzdC5tb2NrKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnLCAoKSA9PiB7XG4gIGNvbnN0IGFjdHVhbE5hdiA9IGplc3QucmVxdWlyZUFjdHVhbCgnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJyk7XG4gIHJldHVybiB7XG4gICAgLi4uYWN0dWFsTmF2LFxuICAgIHVzZU5hdmlnYXRpb246ICgpID0+ICh7XG4gICAgICBzZXRPcHRpb25zOiBqZXN0LmZuKCksXG4gICAgfSksXG4gIH07XG59KTtcblxuY29uc3QgQ29tcG9uZW50VG9SZW5kZXIgPSAoXG4gIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAgIDxOYXZpZ2F0aW9uQ29udGFpbmVyPlxuICAgICAgPE15T3JkZXIgLz5cbiAgICA8L05hdmlnYXRpb25Db250YWluZXI+XG4gIDwvUHJvdmlkZXI+XG4pO1xuXG5kZXNjcmliZSgnTXlPcmRlciBzY3JlZW4gdGVzdHMnLCAoKSA9PiB7XG4gIGl0KCdNeU9yZGVyIHJlbmRlcnMgY29ycmVjdGx5JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHtxdWVyeUJ5VGVzdElkfSA9IHJlbmRlcihDb21wb25lbnRUb1JlbmRlcik7XG5cbiAgICBleHBlY3QocXVlcnlCeVRlc3RJZChgJHt0ZXN0SUR9LWNvbnRhaW5lcmApKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXN0SWQoYCR7dGVzdElEfS1saXN0YCkpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QocXVlcnlCeVRlc3RJZChgJHt0ZXN0SUR9LWxpc3QtaGVhZGVyLWNoZWNrYm94YCkpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QocXVlcnlCeVRlc3RJZChgJHt0ZXN0SUR9LXBheS1idXR0b25gKSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBpdCgnTXlPcmRlciBtYXRjaGVzIHNuYXBzaG90JywgKCkgPT4ge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IHJlbmRlcihDb21wb25lbnRUb1JlbmRlcikudG9KU09OKCk7XG4gICAgZXhwZWN0KGNvbXBvbmVudCkudG9NYXRjaFNuYXBzaG90KCk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQWdCQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsWUFBTTtFQUMxQyxJQUFNQyxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLDBCQUEwQixDQUFDO0VBQ2hFLE9BQUFDLE1BQUEsQ0FBQUMsTUFBQSxLQUNLSixTQUFTO0lBQ1pLLGFBQWEsRUFBRSxTQUFBQSxjQUFBO01BQUEsT0FBTztRQUNwQkMsVUFBVSxFQUFFTCxJQUFJLENBQUNNLEVBQUUsQ0FBQztNQUN0QixDQUFDO0lBQUE7RUFBQztBQUVOLENBQUMsQ0FBQztBQUFDLElBQUFDLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxrQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBdkJILElBQUFFLE1BQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUdBLElBQUFHLFlBQUEsR0FBQUgsT0FBQTtBQUVBLElBQUFJLFdBQUEsR0FBQUosT0FBQTtBQUNBLElBQUFLLE1BQUEsR0FBQUwsT0FBQTtBQUVBLElBQUFNLE9BQUEsR0FBQU4sT0FBQTtBQUNBLElBQUFPLFFBQUEsR0FBQVIsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFRLE9BQUEsR0FBQVIsT0FBQTtBQUFzRCxJQUFBUyxXQUFBLEdBQUFULE9BQUE7QUFBQSxTQUFBWCxZQUFBO0VBQUEsSUFBQXFCLFFBQUEsR0FBQVYsT0FBQTtJQUFBUixJQUFBLEdBQUFrQixRQUFBLENBQUFsQixJQUFBO0VBQUFILFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFHLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQUV0RCxJQUFNbUIsTUFBTSxHQUFHQyxvQkFBWSxDQUFDQyxRQUFRO0FBWXBDLElBQU1DLGlCQUFpQixHQUNyQixJQUFBTCxXQUFBLENBQUFNLEdBQUEsRUFBQ1gsV0FBQSxDQUFBWSxRQUFRO0VBQUNDLEtBQUssRUFBRUEsWUFBTTtFQUFBQyxRQUFBLEVBQ3JCLElBQUFULFdBQUEsQ0FBQU0sR0FBQSxFQUFDVCxPQUFBLENBQUFhLG1CQUFtQjtJQUFBRCxRQUFBLEVBQ2xCLElBQUFULFdBQUEsQ0FBQU0sR0FBQSxFQUFDUixRQUFBLENBQUFhLE9BQU8sSUFBRTtFQUFDLENBQ1E7QUFBQyxDQUNkLENBQ1g7QUFFREMsUUFBUSxDQUFDLHNCQUFzQixFQUFFLFlBQU07RUFDckNDLEVBQUUsQ0FBQywyQkFBMkIsTUFBQXJCLGtCQUFBLENBQUFtQixPQUFBLEVBQUUsYUFBWTtJQUMxQyxJQUFBRyxPQUFBLEdBQXdCLElBQUFDLG1CQUFNLEVBQUNWLGlCQUFpQixDQUFDO01BQTFDVyxhQUFhLEdBQUFGLE9BQUEsQ0FBYkUsYUFBYTtJQUVwQkMsTUFBTSxDQUFDRCxhQUFhLENBQUUsR0FBRWQsTUFBTyxZQUFXLENBQUMsQ0FBQyxDQUFDZ0IsVUFBVSxDQUFDLENBQUM7SUFDekRELE1BQU0sQ0FBQ0QsYUFBYSxDQUFFLEdBQUVkLE1BQU8sT0FBTSxDQUFDLENBQUMsQ0FBQ2dCLFVBQVUsQ0FBQyxDQUFDO0lBQ3BERCxNQUFNLENBQUNELGFBQWEsQ0FBRSxHQUFFZCxNQUFPLHVCQUFzQixDQUFDLENBQUMsQ0FBQ2dCLFVBQVUsQ0FBQyxDQUFDO0lBQ3BFRCxNQUFNLENBQUNELGFBQWEsQ0FBRSxHQUFFZCxNQUFPLGFBQVksQ0FBQyxDQUFDLENBQUNnQixVQUFVLENBQUMsQ0FBQztFQUM1RCxDQUFDLEVBQUM7RUFFRkwsRUFBRSxDQUFDLDBCQUEwQixFQUFFLFlBQU07SUFDbkMsSUFBTU0sU0FBUyxHQUFHLElBQUFKLG1CQUFNLEVBQUNWLGlCQUFpQixDQUFDLENBQUNlLE1BQU0sQ0FBQyxDQUFDO0lBQ3BESCxNQUFNLENBQUNFLFNBQVMsQ0FBQyxDQUFDRSxlQUFlLENBQUMsQ0FBQztFQUNyQyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=