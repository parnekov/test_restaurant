{"version":3,"names":["Object","defineProperty","exports","value","diffStringsUnified","diffStringsRaw","_cleanupSemantic","require","_diffLines","_diffStrings","_interopRequireDefault","_getAlignedDiffs","_normalizeDiffOptions","obj","__esModule","default","hasCommonDiff","diffs","isMultiline","iLast","length","some","diff","i","DIFF_EQUAL","a","b","options","includes","optionsNormalized","normalizeDiffOptions","lines","changeColor","printDiffLines","diffLinesUnified","split","cleanup","cleanupSemantic"],"sources":["printDiffs.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.diffStringsUnified = exports.diffStringsRaw = void 0;\nvar _cleanupSemantic = require('./cleanupSemantic');\nvar _diffLines = require('./diffLines');\nvar _diffStrings = _interopRequireDefault(require('./diffStrings'));\nvar _getAlignedDiffs = _interopRequireDefault(require('./getAlignedDiffs'));\nvar _normalizeDiffOptions = require('./normalizeDiffOptions');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst hasCommonDiff = (diffs, isMultiline) => {\n  if (isMultiline) {\n    // Important: Ignore common newline that was appended to multiline strings!\n    const iLast = diffs.length - 1;\n    return diffs.some(\n      (diff, i) =>\n        diff[0] === _cleanupSemantic.DIFF_EQUAL &&\n        (i !== iLast || diff[1] !== '\\n')\n    );\n  }\n  return diffs.some(diff => diff[0] === _cleanupSemantic.DIFF_EQUAL);\n};\n\n// Compare two strings character-by-character.\n// Format as comparison lines in which changed substrings have inverse colors.\nconst diffStringsUnified = (a, b, options) => {\n  if (a !== b && a.length !== 0 && b.length !== 0) {\n    const isMultiline = a.includes('\\n') || b.includes('\\n');\n\n    // getAlignedDiffs assumes that a newline was appended to the strings.\n    const diffs = diffStringsRaw(\n      isMultiline ? `${a}\\n` : a,\n      isMultiline ? `${b}\\n` : b,\n      true // cleanupSemantic\n    );\n\n    if (hasCommonDiff(diffs, isMultiline)) {\n      const optionsNormalized = (0, _normalizeDiffOptions.normalizeDiffOptions)(\n        options\n      );\n      const lines = (0, _getAlignedDiffs.default)(\n        diffs,\n        optionsNormalized.changeColor\n      );\n      return (0, _diffLines.printDiffLines)(lines, optionsNormalized);\n    }\n  }\n\n  // Fall back to line-by-line diff.\n  return (0, _diffLines.diffLinesUnified)(\n    a.split('\\n'),\n    b.split('\\n'),\n    options\n  );\n};\n\n// Compare two strings character-by-character.\n// Optionally clean up small common substrings, also known as chaff.\nexports.diffStringsUnified = diffStringsUnified;\nconst diffStringsRaw = (a, b, cleanup) => {\n  const diffs = (0, _diffStrings.default)(a, b);\n  if (cleanup) {\n    (0, _cleanupSemantic.cleanupSemantic)(diffs); // impure function\n  }\n\n  return diffs;\n};\nexports.diffStringsRaw = diffStringsRaw;\n"],"mappings":"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","ignoreList":[]}