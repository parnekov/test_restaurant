a9d31ca2ca74cc42b1b3e41e4de10859
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindByDisplayValueQueries = void 0;
var _findAll = require("../helpers/find-all");
var _hostComponentNames = require("../helpers/host-component-names");
var _textInput = require("../helpers/text-input");
var _matches = require("../matches");
var _makeQueries = require("./make-queries");
var matchDisplayValue = function matchDisplayValue(node, expectedValue) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var exact = options.exact,
    normalizer = options.normalizer;
  var nodeValue = (0, _textInput.getTextInputValue)(node);
  return (0, _matches.matches)(expectedValue, nodeValue, normalizer, exact);
};
var queryAllByDisplayValue = function queryAllByDisplayValue(instance) {
  return function queryAllByDisplayValueFn(displayValue, queryOptions) {
    return (0, _findAll.findAll)(instance, function (node) {
      return (0, _hostComponentNames.isHostTextInput)(node) && matchDisplayValue(node, displayValue, queryOptions);
    }, queryOptions);
  };
};
var getMultipleError = function getMultipleError(displayValue) {
  return `Found multiple elements with display value: ${String(displayValue)} `;
};
var getMissingError = function getMissingError(displayValue) {
  return `Unable to find an element with displayValue: ${String(displayValue)}`;
};
var _ref = (0, _makeQueries.makeQueries)(queryAllByDisplayValue, getMissingError, getMultipleError),
  getBy = _ref.getBy,
  getAllBy = _ref.getAllBy,
  queryBy = _ref.queryBy,
  queryAllBy = _ref.queryAllBy,
  findBy = _ref.findBy,
  findAllBy = _ref.findAllBy;
var bindByDisplayValueQueries = function bindByDisplayValueQueries(instance) {
  return {
    getByDisplayValue: getBy(instance),
    getAllByDisplayValue: getAllBy(instance),
    queryByDisplayValue: queryBy(instance),
    queryAllByDisplayValue: queryAllBy(instance),
    findByDisplayValue: findBy(instance),
    findAllByDisplayValue: findAllBy(instance)
  };
};
exports.bindByDisplayValueQueries = bindByDisplayValueQueries;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZmluZEFsbCIsInJlcXVpcmUiLCJfaG9zdENvbXBvbmVudE5hbWVzIiwiX3RleHRJbnB1dCIsIl9tYXRjaGVzIiwiX21ha2VRdWVyaWVzIiwibWF0Y2hEaXNwbGF5VmFsdWUiLCJub2RlIiwiZXhwZWN0ZWRWYWx1ZSIsIm9wdGlvbnMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJleGFjdCIsIm5vcm1hbGl6ZXIiLCJub2RlVmFsdWUiLCJnZXRUZXh0SW5wdXRWYWx1ZSIsIm1hdGNoZXMiLCJxdWVyeUFsbEJ5RGlzcGxheVZhbHVlIiwiaW5zdGFuY2UiLCJxdWVyeUFsbEJ5RGlzcGxheVZhbHVlRm4iLCJkaXNwbGF5VmFsdWUiLCJxdWVyeU9wdGlvbnMiLCJmaW5kQWxsIiwiaXNIb3N0VGV4dElucHV0IiwiZ2V0TXVsdGlwbGVFcnJvciIsIlN0cmluZyIsImdldE1pc3NpbmdFcnJvciIsIl9yZWYiLCJtYWtlUXVlcmllcyIsImdldEJ5IiwiZ2V0QWxsQnkiLCJxdWVyeUJ5IiwicXVlcnlBbGxCeSIsImZpbmRCeSIsImZpbmRBbGxCeSIsImJpbmRCeURpc3BsYXlWYWx1ZVF1ZXJpZXMiLCJnZXRCeURpc3BsYXlWYWx1ZSIsImdldEFsbEJ5RGlzcGxheVZhbHVlIiwicXVlcnlCeURpc3BsYXlWYWx1ZSIsImZpbmRCeURpc3BsYXlWYWx1ZSIsImZpbmRBbGxCeURpc3BsYXlWYWx1ZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvcXVlcmllcy9kaXNwbGF5LXZhbHVlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUmVhY3RUZXN0SW5zdGFuY2UgfSBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcbmltcG9ydCB7IGZpbmRBbGwgfSBmcm9tICcuLi9oZWxwZXJzL2ZpbmQtYWxsJztcbmltcG9ydCB7IGlzSG9zdFRleHRJbnB1dCB9IGZyb20gJy4uL2hlbHBlcnMvaG9zdC1jb21wb25lbnQtbmFtZXMnO1xuaW1wb3J0IHsgZ2V0VGV4dElucHV0VmFsdWUgfSBmcm9tICcuLi9oZWxwZXJzL3RleHQtaW5wdXQnO1xuaW1wb3J0IHsgbWF0Y2hlcywgVGV4dE1hdGNoLCBUZXh0TWF0Y2hPcHRpb25zIH0gZnJvbSAnLi4vbWF0Y2hlcyc7XG5pbXBvcnQgeyBtYWtlUXVlcmllcyB9IGZyb20gJy4vbWFrZS1xdWVyaWVzJztcbmltcG9ydCB0eXBlIHtcbiAgRmluZEFsbEJ5UXVlcnksXG4gIEZpbmRCeVF1ZXJ5LFxuICBHZXRBbGxCeVF1ZXJ5LFxuICBHZXRCeVF1ZXJ5LFxuICBRdWVyeUFsbEJ5UXVlcnksXG4gIFF1ZXJ5QnlRdWVyeSxcbn0gZnJvbSAnLi9tYWtlLXF1ZXJpZXMnO1xuaW1wb3J0IHR5cGUgeyBDb21tb25RdWVyeU9wdGlvbnMgfSBmcm9tICcuL29wdGlvbnMnO1xuXG50eXBlIEJ5RGlzcGxheVZhbHVlT3B0aW9ucyA9IENvbW1vblF1ZXJ5T3B0aW9ucyAmIFRleHRNYXRjaE9wdGlvbnM7XG5cbmNvbnN0IG1hdGNoRGlzcGxheVZhbHVlID0gKFxuICBub2RlOiBSZWFjdFRlc3RJbnN0YW5jZSxcbiAgZXhwZWN0ZWRWYWx1ZTogVGV4dE1hdGNoLFxuICBvcHRpb25zOiBUZXh0TWF0Y2hPcHRpb25zID0ge30sXG4pID0+IHtcbiAgY29uc3QgeyBleGFjdCwgbm9ybWFsaXplciB9ID0gb3B0aW9ucztcbiAgY29uc3Qgbm9kZVZhbHVlID0gZ2V0VGV4dElucHV0VmFsdWUobm9kZSk7XG4gIHJldHVybiBtYXRjaGVzKGV4cGVjdGVkVmFsdWUsIG5vZGVWYWx1ZSwgbm9ybWFsaXplciwgZXhhY3QpO1xufTtcblxuY29uc3QgcXVlcnlBbGxCeURpc3BsYXlWYWx1ZSA9IChcbiAgaW5zdGFuY2U6IFJlYWN0VGVzdEluc3RhbmNlLFxuKTogUXVlcnlBbGxCeVF1ZXJ5PFRleHRNYXRjaCwgQnlEaXNwbGF5VmFsdWVPcHRpb25zPiA9PlxuICBmdW5jdGlvbiBxdWVyeUFsbEJ5RGlzcGxheVZhbHVlRm4oZGlzcGxheVZhbHVlLCBxdWVyeU9wdGlvbnMpIHtcbiAgICByZXR1cm4gZmluZEFsbChcbiAgICAgIGluc3RhbmNlLFxuICAgICAgKG5vZGUpID0+IGlzSG9zdFRleHRJbnB1dChub2RlKSAmJiBtYXRjaERpc3BsYXlWYWx1ZShub2RlLCBkaXNwbGF5VmFsdWUsIHF1ZXJ5T3B0aW9ucyksXG4gICAgICBxdWVyeU9wdGlvbnMsXG4gICAgKTtcbiAgfTtcblxuY29uc3QgZ2V0TXVsdGlwbGVFcnJvciA9IChkaXNwbGF5VmFsdWU6IFRleHRNYXRjaCkgPT5cbiAgYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIHdpdGggZGlzcGxheSB2YWx1ZTogJHtTdHJpbmcoZGlzcGxheVZhbHVlKX0gYDtcbmNvbnN0IGdldE1pc3NpbmdFcnJvciA9IChkaXNwbGF5VmFsdWU6IFRleHRNYXRjaCkgPT5cbiAgYFVuYWJsZSB0byBmaW5kIGFuIGVsZW1lbnQgd2l0aCBkaXNwbGF5VmFsdWU6ICR7U3RyaW5nKGRpc3BsYXlWYWx1ZSl9YDtcblxuY29uc3QgeyBnZXRCeSwgZ2V0QWxsQnksIHF1ZXJ5QnksIHF1ZXJ5QWxsQnksIGZpbmRCeSwgZmluZEFsbEJ5IH0gPSBtYWtlUXVlcmllcyhcbiAgcXVlcnlBbGxCeURpc3BsYXlWYWx1ZSxcbiAgZ2V0TWlzc2luZ0Vycm9yLFxuICBnZXRNdWx0aXBsZUVycm9yLFxuKTtcblxuZXhwb3J0IHR5cGUgQnlEaXNwbGF5VmFsdWVRdWVyaWVzID0ge1xuICBnZXRCeURpc3BsYXlWYWx1ZTogR2V0QnlRdWVyeTxUZXh0TWF0Y2gsIEJ5RGlzcGxheVZhbHVlT3B0aW9ucz47XG4gIGdldEFsbEJ5RGlzcGxheVZhbHVlOiBHZXRBbGxCeVF1ZXJ5PFRleHRNYXRjaCwgQnlEaXNwbGF5VmFsdWVPcHRpb25zPjtcbiAgcXVlcnlCeURpc3BsYXlWYWx1ZTogUXVlcnlCeVF1ZXJ5PFRleHRNYXRjaCwgQnlEaXNwbGF5VmFsdWVPcHRpb25zPjtcbiAgcXVlcnlBbGxCeURpc3BsYXlWYWx1ZTogUXVlcnlBbGxCeVF1ZXJ5PFRleHRNYXRjaCwgQnlEaXNwbGF5VmFsdWVPcHRpb25zPjtcbiAgZmluZEJ5RGlzcGxheVZhbHVlOiBGaW5kQnlRdWVyeTxUZXh0TWF0Y2gsIEJ5RGlzcGxheVZhbHVlT3B0aW9ucz47XG4gIGZpbmRBbGxCeURpc3BsYXlWYWx1ZTogRmluZEFsbEJ5UXVlcnk8VGV4dE1hdGNoLCBCeURpc3BsYXlWYWx1ZU9wdGlvbnM+O1xufTtcblxuZXhwb3J0IGNvbnN0IGJpbmRCeURpc3BsYXlWYWx1ZVF1ZXJpZXMgPSAoaW5zdGFuY2U6IFJlYWN0VGVzdEluc3RhbmNlKTogQnlEaXNwbGF5VmFsdWVRdWVyaWVzID0+ICh7XG4gIGdldEJ5RGlzcGxheVZhbHVlOiBnZXRCeShpbnN0YW5jZSksXG4gIGdldEFsbEJ5RGlzcGxheVZhbHVlOiBnZXRBbGxCeShpbnN0YW5jZSksXG4gIHF1ZXJ5QnlEaXNwbGF5VmFsdWU6IHF1ZXJ5QnkoaW5zdGFuY2UpLFxuICBxdWVyeUFsbEJ5RGlzcGxheVZhbHVlOiBxdWVyeUFsbEJ5KGluc3RhbmNlKSxcbiAgZmluZEJ5RGlzcGxheVZhbHVlOiBmaW5kQnkoaW5zdGFuY2UpLFxuICBmaW5kQWxsQnlEaXNwbGF5VmFsdWU6IGZpbmRBbGxCeShpbnN0YW5jZSksXG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsSUFBQUEsUUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsbUJBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFVBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLFFBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLFlBQUEsR0FBQUosT0FBQTtBQWFBLElBQU1LLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBaUJBLENBQ3JCQyxJQUF1QixFQUN2QkMsYUFBd0IsRUFFckI7RUFBQSxJQURIQyxPQUF5QixHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxDQUFDLENBQUM7RUFFOUIsSUFBUUcsS0FBSyxHQUFpQkosT0FBTyxDQUE3QkksS0FBSztJQUFFQyxVQUFBLEdBQWVMLE9BQU8sQ0FBdEJLLFVBQUE7RUFDZixJQUFNQyxTQUFTLEdBQUcsSUFBQVosVUFBQSxDQUFBYSxpQkFBaUIsRUFBQ1QsSUFBSSxDQUFDO0VBQ3pDLE9BQU8sSUFBQUgsUUFBQSxDQUFBYSxPQUFPLEVBQUNULGFBQWEsRUFBRU8sU0FBUyxFQUFFRCxVQUFVLEVBQUVELEtBQUssQ0FBQztBQUM3RCxDQUFDO0FBRUQsSUFBTUssc0JBQXNCLEdBQzFCLFNBRElBLHNCQUFzQkEsQ0FDMUJDLFFBQTJCO0VBQUEsT0FFM0IsU0FBU0Msd0JBQXdCQSxDQUFDQyxZQUFZLEVBQUVDLFlBQVksRUFBRTtJQUM1RCxPQUFPLElBQUF0QixRQUFBLENBQUF1QixPQUFPLEVBQ1pKLFFBQVEsRUFDUCxVQUFBWixJQUFJO01BQUEsT0FBSyxJQUFBTCxtQkFBQSxDQUFBc0IsZUFBZSxFQUFDakIsSUFBSSxDQUFDLElBQUlELGlCQUFpQixDQUFDQyxJQUFJLEVBQUVjLFlBQVksRUFBRUMsWUFBWSxDQUFDO0lBQUEsR0FDdEZBLFlBQ0YsQ0FBQztFQUNILENBQUM7QUFBQTtBQUVILElBQU1HLGdCQUFnQixHQUFJLFNBQXBCQSxnQkFBZ0JBLENBQUlKLFlBQXVCO0VBQUEsT0FDOUMsK0NBQThDSyxNQUFNLENBQUNMLFlBQVksQ0FBRSxHQUFFO0FBQUE7QUFDeEUsSUFBTU0sZUFBZSxHQUFJLFNBQW5CQSxlQUFlQSxDQUFJTixZQUF1QjtFQUFBLE9BQzdDLGdEQUErQ0ssTUFBTSxDQUFDTCxZQUFZLENBQUUsRUFBQztBQUFBO0FBRXhFLElBQUFPLElBQUEsR0FBb0UsSUFBQXZCLFlBQUEsQ0FBQXdCLFdBQVcsRUFDN0VYLHNCQUFzQixFQUN0QlMsZUFBZSxFQUNmRixnQkFDRixDQUFDO0VBSk9LLEtBQUssR0FBQUYsSUFBQSxDQUFMRSxLQUFLO0VBQUVDLFFBQVEsR0FBQUgsSUFBQSxDQUFSRyxRQUFRO0VBQUVDLE9BQU8sR0FBQUosSUFBQSxDQUFQSSxPQUFPO0VBQUVDLFVBQVUsR0FBQUwsSUFBQSxDQUFWSyxVQUFVO0VBQUVDLE1BQU0sR0FBQU4sSUFBQSxDQUFOTSxNQUFNO0VBQUVDLFNBQUEsR0FBQVAsSUFBQSxDQUFBTyxTQUFBO0FBZS9DLElBQU1DLHlCQUF5QixHQUFJLFNBQTdCQSx5QkFBeUJBLENBQUlqQixRQUEyQjtFQUFBLE9BQTZCO0lBQ2hHa0IsaUJBQWlCLEVBQUVQLEtBQUssQ0FBQ1gsUUFBUSxDQUFDO0lBQ2xDbUIsb0JBQW9CLEVBQUVQLFFBQVEsQ0FBQ1osUUFBUSxDQUFDO0lBQ3hDb0IsbUJBQW1CLEVBQUVQLE9BQU8sQ0FBQ2IsUUFBUSxDQUFDO0lBQ3RDRCxzQkFBc0IsRUFBRWUsVUFBVSxDQUFDZCxRQUFRLENBQUM7SUFDNUNxQixrQkFBa0IsRUFBRU4sTUFBTSxDQUFDZixRQUFRLENBQUM7SUFDcENzQixxQkFBcUIsRUFBRU4sU0FBUyxDQUFDaEIsUUFBUTtFQUMzQyxDQUFDO0FBQUEsQ0FBQztBQUFDdUIsT0FBQSxDQUFBTix5QkFBQSxHQUFBQSx5QkFBQSIsImlnbm9yZUxpc3QiOltdfQ==