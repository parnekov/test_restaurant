18d8b59da6418d173788105e50fc7c0f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _nonSecure = require("nanoid/non-secure");
var BaseRouter = {
  getStateForAction: function getStateForAction(state, action) {
    switch (action.type) {
      case 'SET_PARAMS':
        {
          var index = action.source ? state.routes.findIndex(function (r) {
            return r.key === action.source;
          }) : state.index;
          if (index === -1) {
            return null;
          }
          return Object.assign({}, state, {
            routes: state.routes.map(function (r, i) {
              return i === index ? Object.assign({}, r, {
                params: Object.assign({}, r.params, action.payload.params)
              }) : r;
            })
          });
        }
      case 'RESET':
        {
          var nextState = action.payload;
          if (nextState.routes.length === 0 || nextState.routes.some(function (route) {
            return !state.routeNames.includes(route.name);
          })) {
            return null;
          }
          if (nextState.stale === false) {
            if (state.routeNames.length !== nextState.routeNames.length || nextState.routeNames.some(function (name) {
              return !state.routeNames.includes(name);
            })) {
              return null;
            }
            return Object.assign({}, nextState, {
              routes: nextState.routes.map(function (route) {
                return route.key ? route : Object.assign({}, route, {
                  key: `${route.name}-${(0, _nonSecure.nanoid)()}`
                });
              })
            });
          }
          return nextState;
        }
      default:
        return null;
    }
  },
  shouldActionChangeFocus: function shouldActionChangeFocus(action) {
    return action.type === 'NAVIGATE';
  }
};
var _default = BaseRouter;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbm9uU2VjdXJlIiwicmVxdWlyZSIsIkJhc2VSb3V0ZXIiLCJnZXRTdGF0ZUZvckFjdGlvbiIsInN0YXRlIiwiYWN0aW9uIiwidHlwZSIsImluZGV4Iiwic291cmNlIiwicm91dGVzIiwiZmluZEluZGV4IiwiciIsImtleSIsIk9iamVjdCIsImFzc2lnbiIsIm1hcCIsImkiLCJwYXJhbXMiLCJwYXlsb2FkIiwibmV4dFN0YXRlIiwibGVuZ3RoIiwic29tZSIsInJvdXRlIiwicm91dGVOYW1lcyIsImluY2x1ZGVzIiwibmFtZSIsInN0YWxlIiwibmFub2lkIiwic2hvdWxkQWN0aW9uQ2hhbmdlRm9jdXMiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL0Jhc2VSb3V0ZXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxVQUFBLEdBQUFDLE9BQUE7QUFZQSxJQUFNQyxVQUFVLEdBQUc7RUFDakJDLGlCQUFpQixXQUFBQSxrQkFDZkMsS0FBWSxFQUNaQyxNQUE4QixFQUNNO0lBQ3BDLFFBQVFBLE1BQU0sQ0FBQ0MsSUFBSTtNQUNqQixLQUFLLFlBQVk7UUFBRTtVQUNqQixJQUFNQyxLQUFLLEdBQUdGLE1BQU0sQ0FBQ0csTUFBTSxHQUN2QkosS0FBSyxDQUFDSyxNQUFNLENBQUNDLFNBQVMsQ0FBRSxVQUFBQyxDQUFDO1lBQUEsT0FBS0EsQ0FBQyxDQUFDQyxHQUFHLEtBQUtQLE1BQU0sQ0FBQ0csTUFBTTtVQUFBLEVBQUMsR0FDdERKLEtBQUssQ0FBQ0csS0FBSztVQUVmLElBQUlBLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNoQixPQUFPLElBQUk7VUFDYjtVQUVBLE9BQUFNLE1BQUEsQ0FBQUMsTUFBQSxLQUNLVixLQUFLO1lBQ1JLLE1BQU0sRUFBRUwsS0FBSyxDQUFDSyxNQUFNLENBQUNNLEdBQUcsQ0FBQyxVQUFDSixDQUFDLEVBQUVLLENBQUM7Y0FBQSxPQUM1QkEsQ0FBQyxLQUFLVCxLQUFLLEdBQUFNLE1BQUEsQ0FBQUMsTUFBQSxLQUNGSCxDQUFDO2dCQUFFTSxNQUFNLEVBQUFKLE1BQUEsQ0FBQUMsTUFBQSxLQUFPSCxDQUFDLENBQUNNLE1BQU0sRUFBS1osTUFBTSxDQUFDYSxPQUFPLENBQUNELE1BQUE7Y0FBTyxLQUN4RE4sQ0FBQztZQUFBO1VBQUE7UUFHWDtNQUVBLEtBQUssT0FBTztRQUFFO1VBQ1osSUFBTVEsU0FBUyxHQUFHZCxNQUFNLENBQUNhLE9BQXNDO1VBRS9ELElBQ0VDLFNBQVMsQ0FBQ1YsTUFBTSxDQUFDVyxNQUFNLEtBQUssQ0FBQyxJQUM3QkQsU0FBUyxDQUFDVixNQUFNLENBQUNZLElBQUksQ0FDbEIsVUFBQUMsS0FBdUI7WUFBQSxPQUFLLENBQUNsQixLQUFLLENBQUNtQixVQUFVLENBQUNDLFFBQVEsQ0FBQ0YsS0FBSyxDQUFDRyxJQUFJLENBQUM7VUFBQSxFQUNwRSxFQUNEO1lBQ0EsT0FBTyxJQUFJO1VBQ2I7VUFFQSxJQUFJTixTQUFTLENBQUNPLEtBQUssS0FBSyxLQUFLLEVBQUU7WUFDN0IsSUFDRXRCLEtBQUssQ0FBQ21CLFVBQVUsQ0FBQ0gsTUFBTSxLQUFLRCxTQUFTLENBQUNJLFVBQVUsQ0FBQ0gsTUFBTSxJQUN2REQsU0FBUyxDQUFDSSxVQUFVLENBQUNGLElBQUksQ0FDdEIsVUFBQUksSUFBSTtjQUFBLE9BQUssQ0FBQ3JCLEtBQUssQ0FBQ21CLFVBQVUsQ0FBQ0MsUUFBUSxDQUFDQyxJQUFJLENBQUM7WUFBQSxFQUMzQyxFQUNEO2NBQ0EsT0FBTyxJQUFJO1lBQ2I7WUFFQSxPQUFBWixNQUFBLENBQUFDLE1BQUEsS0FDS0ssU0FBUztjQUNaVixNQUFNLEVBQUVVLFNBQVMsQ0FBQ1YsTUFBTSxDQUFDTSxHQUFHLENBQUUsVUFBQU8sS0FBSztnQkFBQSxPQUNqQ0EsS0FBSyxDQUFDVixHQUFHLEdBQUdVLEtBQUssR0FBQVQsTUFBQSxDQUFBQyxNQUFBLEtBQVFRLEtBQUs7a0JBQUVWLEdBQUcsRUFBRyxHQUFFVSxLQUFLLENBQUNHLElBQUssSUFBRyxJQUFBekIsVUFBQSxDQUFBMkIsTUFBTSxHQUFHO2dCQUFBLEVBQUc7Y0FBQTtZQUFBO1VBR3hFO1VBRUEsT0FBT1IsU0FBUztRQUNsQjtNQUVBO1FBQ0UsT0FBTyxJQUFJO0lBQUM7RUFFbEIsQ0FBQztFQUVEUyx1QkFBdUIsV0FBQUEsd0JBQUN2QixNQUE4QixFQUFFO0lBQ3RELE9BQU9BLE1BQU0sQ0FBQ0MsSUFBSSxLQUFLLFVBQVU7RUFDbkM7QUFDRixDQUFDO0FBQUMsSUFBQXVCLFFBQUEsR0FFYTNCLFVBQVU7QUFBQTRCLE9BQUEsQ0FBQUMsT0FBQSxHQUFBRixRQUFBIiwiaWdub3JlTGlzdCI6W119