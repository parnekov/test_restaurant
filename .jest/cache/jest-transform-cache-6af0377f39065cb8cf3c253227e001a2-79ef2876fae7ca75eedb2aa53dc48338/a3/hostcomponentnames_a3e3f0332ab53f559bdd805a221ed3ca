4d17b6be7fa4eccce3960ef1aada243f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configureHostComponentNamesIfNeeded = configureHostComponentNamesIfNeeded;
exports.getHostComponentNames = getHostComponentNames;
exports.isHostModal = isHostModal;
exports.isHostScrollView = isHostScrollView;
exports.isHostText = isHostText;
exports.isHostTextInput = isHostTextInput;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _renderAct = require("../render-act");
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
var userConfigErrorMessage = `There seems to be an issue with your configuration that prevents React Native Testing Library from working correctly.
Please check if you are using compatible versions of React Native and React Native Testing Library.`;
function getHostComponentNames() {
  var hostComponentNames = (0, _config.getConfig)().hostComponentNames;
  if (!hostComponentNames) {
    hostComponentNames = detectHostComponentNames();
    (0, _config.configureInternal)({
      hostComponentNames: hostComponentNames
    });
  }
  return hostComponentNames;
}
function configureHostComponentNamesIfNeeded() {
  var configHostComponentNames = (0, _config.getConfig)().hostComponentNames;
  if (configHostComponentNames) {
    return;
  }
  var hostComponentNames = detectHostComponentNames();
  (0, _config.configureInternal)({
    hostComponentNames: hostComponentNames
  });
}
function detectHostComponentNames() {
  try {
    var renderer = (0, _renderAct.renderWithAct)(React.createElement(_reactNative.View, null, React.createElement(_reactNative.Text, {
      testID: "text"
    }, "Hello"), React.createElement(_reactNative.TextInput, {
      testID: "textInput"
    }), React.createElement(_reactNative.Switch, {
      testID: "switch"
    }), React.createElement(_reactNative.ScrollView, {
      testID: "scrollView"
    }), React.createElement(_reactNative.Modal, {
      testID: "modal"
    })));
    return {
      text: getByTestId(renderer.root, 'text').type,
      textInput: getByTestId(renderer.root, 'textInput').type,
      switch: getByTestId(renderer.root, 'switch').type,
      scrollView: getByTestId(renderer.root, 'scrollView').type,
      modal: getByTestId(renderer.root, 'modal').type
    };
  } catch (error) {
    var errorMessage = error && typeof error === 'object' && 'message' in error ? error.message : null;
    throw new Error(`Trying to detect host component names triggered the following error:\n\n${errorMessage}\n\n${userConfigErrorMessage}`);
  }
}
function getByTestId(instance, testID) {
  var nodes = instance.findAll(function (node) {
    return typeof node.type === 'string' && node.props.testID === testID;
  });
  if (nodes.length === 0) {
    throw new Error(`Unable to find an element with testID: ${testID}`);
  }
  return nodes[0];
}
function isHostText(element) {
  return (element == null ? void 0 : element.type) === getHostComponentNames().text;
}
function isHostTextInput(element) {
  return (element == null ? void 0 : element.type) === getHostComponentNames().textInput;
}
function isHostScrollView(element) {
  return (element == null ? void 0 : element.type) === getHostComponentNames().scrollView;
}
function isHostModal(element) {
  return (element == null ? void 0 : element.type) === getHostComponentNames().modal;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jb25maWciLCJfcmVuZGVyQWN0IiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwidXNlckNvbmZpZ0Vycm9yTWVzc2FnZSIsImdldEhvc3RDb21wb25lbnROYW1lcyIsImhvc3RDb21wb25lbnROYW1lcyIsImdldENvbmZpZyIsImRldGVjdEhvc3RDb21wb25lbnROYW1lcyIsImNvbmZpZ3VyZUludGVybmFsIiwiY29uZmlndXJlSG9zdENvbXBvbmVudE5hbWVzSWZOZWVkZWQiLCJjb25maWdIb3N0Q29tcG9uZW50TmFtZXMiLCJyZW5kZXJlciIsInJlbmRlcldpdGhBY3QiLCJjcmVhdGVFbGVtZW50IiwiVmlldyIsIlRleHQiLCJ0ZXN0SUQiLCJUZXh0SW5wdXQiLCJTd2l0Y2giLCJTY3JvbGxWaWV3IiwiTW9kYWwiLCJ0ZXh0IiwiZ2V0QnlUZXN0SWQiLCJyb290IiwidHlwZSIsInRleHRJbnB1dCIsInN3aXRjaCIsInNjcm9sbFZpZXciLCJtb2RhbCIsImVycm9yIiwiZXJyb3JNZXNzYWdlIiwibWVzc2FnZSIsIkVycm9yIiwiaW5zdGFuY2UiLCJub2RlcyIsImZpbmRBbGwiLCJub2RlIiwicHJvcHMiLCJsZW5ndGgiLCJpc0hvc3RUZXh0IiwiZWxlbWVudCIsImlzSG9zdFRleHRJbnB1dCIsImlzSG9zdFNjcm9sbFZpZXciLCJpc0hvc3RNb2RhbCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2hvc3QtY29tcG9uZW50LW5hbWVzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWFjdFRlc3RJbnN0YW5jZSB9IGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInO1xuaW1wb3J0IHsgTW9kYWwsIFNjcm9sbFZpZXcsIFN3aXRjaCwgVGV4dCwgVGV4dElucHV0LCBWaWV3IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IGNvbmZpZ3VyZUludGVybmFsLCBnZXRDb25maWcsIEhvc3RDb21wb25lbnROYW1lcyB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyByZW5kZXJXaXRoQWN0IH0gZnJvbSAnLi4vcmVuZGVyLWFjdCc7XG5pbXBvcnQgeyBIb3N0VGVzdEluc3RhbmNlIH0gZnJvbSAnLi9jb21wb25lbnQtdHJlZSc7XG5cbmNvbnN0IHVzZXJDb25maWdFcnJvck1lc3NhZ2UgPSBgVGhlcmUgc2VlbXMgdG8gYmUgYW4gaXNzdWUgd2l0aCB5b3VyIGNvbmZpZ3VyYXRpb24gdGhhdCBwcmV2ZW50cyBSZWFjdCBOYXRpdmUgVGVzdGluZyBMaWJyYXJ5IGZyb20gd29ya2luZyBjb3JyZWN0bHkuXG5QbGVhc2UgY2hlY2sgaWYgeW91IGFyZSB1c2luZyBjb21wYXRpYmxlIHZlcnNpb25zIG9mIFJlYWN0IE5hdGl2ZSBhbmQgUmVhY3QgTmF0aXZlIFRlc3RpbmcgTGlicmFyeS5gO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SG9zdENvbXBvbmVudE5hbWVzKCk6IEhvc3RDb21wb25lbnROYW1lcyB7XG4gIGxldCBob3N0Q29tcG9uZW50TmFtZXMgPSBnZXRDb25maWcoKS5ob3N0Q29tcG9uZW50TmFtZXM7XG4gIGlmICghaG9zdENvbXBvbmVudE5hbWVzKSB7XG4gICAgaG9zdENvbXBvbmVudE5hbWVzID0gZGV0ZWN0SG9zdENvbXBvbmVudE5hbWVzKCk7XG4gICAgY29uZmlndXJlSW50ZXJuYWwoeyBob3N0Q29tcG9uZW50TmFtZXMgfSk7XG4gIH1cblxuICByZXR1cm4gaG9zdENvbXBvbmVudE5hbWVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29uZmlndXJlSG9zdENvbXBvbmVudE5hbWVzSWZOZWVkZWQoKSB7XG4gIGNvbnN0IGNvbmZpZ0hvc3RDb21wb25lbnROYW1lcyA9IGdldENvbmZpZygpLmhvc3RDb21wb25lbnROYW1lcztcbiAgaWYgKGNvbmZpZ0hvc3RDb21wb25lbnROYW1lcykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGhvc3RDb21wb25lbnROYW1lcyA9IGRldGVjdEhvc3RDb21wb25lbnROYW1lcygpO1xuICBjb25maWd1cmVJbnRlcm5hbCh7IGhvc3RDb21wb25lbnROYW1lcyB9KTtcbn1cblxuZnVuY3Rpb24gZGV0ZWN0SG9zdENvbXBvbmVudE5hbWVzKCk6IEhvc3RDb21wb25lbnROYW1lcyB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVuZGVyZXIgPSByZW5kZXJXaXRoQWN0KFxuICAgICAgPFZpZXc+XG4gICAgICAgIDxUZXh0IHRlc3RJRD1cInRleHRcIj5IZWxsbzwvVGV4dD5cbiAgICAgICAgPFRleHRJbnB1dCB0ZXN0SUQ9XCJ0ZXh0SW5wdXRcIiAvPlxuICAgICAgICA8U3dpdGNoIHRlc3RJRD1cInN3aXRjaFwiIC8+XG4gICAgICAgIDxTY3JvbGxWaWV3IHRlc3RJRD1cInNjcm9sbFZpZXdcIiAvPlxuICAgICAgICA8TW9kYWwgdGVzdElEPVwibW9kYWxcIiAvPlxuICAgICAgPC9WaWV3PixcbiAgICApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRleHQ6IGdldEJ5VGVzdElkKHJlbmRlcmVyLnJvb3QsICd0ZXh0JykudHlwZSBhcyBzdHJpbmcsXG4gICAgICB0ZXh0SW5wdXQ6IGdldEJ5VGVzdElkKHJlbmRlcmVyLnJvb3QsICd0ZXh0SW5wdXQnKS50eXBlIGFzIHN0cmluZyxcbiAgICAgIHN3aXRjaDogZ2V0QnlUZXN0SWQocmVuZGVyZXIucm9vdCwgJ3N3aXRjaCcpLnR5cGUgYXMgc3RyaW5nLFxuICAgICAgc2Nyb2xsVmlldzogZ2V0QnlUZXN0SWQocmVuZGVyZXIucm9vdCwgJ3Njcm9sbFZpZXcnKS50eXBlIGFzIHN0cmluZyxcbiAgICAgIG1vZGFsOiBnZXRCeVRlc3RJZChyZW5kZXJlci5yb290LCAnbW9kYWwnKS50eXBlIGFzIHN0cmluZyxcbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9XG4gICAgICBlcnJvciAmJiB0eXBlb2YgZXJyb3IgPT09ICdvYmplY3QnICYmICdtZXNzYWdlJyBpbiBlcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBudWxsO1xuXG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFRyeWluZyB0byBkZXRlY3QgaG9zdCBjb21wb25lbnQgbmFtZXMgdHJpZ2dlcmVkIHRoZSBmb2xsb3dpbmcgZXJyb3I6XFxuXFxuJHtlcnJvck1lc3NhZ2V9XFxuXFxuJHt1c2VyQ29uZmlnRXJyb3JNZXNzYWdlfWAsXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRCeVRlc3RJZChpbnN0YW5jZTogUmVhY3RUZXN0SW5zdGFuY2UsIHRlc3RJRDogc3RyaW5nKSB7XG4gIGNvbnN0IG5vZGVzID0gaW5zdGFuY2UuZmluZEFsbChcbiAgICAobm9kZSkgPT4gdHlwZW9mIG5vZGUudHlwZSA9PT0gJ3N0cmluZycgJiYgbm9kZS5wcm9wcy50ZXN0SUQgPT09IHRlc3RJRCxcbiAgKTtcblxuICBpZiAobm9kZXMubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZmluZCBhbiBlbGVtZW50IHdpdGggdGVzdElEOiAke3Rlc3RJRH1gKTtcbiAgfVxuXG4gIHJldHVybiBub2Rlc1swXTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIGVsZW1lbnQgaXMgYSBob3N0IFRleHQuXG4gKiBAcGFyYW0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBjaGVjay5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzSG9zdFRleHQoZWxlbWVudD86IFJlYWN0VGVzdEluc3RhbmNlIHwgbnVsbCk6IGVsZW1lbnQgaXMgSG9zdFRlc3RJbnN0YW5jZSB7XG4gIHJldHVybiBlbGVtZW50Py50eXBlID09PSBnZXRIb3N0Q29tcG9uZW50TmFtZXMoKS50ZXh0O1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gZWxlbWVudCBpcyBhIGhvc3QgVGV4dElucHV0LlxuICogQHBhcmFtIGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gY2hlY2suXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0hvc3RUZXh0SW5wdXQoZWxlbWVudD86IFJlYWN0VGVzdEluc3RhbmNlIHwgbnVsbCk6IGVsZW1lbnQgaXMgSG9zdFRlc3RJbnN0YW5jZSB7XG4gIHJldHVybiBlbGVtZW50Py50eXBlID09PSBnZXRIb3N0Q29tcG9uZW50TmFtZXMoKS50ZXh0SW5wdXQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBlbGVtZW50IGlzIGEgaG9zdCBTY3JvbGxWaWV3LlxuICogQHBhcmFtIGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gY2hlY2suXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0hvc3RTY3JvbGxWaWV3KGVsZW1lbnQ/OiBSZWFjdFRlc3RJbnN0YW5jZSB8IG51bGwpOiBlbGVtZW50IGlzIEhvc3RUZXN0SW5zdGFuY2Uge1xuICByZXR1cm4gZWxlbWVudD8udHlwZSA9PT0gZ2V0SG9zdENvbXBvbmVudE5hbWVzKCkuc2Nyb2xsVmlldztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIGVsZW1lbnQgaXMgYSBob3N0IE1vZGFsLlxuICogQHBhcmFtIGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gY2hlY2suXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0hvc3RNb2RhbChlbGVtZW50PzogUmVhY3RUZXN0SW5zdGFuY2UgfCBudWxsKTogZWxlbWVudCBpcyBIb3N0VGVzdEluc3RhbmNlIHtcbiAgcmV0dXJuIGVs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