da8c8b3c8acc910eebff6717be4ce7b4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connect = exports.batch = exports.ReactReduxContext = exports.Provider = void 0;
exports.createDispatchHook = createDispatchHook;
exports.createSelectorHook = createSelectorHook;
exports.createStoreHook = createStoreHook;
exports.shallowEqual = shallowEqual;
exports.useStore = exports.useSelector = exports.useDispatch = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var React2 = _interopRequireWildcard(require("react"));
var ReactOriginal = React2;
var _withSelector = require("use-sync-external-store/with-selector.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = function __defNormalProp(obj, key, value) {
  return key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value: value
  }) : obj[key] = value;
};
var __spreadValues = function __spreadValues(a, b) {
  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {
    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  }
  return a;
};
var __spreadProps = function __spreadProps(a, b) {
  return __defProps(a, __getOwnPropDescs(b));
};
var __objRest = function __objRest(source, exclude) {
  var target = {};
  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {
    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];
  }
  return target;
};
var React = "default" in ReactOriginal ? ReactOriginal["default"] : ReactOriginal;
var ContextKey = Symbol.for(`react-redux-context`);
var gT = typeof globalThis !== "undefined" ? globalThis : ({});
function getContext() {
  var _a;
  if (!React.createContext) return {};
  var contextMap = (_a = gT[ContextKey]) != null ? _a : gT[ContextKey] = new Map();
  var realContext = contextMap.get(React.createContext);
  if (!realContext) {
    realContext = React.createContext(null);
    if (process.env.NODE_ENV !== "production") {
      realContext.displayName = "ReactRedux";
    }
    contextMap.set(React.createContext, realContext);
  }
  return realContext;
}
var ReactReduxContext = exports.ReactReduxContext = getContext();
var notInitialized = function notInitialized() {
  throw new Error("uSES not initialized!");
};
function createReduxContextHook() {
  var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ReactReduxContext;
  return function useReduxContext2() {
    var contextValue = React.useContext(context);
    if (process.env.NODE_ENV !== "production" && !contextValue) {
      throw new Error("could not find react-redux context value; please ensure the component is wrapped in a <Provider>");
    }
    return contextValue;
  };
}
var useReduxContext = createReduxContextHook();
var useSyncExternalStoreWithSelector = notInitialized;
var initializeUseSelector = function initializeUseSelector(fn) {
  useSyncExternalStoreWithSelector = fn;
};
var refEquality = function refEquality(a, b) {
  return a === b;
};
function createSelectorHook() {
  var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ReactReduxContext;
  var useReduxContext2 = context === ReactReduxContext ? useReduxContext : createReduxContextHook(context);
  var useSelector2 = function useSelector2(selector) {
    var equalityFnOrOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _ref = typeof equalityFnOrOptions === "function" ? {
        equalityFn: equalityFnOrOptions
      } : equalityFnOrOptions,
      _ref$equalityFn = _ref.equalityFn,
      equalityFn = _ref$equalityFn === void 0 ? refEquality : _ref$equalityFn,
      _ref$devModeChecks = _ref.devModeChecks,
      devModeChecks = _ref$devModeChecks === void 0 ? {} : _ref$devModeChecks;
    if (process.env.NODE_ENV !== "production") {
      if (!selector) {
        throw new Error(`You must pass a selector to useSelector`);
      }
      if (typeof selector !== "function") {
        throw new Error(`You must pass a function as a selector to useSelector`);
      }
      if (typeof equalityFn !== "function") {
        throw new Error(`You must pass a function as an equality function to useSelector`);
      }
    }
    var _useReduxContext = useReduxContext2(),
      store = _useReduxContext.store,
      subscription = _useReduxContext.subscription,
      getServerState = _useReduxContext.getServerState,
      stabilityCheck = _useReduxContext.stabilityCheck,
      identityFunctionCheck = _useReduxContext.identityFunctionCheck;
    var firstRun = React.useRef(true);
    var wrappedSelector = React.useCallback((0, _defineProperty2.default)({}, selector.name, function (state) {
      var selected = selector(state);
      if (process.env.NODE_ENV !== "production") {
        var _spreadValues = __spreadValues({
            stabilityCheck: stabilityCheck,
            identityFunctionCheck: identityFunctionCheck
          }, devModeChecks),
          finalIdentityFunctionCheck = _spreadValues.identityFunctionCheck,
          finalStabilityCheck = _spreadValues.stabilityCheck;
        if (finalStabilityCheck === "always" || finalStabilityCheck === "once" && firstRun.current) {
          var toCompare = selector(state);
          if (!equalityFn(selected, toCompare)) {
            var stack = void 0;
            try {
              throw new Error();
            } catch (e) {
              ;
              stack = e.stack;
            }
            console.warn("Selector " + (selector.name || "unknown") + " returned a different result when called with the same parameters. This can lead to unnecessary rerenders.\nSelectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization", {
              state: state,
              selected: selected,
              selected2: toCompare,
              stack: stack
            });
          }
        }
        if (finalIdentityFunctionCheck === "always" || finalIdentityFunctionCheck === "once" && firstRun.current) {
          if (selected === state) {
            var _stack = void 0;
            try {
              throw new Error();
            } catch (e) {
              ;
              _stack = e.stack;
            }
            console.warn("Selector " + (selector.name || "unknown") + " returned the root state when called. This can lead to unnecessary rerenders.\nSelectors that return the entire state are almost certainly a mistake, as they will cause a rerender whenever *anything* in state changes.", {
              stack: _stack
            });
          }
        }
        if (firstRun.current) firstRun.current = false;
      }
      return selected;
    })[selector.name], [selector, stabilityCheck, devModeChecks.stabilityCheck]);
    var selectedState = useSyncExternalStoreWithSelector(subscription.addNestedSub, store.getState, getServerState || store.getState, wrappedSelector, equalityFn);
    React.useDebugValue(selectedState);
    return selectedState;
  };
  Object.assign(useSelector2, {
    withTypes: function withTypes() {
      return useSelector2;
    }
  });
  return useSelector2;
}
var useSelector = exports.useSelector = createSelectorHook();
var REACT_ELEMENT_TYPE = Symbol.for("react.element");
var REACT_PORTAL_TYPE = Symbol.for("react.portal");
var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
var REACT_CONTEXT_TYPE = Symbol.for("react.context");
var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
var REACT_MEMO_TYPE = Symbol.for("react.memo");
var REACT_LAZY_TYPE = Symbol.for("react.lazy");
var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
var ForwardRef = REACT_FORWARD_REF_TYPE;
var Memo = REACT_MEMO_TYPE;
function isValidElementType(type) {
  if (typeof type === "string" || typeof type === "function") {
    return true;
  }
  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_OFFSCREEN_TYPE) {
    return true;
  }
  if (typeof type === "object" && type !== null) {
    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_CLIENT_REFERENCE || type.getModuleId !== void 0) {
      return true;
    }
  }
  return false;
}
function typeOf(object) {
  if (typeof object === "object" && object !== null) {
    var $$typeof = object.$$typeof;
    switch ($$typeof) {
      case REACT_ELEMENT_TYPE:
        {
          var type = object.type;
          switch (type) {
            case REACT_FRAGMENT_TYPE:
            case REACT_PROFILER_TYPE:
            case REACT_STRICT_MODE_TYPE:
            case REACT_SUSPENSE_TYPE:
            case REACT_SUSPENSE_LIST_TYPE:
              return type;
            default:
              {
                var $$typeofType = type && type.$$typeof;
                switch ($$typeofType) {
                  case REACT_SERVER_CONTEXT_TYPE:
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_LAZY_TYPE:
                  case REACT_MEMO_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;
                  default:
                    return $$typeof;
                }
              }
          }
        }
      case REACT_PORTAL_TYPE:
        {
          return $$typeof;
        }
    }
  }
  return void 0;
}
function isContextConsumer(object) {
  return typeOf(object) === REACT_CONTEXT_TYPE;
}
function isMemo(object) {
  return typeOf(object) === REACT_MEMO_TYPE;
}
function warning(message) {
  if (typeof console !== "undefined" && typeof console.error === "function") {
    console.error(message);
  }
  try {
    throw new Error(message);
  } catch (e) {}
}
function verify(selector, methodName) {
  if (!selector) {
    throw new Error(`Unexpected value for ${methodName} in connect.`);
  } else if (methodName === "mapStateToProps" || methodName === "mapDispatchToProps") {
    if (!Object.prototype.hasOwnProperty.call(selector, "dependsOnOwnProps")) {
      warning(`The selector for ${methodName} of connect did not specify a value for dependsOnOwnProps.`);
    }
  }
}
function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps) {
  verify(mapStateToProps, "mapStateToProps");
  verify(mapDispatchToProps, "mapDispatchToProps");
  verify(mergeProps, "mergeProps");
}
function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref2) {
  var areStatesEqual = _ref2.areStatesEqual,
    areOwnPropsEqual = _ref2.areOwnPropsEqual,
    areStatePropsEqual = _ref2.areStatePropsEqual;
  var hasRunAtLeastOnce = false;
  var state;
  var ownProps;
  var stateProps;
  var dispatchProps;
  var mergedProps;
  function handleFirstCall(firstState, firstOwnProps) {
    state = firstState;
    ownProps = firstOwnProps;
    stateProps = mapStateToProps(state, ownProps);
    dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    hasRunAtLeastOnce = true;
    return mergedProps;
  }
  function handleNewPropsAndNewState() {
    stateProps = mapStateToProps(state, ownProps);
    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }
  function handleNewProps() {
    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);
    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }
  function handleNewState() {
    var nextStateProps = mapStateToProps(state, ownProps);
    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
    stateProps = nextStateProps;
    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }
  function handleSubsequentCalls(nextState, nextOwnProps) {
    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
    var stateChanged = !areStatesEqual(nextState, state, nextOwnProps, ownProps);
    state = nextState;
    ownProps = nextOwnProps;
    if (propsChanged && stateChanged) return handleNewPropsAndNewState();
    if (propsChanged) return handleNewProps();
    if (stateChanged) return handleNewState();
    return mergedProps;
  }
  return function pureFinalPropsSelector(nextState, nextOwnProps) {
    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
  };
}
function finalPropsSelectorFactory(dispatch, _a) {
  var _b = _a,
    initMapStateToProps = _b.initMapStateToProps,
    initMapDispatchToProps = _b.initMapDispatchToProps,
    initMergeProps = _b.initMergeProps,
    options = __objRest(_b, ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"]);
  var mapStateToProps = initMapStateToProps(dispatch, options);
  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
  var mergeProps = initMergeProps(dispatch, options);
  if (process.env.NODE_ENV !== "production") {
    verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps);
  }
  return pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
}
function bindActionCreators(actionCreators, dispatch) {
  var boundActionCreators = {};
  var _loop = function _loop() {
    var actionCreator = actionCreators[key];
    if (typeof actionCreator === "function") {
      boundActionCreators[key] = function () {
        return dispatch(actionCreator.apply(void 0, arguments));
      };
    }
  };
  for (var key in actionCreators) {
    _loop();
  }
  return boundActionCreators;
}
function isPlainObject(obj) {
  if (typeof obj !== "object" || obj === null) return false;
  var proto = Object.getPrototypeOf(obj);
  if (proto === null) return true;
  var baseProto = proto;
  while (Object.getPrototypeOf(baseProto) !== null) {
    baseProto = Object.getPrototypeOf(baseProto);
  }
  return proto === baseProto;
}
function verifyPlainObject(value, displayName, methodName) {
  if (!isPlainObject(value)) {
    warning(`${methodName}() in ${displayName} must return a plain object. Instead received ${value}.`);
  }
}
function wrapMapToPropsConstant(getConstant) {
  return function initConstantSelector(dispatch) {
    var constant = getConstant(dispatch);
    function constantSelector() {
      return constant;
    }
    constantSelector.dependsOnOwnProps = false;
    return constantSelector;
  };
}
function getDependsOnOwnProps(mapToProps) {
  return mapToProps.dependsOnOwnProps ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
}
function wrapMapToPropsFunc(mapToProps, methodName) {
  return function initProxySelector(dispatch, _ref3) {
    var displayName = _ref3.displayName;
    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch, void 0);
    };
    proxy.dependsOnOwnProps = true;
    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
      proxy.mapToProps = mapToProps;
      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
      var props = proxy(stateOrDispatch, ownProps);
      if (typeof props === "function") {
        proxy.mapToProps = props;
        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
        props = proxy(stateOrDispatch, ownProps);
      }
      if (process.env.NODE_ENV !== "production") verifyPlainObject(props, displayName, methodName);
      return props;
    };
    return proxy;
  };
}
function createInvalidArgFactory(arg, name) {
  return function (dispatch, options) {
    throw new Error(`Invalid value of type ${typeof arg} for ${name} argument when connecting component ${options.wrappedComponentName}.`);
  };
}
function mapDispatchToPropsFactory(mapDispatchToProps) {
  return mapDispatchToProps && typeof mapDispatchToProps === "object" ? wrapMapToPropsConstant(function (dispatch) {
    return bindActionCreators(mapDispatchToProps, dispatch);
  }) : !mapDispatchToProps ? wrapMapToPropsConstant(function (dispatch) {
    return {
      dispatch: dispatch
    };
  }) : typeof mapDispatchToProps === "function" ? wrapMapToPropsFunc(mapDispatchToProps, "mapDispatchToProps") : createInvalidArgFactory(mapDispatchToProps, "mapDispatchToProps");
}
function mapStateToPropsFactory(mapStateToProps) {
  return !mapStateToProps ? wrapMapToPropsConstant(function () {
    return {};
  }) : typeof mapStateToProps === "function" ? wrapMapToPropsFunc(mapStateToProps, "mapStateToProps") : createInvalidArgFactory(mapStateToProps, "mapStateToProps");
}
function defaultMergeProps(stateProps, dispatchProps, ownProps) {
  return __spreadValues(__spreadValues(__spreadValues({}, ownProps), stateProps), dispatchProps);
}
function wrapMergePropsFunc(mergeProps) {
  return function initMergePropsProxy(dispatch, _ref4) {
    var displayName = _ref4.displayName,
      areMergedPropsEqual = _ref4.areMergedPropsEqual;
    var hasRunOnce = false;
    var mergedProps;
    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      if (hasRunOnce) {
        if (!areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
      } else {
        hasRunOnce = true;
        mergedProps = nextMergedProps;
        if (process.env.NODE_ENV !== "production") verifyPlainObject(mergedProps, displayName, "mergeProps");
      }
      return mergedProps;
    };
  };
}
function mergePropsFactory(mergeProps) {
  return !mergeProps ? function () {
    return defaultMergeProps;
  } : typeof mergeProps === "function" ? wrapMergePropsFunc(mergeProps) : createInvalidArgFactory(mergeProps, "mergeProps");
}
function defaultNoopBatch(callback) {
  callback();
}
function createListenerCollection() {
  var first = null;
  var last = null;
  return {
    clear: function clear() {
      first = null;
      last = null;
    },
    notify: function notify() {
      defaultNoopBatch(function () {
        var listener = first;
        while (listener) {
          listener.callback();
          listener = listener.next;
        }
      });
    },
    get: function get() {
      var listeners = [];
      var listener = first;
      while (listener) {
        listeners.push(listener);
        listener = listener.next;
      }
      return listeners;
    },
    subscribe: function subscribe(callback) {
      var isSubscribed = true;
      var listener = last = {
        callback: callback,
        next: null,
        prev: last
      };
      if (listener.prev) {
        listener.prev.next = listener;
      } else {
        first = listener;
      }
      return function unsubscribe() {
        if (!isSubscribed || first === null) return;
        isSubscribed = false;
        if (listener.next) {
          listener.next.prev = listener.prev;
        } else {
          last = listener.prev;
        }
        if (listener.prev) {
          listener.prev.next = listener.next;
        } else {
          first = listener.next;
        }
      };
    }
  };
}
var nullListeners = {
  notify: function notify() {},
  get: function get() {
    return [];
  }
};
function createSubscription(store, parentSub) {
  var unsubscribe;
  var listeners = nullListeners;
  var subscriptionsAmount = 0;
  var selfSubscribed = false;
  function addNestedSub(listener) {
    trySubscribe();
    var cleanupListener = listeners.subscribe(listener);
    var removed = false;
    return function () {
      if (!removed) {
        removed = true;
        cleanupListener();
        tryUnsubscribe();
      }
    };
  }
  function notifyNestedSubs() {
    listeners.notify();
  }
  function handleChangeWrapper() {
    if (subscription.onStateChange) {
      subscription.onStateChange();
    }
  }
  function isSubscribed() {
    return selfSubscribed;
  }
  function trySubscribe() {
    subscriptionsAmount++;
    if (!unsubscribe) {
      unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);
      listeners = createListenerCollection();
    }
  }
  function tryUnsubscribe() {
    subscriptionsAmount--;
    if (unsubscribe && subscriptionsAmount === 0) {
      unsubscribe();
      unsubscribe = void 0;
      listeners.clear();
      listeners = nullListeners;
    }
  }
  function trySubscribeSelf() {
    if (!selfSubscribed) {
      selfSubscribed = true;
      trySubscribe();
    }
  }
  function tryUnsubscribeSelf() {
    if (selfSubscribed) {
      selfSubscribed = false;
      tryUnsubscribe();
    }
  }
  var subscription = {
    addNestedSub: addNestedSub,
    notifyNestedSubs: notifyNestedSubs,
    handleChangeWrapper: handleChangeWrapper,
    isSubscribed: isSubscribed,
    trySubscribe: trySubscribeSelf,
    tryUnsubscribe: tryUnsubscribeSelf,
    getListeners: function getListeners() {
      return listeners;
    }
  };
  return subscription;
}
var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
var isReactNative = typeof navigator !== "undefined" && navigator.product === "ReactNative";
var useIsomorphicLayoutEffect = canUseDOM || isReactNative ? React.useLayoutEffect : React.useEffect;
function is(x, y) {
  if (x === y) {
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}
function shallowEqual(objA, objB) {
  if (is(objA, objB)) return true;
  if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
    return false;
  }
  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);
  if (keysA.length !== keysB.length) return false;
  for (var i = 0; i < keysA.length; i++) {
    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }
  return true;
}
var REACT_STATICS = {
  childContextTypes: true,
  contextType: true,
  contextTypes: true,
  defaultProps: true,
  displayName: true,
  getDefaultProps: true,
  getDerivedStateFromError: true,
  getDerivedStateFromProps: true,
  mixins: true,
  propTypes: true,
  type: true
};
var KNOWN_STATICS = {
  name: true,
  length: true,
  prototype: true,
  caller: true,
  callee: true,
  arguments: true,
  arity: true
};
var FORWARD_REF_STATICS = {
  $$typeof: true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  $$typeof: true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = (0, _defineProperty2.default)((0, _defineProperty2.default)({}, ForwardRef, FORWARD_REF_STATICS), Memo, MEMO_STATICS);
function getStatics(component) {
  if (isMemo(component)) {
    return MEMO_STATICS;
  }
  return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
}
var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent) {
  if (typeof sourceComponent !== "string") {
    if (objectPrototype) {
      var inheritedComponent = getPrototypeOf(sourceComponent);
      if (inheritedComponent && inheritedComponent !== objectPrototype) {
        hoistNonReactStatics(targetComponent, inheritedComponent);
      }
    }
    var keys = getOwnPropertyNames(sourceComponent);
    if (getOwnPropertySymbols) {
      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
    }
    var targetStatics = getStatics(targetComponent);
    var sourceStatics = getStatics(sourceComponent);
    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];
      if (!KNOWN_STATICS[key] && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
        try {
          defineProperty(targetComponent, key, descriptor);
        } catch (e) {}
      }
    }
  }
  return targetComponent;
}
var useSyncExternalStore = notInitialized;
var initializeConnect = function initializeConnect(fn) {
  useSyncExternalStore = fn;
};
var NO_SUBSCRIPTION_ARRAY = [null, null];
var stringifyComponent = function stringifyComponent(Comp) {
  try {
    return JSON.stringify(Comp);
  } catch (err) {
    return String(Comp);
  }
};
function useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {
  useIsomorphicLayoutEffect(function () {
    return effectFunc.apply(void 0, (0, _toConsumableArray2.default)(effectArgs));
  }, dependencies);
}
function captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, childPropsFromStoreUpdate, notifyNestedSubs) {
  lastWrapperProps.current = wrapperProps;
  renderIsScheduled.current = false;
  if (childPropsFromStoreUpdate.current) {
    childPropsFromStoreUpdate.current = null;
    notifyNestedSubs();
  }
}
function subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, additionalSubscribeListener) {
  if (!shouldHandleStateChanges) return function () {};
  var didUnsubscribe = false;
  var lastThrownError = null;
  var checkForUpdates = function checkForUpdates() {
    if (didUnsubscribe || !isMounted.current) {
      return;
    }
    var latestStoreState = store.getState();
    var newChildProps, error;
    try {
      newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);
    } catch (e) {
      error = e;
      lastThrownError = e;
    }
    if (!error) {
      lastThrownError = null;
    }
    if (newChildProps === lastChildProps.current) {
      if (!renderIsScheduled.current) {
        notifyNestedSubs();
      }
    } else {
      lastChildProps.current = newChildProps;
      childPropsFromStoreUpdate.current = newChildProps;
      renderIsScheduled.current = true;
      additionalSubscribeListener();
    }
  };
  subscription.onStateChange = checkForUpdates;
  subscription.trySubscribe();
  checkForUpdates();
  var unsubscribeWrapper = function unsubscribeWrapper() {
    didUnsubscribe = true;
    subscription.tryUnsubscribe();
    subscription.onStateChange = null;
    if (lastThrownError) {
      throw lastThrownError;
    }
  };
  return unsubscribeWrapper;
}
function strictEqual(a, b) {
  return a === b;
}
var hasWarnedAboutDeprecatedPureOption = false;
function connect(mapStateToProps, mapDispatchToProps, mergeProps) {
  var _ref5 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
    pure = _ref5.pure,
    _ref5$areStatesEqual = _ref5.areStatesEqual,
    areStatesEqual = _ref5$areStatesEqual === void 0 ? strictEqual : _ref5$areStatesEqual,
    _ref5$areOwnPropsEqua = _ref5.areOwnPropsEqual,
    areOwnPropsEqual = _ref5$areOwnPropsEqua === void 0 ? shallowEqual : _ref5$areOwnPropsEqua,
    _ref5$areStatePropsEq = _ref5.areStatePropsEqual,
    areStatePropsEqual = _ref5$areStatePropsEq === void 0 ? shallowEqual : _ref5$areStatePropsEq,
    _ref5$areMergedPropsE = _ref5.areMergedPropsEqual,
    areMergedPropsEqual = _ref5$areMergedPropsE === void 0 ? shallowEqual : _ref5$areMergedPropsE,
    _ref5$forwardRef = _ref5.forwardRef,
    forwardRef = _ref5$forwardRef === void 0 ? false : _ref5$forwardRef,
    _ref5$context = _ref5.context,
    context = _ref5$context === void 0 ? ReactReduxContext : _ref5$context;
  if (process.env.NODE_ENV !== "production") {
    if (pure !== void 0 && !hasWarnedAboutDeprecatedPureOption) {
      hasWarnedAboutDeprecatedPureOption = true;
      warning('The `pure` option has been removed. `connect` is now always a "pure/memoized" component');
    }
  }
  var Context = context;
  var initMapStateToProps = mapStateToPropsFactory(mapStateToProps);
  var initMapDispatchToProps = mapDispatchToPropsFactory(mapDispatchToProps);
  var initMergeProps = mergePropsFactory(mergeProps);
  var shouldHandleStateChanges = Boolean(mapStateToProps);
  var wrapWithConnect = function wrapWithConnect(WrappedComponent) {
    if (process.env.NODE_ENV !== "production") {
      var isValid = isValidElementType(WrappedComponent);
      if (!isValid) throw new Error(`You must pass a component to the function returned by connect. Instead received ${stringifyComponent(WrappedComponent)}`);
    }
    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || "Component";
    var displayName = `Connect(${wrappedComponentName})`;
    var selectorFactoryOptions = {
      shouldHandleStateChanges: shouldHandleStateChanges,
      displayName: displayName,
      wrappedComponentName: wrappedComponentName,
      WrappedComponent: WrappedComponent,
      initMapStateToProps: initMapStateToProps,
      initMapDispatchToProps: initMapDispatchToProps,
      initMergeProps: initMergeProps,
      areStatesEqual: areStatesEqual,
      areStatePropsEqual: areStatePropsEqual,
      areOwnPropsEqual: areOwnPropsEqual,
      areMergedPropsEqual: areMergedPropsEqual
    };
    function ConnectFunction(props) {
      var _React$useMemo = React.useMemo(function () {
          var _a = props,
            reactReduxForwardedRef2 = _a.reactReduxForwardedRef,
            wrapperProps2 = __objRest(_a, ["reactReduxForwardedRef"]);
          return [props.context, reactReduxForwardedRef2, wrapperProps2];
        }, [props]),
        _React$useMemo2 = (0, _slicedToArray2.default)(_React$useMemo, 3),
        propsContext = _React$useMemo2[0],
        reactReduxForwardedRef = _React$useMemo2[1],
        wrapperProps = _React$useMemo2[2];
      var ContextToUse = React.useMemo(function () {
        var ResultContext = Context;
        if (propsContext == null ? void 0 : propsContext.Consumer) {
          if (process.env.NODE_ENV !== "production") {
            var _isValid = isContextConsumer(React.createElement(propsContext.Consumer, null));
            if (!_isValid) {
              throw new Error("You must pass a valid React context consumer as `props.context`");
            }
            ResultContext = propsContext;
          }
        }
        return ResultContext;
      }, [propsContext, Context]);
      var contextValue = React.useContext(ContextToUse);
      var didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);
      var didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);
      if (process.env.NODE_ENV !== "production" && !didStoreComeFromProps && !didStoreComeFromContext) {
        throw new Error(`Could not find "store" in the context of "${displayName}". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to ${displayName} in connect options.`);
      }
      var store = didStoreComeFromProps ? props.store : contextValue.store;
      var getServerState = didStoreComeFromContext ? contextValue.getServerState : store.getState;
      var childPropsSelector = React.useMemo(function () {
        return finalPropsSelectorFactory(store.dispatch, selectorFactoryOptions);
      }, [store]);
      var _React$useMemo3 = React.useMemo(function () {
          if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY;
          var subscription2 = createSubscription(store, didStoreComeFromProps ? void 0 : contextValue.subscription);
          var notifyNestedSubs2 = subscription2.notifyNestedSubs.bind(subscription2);
          return [subscription2, notifyNestedSubs2];
        }, [store, didStoreComeFromProps, contextValue]),
        _React$useMemo4 = (0, _slicedToArray2.default)(_React$useMemo3, 2),
        subscription = _React$useMemo4[0],
        notifyNestedSubs = _React$useMemo4[1];
      var overriddenContextValue = React.useMemo(function () {
        if (didStoreComeFromProps) {
          return contextValue;
        }
        return __spreadProps(__spreadValues({}, contextValue), {
          subscription: subscription
        });
      }, [didStoreComeFromProps, contextValue, subscription]);
      var lastChildProps = React.useRef();
      var lastWrapperProps = React.useRef(wrapperProps);
      var childPropsFromStoreUpdate = React.useRef();
      var renderIsScheduled = React.useRef(false);
      var isMounted = React.useRef(false);
      var latestSubscriptionCallbackError = React.useRef();
      useIsomorphicLayoutEffect(function () {
        isMounted.current = true;
        return function () {
          isMounted.current = false;
        };
      }, []);
      var actualChildPropsSelector = React.useMemo(function () {
        var selector = function selector() {
          if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {
            return childPropsFromStoreUpdate.current;
          }
          return childPropsSelector(store.getState(), wrapperProps);
        };
        return selector;
      }, [store, wrapperProps]);
      var subscribeForReact = React.useMemo(function () {
        var subscribe = function subscribe(reactListener) {
          if (!subscription) {
            return function () {};
          }
          return subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, reactListener);
        };
        return subscribe;
      }, [subscription]);
      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, childPropsFromStoreUpdate, notifyNestedSubs]);
      var actualChildProps;
      try {
        actualChildProps = useSyncExternalStore(subscribeForReact, actualChildPropsSelector, getServerState ? function () {
          return childPropsSelector(getServerState(), wrapperProps);
        } : actualChildPropsSelector);
      } catch (err) {
        if (latestSubscriptionCallbackError.current) {
          ;
          err.message += `
The error may be correlated with this previous error:
${latestSubscriptionCallbackError.current.stack}

`;
        }
        throw err;
      }
      useIsomorphicLayoutEffect(function () {
        latestSubscriptionCallbackError.current = void 0;
        childPropsFromStoreUpdate.current = void 0;
        lastChildProps.current = actualChildProps;
      });
      var renderedWrappedComponent = React.useMemo(function () {
        return React.createElement(WrappedComponent, __spreadProps(__spreadValues({}, actualChildProps), {
          ref: reactReduxForwardedRef
        }));
      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]);
      var renderedChild = React.useMemo(function () {
        if (shouldHandleStateChanges) {
          return React.createElement(ContextToUse.Provider, {
            value: overriddenContextValue
          }, renderedWrappedComponent);
        }
        return renderedWrappedComponent;
      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);
      return renderedChild;
    }
    var _Connect = React.memo(ConnectFunction);
    var Connect = _Connect;
    Connect.WrappedComponent = WrappedComponent;
    Connect.displayName = ConnectFunction.displayName = displayName;
    if (forwardRef) {
      var _forwarded = React.forwardRef(function forwardConnectRef(props, ref) {
        return React.createElement(Connect, __spreadProps(__spreadValues({}, props), {
          reactReduxForwardedRef: ref
        }));
      });
      var forwarded = _forwarded;
      forwarded.displayName = displayName;
      forwarded.WrappedComponent = WrappedComponent;
      return hoistNonReactStatics(forwarded, WrappedComponent);
    }
    return hoistNonReactStatics(Connect, WrappedComponent);
  };
  return wrapWithConnect;
}
var connect_default = exports.connect = connect;
function Provider(_ref6) {
  var store = _ref6.store,
    context = _ref6.context,
    children = _ref6.children,
    serverState = _ref6.serverState,
    _ref6$stabilityCheck = _ref6.stabilityCheck,
    stabilityCheck = _ref6$stabilityCheck === void 0 ? "once" : _ref6$stabilityCheck,
    _ref6$identityFunctio = _ref6.identityFunctionCheck,
    identityFunctionCheck = _ref6$identityFunctio === void 0 ? "once" : _ref6$identityFunctio;
  var contextValue = React.useMemo(function () {
    var subscription = createSubscription(store);
    return {
      store: store,
      subscription: subscription,
      getServerState: serverState ? function () {
        return serverState;
      } : void 0,
      stabilityCheck: stabilityCheck,
      identityFunctionCheck: identityFunctionCheck
    };
  }, [store, serverState, stabilityCheck, identityFunctionCheck]);
  var previousState = React.useMemo(function () {
    return store.getState();
  }, [store]);
  useIsomorphicLayoutEffect(function () {
    var subscription = contextValue.subscription;
    subscription.onStateChange = subscription.notifyNestedSubs;
    subscription.trySubscribe();
    if (previousState !== store.getState()) {
      subscription.notifyNestedSubs();
    }
    return function () {
      subscription.tryUnsubscribe();
      subscription.onStateChange = void 0;
    };
  }, [contextValue, previousState]);
  var Context = context || ReactReduxContext;
  return React.createElement(Context.Provider, {
    value: contextValue
  }, children);
}
var Provider_default = exports.Provider = Provider;
function createStoreHook() {
  var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ReactReduxContext;
  var useReduxContext2 = context === ReactReduxContext ? useReduxContext : createReduxContextHook(context);
  var useStore2 = function useStore2() {
    var _useReduxContext2 = useReduxContext2(),
      store = _useReduxContext2.store;
    return store;
  };
  Object.assign(useStore2, {
    withTypes: function withTypes() {
      return useStore2;
    }
  });
  return useStore2;
}
var useStore = exports.useStore = createStoreHook();
function createDispatchHook() {
  var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ReactReduxContext;
  var useStore2 = context === ReactReduxContext ? useStore : createStoreHook(context);
  var useDispatch2 = function useDispatch2() {
    var store = useStore2();
    return store.dispatch;
  };
  Object.assign(useDispatch2, {
    withTypes: function withTypes() {
      return useDispatch2;
    }
  });
  return useDispatch2;
}
var useDispatch = exports.useDispatch = createDispatchHook();
var batch = exports.batch = defaultNoopBatch;
initializeUseSelector(_withSelector.useSyncExternalStoreWithSelector);
initializeConnect(React2.useSyncExternalStore);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdDIiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJSZWFjdE9yaWdpbmFsIiwiX3dpdGhTZWxlY3RvciIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIlJlYWN0IiwiQ29udGV4dEtleSIsIlN5bWJvbCIsImZvciIsImdUIiwiZ2xvYmFsVGhpcyIsImdldENvbnRleHQiLCJfYSIsImNyZWF0ZUNvbnRleHQiLCJjb250ZXh0TWFwIiwiTWFwIiwicmVhbENvbnRleHQiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJkaXNwbGF5TmFtZSIsIlJlYWN0UmVkdXhDb250ZXh0IiwiZXhwb3J0cyIsIm5vdEluaXRpYWxpemVkIiwiRXJyb3IiLCJjcmVhdGVSZWR1eENvbnRleHRIb29rIiwiY29udGV4dCIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsInVzZVJlZHV4Q29udGV4dDIiLCJjb250ZXh0VmFsdWUiLCJ1c2VDb250ZXh0IiwidXNlUmVkdXhDb250ZXh0IiwidXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IiLCJpbml0aWFsaXplVXNlU2VsZWN0b3IiLCJmbiIsInJlZkVxdWFsaXR5IiwiYiIsImNyZWF0ZVNlbGVjdG9ySG9vayIsInVzZVNlbGVjdG9yMiIsInNlbGVjdG9yIiwiZXF1YWxpdHlGbk9yT3B0aW9ucyIsIl9yZWYiLCJlcXVhbGl0eUZuIiwiX3JlZiRlcXVhbGl0eUZuIiwiX3JlZiRkZXZNb2RlQ2hlY2tzIiwiZGV2TW9kZUNoZWNrcyIsIl91c2VSZWR1eENvbnRleHQiLCJzdG9yZSIsInN1YnNjcmlwdGlvbiIsImdldFNlcnZlclN0YXRlIiwic3RhYmlsaXR5Q2hlY2siLCJpZGVudGl0eUZ1bmN0aW9uQ2hlY2siLCJmaXJzdFJ1biIsInVzZVJlZiIsIndyYXBwZWRTZWxlY3RvciIsInVzZUNhbGxiYWNrIiwiX2RlZmluZVByb3BlcnR5MiIsIm5hbWUiLCJzdGF0ZSIsInNlbGVjdGVkIiwiX3NwcmVhZFZhbHVlcyIsIl9fc3ByZWFkVmFsdWVzIiwiZmluYWxJZGVudGl0eUZ1bmN0aW9uQ2hlY2siLCJmaW5hbFN0YWJpbGl0eUNoZWNrIiwiY3VycmVudCIsInRvQ29tcGFyZSIsInN0YWNrIiwiY29uc29sZSIsIndhcm4iLCJzZWxlY3RlZDIiLCJzZWxlY3RlZFN0YXRlIiwiYWRkTmVzdGVkU3ViIiwiZ2V0U3RhdGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwiYXNzaWduIiwid2l0aFR5cGVzIiwidXNlU2VsZWN0b3IiLCJSRUFDVF9FTEVNRU5UX1RZUEUiLCJSRUFDVF9QT1JUQUxfVFlQRSIsIlJFQUNUX0ZSQUdNRU5UX1RZUEUiLCJSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFIiwiUkVBQ1RfUFJPRklMRVJfVFlQRSIsIlJFQUNUX1BST1ZJREVSX1RZUEUiLCJSRUFDVF9DT05URVhUX1RZUEUiLCJSRUFDVF9TRVJWRVJfQ09OVEVYVF9UWVBFIiwiUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSIsIlJFQUNUX1NVU1BFTlNFX1RZUEUiLCJSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUiLCJSRUFDVF9NRU1PX1RZUEUiLCJSRUFDVF9MQVpZX1RZUEUiLCJSRUFDVF9PRkZTQ1JFRU5fVFlQRSIsIlJFQUNUX0NMSUVOVF9SRUZFUkVOQ0UiLCJGb3J3YXJkUmVmIiwiTWVtbyIsImlzVmFsaWRFbGVtZW50VHlwZSIsInR5cGUiLCIkJHR5cGVvZiIsImdldE1vZHVsZUlkIiwidHlwZU9mIiwib2JqZWN0IiwiJCR0eXBlb2ZUeXBlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc01lbW8iLCJ3YXJuaW5nIiwibWVzc2FnZSIsImVycm9yIiwidmVyaWZ5IiwibWV0aG9kTmFtZSIsInByb3RvdHlwZSIsInZlcmlmeVN1YnNlbGVjdG9ycyIsIm1hcFN0YXRlVG9Qcm9wcyIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsIm1lcmdlUHJvcHMiLCJwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImRpc3BhdGNoIiwiX3JlZjIiLCJhcmVTdGF0ZXNFcXVhbCIsImFyZU93blByb3BzRXF1YWwiLCJhcmVTdGF0ZVByb3BzRXF1YWwiLCJoYXNSdW5BdExlYXN0T25jZSIsIm93blByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJtZXJnZWRQcm9wcyIsImhhbmRsZUZpcnN0Q2FsbCIsImZpcnN0U3RhdGUiLCJmaXJzdE93blByb3BzIiwiaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSIsImRlcGVuZHNPbk93blByb3BzIiwiaGFuZGxlTmV3UHJvcHMiLCJoYW5kbGVOZXdTdGF0ZSIsIm5leHRTdGF0ZVByb3BzIiwic3RhdGVQcm9wc0NoYW5nZWQiLCJoYW5kbGVTdWJzZXF1ZW50Q2FsbHMiLCJuZXh0U3RhdGUiLCJuZXh0T3duUHJvcHMiLCJwcm9wc0NoYW5nZWQiLCJzdGF0ZUNoYW5nZWQiLCJwdXJlRmluYWxQcm9wc1NlbGVjdG9yIiwiZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsIl9iIiwiaW5pdE1hcFN0YXRlVG9Qcm9wcyIsImluaXRNYXBEaXNwYXRjaFRvUHJvcHMiLCJpbml0TWVyZ2VQcm9wcyIsIm9wdGlvbnMiLCJfX29ialJlc3QiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJhY3Rpb25DcmVhdG9ycyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJfbG9vcCIsImFjdGlvbkNyZWF0b3IiLCJrZXkiLCJhcHBseSIsImlzUGxhaW5PYmplY3QiLCJvYmoiLCJwcm90byIsImdldFByb3RvdHlwZU9mIiwiYmFzZVByb3RvIiwidmVyaWZ5UGxhaW5PYmplY3QiLCJ2YWx1ZSIsIndyYXBNYXBUb1Byb3BzQ29uc3RhbnQiLCJnZXRDb25zdGFudCIsImluaXRDb25zdGFudFNlbGVjdG9yIiwiY29uc3RhbnQiLCJjb25zdGFudFNlbGVjdG9yIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwiQm9vbGVhbiIsIndyYXBNYXBUb1Byb3BzRnVuYyIsImluaXRQcm94eVNlbGVjdG9yIiwiX3JlZjMiLCJwcm94eSIsIm1hcFRvUHJvcHNQcm94eSIsInN0YXRlT3JEaXNwYXRjaCIsImRldGVjdEZhY3RvcnlBbmRWZXJpZnkiLCJwcm9wcyIsImNyZWF0ZUludmFsaWRBcmdGYWN0b3J5IiwiYXJnIiwid3JhcHBlZENvbXBvbmVudE5hbWUiLCJtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3J5IiwibWFwU3RhdGVUb1Byb3BzRmFjdG9yeSIsImRlZmF1bHRNZXJnZVByb3BzIiwid3JhcE1lcmdlUHJvcHNGdW5jIiwiaW5pdE1lcmdlUHJvcHNQcm94eSIsIl9yZWY0IiwiYXJlTWVyZ2VkUHJvcHNFcXVhbCIsImhhc1J1bk9uY2UiLCJtZXJnZVByb3BzUHJveHkiLCJuZXh0TWVyZ2VkUHJvcHMiLCJtZXJnZVByb3BzRmFjdG9yeSIsImRlZmF1bHROb29wQmF0Y2giLCJjYWxsYmFjayIsImNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbiIsImZpcnN0IiwibGFzdCIsImNsZWFyIiwibm90aWZ5IiwibGlzdGVuZXIiLCJuZXh0IiwibGlzdGVuZXJzIiwicHVzaCIsInN1YnNjcmliZSIsImlzU3Vic2NyaWJlZCIsInByZXYiLCJ1bnN1YnNjcmliZSIsIm51bGxMaXN0ZW5lcnMiLCJjcmVhdGVTdWJzY3JpcHRpb24iLCJwYXJlbnRTdWIiLCJzdWJzY3JpcHRpb25zQW1vdW50Iiwic2VsZlN1YnNjcmliZWQiLCJ0cnlTdWJzY3JpYmUiLCJjbGVhbnVwTGlzdGVuZXIiLCJyZW1vdmVkIiwidHJ5VW5zdWJzY3JpYmUiLCJub3RpZnlOZXN0ZWRTdWJzIiwiaGFuZGxlQ2hhbmdlV3JhcHBlciIsIm9uU3RhdGVDaGFuZ2UiLCJ0cnlTdWJzY3JpYmVTZWxmIiwidHJ5VW5zdWJzY3JpYmVTZWxmIiwiZ2V0TGlzdGVuZXJzIiwiY2FuVXNlRE9NIiwid2luZG93IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaXNSZWFjdE5hdGl2ZSIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwidXNlTGF5b3V0RWZmZWN0IiwidXNlRWZmZWN0IiwiaXMiLCJ4IiwieSIsInNoYWxsb3dFcXVhbCIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJrZXlzIiwia2V5c0IiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsInByb3BUeXBlcyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsIkZPUldBUkRfUkVGX1NUQVRJQ1MiLCJyZW5kZXIiLCJNRU1PX1NUQVRJQ1MiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImluaGVyaXRlZENvbXBvbmVudCIsImNvbmNhdCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiZGVzY3JpcHRvciIsInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwiaW5pdGlhbGl6ZUNvbm5lY3QiLCJOT19TVUJTQ1JJUFRJT05fQVJSQVkiLCJzdHJpbmdpZnlDb21wb25lbnQiLCJDb21wIiwiSlNPTiIsInN0cmluZ2lmeSIsImVyciIsIlN0cmluZyIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyIsImVmZmVjdEZ1bmMiLCJlZmZlY3RBcmdzIiwiZGVwZW5kZW5jaWVzIiwiX3RvQ29uc3VtYWJsZUFycmF5MiIsImNhcHR1cmVXcmFwcGVyUHJvcHMiLCJsYXN0V3JhcHBlclByb3BzIiwibGFzdENoaWxkUHJvcHMiLCJyZW5kZXJJc1NjaGVkdWxlZCIsIndyYXBwZXJQcm9wcyIsImNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUiLCJzdWJzY3JpYmVVcGRhdGVzIiwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzIiwiY2hpbGRQcm9wc1NlbGVjdG9yIiwiaXNNb3VudGVkIiwiYWRkaXRpb25hbFN1YnNjcmliZUxpc3RlbmVyIiwiZGlkVW5zdWJzY3JpYmUiLCJsYXN0VGhyb3duRXJyb3IiLCJjaGVja0ZvclVwZGF0ZXMiLCJsYXRlc3RTdG9yZVN0YXRlIiwibmV3Q2hpbGRQcm9wcyIsInVuc3Vic2NyaWJlV3JhcHBlciIsInN0cmljdEVxdWFsIiwiaGFzV2FybmVkQWJvdXREZXByZWNhdGVkUHVyZU9wdGlvbiIsImNvbm5lY3QiLCJfcmVmNSIsInB1cmUiLCJfcmVmNSRhcmVTdGF0ZXNFcXVhbCIsIl9yZWY1JGFyZU93blByb3BzRXF1YSIsIl9yZWY1JGFyZVN0YXRlUHJvcHNFcSIsIl9yZWY1JGFyZU1lcmdlZFByb3BzRSIsIl9yZWY1JGZvcndhcmRSZWYiLCJmb3J3YXJkUmVmIiwiX3JlZjUkY29udGV4dCIsIkNvbnRleHQiLCJ3cmFwV2l0aENvbm5lY3QiLCJXcmFwcGVkQ29tcG9uZW50IiwiaXNWYWxpZCIsInNlbGVjdG9yRmFjdG9yeU9wdGlvbnMiLCJDb25uZWN0RnVuY3Rpb24iLCJfUmVhY3QkdXNlTWVtbyIsInVzZU1lbW8iLCJyZWFjdFJlZHV4Rm9yd2FyZGVkUmVmMiIsInJlYWN0UmVkdXhGb3J3YXJkZWRSZWYiLCJ3cmFwcGVyUHJvcHMyIiwiX1JlYWN0JHVzZU1lbW8yIiwiX3NsaWNlZFRvQXJyYXkyIiwicHJvcHNDb250ZXh0IiwiQ29udGV4dFRvVXNlIiwiUmVzdWx0Q29udGV4dCIsIkNvbnN1bWVyIiwiZGlkU3RvcmVDb21lRnJvbVByb3BzIiwiZGlkU3RvcmVDb21lRnJvbUNvbnRleHQiLCJfUmVhY3QkdXNlTWVtbzMiLCJzdWJzY3JpcHRpb24yIiwibm90aWZ5TmVzdGVkU3ViczIiLCJiaW5kIiwiX1JlYWN0JHVzZU1lbW80Iiwib3ZlcnJpZGRlbkNvbnRleHRWYWx1ZSIsIl9fc3ByZWFkUHJvcHMiLCJsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yIiwiYWN0dWFsQ2hpbGRQcm9wc1NlbGVjdG9yIiwic3Vic2NyaWJlRm9yUmVhY3QiLCJyZWFjdExpc3RlbmVyIiwiYWN0dWFsQ2hpbGRQcm9wcyIsInJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCIsInJlZiIsInJlbmRlcmVkQ2hpbGQiLCJQcm92aWRlciIsIl9Db25uZWN0IiwibWVtbyIsIkNvbm5lY3QiLCJfZm9yd2FyZGVkIiwiZm9yd2FyZENvbm5lY3RSZWYiLCJmb3J3YXJkZWQiLCJjb25uZWN0X2RlZmF1bHQiLCJfcmVmNiIsImNoaWxkcmVuIiwic2VydmVyU3RhdGUiLCJfcmVmNiRzdGFiaWxpdHlDaGVjayIsIl9yZWY2JGlkZW50aXR5RnVuY3RpbyIsInByZXZpb3VzU3RhdGUiLCJQcm92aWRlcl9kZWZhdWx0IiwiY3JlYXRlU3RvcmVIb29rIiwidXNlU3RvcmUyIiwiX3VzZVJlZHV4Q29udGV4dDIiLCJ1c2VTdG9yZSIsImNyZWF0ZURpc3BhdGNoSG9vayIsInVzZURpc3BhdGNoMiIsInVzZURpc3BhdGNoIiwiYmF0Y2giLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3RvcjIiXSwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiLCIuLi9zcmMvdXRpbHMvcmVhY3QudHMiLCIuLi9zcmMvY29tcG9uZW50cy9Db250ZXh0LnRzIiwiLi4vc3JjL3V0aWxzL3VzZVN5bmNFeHRlcm5hbFN0b3JlLnRzIiwiLi4vc3JjL2hvb2tzL3VzZVJlZHV4Q29udGV4dC50cyIsIi4uL3NyYy9ob29rcy91c2VTZWxlY3Rvci50cyIsIi4uL3NyYy91dGlscy9yZWFjdC1pcy50cyIsIi4uL3NyYy91dGlscy93YXJuaW5nLnRzIiwiLi4vc3JjL2Nvbm5lY3QvdmVyaWZ5U3Vic2VsZWN0b3JzLnRzIiwiLi4vc3JjL2Nvbm5lY3Qvc2VsZWN0b3JGYWN0b3J5LnRzIiwiLi4vc3JjL3V0aWxzL2JpbmRBY3Rpb25DcmVhdG9ycy50cyIsIi4uL3NyYy91dGlscy9pc1BsYWluT2JqZWN0LnRzIiwiLi4vc3JjL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0LnRzIiwiLi4vc3JjL2Nvbm5lY3Qvd3JhcE1hcFRvUHJvcHMudHMiLCIuLi9zcmMvY29ubmVjdC9pbnZhbGlkQXJnRmFjdG9yeS50cyIsIi4uL3NyYy9jb25uZWN0L21hcERpc3BhdGNoVG9Qcm9wcy50cyIsIi4uL3NyYy9jb25uZWN0L21hcFN0YXRlVG9Qcm9wcy50cyIsIi4uL3NyYy9jb25uZWN0L21lcmdlUHJvcHMudHMiLCIuLi9zcmMvdXRpbHMvYmF0Y2gudHMiLCIuLi9zcmMvdXRpbHMvU3Vic2NyaXB0aW9uLnRzIiwiLi4vc3JjL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QudHMiLCIuLi9zcmMvdXRpbHMvc2hhbGxvd0VxdWFsLnRzIiwiLi4vc3JjL3V0aWxzL2hvaXN0U3RhdGljcy50cyIsIi4uL3NyYy9jb21wb25lbnRzL2Nvbm5lY3QudHN4IiwiLi4vc3JjL2NvbXBvbmVudHMvUHJvdmlkZXIudHN4IiwiLi4vc3JjL2hvb2tzL3VzZVN0b3JlLnRzIiwiLi4vc3JjL2hvb2tzL3VzZURpc3BhdGNoLnRzIiwiLi4vc3JjL2V4cG9ydHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIHByaW1hcnkgZW50cnkgcG9pbnQgYXNzdW1lcyB3ZSBhcmUgd29ya2luZyB3aXRoIFJlYWN0IDE4LCBhbmQgdGh1cyBoYXZlXHJcbi8vIHVzZVN5bmNFeHRlcm5hbFN0b3JlIGF2YWlsYWJsZS4gV2UgY2FuIGltcG9ydCB0aGF0IGRpcmVjdGx5IGZyb20gUmVhY3QgaXRzZWxmLlxyXG4vLyBUaGUgdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IgaGFzIHRvIGJlIGltcG9ydGVkLCBidXQgd2UgY2FuIHVzZSB0aGVcclxuLy8gbm9uLXNoaW0gdmVyc2lvbi4gVGhpcyBzaGF2ZXMgb2ZmIHRoZSBieXRlIHNpemUgb2YgdGhlIHNoaW0uXHJcblxyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IgfSBmcm9tICd1c2Utc3luYy1leHRlcm5hbC1zdG9yZS93aXRoLXNlbGVjdG9yLmpzJ1xyXG5cclxuaW1wb3J0IHsgaW5pdGlhbGl6ZVVzZVNlbGVjdG9yIH0gZnJvbSAnLi9ob29rcy91c2VTZWxlY3RvcidcclxuaW1wb3J0IHsgaW5pdGlhbGl6ZUNvbm5lY3QgfSBmcm9tICcuL2NvbXBvbmVudHMvY29ubmVjdCdcclxuXHJcbmluaXRpYWxpemVVc2VTZWxlY3Rvcih1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3RvcilcclxuaW5pdGlhbGl6ZUNvbm5lY3QoUmVhY3QudXNlU3luY0V4dGVybmFsU3RvcmUpXHJcblxyXG5leHBvcnQgKiBmcm9tICcuL2V4cG9ydHMnXHJcbiIsImltcG9ydCAqIGFzIFJlYWN0T3JpZ2luYWwgZnJvbSAncmVhY3QnXHJcbmltcG9ydCB0eXBlICogYXMgUmVhY3ROYW1lc3BhY2UgZnJvbSAncmVhY3QnXHJcblxyXG5leHBvcnQgY29uc3QgUmVhY3Q6IHR5cGVvZiBSZWFjdE5hbWVzcGFjZSA9XHJcbiAgLy8gcHJldHRpZXItaWdub3JlXHJcbiAgLy8gQHRzLWlnbm9yZVxyXG4gICdkZWZhdWx0JyBpbiBSZWFjdE9yaWdpbmFsID8gUmVhY3RPcmlnaW5hbFsnZGVmYXVsdCddIDogUmVhY3RPcmlnaW5hbCBhcyBhbnlcclxuIiwiaW1wb3J0IHR5cGUgeyBDb250ZXh0IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBSZWFjdCB9IGZyb20gJy4uL3V0aWxzL3JlYWN0J1xuaW1wb3J0IHR5cGUgeyBBY3Rpb24sIFN0b3JlLCBVbmtub3duQWN0aW9uIH0gZnJvbSAncmVkdXgnXG5pbXBvcnQgdHlwZSB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbidcbmltcG9ydCB0eXBlIHsgUHJvdmlkZXJQcm9wcyB9IGZyb20gJy4vUHJvdmlkZXInXG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVhY3RSZWR1eENvbnRleHRWYWx1ZTxcbiAgU1MgPSBhbnksXG4gIEEgZXh0ZW5kcyBBY3Rpb248c3RyaW5nPiA9IFVua25vd25BY3Rpb24sXG4+IGV4dGVuZHMgUGljazxQcm92aWRlclByb3BzLCAnc3RhYmlsaXR5Q2hlY2snIHwgJ2lkZW50aXR5RnVuY3Rpb25DaGVjayc+IHtcbiAgc3RvcmU6IFN0b3JlPFNTLCBBPlxuICBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvblxuICBnZXRTZXJ2ZXJTdGF0ZT86ICgpID0+IFNTXG59XG5cbmNvbnN0IENvbnRleHRLZXkgPSBTeW1ib2wuZm9yKGByZWFjdC1yZWR1eC1jb250ZXh0YClcbmNvbnN0IGdUOiB7XG4gIFtDb250ZXh0S2V5XT86IE1hcDxcbiAgICB0eXBlb2YgUmVhY3QuY3JlYXRlQ29udGV4dCxcbiAgICBDb250ZXh0PFJlYWN0UmVkdXhDb250ZXh0VmFsdWUgfCBudWxsPlxuICA+XG59ID0gKFxuICB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IGdsb2JhbFRoaXNcbiAgICA6IC8qIGZhbGwgYmFjayB0byBhIHBlci1tb2R1bGUgc2NvcGUgKHByZS04LjEgYmVoYXZpb3VyKSBpZiBgZ2xvYmFsVGhpc2AgaXMgbm90IGF2YWlsYWJsZSAqLyB7fVxuKSBhcyBhbnlcblxuZnVuY3Rpb24gZ2V0Q29udGV4dCgpOiBDb250ZXh0PFJlYWN0UmVkdXhDb250ZXh0VmFsdWUgfCBudWxsPiB7XG4gIGlmICghUmVhY3QuY3JlYXRlQ29udGV4dCkgcmV0dXJuIHt9IGFzIGFueVxuXG4gIGNvbnN0IGNvbnRleHRNYXAgPSAoZ1RbQ29udGV4dEtleV0gPz89IG5ldyBNYXA8XG4gICAgdHlwZW9mIFJlYWN0LmNyZWF0ZUNvbnRleHQsXG4gICAgQ29udGV4dDxSZWFjdFJlZHV4Q29udGV4dFZhbHVlIHwgbnVsbD5cbiAgPigpKVxuICBsZXQgcmVhbENvbnRleHQgPSBjb250ZXh0TWFwLmdldChSZWFjdC5jcmVhdGVDb250ZXh0KVxuICBpZiAoIXJlYWxDb250ZXh0KSB7XG4gICAgcmVhbENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PFJlYWN0UmVkdXhDb250ZXh0VmFsdWUgfCBudWxsPihcbiAgICAgIG51bGwgYXMgYW55LFxuICAgIClcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmVhbENvbnRleHQuZGlzcGxheU5hbWUgPSAnUmVhY3RSZWR1eCdcbiAgICB9XG4gICAgY29udGV4dE1hcC5zZXQoUmVhY3QuY3JlYXRlQ29udGV4dCwgcmVhbENvbnRleHQpXG4gIH1cbiAgcmV0dXJuIHJlYWxDb250ZXh0XG59XG5cbmV4cG9ydCBjb25zdCBSZWFjdFJlZHV4Q29udGV4dCA9IC8qI19fUFVSRV9fKi8gZ2V0Q29udGV4dCgpXG5cbmV4cG9ydCB0eXBlIFJlYWN0UmVkdXhDb250ZXh0SW5zdGFuY2UgPSB0eXBlb2YgUmVhY3RSZWR1eENvbnRleHRcblxuZXhwb3J0IGRlZmF1bHQgUmVhY3RSZWR1eENvbnRleHRcbiIsImltcG9ydCB0eXBlIHsgdXNlU3luY0V4dGVybmFsU3RvcmUgfSBmcm9tICd1c2Utc3luYy1leHRlcm5hbC1zdG9yZSdcclxuaW1wb3J0IHR5cGUgeyB1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3RvciB9IGZyb20gJ3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlL3dpdGgtc2VsZWN0b3InXHJcblxyXG5leHBvcnQgY29uc3Qgbm90SW5pdGlhbGl6ZWQgPSAoKSA9PiB7XHJcbiAgdGhyb3cgbmV3IEVycm9yKCd1U0VTIG5vdCBpbml0aWFsaXplZCEnKVxyXG59XHJcblxyXG5leHBvcnQgdHlwZSB1U0VTID0gdHlwZW9mIHVzZVN5bmNFeHRlcm5hbFN0b3JlXHJcbmV4cG9ydCB0eXBlIHVTRVNXUyA9IHR5cGVvZiB1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3RvclxyXG4iLCJpbXBvcnQgeyBSZWFjdCB9IGZyb20gJy4uL3V0aWxzL3JlYWN0J1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnXG5pbXBvcnQgdHlwZSB7IFJlYWN0UmVkdXhDb250ZXh0VmFsdWUgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnXG5cbi8qKlxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZVJlZHV4Q29udGV4dGAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuIFRoaXMgaXMgYSBsb3ctbGV2ZWxcbiAqIGhvb2sgdGhhdCB5b3Ugc2hvdWxkIHVzdWFsbHkgbm90IG5lZWQgdG8gY2FsbCBkaXJlY3RseS5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlUmVkdXhDb250ZXh0YCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlZHV4Q29udGV4dEhvb2soY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0KSB7XG4gIHJldHVybiBmdW5jdGlvbiB1c2VSZWR1eENvbnRleHQoKTogUmVhY3RSZWR1eENvbnRleHRWYWx1ZSB7XG4gICAgY29uc3QgY29udGV4dFZhbHVlID0gUmVhY3QudXNlQ29udGV4dChjb250ZXh0KVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbnRleHRWYWx1ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnY291bGQgbm90IGZpbmQgcmVhY3QtcmVkdXggY29udGV4dCB2YWx1ZTsgcGxlYXNlIGVuc3VyZSB0aGUgY29tcG9uZW50IGlzIHdyYXBwZWQgaW4gYSA8UHJvdmlkZXI+JyxcbiAgICAgIClcbiAgICB9XG5cbiAgICByZXR1cm4gY29udGV4dFZhbHVlIVxuICB9XG59XG5cbi8qKlxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGAuIFRoaXMgaXMgYSBsb3ctbGV2ZWxcbiAqIGhvb2sgdGhhdCB5b3Ugc2hvdWxkIHVzdWFsbHkgbm90IG5lZWQgdG8gY2FsbCBkaXJlY3RseS5cbiAqXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGBcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbiAqIGltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuICpcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCB7IHN0b3JlIH0gPSB1c2VSZWR1eENvbnRleHQoKVxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cbiAqIH1cbiAqL1xuZXhwb3J0IGNvbnN0IHVzZVJlZHV4Q29udGV4dCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlUmVkdXhDb250ZXh0SG9vaygpXG4iLCIvL2ltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgUmVhY3QgfSBmcm9tICcuLi91dGlscy9yZWFjdCdcblxuaW1wb3J0IHR5cGUgeyBSZWFjdFJlZHV4Q29udGV4dFZhbHVlIH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0J1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnXG5pbXBvcnQgdHlwZSB7IEVxdWFsaXR5Rm4sIE5vSW5mZXIgfSBmcm9tICcuLi90eXBlcydcbmltcG9ydCB0eXBlIHsgdVNFU1dTIH0gZnJvbSAnLi4vdXRpbHMvdXNlU3luY0V4dGVybmFsU3RvcmUnXG5pbXBvcnQgeyBub3RJbml0aWFsaXplZCB9IGZyb20gJy4uL3V0aWxzL3VzZVN5bmNFeHRlcm5hbFN0b3JlJ1xuaW1wb3J0IHtcbiAgY3JlYXRlUmVkdXhDb250ZXh0SG9vayxcbiAgdXNlUmVkdXhDb250ZXh0IGFzIHVzZURlZmF1bHRSZWR1eENvbnRleHQsXG59IGZyb20gJy4vdXNlUmVkdXhDb250ZXh0J1xuXG4vKipcbiAqIFRoZSBmcmVxdWVuY3kgb2YgZGV2ZWxvcG1lbnQgbW9kZSBjaGVja3MuXG4gKlxuICogQHNpbmNlIDguMS4wXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IHR5cGUgRGV2TW9kZUNoZWNrRnJlcXVlbmN5ID0gJ25ldmVyJyB8ICdvbmNlJyB8ICdhbHdheXMnXG5cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgY29uZmlndXJhdGlvbiBmb3IgZGV2ZWxvcG1lbnQgbW9kZSBjaGVja3MuXG4gKlxuICogQHNpbmNlIDkuMC4wXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEZXZNb2RlQ2hlY2tzIHtcbiAgLyoqXG4gICAqIE92ZXJyaWRlcyB0aGUgZ2xvYmFsIHN0YWJpbGl0eSBjaGVjayBmb3IgdGhlIHNlbGVjdG9yLlxuICAgKiAtIGBvbmNlYCAtIFJ1biBvbmx5IHRoZSBmaXJzdCB0aW1lIHRoZSBzZWxlY3RvciBpcyBjYWxsZWQuXG4gICAqIC0gYGFsd2F5c2AgLSBSdW4gZXZlcnkgdGltZSB0aGUgc2VsZWN0b3IgaXMgY2FsbGVkLlxuICAgKiAtIGBuZXZlcmAgLSBOZXZlciBydW4gdGhlIHN0YWJpbGl0eSBjaGVjay5cbiAgICpcbiAgICogQGRlZmF1bHQgJ29uY2UnXG4gICAqXG4gICAqIEBzaW5jZSA4LjEuMFxuICAgKi9cbiAgc3RhYmlsaXR5Q2hlY2s6IERldk1vZGVDaGVja0ZyZXF1ZW5jeVxuXG4gIC8qKlxuICAgKiBPdmVycmlkZXMgdGhlIGdsb2JhbCBpZGVudGl0eSBmdW5jdGlvbiBjaGVjayBmb3IgdGhlIHNlbGVjdG9yLlxuICAgKiAtIGBvbmNlYCAtIFJ1biBvbmx5IHRoZSBmaXJzdCB0aW1lIHRoZSBzZWxlY3RvciBpcyBjYWxsZWQuXG4gICAqIC0gYGFsd2F5c2AgLSBSdW4gZXZlcnkgdGltZSB0aGUgc2VsZWN0b3IgaXMgY2FsbGVkLlxuICAgKiAtIGBuZXZlcmAgLSBOZXZlciBydW4gdGhlIGlkZW50aXR5IGZ1bmN0aW9uIGNoZWNrLlxuICAgKlxuICAgKiAqKk5vdGUqKjogUHJldmlvdXNseSByZWZlcnJlZCB0byBhcyBgbm9vcENoZWNrYC5cbiAgICpcbiAgICogQGRlZmF1bHQgJ29uY2UnXG4gICAqXG4gICAqIEBzaW5jZSA5LjAuMFxuICAgKi9cbiAgaWRlbnRpdHlGdW5jdGlvbkNoZWNrOiBEZXZNb2RlQ2hlY2tGcmVxdWVuY3lcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VTZWxlY3Rvck9wdGlvbnM8U2VsZWN0ZWQgPSB1bmtub3duPiB7XG4gIGVxdWFsaXR5Rm4/OiBFcXVhbGl0eUZuPFNlbGVjdGVkPlxuXG4gIC8qKlxuICAgKiBgdXNlU2VsZWN0b3JgIHBlcmZvcm1zIGFkZGl0aW9uYWwgY2hlY2tzIGluIGRldmVsb3BtZW50IG1vZGUgdG8gaGVscFxuICAgKiBpZGVudGlmeSBhbmQgd2FybiBhYm91dCBwb3RlbnRpYWwgaXNzdWVzIGluIHNlbGVjdG9yIGJlaGF2aW9yLiBUaGlzXG4gICAqIG9wdGlvbiBhbGxvd3MgeW91IHRvIGN1c3RvbWl6ZSB0aGUgYmVoYXZpb3Igb2YgdGhlc2UgY2hlY2tzIHBlciBzZWxlY3Rvci5cbiAgICpcbiAgICogQHNpbmNlIDkuMC4wXG4gICAqL1xuICBkZXZNb2RlQ2hlY2tzPzogUGFydGlhbDxEZXZNb2RlQ2hlY2tzPlxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBjdXN0b20gaG9vayB0aGF0IGFsbG93cyB5b3UgdG8gZXh0cmFjdCBkYXRhIGZyb20gdGhlXG4gKiBSZWR1eCBzdG9yZSBzdGF0ZSwgdXNpbmcgYSBzZWxlY3RvciBmdW5jdGlvbi4gVGhlIHNlbGVjdG9yIGZ1bmN0aW9uXG4gKiB0YWtlcyB0aGUgY3VycmVudCBzdGF0ZSBhcyBhbiBhcmd1bWVudCBhbmQgcmV0dXJucyBhIHBhcnQgb2YgdGhlIHN0YXRlXG4gKiBvciBzb21lIGRlcml2ZWQgZGF0YS4gVGhlIGhvb2sgYWxzbyBzdXBwb3J0cyBhbiBvcHRpb25hbCBlcXVhbGl0eVxuICogZnVuY3Rpb24gb3Igb3B0aW9ucyBvYmplY3QgdG8gY3VzdG9taXplIGl0cyBiZWhhdmlvci5cbiAqXG4gKiBAdGVtcGxhdGUgU3RhdGVUeXBlIC0gVGhlIHNwZWNpZmljIHR5cGUgb2Ygc3RhdGUgdGhpcyBob29rIG9wZXJhdGVzIG9uLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBVc2VTZWxlY3RvcjxTdGF0ZVR5cGUgPSB1bmtub3duPiB7XG4gIC8qKlxuICAgKiBBIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSBzZWxlY3RvciBmdW5jdGlvbiBhcyBpdHMgZmlyc3QgYXJndW1lbnQuXG4gICAqIFRoZSBzZWxlY3RvciBmdW5jdGlvbiBpcyByZXNwb25zaWJsZSBmb3Igc2VsZWN0aW5nIGEgcGFydCBvZlxuICAgKiB0aGUgUmVkdXggc3RvcmUncyBzdGF0ZSBvciBjb21wdXRpbmcgZGVyaXZlZCBkYXRhLlxuICAgKlxuICAgKiBAcGFyYW0gc2VsZWN0b3IgLSBBIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgdGhlIGN1cnJlbnQgc3RhdGUgYW5kIHJldHVybnMgYSBwYXJ0IG9mIHRoZSBzdGF0ZSBvciBzb21lIGRlcml2ZWQgZGF0YS5cbiAgICogQHBhcmFtIGVxdWFsaXR5Rm5Pck9wdGlvbnMgLSBBbiBvcHRpb25hbCBlcXVhbGl0eSBmdW5jdGlvbiBvciBvcHRpb25zIG9iamVjdCBmb3IgY3VzdG9taXppbmcgdGhlIGJlaGF2aW9yIG9mIHRoZSBzZWxlY3Rvci5cbiAgICogQHJldHVybnMgVGhlIHNlbGVjdGVkIHBhcnQgb2YgdGhlIHN0YXRlIG9yIGRlcml2ZWQgZGF0YS5cbiAgICpcbiAgICogQHRlbXBsYXRlIFRTdGF0ZSAtIFRoZSBzcGVjaWZpYyB0eXBlIG9mIHN0YXRlIHRoaXMgaG9vayBvcGVyYXRlcyBvbi5cbiAgICogQHRlbXBsYXRlIFNlbGVjdGVkIC0gVGhlIHR5cGUgb2YgdGhlIHZhbHVlIHRoYXQgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIHdpbGwgcmV0dXJuLlxuICAgKi9cbiAgPFRTdGF0ZSBleHRlbmRzIFN0YXRlVHlwZSA9IFN0YXRlVHlwZSwgU2VsZWN0ZWQgPSB1bmtub3duPihcbiAgICBzZWxlY3RvcjogKHN0YXRlOiBUU3RhdGUpID0+IFNlbGVjdGVkLFxuICAgIGVxdWFsaXR5Rm5Pck9wdGlvbnM/OiBFcXVhbGl0eUZuPFNlbGVjdGVkPiB8IFVzZVNlbGVjdG9yT3B0aW9uczxTZWxlY3RlZD4sXG4gICk6IFNlbGVjdGVkXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBcInByZS10eXBlZFwiIHZlcnNpb24gb2Yge0BsaW5rY29kZSB1c2VTZWxlY3RvciB1c2VTZWxlY3Rvcn1cbiAgICogd2hlcmUgdGhlIGBzdGF0ZWAgdHlwZSBpcyBwcmVkZWZpbmVkLlxuICAgKlxuICAgKiBUaGlzIGFsbG93cyB5b3UgdG8gc2V0IHRoZSBgc3RhdGVgIHR5cGUgb25jZSwgZWxpbWluYXRpbmcgdGhlIG5lZWQgdG9cbiAgICogc3BlY2lmeSBpdCB3aXRoIGV2ZXJ5IHtAbGlua2NvZGUgdXNlU2VsZWN0b3IgdXNlU2VsZWN0b3J9IGNhbGwuXG4gICAqXG4gICAqIEByZXR1cm5zIEEgcHJlLXR5cGVkIGB1c2VTZWxlY3RvcmAgd2l0aCB0aGUgc3RhdGUgdHlwZSBhbHJlYWR5IGRlZmluZWQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYHRzXG4gICAqIGV4cG9ydCBjb25zdCB1c2VBcHBTZWxlY3RvciA9IHVzZVNlbGVjdG9yLndpdGhUeXBlczxSb290U3RhdGU+KClcbiAgICogYGBgXG4gICAqXG4gICAqIEB0ZW1wbGF0ZSBPdmVycmlkZVN0YXRlVHlwZSAtIFRoZSBzcGVjaWZpYyB0eXBlIG9mIHN0YXRlIHRoaXMgaG9vayBvcGVyYXRlcyBvbi5cbiAgICpcbiAgICogQHNpbmNlIDkuMS4wXG4gICAqL1xuICB3aXRoVHlwZXM6IDxcbiAgICBPdmVycmlkZVN0YXRlVHlwZSBleHRlbmRzIFN0YXRlVHlwZSxcbiAgPigpID0+IFVzZVNlbGVjdG9yPE92ZXJyaWRlU3RhdGVUeXBlPlxufVxuXG5sZXQgdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IgPSBub3RJbml0aWFsaXplZCBhcyB1U0VTV1NcbmV4cG9ydCBjb25zdCBpbml0aWFsaXplVXNlU2VsZWN0b3IgPSAoZm46IHVTRVNXUykgPT4ge1xuICB1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3RvciA9IGZuXG59XG5cbmNvbnN0IHJlZkVxdWFsaXR5OiBFcXVhbGl0eUZuPGFueT4gPSAoYSwgYikgPT4gYSA9PT0gYlxuXG4vKipcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9ySG9vayhcbiAgY29udGV4dDogUmVhY3QuQ29udGV4dDxSZWFjdFJlZHV4Q29udGV4dFZhbHVlPFxuICAgIGFueSxcbiAgICBhbnlcbiAgPiB8IG51bGw+ID0gUmVhY3RSZWR1eENvbnRleHQsXG4pOiBVc2VTZWxlY3RvciB7XG4gIGNvbnN0IHVzZVJlZHV4Q29udGV4dCA9XG4gICAgY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHRcbiAgICAgID8gdXNlRGVmYXVsdFJlZHV4Q29udGV4dFxuICAgICAgOiBjcmVhdGVSZWR1eENvbnRleHRIb29rKGNvbnRleHQpXG5cbiAgY29uc3QgdXNlU2VsZWN0b3IgPSA8VFN0YXRlLCBTZWxlY3RlZCBleHRlbmRzIHVua25vd24+KFxuICAgIHNlbGVjdG9yOiAoc3RhdGU6IFRTdGF0ZSkgPT4gU2VsZWN0ZWQsXG4gICAgZXF1YWxpdHlGbk9yT3B0aW9uczpcbiAgICAgIHwgRXF1YWxpdHlGbjxOb0luZmVyPFNlbGVjdGVkPj5cbiAgICAgIHwgVXNlU2VsZWN0b3JPcHRpb25zPE5vSW5mZXI8U2VsZWN0ZWQ+PiA9IHt9LFxuICApOiBTZWxlY3RlZCA9PiB7XG4gICAgY29uc3QgeyBlcXVhbGl0eUZuID0gcmVmRXF1YWxpdHksIGRldk1vZGVDaGVja3MgPSB7fSB9ID1cbiAgICAgIHR5cGVvZiBlcXVhbGl0eUZuT3JPcHRpb25zID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8geyBlcXVhbGl0eUZuOiBlcXVhbGl0eUZuT3JPcHRpb25zIH1cbiAgICAgICAgOiBlcXVhbGl0eUZuT3JPcHRpb25zXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBZb3UgbXVzdCBwYXNzIGEgc2VsZWN0b3IgdG8gdXNlU2VsZWN0b3JgKVxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBzZWxlY3RvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFlvdSBtdXN0IHBhc3MgYSBmdW5jdGlvbiBhcyBhIHNlbGVjdG9yIHRvIHVzZVNlbGVjdG9yYClcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgZXF1YWxpdHlGbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYFlvdSBtdXN0IHBhc3MgYSBmdW5jdGlvbiBhcyBhbiBlcXVhbGl0eSBmdW5jdGlvbiB0byB1c2VTZWxlY3RvcmAsXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB7XG4gICAgICBzdG9yZSxcbiAgICAgIHN1YnNjcmlwdGlvbixcbiAgICAgIGdldFNlcnZlclN0YXRlLFxuICAgICAgc3RhYmlsaXR5Q2hlY2ssXG4gICAgICBpZGVudGl0eUZ1bmN0aW9uQ2hlY2ssXG4gICAgfSA9IHVzZVJlZHV4Q29udGV4dCgpXG5cbiAgICBjb25zdCBmaXJzdFJ1biA9IFJlYWN0LnVzZVJlZih0cnVlKVxuXG4gICAgY29uc3Qgd3JhcHBlZFNlbGVjdG9yID0gUmVhY3QudXNlQ2FsbGJhY2s8dHlwZW9mIHNlbGVjdG9yPihcbiAgICAgIHtcbiAgICAgICAgW3NlbGVjdG9yLm5hbWVdKHN0YXRlOiBUU3RhdGUpIHtcbiAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9IHNlbGVjdG9yKHN0YXRlKVxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgIGlkZW50aXR5RnVuY3Rpb25DaGVjazogZmluYWxJZGVudGl0eUZ1bmN0aW9uQ2hlY2ssXG4gICAgICAgICAgICAgIHN0YWJpbGl0eUNoZWNrOiBmaW5hbFN0YWJpbGl0eUNoZWNrLFxuICAgICAgICAgICAgfSA9IHtcbiAgICAgICAgICAgICAgc3RhYmlsaXR5Q2hlY2ssXG4gICAgICAgICAgICAgIGlkZW50aXR5RnVuY3Rpb25DaGVjayxcbiAgICAgICAgICAgICAgLi4uZGV2TW9kZUNoZWNrcyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgZmluYWxTdGFiaWxpdHlDaGVjayA9PT0gJ2Fsd2F5cycgfHxcbiAgICAgICAgICAgICAgKGZpbmFsU3RhYmlsaXR5Q2hlY2sgPT09ICdvbmNlJyAmJiBmaXJzdFJ1bi5jdXJyZW50KVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHRvQ29tcGFyZSA9IHNlbGVjdG9yKHN0YXRlKVxuICAgICAgICAgICAgICBpZiAoIWVxdWFsaXR5Rm4oc2VsZWN0ZWQsIHRvQ29tcGFyZSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgc3RhY2s6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1leHRyYS1zZW1pXG4gICAgICAgICAgICAgICAgICA7KHsgc3RhY2sgfSA9IGUgYXMgRXJyb3IpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAgICdTZWxlY3RvciAnICtcbiAgICAgICAgICAgICAgICAgICAgKHNlbGVjdG9yLm5hbWUgfHwgJ3Vua25vd24nKSArXG4gICAgICAgICAgICAgICAgICAgICcgcmV0dXJuZWQgYSBkaWZmZXJlbnQgcmVzdWx0IHdoZW4gY2FsbGVkIHdpdGggdGhlIHNhbWUgcGFyYW1ldGVycy4gVGhpcyBjYW4gbGVhZCB0byB1bm5lY2Vzc2FyeSByZXJlbmRlcnMuJyArXG4gICAgICAgICAgICAgICAgICAgICdcXG5TZWxlY3RvcnMgdGhhdCByZXR1cm4gYSBuZXcgcmVmZXJlbmNlIChzdWNoIGFzIGFuIG9iamVjdCBvciBhbiBhcnJheSkgc2hvdWxkIGJlIG1lbW9pemVkOiBodHRwczovL3JlZHV4LmpzLm9yZy91c2FnZS9kZXJpdmluZy1kYXRhLXNlbGVjdG9ycyNvcHRpbWl6aW5nLXNlbGVjdG9ycy13aXRoLW1lbW9pemF0aW9uJyxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkLFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZDI6IHRvQ29tcGFyZSxcbiAgICAgICAgICAgICAgICAgICAgc3RhY2ssXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBmaW5hbElkZW50aXR5RnVuY3Rpb25DaGVjayA9PT0gJ2Fsd2F5cycgfHxcbiAgICAgICAgICAgICAgKGZpbmFsSWRlbnRpdHlGdW5jdGlvbkNoZWNrID09PSAnb25jZScgJiYgZmlyc3RSdW4uY3VycmVudClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgIGlmIChzZWxlY3RlZCA9PT0gc3RhdGUpIHtcbiAgICAgICAgICAgICAgICBsZXQgc3RhY2s6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1leHRyYS1zZW1pXG4gICAgICAgICAgICAgICAgICA7KHsgc3RhY2sgfSA9IGUgYXMgRXJyb3IpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAgICdTZWxlY3RvciAnICtcbiAgICAgICAgICAgICAgICAgICAgKHNlbGVjdG9yLm5hbWUgfHwgJ3Vua25vd24nKSArXG4gICAgICAgICAgICAgICAgICAgICcgcmV0dXJuZWQgdGhlIHJvb3Qgc3RhdGUgd2hlbiBjYWxsZWQuIFRoaXMgY2FuIGxlYWQgdG8gdW5uZWNlc3NhcnkgcmVyZW5kZXJzLicgK1xuICAgICAgICAgICAgICAgICAgICAnXFxuU2VsZWN0b3JzIHRoYXQgcmV0dXJuIHRoZSBlbnRpcmUgc3RhdGUgYXJlIGFsbW9zdCBjZXJ0YWlubHkgYSBtaXN0YWtlLCBhcyB0aGV5IHdpbGwgY2F1c2UgYSByZXJlbmRlciB3aGVuZXZlciAqYW55dGhpbmcqIGluIHN0YXRlIGNoYW5nZXMuJyxcbiAgICAgICAgICAgICAgICAgIHsgc3RhY2sgfSxcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmaXJzdFJ1bi5jdXJyZW50KSBmaXJzdFJ1bi5jdXJyZW50ID0gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHNlbGVjdGVkXG4gICAgICAgIH0sXG4gICAgICB9W3NlbGVjdG9yLm5hbWVdLFxuICAgICAgW3NlbGVjdG9yLCBzdGFiaWxpdHlDaGVjaywgZGV2TW9kZUNoZWNrcy5zdGFiaWxpdHlDaGVja10sXG4gICAgKVxuXG4gICAgY29uc3Qgc2VsZWN0ZWRTdGF0ZSA9IHVzZVN5bmNFeHRlcm5hbFN0b3JlV2l0aFNlbGVjdG9yKFxuICAgICAgc3Vic2NyaXB0aW9uLmFkZE5lc3RlZFN1YixcbiAgICAgIHN0b3JlLmdldFN0YXRlLFxuICAgICAgZ2V0U2VydmVyU3RhdGUgfHwgc3RvcmUuZ2V0U3RhdGUsXG4gICAgICB3cmFwcGVkU2VsZWN0b3IsXG4gICAgICBlcXVhbGl0eUZuLFxuICAgIClcblxuICAgIFJlYWN0LnVzZURlYnVnVmFsdWUoc2VsZWN0ZWRTdGF0ZSlcblxuICAgIHJldHVybiBzZWxlY3RlZFN0YXRlXG4gIH1cblxuICBPYmplY3QuYXNzaWduKHVzZVNlbGVjdG9yLCB7XG4gICAgd2l0aFR5cGVzOiAoKSA9PiB1c2VTZWxlY3RvcixcbiAgfSlcblxuICByZXR1cm4gdXNlU2VsZWN0b3IgYXMgVXNlU2VsZWN0b3Jcbn1cblxuLyoqXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBzdG9yZSdzIHN0YXRlLiBUaGlzIGhvb2sgdGFrZXMgYSBzZWxlY3RvciBmdW5jdGlvblxuICogYXMgYW4gYXJndW1lbnQuIFRoZSBzZWxlY3RvciBpcyBjYWxsZWQgd2l0aCB0aGUgc3RvcmUgc3RhdGUuXG4gKlxuICogVGhpcyBob29rIHRha2VzIGFuIG9wdGlvbmFsIGVxdWFsaXR5IGNvbXBhcmlzb24gZnVuY3Rpb24gYXMgdGhlIHNlY29uZCBwYXJhbWV0ZXJcbiAqIHRoYXQgYWxsb3dzIHlvdSB0byBjdXN0b21pemUgdGhlIHdheSB0aGUgc2VsZWN0ZWQgc3RhdGUgaXMgY29tcGFyZWQgdG8gZGV0ZXJtaW5lXG4gKiB3aGV0aGVyIHRoZSBjb21wb25lbnQgbmVlZHMgdG8gYmUgcmUtcmVuZGVyZWQuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2VsZWN0b3IgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXF1YWxpdHlGbiB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGVxdWFsaXR5XG4gKlxuICogQHJldHVybnMge2FueX0gdGhlIHNlbGVjdGVkIHN0YXRlXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG4gKiBpbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuICpcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCBjb3VudGVyID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUuY291bnRlcilcbiAqICAgcmV0dXJuIDxkaXY+e2NvdW50ZXJ9PC9kaXY+XG4gKiB9XG4gKi9cbmV4cG9ydCBjb25zdCB1c2VTZWxlY3RvciA9IC8qI19fUFVSRV9fKi8gY3JlYXRlU2VsZWN0b3JIb29rKClcbiIsImltcG9ydCB0eXBlIHsgRWxlbWVudFR5cGUsIE1lbW9FeG90aWNDb21wb25lbnQsIFJlYWN0RWxlbWVudCB9IGZyb20gJ3JlYWN0J1xyXG5cclxuLy8gRGlyZWN0bHkgcG9ydGVkIGZyb206XHJcbi8vIGh0dHBzOi8vdW5wa2cuY29tL2Jyb3dzZS9yZWFjdC1pc0AxOC4zLjAtY2FuYXJ5LWVlNjg0NDZmZi0yMDIzMTExNS9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5qc1xyXG4vLyBJdCdzIHZlcnkgcG9zc2libGUgdGhpcyBjb3VsZCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZSwgYnV0IGdpdmVuIHRoYXRcclxuLy8gd2Ugb25seSB1c2UgdGhlc2UgaW4gYGNvbm5lY3RgLCB0aGlzIGlzIGEgbG93IHByaW9yaXR5LlxyXG5cclxuY29uc3QgUkVBQ1RfRUxFTUVOVF9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpXHJcbmNvbnN0IFJFQUNUX1BPUlRBTF9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QucG9ydGFsJylcclxuY29uc3QgUkVBQ1RfRlJBR01FTlRfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LmZyYWdtZW50JylcclxuY29uc3QgUkVBQ1RfU1RSSUNUX01PREVfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LnN0cmljdF9tb2RlJylcclxuY29uc3QgUkVBQ1RfUFJPRklMRVJfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LnByb2ZpbGVyJylcclxuY29uc3QgUkVBQ1RfUFJPVklERVJfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LnByb3ZpZGVyJylcclxuY29uc3QgUkVBQ1RfQ09OVEVYVF9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QuY29udGV4dCcpXHJcbmNvbnN0IFJFQUNUX1NFUlZFUl9DT05URVhUX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5zZXJ2ZXJfY29udGV4dCcpXHJcbmNvbnN0IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5mb3J3YXJkX3JlZicpXHJcbmNvbnN0IFJFQUNUX1NVU1BFTlNFX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5zdXNwZW5zZScpXHJcbmNvbnN0IFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LnN1c3BlbnNlX2xpc3QnKVxyXG5jb25zdCBSRUFDVF9NRU1PX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5tZW1vJylcclxuY29uc3QgUkVBQ1RfTEFaWV9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QubGF6eScpXHJcbmNvbnN0IFJFQUNUX09GRlNDUkVFTl9UWVBFID0gU3ltYm9sLmZvcigncmVhY3Qub2Zmc2NyZWVuJylcclxuY29uc3QgUkVBQ1RfQ0xJRU5UX1JFRkVSRU5DRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LmNsaWVudC5yZWZlcmVuY2UnKVxyXG5cclxuZXhwb3J0IGNvbnN0IEZvcndhcmRSZWYgPSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFXHJcbmV4cG9ydCBjb25zdCBNZW1vID0gUkVBQ1RfTUVNT19UWVBFXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnRUeXBlKHR5cGU6IGFueSk6IHR5cGUgaXMgRWxlbWVudFR5cGUge1xyXG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgIHJldHVybiB0cnVlXHJcbiAgfSAvLyBOb3RlOiB0eXBlb2YgbWlnaHQgYmUgb3RoZXIgdGhhbiAnc3ltYm9sJyBvciAnbnVtYmVyJyAoZS5nLiBpZiBpdCdzIGEgcG9seWZpbGwpLlxyXG5cclxuICBpZiAoXHJcbiAgICB0eXBlID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFIHx8XHJcbiAgICB0eXBlID09PSBSRUFDVF9QUk9GSUxFUl9UWVBFIHx8XHJcbiAgICB0eXBlID09PSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFIHx8XHJcbiAgICB0eXBlID09PSBSRUFDVF9TVVNQRU5TRV9UWVBFIHx8XHJcbiAgICB0eXBlID09PSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUgfHxcclxuICAgIHR5cGUgPT09IFJFQUNUX09GRlNDUkVFTl9UWVBFXHJcbiAgKSB7XHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxuXHJcbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JyAmJiB0eXBlICE9PSBudWxsKSB7XHJcbiAgICBpZiAoXHJcbiAgICAgIHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0xBWllfVFlQRSB8fFxyXG4gICAgICB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9NRU1PX1RZUEUgfHxcclxuICAgICAgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfUFJPVklERVJfVFlQRSB8fFxyXG4gICAgICB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9DT05URVhUX1RZUEUgfHxcclxuICAgICAgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSB8fCAvLyBUaGlzIG5lZWRzIHRvIGluY2x1ZGUgYWxsIHBvc3NpYmxlIG1vZHVsZSByZWZlcmVuY2Ugb2JqZWN0XHJcbiAgICAgIC8vIHR5cGVzIHN1cHBvcnRlZCBieSBhbnkgRmxpZ2h0IGNvbmZpZ3VyYXRpb24gYW55d2hlcmUgc2luY2VcclxuICAgICAgLy8gd2UgZG9uJ3Qga25vdyB3aGljaCBGbGlnaHQgYnVpbGQgdGhpcyB3aWxsIGVuZCB1cCBiZWluZyB1c2VkXHJcbiAgICAgIC8vIHdpdGguXHJcbiAgICAgIHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0NMSUVOVF9SRUZFUkVOQ0UgfHxcclxuICAgICAgdHlwZS5nZXRNb2R1bGVJZCAhPT0gdW5kZWZpbmVkXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuIHRydWVcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBmYWxzZVxyXG59XHJcblxyXG5mdW5jdGlvbiB0eXBlT2Yob2JqZWN0OiBhbnkpOiBzeW1ib2wgfCB1bmRlZmluZWQge1xyXG4gIGlmICh0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QgIT09IG51bGwpIHtcclxuICAgIGNvbnN0ICQkdHlwZW9mID0gb2JqZWN0LiQkdHlwZW9mXHJcblxyXG4gICAgc3dpdGNoICgkJHR5cGVvZikge1xyXG4gICAgICBjYXNlIFJFQUNUX0VMRU1FTlRfVFlQRToge1xyXG4gICAgICAgIGNvbnN0IHR5cGUgPSBvYmplY3QudHlwZVxyXG5cclxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgIGNhc2UgUkVBQ1RfRlJBR01FTlRfVFlQRTpcclxuICAgICAgICAgIGNhc2UgUkVBQ1RfUFJPRklMRVJfVFlQRTpcclxuICAgICAgICAgIGNhc2UgUkVBQ1RfU1RSSUNUX01PREVfVFlQRTpcclxuICAgICAgICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfVFlQRTpcclxuICAgICAgICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFOlxyXG4gICAgICAgICAgICByZXR1cm4gdHlwZVxyXG5cclxuICAgICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgY29uc3QgJCR0eXBlb2ZUeXBlID0gdHlwZSAmJiB0eXBlLiQkdHlwZW9mXHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKCQkdHlwZW9mVHlwZSkge1xyXG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfU0VSVkVSX0NPTlRFWFRfVFlQRTpcclxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0NPTlRFWFRfVFlQRTpcclxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6XHJcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XHJcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XHJcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9QUk9WSURFUl9UWVBFOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICQkdHlwZW9mVHlwZVxyXG5cclxuICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICQkdHlwZW9mXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6IHtcclxuICAgICAgICByZXR1cm4gJCR0eXBlb2ZcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHVuZGVmaW5lZFxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNDb250ZXh0Q29uc3VtZXIob2JqZWN0OiBhbnkpOiBvYmplY3QgaXMgUmVhY3RFbGVtZW50IHtcclxuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0NPTlRFWFRfVFlQRVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNNZW1vKG9iamVjdDogYW55KTogb2JqZWN0IGlzIE1lbW9FeG90aWNDb21wb25lbnQ8YW55PiB7XHJcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9NRU1PX1RZUEVcclxufVxyXG4iLCIvKipcclxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXHJcbiAqIEByZXR1cm5zIHt2b2lkfVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlOiBzdHJpbmcpIHtcclxuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXHJcbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKVxyXG4gIH1cclxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cclxuICB0cnkge1xyXG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXHJcbiAgICAvLyBcImJyZWFrIG9uIGFsbCBleGNlcHRpb25zXCIgaW4geW91ciBjb25zb2xlLFxyXG4gICAgLy8gaXQgd291bGQgcGF1c2UgdGhlIGV4ZWN1dGlvbiBhdCB0aGlzIGxpbmUuXHJcbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSlcclxuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWVtcHR5ICovXHJcbiAgfSBjYXRjaCAoZSkge31cclxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWVtcHR5ICovXHJcbn1cclxuIiwiaW1wb3J0IHdhcm5pbmcgZnJvbSAnLi4vdXRpbHMvd2FybmluZydcblxuZnVuY3Rpb24gdmVyaWZ5KHNlbGVjdG9yOiB1bmtub3duLCBtZXRob2ROYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgaWYgKCFzZWxlY3Rvcikge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCB2YWx1ZSBmb3IgJHttZXRob2ROYW1lfSBpbiBjb25uZWN0LmApXG4gIH0gZWxzZSBpZiAoXG4gICAgbWV0aG9kTmFtZSA9PT0gJ21hcFN0YXRlVG9Qcm9wcycgfHxcbiAgICBtZXRob2ROYW1lID09PSAnbWFwRGlzcGF0Y2hUb1Byb3BzJ1xuICApIHtcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzZWxlY3RvciwgJ2RlcGVuZHNPbk93blByb3BzJykpIHtcbiAgICAgIHdhcm5pbmcoXG4gICAgICAgIGBUaGUgc2VsZWN0b3IgZm9yICR7bWV0aG9kTmFtZX0gb2YgY29ubmVjdCBkaWQgbm90IHNwZWNpZnkgYSB2YWx1ZSBmb3IgZGVwZW5kc09uT3duUHJvcHMuYCxcbiAgICAgIClcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmVyaWZ5U3Vic2VsZWN0b3JzKFxuICBtYXBTdGF0ZVRvUHJvcHM6IHVua25vd24sXG4gIG1hcERpc3BhdGNoVG9Qcm9wczogdW5rbm93bixcbiAgbWVyZ2VQcm9wczogdW5rbm93bixcbik6IHZvaWQge1xuICB2ZXJpZnkobWFwU3RhdGVUb1Byb3BzLCAnbWFwU3RhdGVUb1Byb3BzJylcbiAgdmVyaWZ5KG1hcERpc3BhdGNoVG9Qcm9wcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpXG4gIHZlcmlmeShtZXJnZVByb3BzLCAnbWVyZ2VQcm9wcycpXG59XG4iLCJpbXBvcnQgdHlwZSB7IERpc3BhdGNoLCBBY3Rpb24gfSBmcm9tICdyZWR1eCdcbmltcG9ydCB0eXBlIHsgQ29tcG9uZW50VHlwZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHZlcmlmeVN1YnNlbGVjdG9ycyBmcm9tICcuL3ZlcmlmeVN1YnNlbGVjdG9ycydcbmltcG9ydCB0eXBlIHsgRXF1YWxpdHlGbiwgRXh0ZW5kZWRFcXVhbGl0eUZuIH0gZnJvbSAnLi4vdHlwZXMnXG5cbmV4cG9ydCB0eXBlIFNlbGVjdG9yRmFjdG9yeTxTLCBUUHJvcHMsIFRPd25Qcm9wcywgVEZhY3RvcnlPcHRpb25zPiA9IChcbiAgZGlzcGF0Y2g6IERpc3BhdGNoPEFjdGlvbjxzdHJpbmc+PixcbiAgZmFjdG9yeU9wdGlvbnM6IFRGYWN0b3J5T3B0aW9ucyxcbikgPT4gU2VsZWN0b3I8UywgVFByb3BzLCBUT3duUHJvcHM+XG5cbmV4cG9ydCB0eXBlIFNlbGVjdG9yPFMsIFRQcm9wcywgVE93blByb3BzID0gbnVsbD4gPSBUT3duUHJvcHMgZXh0ZW5kc1xuICB8IG51bGxcbiAgfCB1bmRlZmluZWRcbiAgPyAoc3RhdGU6IFMpID0+IFRQcm9wc1xuICA6IChzdGF0ZTogUywgb3duUHJvcHM6IFRPd25Qcm9wcykgPT4gVFByb3BzXG5cbmV4cG9ydCB0eXBlIE1hcFN0YXRlVG9Qcm9wczxUU3RhdGVQcm9wcywgVE93blByb3BzLCBTdGF0ZT4gPSAoXG4gIHN0YXRlOiBTdGF0ZSxcbiAgb3duUHJvcHM6IFRPd25Qcm9wcyxcbikgPT4gVFN0YXRlUHJvcHNcblxuZXhwb3J0IHR5cGUgTWFwU3RhdGVUb1Byb3BzRmFjdG9yeTxUU3RhdGVQcm9wcywgVE93blByb3BzLCBTdGF0ZT4gPSAoXG4gIGluaXRpYWxTdGF0ZTogU3RhdGUsXG4gIG93blByb3BzOiBUT3duUHJvcHMsXG4pID0+IE1hcFN0YXRlVG9Qcm9wczxUU3RhdGVQcm9wcywgVE93blByb3BzLCBTdGF0ZT5cblxuZXhwb3J0IHR5cGUgTWFwU3RhdGVUb1Byb3BzUGFyYW08VFN0YXRlUHJvcHMsIFRPd25Qcm9wcywgU3RhdGU+ID1cbiAgfCBNYXBTdGF0ZVRvUHJvcHNGYWN0b3J5PFRTdGF0ZVByb3BzLCBUT3duUHJvcHMsIFN0YXRlPlxuICB8IE1hcFN0YXRlVG9Qcm9wczxUU3RhdGVQcm9wcywgVE93blByb3BzLCBTdGF0ZT5cbiAgfCBudWxsXG4gIHwgdW5kZWZpbmVkXG5cbmV4cG9ydCB0eXBlIE1hcERpc3BhdGNoVG9Qcm9wc0Z1bmN0aW9uPFREaXNwYXRjaFByb3BzLCBUT3duUHJvcHM+ID0gKFxuICBkaXNwYXRjaDogRGlzcGF0Y2g8QWN0aW9uPHN0cmluZz4+LFxuICBvd25Qcm9wczogVE93blByb3BzLFxuKSA9PiBURGlzcGF0Y2hQcm9wc1xuXG5leHBvcnQgdHlwZSBNYXBEaXNwYXRjaFRvUHJvcHM8VERpc3BhdGNoUHJvcHMsIFRPd25Qcm9wcz4gPVxuICB8IE1hcERpc3BhdGNoVG9Qcm9wc0Z1bmN0aW9uPFREaXNwYXRjaFByb3BzLCBUT3duUHJvcHM+XG4gIHwgVERpc3BhdGNoUHJvcHNcblxuZXhwb3J0IHR5cGUgTWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yeTxURGlzcGF0Y2hQcm9wcywgVE93blByb3BzPiA9IChcbiAgZGlzcGF0Y2g6IERpc3BhdGNoPEFjdGlvbjxzdHJpbmc+PixcbiAgb3duUHJvcHM6IFRPd25Qcm9wcyxcbikgPT4gTWFwRGlzcGF0Y2hUb1Byb3BzRnVuY3Rpb248VERpc3BhdGNoUHJvcHMsIFRPd25Qcm9wcz5cblxuZXhwb3J0IHR5cGUgTWFwRGlzcGF0Y2hUb1Byb3BzUGFyYW08VERpc3BhdGNoUHJvcHMsIFRPd25Qcm9wcz4gPVxuICB8IE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3Rvcnk8VERpc3BhdGNoUHJvcHMsIFRPd25Qcm9wcz5cbiAgfCBNYXBEaXNwYXRjaFRvUHJvcHM8VERpc3BhdGNoUHJvcHMsIFRPd25Qcm9wcz5cblxuZXhwb3J0IHR5cGUgTWFwRGlzcGF0Y2hUb1Byb3BzTm9uT2JqZWN0PFREaXNwYXRjaFByb3BzLCBUT3duUHJvcHM+ID1cbiAgfCBNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3J5PFREaXNwYXRjaFByb3BzLCBUT3duUHJvcHM+XG4gIHwgTWFwRGlzcGF0Y2hUb1Byb3BzRnVuY3Rpb248VERpc3BhdGNoUHJvcHMsIFRPd25Qcm9wcz5cblxuZXhwb3J0IHR5cGUgTWVyZ2VQcm9wczxUU3RhdGVQcm9wcywgVERpc3BhdGNoUHJvcHMsIFRPd25Qcm9wcywgVE1lcmdlZFByb3BzPiA9IChcbiAgc3RhdGVQcm9wczogVFN0YXRlUHJvcHMsXG4gIGRpc3BhdGNoUHJvcHM6IFREaXNwYXRjaFByb3BzLFxuICBvd25Qcm9wczogVE93blByb3BzLFxuKSA9PiBUTWVyZ2VkUHJvcHNcblxuaW50ZXJmYWNlIFB1cmVTZWxlY3RvckZhY3RvcnlDb21wYXJpc29uT3B0aW9uczxUU3RhdGVQcm9wcywgVE93blByb3BzLCBTdGF0ZT4ge1xuICByZWFkb25seSBhcmVTdGF0ZXNFcXVhbDogRXh0ZW5kZWRFcXVhbGl0eUZuPFN0YXRlLCBUT3duUHJvcHM+XG4gIHJlYWRvbmx5IGFyZVN0YXRlUHJvcHNFcXVhbDogRXF1YWxpdHlGbjxUU3RhdGVQcm9wcz5cbiAgcmVhZG9ubHkgYXJlT3duUHJvcHNFcXVhbDogRXF1YWxpdHlGbjxUT3duUHJvcHM+XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeTxcbiAgVFN0YXRlUHJvcHMsXG4gIFRPd25Qcm9wcyxcbiAgVERpc3BhdGNoUHJvcHMsXG4gIFRNZXJnZWRQcm9wcyxcbiAgU3RhdGUsXG4+KFxuICBtYXBTdGF0ZVRvUHJvcHM6IFdyYXBwZWRNYXBTdGF0ZVRvUHJvcHM8VFN0YXRlUHJvcHMsIFRPd25Qcm9wcywgU3RhdGU+LFxuICBtYXBEaXNwYXRjaFRvUHJvcHM6IFdyYXBwZWRNYXBEaXNwYXRjaFRvUHJvcHM8VERpc3BhdGNoUHJvcHMsIFRPd25Qcm9wcz4sXG4gIG1lcmdlUHJvcHM6IE1lcmdlUHJvcHM8VFN0YXRlUHJvcHMsIFREaXNwYXRjaFByb3BzLCBUT3duUHJvcHMsIFRNZXJnZWRQcm9wcz4sXG4gIGRpc3BhdGNoOiBEaXNwYXRjaDxBY3Rpb248c3RyaW5nPj4sXG4gIHtcbiAgICBhcmVTdGF0ZXNFcXVhbCxcbiAgICBhcmVPd25Qcm9wc0VxdWFsLFxuICAgIGFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgfTogUHVyZVNlbGVjdG9yRmFjdG9yeUNvbXBhcmlzb25PcHRpb25zPFRTdGF0ZVByb3BzLCBUT3duUHJvcHMsIFN0YXRlPixcbikge1xuICBsZXQgaGFzUnVuQXRMZWFzdE9uY2UgPSBmYWxzZVxuICBsZXQgc3RhdGU6IFN0YXRlXG4gIGxldCBvd25Qcm9wczogVE93blByb3BzXG4gIGxldCBzdGF0ZVByb3BzOiBUU3RhdGVQcm9wc1xuICBsZXQgZGlzcGF0Y2hQcm9wczogVERpc3BhdGNoUHJvcHNcbiAgbGV0IG1lcmdlZFByb3BzOiBUTWVyZ2VkUHJvcHNcblxuICBmdW5jdGlvbiBoYW5kbGVGaXJzdENhbGwoZmlyc3RTdGF0ZTogU3RhdGUsIGZpcnN0T3duUHJvcHM6IFRPd25Qcm9wcykge1xuICAgIHN0YXRlID0gZmlyc3RTdGF0ZVxuICAgIG93blByb3BzID0gZmlyc3RPd25Qcm9wc1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKVxuICAgIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKVxuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcylcbiAgICBoYXNSdW5BdExlYXN0T25jZSA9IHRydWVcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHNcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKSB7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpXG5cbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKVxuICAgICAgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpXG5cbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpXG4gICAgcmV0dXJuIG1lcmdlZFByb3BzXG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wcygpIHtcbiAgICBpZiAobWFwU3RhdGVUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKVxuICAgICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpXG5cbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKVxuICAgICAgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpXG5cbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpXG4gICAgcmV0dXJuIG1lcmdlZFByb3BzXG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdTdGF0ZSgpIHtcbiAgICBjb25zdCBuZXh0U3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpXG4gICAgY29uc3Qgc3RhdGVQcm9wc0NoYW5nZWQgPSAhYXJlU3RhdGVQcm9wc0VxdWFsKG5leHRTdGF0ZVByb3BzLCBzdGF0ZVByb3BzKVxuICAgIHN0YXRlUHJvcHMgPSBuZXh0U3RhdGVQcm9wc1xuXG4gICAgaWYgKHN0YXRlUHJvcHNDaGFuZ2VkKVxuICAgICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKVxuXG4gICAgcmV0dXJuIG1lcmdlZFByb3BzXG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlOiBTdGF0ZSwgbmV4dE93blByb3BzOiBUT3duUHJvcHMpIHtcbiAgICBjb25zdCBwcm9wc0NoYW5nZWQgPSAhYXJlT3duUHJvcHNFcXVhbChuZXh0T3duUHJvcHMsIG93blByb3BzKVxuICAgIGNvbnN0IHN0YXRlQ2hhbmdlZCA9ICFhcmVTdGF0ZXNFcXVhbChcbiAgICAgIG5leHRTdGF0ZSxcbiAgICAgIHN0YXRlLFxuICAgICAgbmV4dE93blByb3BzLFxuICAgICAgb3duUHJvcHMsXG4gICAgKVxuICAgIHN0YXRlID0gbmV4dFN0YXRlXG4gICAgb3duUHJvcHMgPSBuZXh0T3duUHJvcHNcblxuICAgIGlmIChwcm9wc0NoYW5nZWQgJiYgc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpXG4gICAgaWYgKHByb3BzQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzKClcbiAgICBpZiAoc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3U3RhdGUoKVxuICAgIHJldHVybiBtZXJnZWRQcm9wc1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3IoXG4gICAgbmV4dFN0YXRlOiBTdGF0ZSxcbiAgICBuZXh0T3duUHJvcHM6IFRPd25Qcm9wcyxcbiAgKSB7XG4gICAgcmV0dXJuIGhhc1J1bkF0TGVhc3RPbmNlXG4gICAgICA/IGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcylcbiAgICAgIDogaGFuZGxlRmlyc3RDYWxsKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKVxuICB9XG59XG5cbmludGVyZmFjZSBXcmFwcGVkTWFwU3RhdGVUb1Byb3BzPFRTdGF0ZVByb3BzLCBUT3duUHJvcHMsIFN0YXRlPiB7XG4gIChzdGF0ZTogU3RhdGUsIG93blByb3BzOiBUT3duUHJvcHMpOiBUU3RhdGVQcm9wc1xuICByZWFkb25seSBkZXBlbmRzT25Pd25Qcm9wczogYm9vbGVhblxufVxuXG5pbnRlcmZhY2UgV3JhcHBlZE1hcERpc3BhdGNoVG9Qcm9wczxURGlzcGF0Y2hQcm9wcywgVE93blByb3BzPiB7XG4gIChkaXNwYXRjaDogRGlzcGF0Y2g8QWN0aW9uPHN0cmluZz4+LCBvd25Qcm9wczogVE93blByb3BzKTogVERpc3BhdGNoUHJvcHNcbiAgcmVhZG9ubHkgZGVwZW5kc09uT3duUHJvcHM6IGJvb2xlYW5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbml0T3B0aW9uczxUU3RhdGVQcm9wcywgVE93blByb3BzLCBUTWVyZ2VkUHJvcHMsIFN0YXRlPlxuICBleHRlbmRzIFB1cmVTZWxlY3RvckZhY3RvcnlDb21wYXJpc29uT3B0aW9uczxUU3RhdGVQcm9wcywgVE93blByb3BzLCBTdGF0ZT4ge1xuICByZWFkb25seSBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IGJvb2xlYW5cbiAgcmVhZG9ubHkgZGlzcGxheU5hbWU6IHN0cmluZ1xuICByZWFkb25seSB3cmFwcGVkQ29tcG9uZW50TmFtZTogc3RyaW5nXG4gIHJlYWRvbmx5IFdyYXBwZWRDb21wb25lbnQ6IENvbXBvbmVudFR5cGU8VE93blByb3BzPlxuICByZWFkb25seSBhcmVNZXJnZWRQcm9wc0VxdWFsOiBFcXVhbGl0eUZuPFRNZXJnZWRQcm9wcz5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZWxlY3RvckZhY3RvcnlPcHRpb25zPFxuICBUU3RhdGVQcm9wcyxcbiAgVE93blByb3BzLFxuICBURGlzcGF0Y2hQcm9wcyxcbiAgVE1lcmdlZFByb3BzLFxuICBTdGF0ZSxcbj4gZXh0ZW5kcyBJbml0T3B0aW9uczxUU3RhdGVQcm9wcywgVE93blByb3BzLCBUTWVyZ2VkUHJvcHMsIFN0YXRlPiB7XG4gIHJlYWRvbmx5IGluaXRNYXBTdGF0ZVRvUHJvcHM6IChcbiAgICBkaXNwYXRjaDogRGlzcGF0Y2g8QWN0aW9uPHN0cmluZz4+LFxuICAgIG9wdGlvbnM6IEluaXRPcHRpb25zPFRTdGF0ZVByb3BzLCBUT3duUHJvcHMsIFRNZXJnZWRQcm9wcywgU3RhdGU+LFxuICApID0+IFdyYXBwZWRNYXBTdGF0ZVRvUHJvcHM8VFN0YXRlUHJvcHMsIFRPd25Qcm9wcywgU3RhdGU+XG4gIHJlYWRvbmx5IGluaXRNYXBEaXNwYXRjaFRvUHJvcHM6IChcbiAgICBkaXNwYXRjaDogRGlzcGF0Y2g8QWN0aW9uPHN0cmluZz4+LFxuICAgIG9wdGlvbnM6IEluaXRPcHRpb25zPFRTdGF0ZVByb3BzLCBUT3duUHJvcHMsIFRNZXJnZWRQcm9wcywgU3RhdGU+LFxuICApID0+IFdyYXBwZWRNYXBEaXNwYXRjaFRvUHJvcHM8VERpc3BhdGNoUHJvcHMsIFRPd25Qcm9wcz5cbiAgcmVhZG9ubHkgaW5pdE1lcmdlUHJvcHM6IChcbiAgICBkaXNwYXRjaDogRGlzcGF0Y2g8QWN0aW9uPHN0cmluZz4+LFxuICAgIG9wdGlvbnM6IEluaXRPcHRpb25zPFRTdGF0ZVByb3BzLCBUT3duUHJvcHMsIFRNZXJnZWRQcm9wcywgU3RhdGU+LFxuICApID0+IE1lcmdlUHJvcHM8VFN0YXRlUHJvcHMsIFREaXNwYXRjaFByb3BzLCBUT3duUHJvcHMsIFRNZXJnZWRQcm9wcz5cbn1cblxuLy8gVE9ETzogQWRkIG1vcmUgY29tbWVudHNcblxuLy8gVGhlIHNlbGVjdG9yIHJldHVybmVkIGJ5IHNlbGVjdG9yRmFjdG9yeSB3aWxsIG1lbW9pemUgaXRzIHJlc3VsdHMsXG4vLyBhbGxvd2luZyBjb25uZWN0J3Mgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHRvIHJldHVybiBmYWxzZSBpZiBmaW5hbFxuLy8gcHJvcHMgaGF2ZSBub3QgY2hhbmdlZC5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeTxcbiAgVFN0YXRlUHJvcHMsXG4gIFRPd25Qcm9wcyxcbiAgVERpc3BhdGNoUHJvcHMsXG4gIFRNZXJnZWRQcm9wcyxcbiAgU3RhdGUsXG4+KFxuICBkaXNwYXRjaDogRGlzcGF0Y2g8QWN0aW9uPHN0cmluZz4+LFxuICB7XG4gICAgaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgIGluaXRNZXJnZVByb3BzLFxuICAgIC4uLm9wdGlvbnNcbiAgfTogU2VsZWN0b3JGYWN0b3J5T3B0aW9uczxcbiAgICBUU3RhdGVQcm9wcyxcbiAgICBUT3duUHJvcHMsXG4gICAgVERpc3BhdGNoUHJvcHMsXG4gICAgVE1lcmdlZFByb3BzLFxuICAgIFN0YXRlXG4gID4sXG4pIHtcbiAgY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gaW5pdE1hcFN0YXRlVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucylcbiAgY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucylcbiAgY29uc3QgbWVyZ2VQcm9wcyA9IGluaXRNZXJnZVByb3BzKGRpc3BhdGNoLCBvcHRpb25zKVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzKVxuICB9XG5cbiAgcmV0dXJuIHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5PFxuICAgIFRTdGF0ZVByb3BzLFxuICAgIFRPd25Qcm9wcyxcbiAgICBURGlzcGF0Y2hQcm9wcyxcbiAgICBUTWVyZ2VkUHJvcHMsXG4gICAgU3RhdGVcbiAgPihtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIG9wdGlvbnMpXG59XG4iLCJpbXBvcnQgdHlwZSB7IEFjdGlvbkNyZWF0b3JzTWFwT2JqZWN0LCBEaXNwYXRjaCB9IGZyb20gJ3JlZHV4J1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoXG4gIGFjdGlvbkNyZWF0b3JzOiBBY3Rpb25DcmVhdG9yc01hcE9iamVjdCxcbiAgZGlzcGF0Y2g6IERpc3BhdGNoLFxuKTogQWN0aW9uQ3JlYXRvcnNNYXBPYmplY3Qge1xuICBjb25zdCBib3VuZEFjdGlvbkNyZWF0b3JzOiBBY3Rpb25DcmVhdG9yc01hcE9iamVjdCA9IHt9XG5cbiAgZm9yIChjb25zdCBrZXkgaW4gYWN0aW9uQ3JlYXRvcnMpIHtcbiAgICBjb25zdCBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XVxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gKC4uLmFyZ3MpID0+IGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IoLi4uYXJncykpXG4gICAgfVxuICB9XG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzXG59XG4iLCIvKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqOiB1bmtub3duKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZVxuXG4gIGNvbnN0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iailcbiAgaWYgKHByb3RvID09PSBudWxsKSByZXR1cm4gdHJ1ZVxuXG4gIGxldCBiYXNlUHJvdG8gPSBwcm90b1xuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKGJhc2VQcm90bykgIT09IG51bGwpIHtcbiAgICBiYXNlUHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYmFzZVByb3RvKVxuICB9XG5cbiAgcmV0dXJuIHByb3RvID09PSBiYXNlUHJvdG9cbn1cbiIsImltcG9ydCBpc1BsYWluT2JqZWN0IGZyb20gJy4vaXNQbGFpbk9iamVjdCdcbmltcG9ydCB3YXJuaW5nIGZyb20gJy4vd2FybmluZydcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmVyaWZ5UGxhaW5PYmplY3QoXG4gIHZhbHVlOiB1bmtub3duLFxuICBkaXNwbGF5TmFtZTogc3RyaW5nLFxuICBtZXRob2ROYW1lOiBzdHJpbmcsXG4pIHtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgIHdhcm5pbmcoXG4gICAgICBgJHttZXRob2ROYW1lfSgpIGluICR7ZGlzcGxheU5hbWV9IG11c3QgcmV0dXJuIGEgcGxhaW4gb2JqZWN0LiBJbnN0ZWFkIHJlY2VpdmVkICR7dmFsdWV9LmAsXG4gICAgKVxuICB9XG59XG4iLCJpbXBvcnQgdHlwZSB7IEFjdGlvbkNyZWF0b3JzTWFwT2JqZWN0LCBEaXNwYXRjaCwgQWN0aW9uQ3JlYXRvciB9IGZyb20gJ3JlZHV4J1xuXG5pbXBvcnQgdHlwZSB7IEZpeFR5cGVMYXRlciB9IGZyb20gJy4uL3R5cGVzJ1xuaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0J1xuXG50eXBlIEFueVN0YXRlID0geyBba2V5OiBzdHJpbmddOiBhbnkgfVxudHlwZSBTdGF0ZU9yRGlzcGF0Y2g8UyBleHRlbmRzIEFueVN0YXRlID0gQW55U3RhdGU+ID0gUyB8IERpc3BhdGNoXG5cbnR5cGUgQW55UHJvcHMgPSB7IFtrZXk6IHN0cmluZ106IGFueSB9XG5cbmV4cG9ydCB0eXBlIE1hcFRvUHJvcHM8UCBleHRlbmRzIEFueVByb3BzID0gQW55UHJvcHM+ID0ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgKHN0YXRlT3JEaXNwYXRjaDogU3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcz86IFApOiBGaXhUeXBlTGF0ZXJcbiAgZGVwZW5kc09uT3duUHJvcHM/OiBib29sZWFuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KFxuICAvLyAqIE5vdGU6XG4gIC8vICBJdCBzZWVtcyB0aGF0IHRoZSBkaXNwYXRjaCBhcmd1bWVudFxuICAvLyAgY291bGQgYmUgYSBkaXNwYXRjaCBmdW5jdGlvbiBpbiBzb21lIGNhc2VzIChleDogd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZylcbiAgLy8gIGFuZCBhIHN0YXRlIG9iamVjdCBpbiBzb21lIG90aGVycyAoZXg6IHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmcpXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBnZXRDb25zdGFudDogKGRpc3BhdGNoOiBEaXNwYXRjaCkgPT5cbiAgICB8IHtcbiAgICAgICAgZGlzcGF0Y2g/OiBEaXNwYXRjaFxuICAgICAgICBkZXBlbmRzT25Pd25Qcm9wcz86IGJvb2xlYW5cbiAgICAgIH1cbiAgICB8IEFjdGlvbkNyZWF0b3JzTWFwT2JqZWN0XG4gICAgfCBBY3Rpb25DcmVhdG9yPGFueT4sXG4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRDb25zdGFudFNlbGVjdG9yKGRpc3BhdGNoOiBEaXNwYXRjaCkge1xuICAgIGNvbnN0IGNvbnN0YW50ID0gZ2V0Q29uc3RhbnQoZGlzcGF0Y2gpXG5cbiAgICBmdW5jdGlvbiBjb25zdGFudFNlbGVjdG9yKCkge1xuICAgICAgcmV0dXJuIGNvbnN0YW50XG4gICAgfVxuICAgIGNvbnN0YW50U2VsZWN0b3IuZGVwZW5kc09uT3duUHJvcHMgPSBmYWxzZVxuICAgIHJldHVybiBjb25zdGFudFNlbGVjdG9yXG4gIH1cbn1cblxuLy8gZGVwZW5kc09uT3duUHJvcHMgaXMgdXNlZCBieSBjcmVhdGVNYXBUb1Byb3BzUHJveHkgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcGFzcyBwcm9wcyBhcyBhcmdzXG4vLyB0byB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyB3cmFwcGVkLiBJdCBpcyBhbHNvIHVzZWQgYnkgbWFrZVB1cmVQcm9wc1NlbGVjdG9yIHRvIGRldGVybWluZVxuLy8gd2hldGhlciBtYXBUb1Byb3BzIG5lZWRzIHRvIGJlIGludm9rZWQgd2hlbiBwcm9wcyBoYXZlIGNoYW5nZWQuXG4vL1xuLy8gQSBsZW5ndGggb2Ygb25lIHNpZ25hbHMgdGhhdCBtYXBUb1Byb3BzIGRvZXMgbm90IGRlcGVuZCBvbiBwcm9wcyBmcm9tIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuLy8gQSBsZW5ndGggb2YgemVybyBpcyBhc3N1bWVkIHRvIG1lYW4gbWFwVG9Qcm9wcyBpcyBnZXR0aW5nIGFyZ3MgdmlhIGFyZ3VtZW50cyBvciAuLi5hcmdzIGFuZFxuLy8gdGhlcmVmb3JlIG5vdCByZXBvcnRpbmcgaXRzIGxlbmd0aCBhY2N1cmF0ZWx5Li5cbi8vIFRPRE8gQ2FuIHRoaXMgZ2V0IHB1bGxlZCBvdXQgc28gdGhhdCB3ZSBjYW4gc3Vic2NyaWJlIGRpcmVjdGx5IHRvIHRoZSBzdG9yZSBpZiB3ZSBkb24ndCBuZWVkIG93blByb3BzP1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHM6IE1hcFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHNcbiAgICA/IEJvb2xlYW4obWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcylcbiAgICA6IG1hcFRvUHJvcHMubGVuZ3RoICE9PSAxXG59XG5cbi8vIFVzZWQgYnkgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24gYW5kIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLFxuLy8gdGhpcyBmdW5jdGlvbiB3cmFwcyBtYXBUb1Byb3BzIGluIGEgcHJveHkgZnVuY3Rpb24gd2hpY2ggZG9lcyBzZXZlcmFsIHRoaW5nczpcbi8vXG4vLyAgKiBEZXRlY3RzIHdoZXRoZXIgdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgY2FsbGVkIGRlcGVuZHMgb24gcHJvcHMsIHdoaWNoXG4vLyAgICBpcyB1c2VkIGJ5IHNlbGVjdG9yRmFjdG9yeSB0byBkZWNpZGUgaWYgaXQgc2hvdWxkIHJlaW52b2tlIG9uIHByb3BzIGNoYW5nZXMuXG4vL1xuLy8gICogT24gZmlyc3QgY2FsbCwgaGFuZGxlcyBtYXBUb1Byb3BzIGlmIHJldHVybnMgYW5vdGhlciBmdW5jdGlvbiwgYW5kIHRyZWF0cyB0aGF0XG4vLyAgICBuZXcgZnVuY3Rpb24gYXMgdGhlIHRydWUgbWFwVG9Qcm9wcyBmb3Igc3Vic2VxdWVudCBjYWxscy5cbi8vXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCB2ZXJpZmllcyB0aGUgZmlyc3QgcmVzdWx0IGlzIGEgcGxhaW4gb2JqZWN0LCBpbiBvcmRlciB0byB3YXJuXG4vLyAgICB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlaXIgbWFwVG9Qcm9wcyBmdW5jdGlvbiBpcyBub3QgcmV0dXJuaW5nIGEgdmFsaWQgcmVzdWx0LlxuLy9cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0Z1bmM8UCBleHRlbmRzIEFueVByb3BzID0gQW55UHJvcHM+KFxuICBtYXBUb1Byb3BzOiBNYXBUb1Byb3BzLFxuICBtZXRob2ROYW1lOiBzdHJpbmcsXG4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRQcm94eVNlbGVjdG9yKFxuICAgIGRpc3BhdGNoOiBEaXNwYXRjaCxcbiAgICB7IGRpc3BsYXlOYW1lIH06IHsgZGlzcGxheU5hbWU6IHN0cmluZyB9LFxuICApIHtcbiAgICBjb25zdCBwcm94eSA9IGZ1bmN0aW9uIG1hcFRvUHJvcHNQcm94eShcbiAgICAgIHN0YXRlT3JEaXNwYXRjaDogU3RhdGVPckRpc3BhdGNoLFxuICAgICAgb3duUHJvcHM/OiBQLFxuICAgICk6IE1hcFRvUHJvcHMge1xuICAgICAgcmV0dXJuIHByb3h5LmRlcGVuZHNPbk93blByb3BzXG4gICAgICAgID8gcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKVxuICAgICAgICA6IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoLCB1bmRlZmluZWQpXG4gICAgfVxuXG4gICAgLy8gYWxsb3cgZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeSB0byBnZXQgb3duUHJvcHNcbiAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IHRydWVcblxuICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBmdW5jdGlvbiBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5KFxuICAgICAgc3RhdGVPckRpc3BhdGNoOiBTdGF0ZU9yRGlzcGF0Y2gsXG4gICAgICBvd25Qcm9wcz86IFAsXG4gICAgKTogTWFwVG9Qcm9wcyB7XG4gICAgICBwcm94eS5tYXBUb1Byb3BzID0gbWFwVG9Qcm9wc1xuICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKVxuICAgICAgbGV0IHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcylcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm94eS5tYXBUb1Byb3BzID0gcHJvcHNcbiAgICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhwcm9wcylcbiAgICAgICAgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKVxuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcbiAgICAgICAgdmVyaWZ5UGxhaW5PYmplY3QocHJvcHMsIGRpc3BsYXlOYW1lLCBtZXRob2ROYW1lKVxuXG4gICAgICByZXR1cm4gcHJvcHNcbiAgICB9XG5cbiAgICByZXR1cm4gcHJveHlcbiAgfVxufVxuIiwiaW1wb3J0IHR5cGUgeyBBY3Rpb24sIERpc3BhdGNoIH0gZnJvbSAncmVkdXgnXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbnZhbGlkQXJnRmFjdG9yeShhcmc6IHVua25vd24sIG5hbWU6IHN0cmluZykge1xuICByZXR1cm4gKFxuICAgIGRpc3BhdGNoOiBEaXNwYXRjaDxBY3Rpb248c3RyaW5nPj4sXG4gICAgb3B0aW9uczogeyByZWFkb25seSB3cmFwcGVkQ29tcG9uZW50TmFtZTogc3RyaW5nIH0sXG4gICkgPT4ge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBJbnZhbGlkIHZhbHVlIG9mIHR5cGUgJHt0eXBlb2YgYXJnfSBmb3IgJHtuYW1lfSBhcmd1bWVudCB3aGVuIGNvbm5lY3RpbmcgY29tcG9uZW50ICR7XG4gICAgICAgIG9wdGlvbnMud3JhcHBlZENvbXBvbmVudE5hbWVcbiAgICAgIH0uYCxcbiAgICApXG4gIH1cbn1cbiIsImltcG9ydCB0eXBlIHsgQWN0aW9uLCBEaXNwYXRjaCB9IGZyb20gJ3JlZHV4J1xuaW1wb3J0IGJpbmRBY3Rpb25DcmVhdG9ycyBmcm9tICcuLi91dGlscy9iaW5kQWN0aW9uQ3JlYXRvcnMnXG5pbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJ1xuaW1wb3J0IHsgY3JlYXRlSW52YWxpZEFyZ0ZhY3RvcnkgfSBmcm9tICcuL2ludmFsaWRBcmdGYWN0b3J5J1xuaW1wb3J0IHR5cGUgeyBNYXBEaXNwYXRjaFRvUHJvcHNQYXJhbSB9IGZyb20gJy4vc2VsZWN0b3JGYWN0b3J5J1xuXG5leHBvcnQgZnVuY3Rpb24gbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yeTxURGlzcGF0Y2hQcm9wcywgVE93blByb3BzPihcbiAgbWFwRGlzcGF0Y2hUb1Byb3BzOlxuICAgIHwgTWFwRGlzcGF0Y2hUb1Byb3BzUGFyYW08VERpc3BhdGNoUHJvcHMsIFRPd25Qcm9wcz5cbiAgICB8IHVuZGVmaW5lZCxcbikge1xuICByZXR1cm4gbWFwRGlzcGF0Y2hUb1Byb3BzICYmIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdvYmplY3QnXG4gICAgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KChkaXNwYXRjaDogRGlzcGF0Y2g8QWN0aW9uPHN0cmluZz4+KSA9PlxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGJpbmRBY3Rpb25DcmVhdG9ycyhtYXBEaXNwYXRjaFRvUHJvcHMsIGRpc3BhdGNoKSxcbiAgICAgIClcbiAgICA6ICFtYXBEaXNwYXRjaFRvUHJvcHNcbiAgICAgID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudCgoZGlzcGF0Y2g6IERpc3BhdGNoPEFjdGlvbjxzdHJpbmc+PikgPT4gKHtcbiAgICAgICAgICBkaXNwYXRjaCxcbiAgICAgICAgfSkpXG4gICAgICA6IHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgd3JhcE1hcFRvUHJvcHNGdW5jKG1hcERpc3BhdGNoVG9Qcm9wcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpXG4gICAgICAgIDogY3JlYXRlSW52YWxpZEFyZ0ZhY3RvcnkobWFwRGlzcGF0Y2hUb1Byb3BzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJylcbn1cbiIsImltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnXG5pbXBvcnQgeyBjcmVhdGVJbnZhbGlkQXJnRmFjdG9yeSB9IGZyb20gJy4vaW52YWxpZEFyZ0ZhY3RvcnknXG5pbXBvcnQgdHlwZSB7IE1hcFN0YXRlVG9Qcm9wc1BhcmFtIH0gZnJvbSAnLi9zZWxlY3RvckZhY3RvcnknXG5cbmV4cG9ydCBmdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHNGYWN0b3J5PFRTdGF0ZVByb3BzLCBUT3duUHJvcHMsIFN0YXRlPihcbiAgbWFwU3RhdGVUb1Byb3BzOiBNYXBTdGF0ZVRvUHJvcHNQYXJhbTxUU3RhdGVQcm9wcywgVE93blByb3BzLCBTdGF0ZT4sXG4pIHtcbiAgcmV0dXJuICFtYXBTdGF0ZVRvUHJvcHNcbiAgICA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoKCkgPT4gKHt9KSlcbiAgICA6IHR5cGVvZiBtYXBTdGF0ZVRvUHJvcHMgPT09ICdmdW5jdGlvbidcbiAgICAgID8gLy8gQHRzLWlnbm9yZVxuICAgICAgICB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwU3RhdGVUb1Byb3BzLCAnbWFwU3RhdGVUb1Byb3BzJylcbiAgICAgIDogY3JlYXRlSW52YWxpZEFyZ0ZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCAnbWFwU3RhdGVUb1Byb3BzJylcbn1cbiIsImltcG9ydCB0eXBlIHsgQWN0aW9uLCBEaXNwYXRjaCB9IGZyb20gJ3JlZHV4J1xuaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0J1xuaW1wb3J0IHsgY3JlYXRlSW52YWxpZEFyZ0ZhY3RvcnkgfSBmcm9tICcuL2ludmFsaWRBcmdGYWN0b3J5J1xuaW1wb3J0IHR5cGUgeyBNZXJnZVByb3BzIH0gZnJvbSAnLi9zZWxlY3RvckZhY3RvcnknXG5pbXBvcnQgdHlwZSB7IEVxdWFsaXR5Rm4gfSBmcm9tICcuLi90eXBlcydcblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRNZXJnZVByb3BzPFxuICBUU3RhdGVQcm9wcyxcbiAgVERpc3BhdGNoUHJvcHMsXG4gIFRPd25Qcm9wcyxcbiAgVE1lcmdlZFByb3BzLFxuPihcbiAgc3RhdGVQcm9wczogVFN0YXRlUHJvcHMsXG4gIGRpc3BhdGNoUHJvcHM6IFREaXNwYXRjaFByb3BzLFxuICBvd25Qcm9wczogVE93blByb3BzLFxuKTogVE1lcmdlZFByb3BzIHtcbiAgLy8gQHRzLWlnbm9yZVxuICByZXR1cm4geyAuLi5vd25Qcm9wcywgLi4uc3RhdGVQcm9wcywgLi4uZGlzcGF0Y2hQcm9wcyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWVyZ2VQcm9wc0Z1bmM8XG4gIFRTdGF0ZVByb3BzLFxuICBURGlzcGF0Y2hQcm9wcyxcbiAgVE93blByb3BzLFxuICBUTWVyZ2VkUHJvcHMsXG4+KFxuICBtZXJnZVByb3BzOiBNZXJnZVByb3BzPFRTdGF0ZVByb3BzLCBURGlzcGF0Y2hQcm9wcywgVE93blByb3BzLCBUTWVyZ2VkUHJvcHM+LFxuKTogKFxuICBkaXNwYXRjaDogRGlzcGF0Y2g8QWN0aW9uPHN0cmluZz4+LFxuICBvcHRpb25zOiB7XG4gICAgcmVhZG9ubHkgZGlzcGxheU5hbWU6IHN0cmluZ1xuICAgIHJlYWRvbmx5IGFyZU1lcmdlZFByb3BzRXF1YWw6IEVxdWFsaXR5Rm48VE1lcmdlZFByb3BzPlxuICB9LFxuKSA9PiBNZXJnZVByb3BzPFRTdGF0ZVByb3BzLCBURGlzcGF0Y2hQcm9wcywgVE93blByb3BzLCBUTWVyZ2VkUHJvcHM+IHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRNZXJnZVByb3BzUHJveHkoXG4gICAgZGlzcGF0Y2gsXG4gICAgeyBkaXNwbGF5TmFtZSwgYXJlTWVyZ2VkUHJvcHNFcXVhbCB9LFxuICApIHtcbiAgICBsZXQgaGFzUnVuT25jZSA9IGZhbHNlXG4gICAgbGV0IG1lcmdlZFByb3BzOiBUTWVyZ2VkUHJvcHNcblxuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZVByb3BzUHJveHkoXG4gICAgICBzdGF0ZVByb3BzOiBUU3RhdGVQcm9wcyxcbiAgICAgIGRpc3BhdGNoUHJvcHM6IFREaXNwYXRjaFByb3BzLFxuICAgICAgb3duUHJvcHM6IFRPd25Qcm9wcyxcbiAgICApIHtcbiAgICAgIGNvbnN0IG5leHRNZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpXG5cbiAgICAgIGlmIChoYXNSdW5PbmNlKSB7XG4gICAgICAgIGlmICghYXJlTWVyZ2VkUHJvcHNFcXVhbChuZXh0TWVyZ2VkUHJvcHMsIG1lcmdlZFByb3BzKSlcbiAgICAgICAgICBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wc1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFzUnVuT25jZSA9IHRydWVcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHNcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcbiAgICAgICAgICB2ZXJpZnlQbGFpbk9iamVjdChtZXJnZWRQcm9wcywgZGlzcGxheU5hbWUsICdtZXJnZVByb3BzJylcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lcmdlZFByb3BzXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZVByb3BzRmFjdG9yeTxcbiAgVFN0YXRlUHJvcHMsXG4gIFREaXNwYXRjaFByb3BzLFxuICBUT3duUHJvcHMsXG4gIFRNZXJnZWRQcm9wcyxcbj4oXG4gIG1lcmdlUHJvcHM/OiBNZXJnZVByb3BzPFRTdGF0ZVByb3BzLCBURGlzcGF0Y2hQcm9wcywgVE93blByb3BzLCBUTWVyZ2VkUHJvcHM+LFxuKSB7XG4gIHJldHVybiAhbWVyZ2VQcm9wc1xuICAgID8gKCkgPT4gZGVmYXVsdE1lcmdlUHJvcHNcbiAgICA6IHR5cGVvZiBtZXJnZVByb3BzID09PSAnZnVuY3Rpb24nXG4gICAgICA/IHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKVxuICAgICAgOiBjcmVhdGVJbnZhbGlkQXJnRmFjdG9yeShtZXJnZVByb3BzLCAnbWVyZ2VQcm9wcycpXG59XG4iLCIvLyBEZWZhdWx0IHRvIGEgZHVtbXkgXCJiYXRjaFwiIGltcGxlbWVudGF0aW9uIHRoYXQganVzdCBydW5zIHRoZSBjYWxsYmFja1xyXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE5vb3BCYXRjaChjYWxsYmFjazogKCkgPT4gdm9pZCkge1xyXG4gIGNhbGxiYWNrKClcclxufVxyXG4iLCJpbXBvcnQgeyBkZWZhdWx0Tm9vcEJhdGNoIGFzIGJhdGNoIH0gZnJvbSAnLi9iYXRjaCdcblxuLy8gZW5jYXBzdWxhdGVzIHRoZSBzdWJzY3JpcHRpb24gbG9naWMgZm9yIGNvbm5lY3RpbmcgYSBjb21wb25lbnQgdG8gdGhlIHJlZHV4IHN0b3JlLCBhc1xuLy8gd2VsbCBhcyBuZXN0aW5nIHN1YnNjcmlwdGlvbnMgb2YgZGVzY2VuZGFudCBjb21wb25lbnRzLCBzbyB0aGF0IHdlIGNhbiBlbnN1cmUgdGhlXG4vLyBhbmNlc3RvciBjb21wb25lbnRzIHJlLXJlbmRlciBiZWZvcmUgZGVzY2VuZGFudHNcblxudHlwZSBWb2lkRnVuYyA9ICgpID0+IHZvaWRcblxudHlwZSBMaXN0ZW5lciA9IHtcbiAgY2FsbGJhY2s6IFZvaWRGdW5jXG4gIG5leHQ6IExpc3RlbmVyIHwgbnVsbFxuICBwcmV2OiBMaXN0ZW5lciB8IG51bGxcbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCkge1xuICBsZXQgZmlyc3Q6IExpc3RlbmVyIHwgbnVsbCA9IG51bGxcbiAgbGV0IGxhc3Q6IExpc3RlbmVyIHwgbnVsbCA9IG51bGxcblxuICByZXR1cm4ge1xuICAgIGNsZWFyKCkge1xuICAgICAgZmlyc3QgPSBudWxsXG4gICAgICBsYXN0ID0gbnVsbFxuICAgIH0sXG5cbiAgICBub3RpZnkoKSB7XG4gICAgICBiYXRjaCgoKSA9PiB7XG4gICAgICAgIGxldCBsaXN0ZW5lciA9IGZpcnN0XG4gICAgICAgIHdoaWxlIChsaXN0ZW5lcikge1xuICAgICAgICAgIGxpc3RlbmVyLmNhbGxiYWNrKClcbiAgICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHRcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgZ2V0KCkge1xuICAgICAgY29uc3QgbGlzdGVuZXJzOiBMaXN0ZW5lcltdID0gW11cbiAgICAgIGxldCBsaXN0ZW5lciA9IGZpcnN0XG4gICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpXG4gICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIubmV4dFxuICAgICAgfVxuICAgICAgcmV0dXJuIGxpc3RlbmVyc1xuICAgIH0sXG5cbiAgICBzdWJzY3JpYmUoY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgIGxldCBpc1N1YnNjcmliZWQgPSB0cnVlXG5cbiAgICAgIGNvbnN0IGxpc3RlbmVyOiBMaXN0ZW5lciA9IChsYXN0ID0ge1xuICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgbmV4dDogbnVsbCxcbiAgICAgICAgcHJldjogbGFzdCxcbiAgICAgIH0pXG5cbiAgICAgIGlmIChsaXN0ZW5lci5wcmV2KSB7XG4gICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaXJzdCA9IGxpc3RlbmVyXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKCFpc1N1YnNjcmliZWQgfHwgZmlyc3QgPT09IG51bGwpIHJldHVyblxuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZVxuXG4gICAgICAgIGlmIChsaXN0ZW5lci5uZXh0KSB7XG4gICAgICAgICAgbGlzdGVuZXIubmV4dC5wcmV2ID0gbGlzdGVuZXIucHJldlxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxhc3QgPSBsaXN0ZW5lci5wcmV2XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpc3RlbmVyLnByZXYpIHtcbiAgICAgICAgICBsaXN0ZW5lci5wcmV2Lm5leHQgPSBsaXN0ZW5lci5uZXh0XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmlyc3QgPSBsaXN0ZW5lci5uZXh0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICB9XG59XG5cbnR5cGUgTGlzdGVuZXJDb2xsZWN0aW9uID0gUmV0dXJuVHlwZTx0eXBlb2YgY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uPlxuXG5leHBvcnQgaW50ZXJmYWNlIFN1YnNjcmlwdGlvbiB7XG4gIGFkZE5lc3RlZFN1YjogKGxpc3RlbmVyOiBWb2lkRnVuYykgPT4gVm9pZEZ1bmNcbiAgbm90aWZ5TmVzdGVkU3ViczogVm9pZEZ1bmNcbiAgaGFuZGxlQ2hhbmdlV3JhcHBlcjogVm9pZEZ1bmNcbiAgaXNTdWJzY3JpYmVkOiAoKSA9PiBib29sZWFuXG4gIG9uU3RhdGVDaGFuZ2U/OiBWb2lkRnVuYyB8IG51bGxcbiAgdHJ5U3Vic2NyaWJlOiBWb2lkRnVuY1xuICB0cnlVbnN1YnNjcmliZTogVm9pZEZ1bmNcbiAgZ2V0TGlzdGVuZXJzOiAoKSA9PiBMaXN0ZW5lckNvbGxlY3Rpb25cbn1cblxuY29uc3QgbnVsbExpc3RlbmVycyA9IHtcbiAgbm90aWZ5KCkge30sXG4gIGdldDogKCkgPT4gW10sXG59IGFzIHVua25vd24gYXMgTGlzdGVuZXJDb2xsZWN0aW9uXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdWJzY3JpcHRpb24oc3RvcmU6IGFueSwgcGFyZW50U3ViPzogU3Vic2NyaXB0aW9uKSB7XG4gIGxldCB1bnN1YnNjcmliZTogVm9pZEZ1bmMgfCB1bmRlZmluZWRcbiAgbGV0IGxpc3RlbmVyczogTGlzdGVuZXJDb2xsZWN0aW9uID0gbnVsbExpc3RlbmVyc1xuXG4gIC8vIFJlYXNvbnMgdG8ga2VlcCB0aGUgc3Vic2NyaXB0aW9uIGFjdGl2ZVxuICBsZXQgc3Vic2NyaXB0aW9uc0Ftb3VudCA9IDBcblxuICAvLyBJcyB0aGlzIHNwZWNpZmljIHN1YnNjcmlwdGlvbiBzdWJzY3JpYmVkIChvciBvbmx5IG5lc3RlZCBvbmVzPylcbiAgbGV0IHNlbGZTdWJzY3JpYmVkID0gZmFsc2VcblxuICBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXI6ICgpID0+IHZvaWQpIHtcbiAgICB0cnlTdWJzY3JpYmUoKVxuXG4gICAgY29uc3QgY2xlYW51cExpc3RlbmVyID0gbGlzdGVuZXJzLnN1YnNjcmliZShsaXN0ZW5lcilcblxuICAgIC8vIGNsZWFudXAgbmVzdGVkIHN1YlxuICAgIGxldCByZW1vdmVkID0gZmFsc2VcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKCFyZW1vdmVkKSB7XG4gICAgICAgIHJlbW92ZWQgPSB0cnVlXG4gICAgICAgIGNsZWFudXBMaXN0ZW5lcigpXG4gICAgICAgIHRyeVVuc3Vic2NyaWJlKClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzKCkge1xuICAgIGxpc3RlbmVycy5ub3RpZnkoKVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlQ2hhbmdlV3JhcHBlcigpIHtcbiAgICBpZiAoc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlKClcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIHNlbGZTdWJzY3JpYmVkXG4gIH1cblxuICBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgc3Vic2NyaXB0aW9uc0Ftb3VudCsrXG4gICAgaWYgKCF1bnN1YnNjcmliZSkge1xuICAgICAgdW5zdWJzY3JpYmUgPSBwYXJlbnRTdWJcbiAgICAgICAgPyBwYXJlbnRTdWIuYWRkTmVzdGVkU3ViKGhhbmRsZUNoYW5nZVdyYXBwZXIpXG4gICAgICAgIDogc3RvcmUuc3Vic2NyaWJlKGhhbmRsZUNoYW5nZVdyYXBwZXIpXG5cbiAgICAgIGxpc3RlbmVycyA9IGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdHJ5VW5zdWJzY3JpYmUoKSB7XG4gICAgc3Vic2NyaXB0aW9uc0Ftb3VudC0tXG4gICAgaWYgKHVuc3Vic2NyaWJlICYmIHN1YnNjcmlwdGlvbnNBbW91bnQgPT09IDApIHtcbiAgICAgIHVuc3Vic2NyaWJlKClcbiAgICAgIHVuc3Vic2NyaWJlID0gdW5kZWZpbmVkXG4gICAgICBsaXN0ZW5lcnMuY2xlYXIoKVxuICAgICAgbGlzdGVuZXJzID0gbnVsbExpc3RlbmVyc1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRyeVN1YnNjcmliZVNlbGYoKSB7XG4gICAgaWYgKCFzZWxmU3Vic2NyaWJlZCkge1xuICAgICAgc2VsZlN1YnNjcmliZWQgPSB0cnVlXG4gICAgICB0cnlTdWJzY3JpYmUoKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRyeVVuc3Vic2NyaWJlU2VsZigpIHtcbiAgICBpZiAoc2VsZlN1YnNjcmliZWQpIHtcbiAgICAgIHNlbGZTdWJzY3JpYmVkID0gZmFsc2VcbiAgICAgIHRyeVVuc3Vic2NyaWJlKClcbiAgICB9XG4gIH1cblxuICBjb25zdCBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbiA9IHtcbiAgICBhZGROZXN0ZWRTdWIsXG4gICAgbm90aWZ5TmVzdGVkU3VicyxcbiAgICBoYW5kbGVDaGFuZ2VXcmFwcGVyLFxuICAgIGlzU3Vic2NyaWJlZCxcbiAgICB0cnlTdWJzY3JpYmU6IHRyeVN1YnNjcmliZVNlbGYsXG4gICAgdHJ5VW5zdWJzY3JpYmU6IHRyeVVuc3Vic2NyaWJlU2VsZixcbiAgICBnZXRMaXN0ZW5lcnM6ICgpID0+IGxpc3RlbmVycyxcbiAgfVxuXG4gIHJldHVybiBzdWJzY3JpcHRpb25cbn1cbiIsImltcG9ydCB7IFJlYWN0IH0gZnJvbSAnLi4vdXRpbHMvcmVhY3QnXG5cbi8vIFJlYWN0IGN1cnJlbnRseSB0aHJvd3MgYSB3YXJuaW5nIHdoZW4gdXNpbmcgdXNlTGF5b3V0RWZmZWN0IG9uIHRoZSBzZXJ2ZXIuXG4vLyBUbyBnZXQgYXJvdW5kIGl0LCB3ZSBjYW4gY29uZGl0aW9uYWxseSB1c2VFZmZlY3Qgb24gdGhlIHNlcnZlciAobm8tb3ApIGFuZFxuLy8gdXNlTGF5b3V0RWZmZWN0IGluIHRoZSBicm93c2VyLiBXZSBuZWVkIHVzZUxheW91dEVmZmVjdCB0byBlbnN1cmUgdGhlIHN0b3JlXG4vLyBzdWJzY3JpcHRpb24gY2FsbGJhY2sgYWx3YXlzIGhhcyB0aGUgc2VsZWN0b3IgZnJvbSB0aGUgbGF0ZXN0IHJlbmRlciBjb21taXRcbi8vIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBoYXBwZW4gYmV0d2VlbiByZW5kZXIgYW5kIHRoZSBlZmZlY3QsXG4vLyB3aGljaCBtYXkgY2F1c2UgbWlzc2VkIHVwZGF0ZXM7IHdlIGFsc28gbXVzdCBlbnN1cmUgdGhlIHN0b3JlIHN1YnNjcmlwdGlvblxuLy8gaXMgY3JlYXRlZCBzeW5jaHJvbm91c2x5LCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IG9jY3VyIGJlZm9yZSB0aGVcbi8vIHN1YnNjcmlwdGlvbiBpcyBjcmVhdGVkIGFuZCBhbiBpbmNvbnNpc3RlbnQgc3RhdGUgbWF5IGJlIG9ic2VydmVkXG5cbi8vIE1hdGNoZXMgbG9naWMgaW4gUmVhY3QncyBgc2hhcmVkL0V4ZWN1dGlvbkVudmlyb25tZW50YCBmaWxlXG5leHBvcnQgY29uc3QgY2FuVXNlRE9NID0gISEoXG4gIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmXG4gIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCdcbilcblxuLy8gVW5kZXIgUmVhY3QgTmF0aXZlLCB3ZSBrbm93IHRoYXQgd2UgYWx3YXlzIHdhbnQgdG8gdXNlIHVzZUxheW91dEVmZmVjdFxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgY29kZSBpcyBydW5uaW5nIGluIGEgUmVhY3QgTmF0aXZlIGVudmlyb25tZW50LlxuICpcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvaXNzdWVzLzEzMzEgUmVmZXJlbmNlfVxuICovXG5leHBvcnQgY29uc3QgaXNSZWFjdE5hdGl2ZSA9XG4gIHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnXG5cbmV4cG9ydCBjb25zdCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID1cbiAgY2FuVXNlRE9NIHx8IGlzUmVhY3ROYXRpdmUgPyBSZWFjdC51c2VMYXlvdXRFZmZlY3QgOiBSZWFjdC51c2VFZmZlY3RcbiIsImZ1bmN0aW9uIGlzKHg6IHVua25vd24sIHk6IHVua25vd24pIHtcclxuICBpZiAoeCA9PT0geSkge1xyXG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHlcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakE6IGFueSwgb2JqQjogYW55KSB7XHJcbiAgaWYgKGlzKG9iakEsIG9iakIpKSByZXR1cm4gdHJ1ZVxyXG5cclxuICBpZiAoXHJcbiAgICB0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHxcclxuICAgIG9iakEgPT09IG51bGwgfHxcclxuICAgIHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fFxyXG4gICAgb2JqQiA9PT0gbnVsbFxyXG4gICkge1xyXG4gICAgcmV0dXJuIGZhbHNlXHJcbiAgfVxyXG5cclxuICBjb25zdCBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpXHJcbiAgY29uc3Qga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKVxyXG5cclxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZVxyXG5cclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBpZiAoXHJcbiAgICAgICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8XHJcbiAgICAgICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZVxyXG59XHJcbiIsIi8vIENvcGllZCBkaXJlY3RseSBmcm9tOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL21yaWRnd2F5L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Jsb2IvbWFpbi9zcmMvaW5kZXguanNcbi8vIGh0dHBzOi8vdW5wa2cuY29tL2Jyb3dzZS9AdHlwZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3NAMy4zLjEvaW5kZXguZC50c1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG5pbXBvcnQgdHlwZSAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgRm9yd2FyZFJlZiwgTWVtbywgaXNNZW1vIH0gZnJvbSAnLi4vdXRpbHMvcmVhY3QtaXMnXG5cbmNvbnN0IFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBtaXhpbnM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZSxcbn0gYXMgY29uc3RcblxuY29uc3QgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlLFxufSBhcyBjb25zdFxuXG5jb25zdCBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAkJHR5cGVvZjogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG59IGFzIGNvbnN0XG5cbmNvbnN0IE1FTU9fU1RBVElDUyA9IHtcbiAgJCR0eXBlb2Y6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZSxcbn0gYXMgY29uc3RcblxuY29uc3QgVFlQRV9TVEFUSUNTID0ge1xuICBbRm9yd2FyZFJlZl06IEZPUldBUkRfUkVGX1NUQVRJQ1MsXG4gIFtNZW1vXTogTUVNT19TVEFUSUNTLFxufSBhcyBjb25zdFxuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudDogYW55KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKGlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDU1xuICB9XG5cbiAgLy8gUmVhY3QgdjE2LjEyIGFuZCBhYm92ZVxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDU1xufVxuXG5leHBvcnQgdHlwZSBOb25SZWFjdFN0YXRpY3M8XG4gIFMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnRUeXBlPGFueT4sXG4gIEMgZXh0ZW5kcyB7XG4gICAgW2tleTogc3RyaW5nXTogdHJ1ZVxuICB9ID0ge30sXG4+ID0ge1xuICBba2V5IGluIEV4Y2x1ZGU8XG4gICAga2V5b2YgUyxcbiAgICBTIGV4dGVuZHMgUmVhY3QuTWVtb0V4b3RpY0NvbXBvbmVudDxhbnk+XG4gICAgICA/IGtleW9mIHR5cGVvZiBNRU1PX1NUQVRJQ1MgfCBrZXlvZiBDXG4gICAgICA6IFMgZXh0ZW5kcyBSZWFjdC5Gb3J3YXJkUmVmRXhvdGljQ29tcG9uZW50PGFueT5cbiAgICAgICAgPyBrZXlvZiB0eXBlb2YgRk9SV0FSRF9SRUZfU1RBVElDUyB8IGtleW9mIENcbiAgICAgICAgOiBrZXlvZiB0eXBlb2YgUkVBQ1RfU1RBVElDUyB8IGtleW9mIHR5cGVvZiBLTk9XTl9TVEFUSUNTIHwga2V5b2YgQ1xuICA+XTogU1trZXldXG59XG5cbmNvbnN0IGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5XG5jb25zdCBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbmNvbnN0IGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbmNvbnN0IGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JcbmNvbnN0IGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mXG5jb25zdCBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzPFxuICBUIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50VHlwZTxhbnk+LFxuICBTIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50VHlwZTxhbnk+LFxuICBDIGV4dGVuZHMge1xuICAgIFtrZXk6IHN0cmluZ106IHRydWVcbiAgfSA9IHt9LFxuPih0YXJnZXRDb21wb25lbnQ6IFQsIHNvdXJjZUNvbXBvbmVudDogUyk6IFQgJiBOb25SZWFjdFN0YXRpY3M8UywgQz4ge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuXG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgY29uc3QgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KVxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQga2V5czogKHN0cmluZyB8IHN5bWJvbClbXSA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KVxuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKVxuICAgIH1cblxuICAgIGNvbnN0IHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudClcbiAgICBjb25zdCBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleXNbaV1cbiAgICAgIGlmIChcbiAgICAgICAgIUtOT1dOX1NUQVRJQ1Nba2V5IGFzIGtleW9mIHR5cGVvZiBLTk9XTl9TVEFUSUNTXSAmJlxuICAgICAgICAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXkgYXMga2V5b2YgdHlwZW9mIHNvdXJjZVN0YXRpY3NdKSAmJlxuICAgICAgICAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXkgYXMga2V5b2YgdHlwZW9mIHRhcmdldFN0YXRpY3NdKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yISlcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlnbm9yZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudCBhcyBhbnlcbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIHZhbGlkLWpzZG9jLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMgKi9cbmltcG9ydCB0eXBlIHsgQ29tcG9uZW50VHlwZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgUmVhY3QgfSBmcm9tICcuLi91dGlscy9yZWFjdCdcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSwgaXNDb250ZXh0Q29uc3VtZXIgfSBmcm9tICcuLi91dGlscy9yZWFjdC1pcydcblxuaW1wb3J0IHR5cGUgeyBTdG9yZSB9IGZyb20gJ3JlZHV4J1xuXG5pbXBvcnQgdHlwZSB7XG4gIENvbm5lY3RlZENvbXBvbmVudCxcbiAgSW5mZXJhYmxlQ29tcG9uZW50RW5oYW5jZXIsXG4gIEluZmVyYWJsZUNvbXBvbmVudEVuaGFuY2VyV2l0aFByb3BzLFxuICBSZXNvbHZlVGh1bmtzLFxuICBEaXNwYXRjaFByb3AsXG4gIENvbm5lY3RQcm9wc01heWJlV2l0aG91dENvbnRleHQsXG59IGZyb20gJy4uL3R5cGVzJ1xuXG5pbXBvcnQgdHlwZSB7XG4gIE1hcFN0YXRlVG9Qcm9wc1BhcmFtLFxuICBNYXBEaXNwYXRjaFRvUHJvcHNQYXJhbSxcbiAgTWVyZ2VQcm9wcyxcbiAgTWFwRGlzcGF0Y2hUb1Byb3BzTm9uT2JqZWN0LFxuICBTZWxlY3RvckZhY3RvcnlPcHRpb25zLFxufSBmcm9tICcuLi9jb25uZWN0L3NlbGVjdG9yRmFjdG9yeSdcbmltcG9ydCBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IGZyb20gJy4uL2Nvbm5lY3Qvc2VsZWN0b3JGYWN0b3J5J1xuaW1wb3J0IHsgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yeSB9IGZyb20gJy4uL2Nvbm5lY3QvbWFwRGlzcGF0Y2hUb1Byb3BzJ1xuaW1wb3J0IHsgbWFwU3RhdGVUb1Byb3BzRmFjdG9yeSB9IGZyb20gJy4uL2Nvbm5lY3QvbWFwU3RhdGVUb1Byb3BzJ1xuaW1wb3J0IHsgbWVyZ2VQcm9wc0ZhY3RvcnkgfSBmcm9tICcuLi9jb25uZWN0L21lcmdlUHJvcHMnXG5cbmltcG9ydCB0eXBlIHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJ1xuaW1wb3J0IHsgY3JlYXRlU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJ1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnXG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4uL3V0aWxzL3NoYWxsb3dFcXVhbCdcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnLi4vdXRpbHMvaG9pc3RTdGF0aWNzJ1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnLi4vdXRpbHMvd2FybmluZydcblxuaW1wb3J0IHR5cGUge1xuICBSZWFjdFJlZHV4Q29udGV4dFZhbHVlLFxuICBSZWFjdFJlZHV4Q29udGV4dEluc3RhbmNlLFxufSBmcm9tICcuL0NvbnRleHQnXG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCdcblxuaW1wb3J0IHR5cGUgeyB1U0VTIH0gZnJvbSAnLi4vdXRpbHMvdXNlU3luY0V4dGVybmFsU3RvcmUnXG5pbXBvcnQgeyBub3RJbml0aWFsaXplZCB9IGZyb20gJy4uL3V0aWxzL3VzZVN5bmNFeHRlcm5hbFN0b3JlJ1xuXG5sZXQgdXNlU3luY0V4dGVybmFsU3RvcmUgPSBub3RJbml0aWFsaXplZCBhcyB1U0VTXG5leHBvcnQgY29uc3QgaW5pdGlhbGl6ZUNvbm5lY3QgPSAoZm46IHVTRVMpID0+IHtcbiAgdXNlU3luY0V4dGVybmFsU3RvcmUgPSBmblxufVxuXG4vLyBEZWZpbmUgc29tZSBjb25zdGFudCBhcnJheXMganVzdCB0byBhdm9pZCByZS1jcmVhdGluZyB0aGVzZVxuY29uc3QgRU1QVFlfQVJSQVk6IFt1bmtub3duLCBudW1iZXJdID0gW251bGwsIDBdXG5jb25zdCBOT19TVUJTQ1JJUFRJT05fQVJSQVkgPSBbbnVsbCwgbnVsbF1cblxuLy8gQXR0ZW1wdHMgdG8gc3RyaW5naWZ5IHdoYXRldmVyIG5vdC1yZWFsbHktYS1jb21wb25lbnQgdmFsdWUgd2Ugd2VyZSBnaXZlblxuLy8gZm9yIGxvZ2dpbmcgaW4gYW4gZXJyb3IgbWVzc2FnZVxuY29uc3Qgc3RyaW5naWZ5Q29tcG9uZW50ID0gKENvbXA6IHVua25vd24pID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoQ29tcClcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIFN0cmluZyhDb21wKVxuICB9XG59XG5cbnR5cGUgRWZmZWN0RnVuYyA9ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCB8IFJldHVyblR5cGU8UmVhY3QuRWZmZWN0Q2FsbGJhY2s+XG5cbi8vIFRoaXMgaXMgXCJqdXN0XCIgYSBgdXNlTGF5b3V0RWZmZWN0YCwgYnV0IHdpdGggdHdvIG1vZGlmaWNhdGlvbnM6XG4vLyAtIHdlIG5lZWQgdG8gZmFsbCBiYWNrIHRvIGB1c2VFZmZlY3RgIGluIFNTUiB0byBhdm9pZCBhbm5veWluZyB3YXJuaW5nc1xuLy8gLSB3ZSBleHRyYWN0IHRoaXMgdG8gYSBzZXBhcmF0ZSBmdW5jdGlvbiB0byBhdm9pZCBjbG9zaW5nIG92ZXIgdmFsdWVzXG4vLyAgIGFuZCBjYXVzaW5nIG1lbW9yeSBsZWFrc1xuZnVuY3Rpb24gdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzKFxuICBlZmZlY3RGdW5jOiBFZmZlY3RGdW5jLFxuICBlZmZlY3RBcmdzOiBhbnlbXSxcbiAgZGVwZW5kZW5jaWVzPzogUmVhY3QuRGVwZW5kZW5jeUxpc3QsXG4pIHtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiBlZmZlY3RGdW5jKC4uLmVmZmVjdEFyZ3MpLCBkZXBlbmRlbmNpZXMpXG59XG5cbi8vIEVmZmVjdCBjYWxsYmFjaywgZXh0cmFjdGVkOiBhc3NpZ24gdGhlIGxhdGVzdCBwcm9wcyB2YWx1ZXMgdG8gcmVmcyBmb3IgbGF0ZXIgdXNhZ2VcbmZ1bmN0aW9uIGNhcHR1cmVXcmFwcGVyUHJvcHMoXG4gIGxhc3RXcmFwcGVyUHJvcHM6IFJlYWN0Lk11dGFibGVSZWZPYmplY3Q8dW5rbm93bj4sXG4gIGxhc3RDaGlsZFByb3BzOiBSZWFjdC5NdXRhYmxlUmVmT2JqZWN0PHVua25vd24+LFxuICByZW5kZXJJc1NjaGVkdWxlZDogUmVhY3QuTXV0YWJsZVJlZk9iamVjdDxib29sZWFuPixcbiAgd3JhcHBlclByb3BzOiB1bmtub3duLFxuICAvLyBhY3R1YWxDaGlsZFByb3BzOiB1bmtub3duLFxuICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlOiBSZWFjdC5NdXRhYmxlUmVmT2JqZWN0PHVua25vd24+LFxuICBub3RpZnlOZXN0ZWRTdWJzOiAoKSA9PiB2b2lkLFxuKSB7XG4gIC8vIFdlIHdhbnQgdG8gY2FwdHVyZSB0aGUgd3JhcHBlciBwcm9wcyBhbmQgY2hpbGQgcHJvcHMgd2UgdXNlZCBmb3IgbGF0ZXIgY29tcGFyaXNvbnNcbiAgbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50ID0gd3JhcHBlclByb3BzXG4gIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSBmYWxzZVxuXG4gIC8vIElmIHRoZSByZW5kZXIgd2FzIGZyb20gYSBzdG9yZSB1cGRhdGUsIGNsZWFyIG91dCB0aGF0IHJlZmVyZW5jZSBhbmQgY2FzY2FkZSB0aGUgc3Vic2NyaWJlciB1cGRhdGVcbiAgaWYgKGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCkge1xuICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IG51bGxcbiAgICBub3RpZnlOZXN0ZWRTdWJzKClcbiAgfVxufVxuXG4vLyBFZmZlY3QgY2FsbGJhY2ssIGV4dHJhY3RlZDogc3Vic2NyaWJlIHRvIHRoZSBSZWR1eCBzdG9yZSBvciBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3Rvcixcbi8vIGNoZWNrIGZvciB1cGRhdGVzIGFmdGVyIGRpc3BhdGNoZWQgYWN0aW9ucywgYW5kIHRyaWdnZXIgcmUtcmVuZGVycy5cbmZ1bmN0aW9uIHN1YnNjcmliZVVwZGF0ZXMoXG4gIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogYm9vbGVhbixcbiAgc3RvcmU6IFN0b3JlLFxuICBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbixcbiAgY2hpbGRQcm9wc1NlbGVjdG9yOiAoc3RhdGU6IHVua25vd24sIHByb3BzOiB1bmtub3duKSA9PiB1bmtub3duLFxuICBsYXN0V3JhcHBlclByb3BzOiBSZWFjdC5NdXRhYmxlUmVmT2JqZWN0PHVua25vd24+LFxuICBsYXN0Q2hpbGRQcm9wczogUmVhY3QuTXV0YWJsZVJlZk9iamVjdDx1bmtub3duPixcbiAgcmVuZGVySXNTY2hlZHVsZWQ6IFJlYWN0Lk11dGFibGVSZWZPYmplY3Q8Ym9vbGVhbj4sXG4gIGlzTW91bnRlZDogUmVhY3QuTXV0YWJsZVJlZk9iamVjdDxib29sZWFuPixcbiAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZTogUmVhY3QuTXV0YWJsZVJlZk9iamVjdDx1bmtub3duPixcbiAgbm90aWZ5TmVzdGVkU3ViczogKCkgPT4gdm9pZCxcbiAgLy8gZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaDogUmVhY3QuRGlzcGF0Y2g8YW55PixcbiAgYWRkaXRpb25hbFN1YnNjcmliZUxpc3RlbmVyOiAoKSA9PiB2b2lkLFxuKSB7XG4gIC8vIElmIHdlJ3JlIG5vdCBzdWJzY3JpYmVkIHRvIHRoZSBzdG9yZSwgbm90aGluZyB0byBkbyBoZXJlXG4gIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm4gKCkgPT4ge31cblxuICAvLyBDYXB0dXJlIHZhbHVlcyBmb3IgY2hlY2tpbmcgaWYgYW5kIHdoZW4gdGhpcyBjb21wb25lbnQgdW5tb3VudHNcbiAgbGV0IGRpZFVuc3Vic2NyaWJlID0gZmFsc2VcbiAgbGV0IGxhc3RUaHJvd25FcnJvcjogRXJyb3IgfCBudWxsID0gbnVsbFxuXG4gIC8vIFdlJ2xsIHJ1biB0aGlzIGNhbGxiYWNrIGV2ZXJ5IHRpbWUgYSBzdG9yZSBzdWJzY3JpcHRpb24gdXBkYXRlIHByb3BhZ2F0ZXMgdG8gdGhpcyBjb21wb25lbnRcbiAgY29uc3QgY2hlY2tGb3JVcGRhdGVzID0gKCkgPT4ge1xuICAgIGlmIChkaWRVbnN1YnNjcmliZSB8fCAhaXNNb3VudGVkLmN1cnJlbnQpIHtcbiAgICAgIC8vIERvbid0IHJ1biBzdGFsZSBsaXN0ZW5lcnMuXG4gICAgICAvLyBSZWR1eCBkb2Vzbid0IGd1YXJhbnRlZSB1bnN1YnNjcmlwdGlvbnMgaGFwcGVuIHVudGlsIG5leHQgZGlzcGF0Y2guXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBUT0RPIFdlJ3JlIGN1cnJlbnRseSBjYWxsaW5nIGdldFN0YXRlIG91cnNlbHZlcyBoZXJlLCByYXRoZXIgdGhhbiBsZXR0aW5nIGB1U0VTYCBkbyBpdFxuICAgIGNvbnN0IGxhdGVzdFN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpXG5cbiAgICBsZXQgbmV3Q2hpbGRQcm9wcywgZXJyb3JcbiAgICB0cnkge1xuICAgICAgLy8gQWN0dWFsbHkgcnVuIHRoZSBzZWxlY3RvciB3aXRoIHRoZSBtb3N0IHJlY2VudCBzdG9yZSBzdGF0ZSBhbmQgd3JhcHBlciBwcm9wc1xuICAgICAgLy8gdG8gZGV0ZXJtaW5lIHdoYXQgdGhlIGNoaWxkIHByb3BzIHNob3VsZCBiZVxuICAgICAgbmV3Q2hpbGRQcm9wcyA9IGNoaWxkUHJvcHNTZWxlY3RvcihcbiAgICAgICAgbGF0ZXN0U3RvcmVTdGF0ZSxcbiAgICAgICAgbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50LFxuICAgICAgKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGVycm9yID0gZVxuICAgICAgbGFzdFRocm93bkVycm9yID0gZSBhcyBFcnJvciB8IG51bGxcbiAgICB9XG5cbiAgICBpZiAoIWVycm9yKSB7XG4gICAgICBsYXN0VGhyb3duRXJyb3IgPSBudWxsXG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIGNoaWxkIHByb3BzIGhhdmVuJ3QgY2hhbmdlZCwgbm90aGluZyB0byBkbyBoZXJlIC0gY2FzY2FkZSB0aGUgc3Vic2NyaXB0aW9uIHVwZGF0ZVxuICAgIGlmIChuZXdDaGlsZFByb3BzID09PSBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50KSB7XG4gICAgICBpZiAoIXJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQpIHtcbiAgICAgICAgbm90aWZ5TmVzdGVkU3VicygpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNhdmUgcmVmZXJlbmNlcyB0byB0aGUgbmV3IGNoaWxkIHByb3BzLiAgTm90ZSB0aGF0IHdlIHRyYWNrIHRoZSBcImNoaWxkIHByb3BzIGZyb20gc3RvcmUgdXBkYXRlXCJcbiAgICAgIC8vIGFzIGEgcmVmIGluc3RlYWQgb2YgYSB1c2VTdGF0ZS91c2VSZWR1Y2VyIGJlY2F1c2Ugd2UgbmVlZCBhIHdheSB0byBkZXRlcm1pbmUgaWYgdGhhdCB2YWx1ZSBoYXNcbiAgICAgIC8vIGJlZW4gcHJvY2Vzc2VkLiAgSWYgdGhpcyB3ZW50IGludG8gdXNlU3RhdGUvdXNlUmVkdWNlciwgd2UgY291bGRuJ3QgY2xlYXIgb3V0IHRoZSB2YWx1ZSB3aXRob3V0XG4gICAgICAvLyBmb3JjaW5nIGFub3RoZXIgcmUtcmVuZGVyLCB3aGljaCB3ZSBkb24ndCB3YW50LlxuICAgICAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IG5ld0NoaWxkUHJvcHNcbiAgICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IG5ld0NoaWxkUHJvcHNcbiAgICAgIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSB0cnVlXG5cbiAgICAgIC8vIFRPRE8gVGhpcyBpcyBoYWNreSBhbmQgbm90IGhvdyBgdVNFU2AgaXMgbWVhbnQgdG8gYmUgdXNlZFxuICAgICAgLy8gVHJpZ2dlciB0aGUgUmVhY3QgYHVzZVN5bmNFeHRlcm5hbFN0b3JlYCBzdWJzY3JpYmVyXG4gICAgICBhZGRpdGlvbmFsU3Vic2NyaWJlTGlzdGVuZXIoKVxuICAgIH1cbiAgfVxuXG4gIC8vIEFjdHVhbGx5IHN1YnNjcmliZSB0byB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IgKG9yIHN0b3JlKVxuICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlc1xuICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKClcblxuICAvLyBQdWxsIGRhdGEgZnJvbSB0aGUgc3RvcmUgYWZ0ZXIgZmlyc3QgcmVuZGVyIGluIGNhc2UgdGhlIHN0b3JlIGhhc1xuICAvLyBjaGFuZ2VkIHNpbmNlIHdlIGJlZ2FuLlxuICBjaGVja0ZvclVwZGF0ZXMoKVxuXG4gIGNvbnN0IHVuc3Vic2NyaWJlV3JhcHBlciA9ICgpID0+IHtcbiAgICBkaWRVbnN1YnNjcmliZSA9IHRydWVcbiAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKVxuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gbnVsbFxuXG4gICAgaWYgKGxhc3RUaHJvd25FcnJvcikge1xuICAgICAgLy8gSXQncyBwb3NzaWJsZSB0aGF0IHdlIGNhdWdodCBhbiBlcnJvciBkdWUgdG8gYSBiYWQgbWFwU3RhdGUgZnVuY3Rpb24sIGJ1dCB0aGVcbiAgICAgIC8vIHBhcmVudCByZS1yZW5kZXJlZCB3aXRob3V0IHRoaXMgY29tcG9uZW50IGFuZCB3ZSdyZSBhYm91dCB0byB1bm1vdW50LlxuICAgICAgLy8gVGhpcyBzaG91bGRuJ3QgaGFwcGVuIGFzIGxvbmcgYXMgd2UgZG8gdG9wLWRvd24gc3Vic2NyaXB0aW9ucyBjb3JyZWN0bHksIGJ1dFxuICAgICAgLy8gaWYgd2UgZXZlciBkbyB0aG9zZSB3cm9uZywgdGhpcyB0aHJvdyB3aWxsIHN1cmZhY2UgdGhlIGVycm9yIGluIG91ciB0ZXN0cy5cbiAgICAgIC8vIEluIHRoYXQgY2FzZSwgdGhyb3cgdGhlIGVycm9yIGZyb20gaGVyZSBzbyBpdCBkb2Vzbid0IGdldCBsb3N0LlxuICAgICAgdGhyb3cgbGFzdFRocm93bkVycm9yXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuc3Vic2NyaWJlV3JhcHBlclxufVxuXG4vLyBSZWR1Y2VyIGluaXRpYWwgc3RhdGUgY3JlYXRpb24gZm9yIG91ciB1cGRhdGUgcmVkdWNlclxuY29uc3QgaW5pdFN0YXRlVXBkYXRlcyA9ICgpID0+IEVNUFRZX0FSUkFZXG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29ubmVjdFByb3BzIHtcbiAgLyoqIEEgY3VzdG9tIENvbnRleHQgaW5zdGFuY2UgdGhhdCB0aGUgY29tcG9uZW50IGNhbiB1c2UgdG8gYWNjZXNzIHRoZSBzdG9yZSBmcm9tIGFuIGFsdGVybmF0ZSBQcm92aWRlciB1c2luZyB0aGF0IHNhbWUgQ29udGV4dCBpbnN0YW5jZSAqL1xuICBjb250ZXh0PzogUmVhY3RSZWR1eENvbnRleHRJbnN0YW5jZVxuICAvKiogQSBSZWR1eCBzdG9yZSBpbnN0YW5jZSB0byBiZSB1c2VkIGZvciBzdWJzY3JpcHRpb25zIGluc3RlYWQgb2YgdGhlIHN0b3JlIGZyb20gYSBQcm92aWRlciAqL1xuICBzdG9yZT86IFN0b3JlXG59XG5cbmludGVyZmFjZSBJbnRlcm5hbENvbm5lY3RQcm9wcyBleHRlbmRzIENvbm5lY3RQcm9wcyB7XG4gIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWY/OiBSZWFjdC5Gb3J3YXJkZWRSZWY8dW5rbm93bj5cbn1cblxuZnVuY3Rpb24gc3RyaWN0RXF1YWwoYTogdW5rbm93biwgYjogdW5rbm93bikge1xuICByZXR1cm4gYSA9PT0gYlxufVxuXG4vKipcbiAqIEluZmVycyB0aGUgdHlwZSBvZiBwcm9wcyB0aGF0IGEgY29ubmVjdG9yIHdpbGwgaW5qZWN0IGludG8gYSBjb21wb25lbnQuXG4gKi9cbmV4cG9ydCB0eXBlIENvbm5lY3RlZFByb3BzPFRDb25uZWN0b3I+ID1cbiAgVENvbm5lY3RvciBleHRlbmRzIEluZmVyYWJsZUNvbXBvbmVudEVuaGFuY2VyV2l0aFByb3BzPFxuICAgIGluZmVyIFRJbmplY3RlZFByb3BzLFxuICAgIGFueVxuICA+XG4gICAgPyB1bmtub3duIGV4dGVuZHMgVEluamVjdGVkUHJvcHNcbiAgICAgID8gVENvbm5lY3RvciBleHRlbmRzIEluZmVyYWJsZUNvbXBvbmVudEVuaGFuY2VyPGluZmVyIFRJbmplY3RlZFByb3BzPlxuICAgICAgICA/IFRJbmplY3RlZFByb3BzXG4gICAgICAgIDogbmV2ZXJcbiAgICAgIDogVEluamVjdGVkUHJvcHNcbiAgICA6IG5ldmVyXG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29ubmVjdE9wdGlvbnM8XG4gIFN0YXRlID0gdW5rbm93bixcbiAgVFN0YXRlUHJvcHMgPSB7fSxcbiAgVE93blByb3BzID0ge30sXG4gIFRNZXJnZWRQcm9wcyA9IHt9LFxuPiB7XG4gIGZvcndhcmRSZWY/OiBib29sZWFuXG4gIGNvbnRleHQ/OiB0eXBlb2YgUmVhY3RSZWR1eENvbnRleHRcbiAgYXJlU3RhdGVzRXF1YWw/OiAoXG4gICAgbmV4dFN0YXRlOiBTdGF0ZSxcbiAgICBwcmV2U3RhdGU6IFN0YXRlLFxuICAgIG5leHRPd25Qcm9wczogVE93blByb3BzLFxuICAgIHByZXZPd25Qcm9wczogVE93blByb3BzLFxuICApID0+IGJvb2xlYW5cblxuICBhcmVPd25Qcm9wc0VxdWFsPzogKFxuICAgIG5leHRPd25Qcm9wczogVE93blByb3BzLFxuICAgIHByZXZPd25Qcm9wczogVE93blByb3BzLFxuICApID0+IGJvb2xlYW5cblxuICBhcmVTdGF0ZVByb3BzRXF1YWw/OiAoXG4gICAgbmV4dFN0YXRlUHJvcHM6IFRTdGF0ZVByb3BzLFxuICAgIHByZXZTdGF0ZVByb3BzOiBUU3RhdGVQcm9wcyxcbiAgKSA9PiBib29sZWFuXG4gIGFyZU1lcmdlZFByb3BzRXF1YWw/OiAoXG4gICAgbmV4dE1lcmdlZFByb3BzOiBUTWVyZ2VkUHJvcHMsXG4gICAgcHJldk1lcmdlZFByb3BzOiBUTWVyZ2VkUHJvcHMsXG4gICkgPT4gYm9vbGVhblxufVxuXG4vKipcbiAqIENvbm5lY3RzIGEgUmVhY3QgY29tcG9uZW50IHRvIGEgUmVkdXggc3RvcmUuXG4gKlxuICogLSBXaXRob3V0IGFyZ3VtZW50cywganVzdCB3cmFwcyB0aGUgY29tcG9uZW50LCB3aXRob3V0IGNoYW5naW5nIHRoZSBiZWhhdmlvciAvIHByb3BzXG4gKlxuICogLSBJZiAyIHBhcmFtcyBhcmUgcGFzc2VkICgzcmQgcGFyYW0sIG1lcmdlUHJvcHMsIGlzIHNraXBwZWQpLCBkZWZhdWx0IGJlaGF2aW9yXG4gKiBpcyB0byBvdmVycmlkZSBvd25Qcm9wcyAoYXMgc3RhdGVkIGluIHRoZSBkb2NzKSwgc28gd2hhdCByZW1haW5zIGlzIGV2ZXJ5dGhpbmcgdGhhdCdzXG4gKiBub3QgYSBzdGF0ZSBvciBkaXNwYXRjaCBwcm9wXG4gKlxuICogLSBXaGVuIDNyZCBwYXJhbSBpcyBwYXNzZWQsIHdlIGRvbid0IGtub3cgaWYgb3duUHJvcHMgcHJvcGFnYXRlIGFuZCB3aGV0aGVyIHRoZXlcbiAqIHNob3VsZCBiZSB2YWxpZCBjb21wb25lbnQgcHJvcHMsIGJlY2F1c2UgaXQgZGVwZW5kcyBvbiBtZXJnZVByb3BzIGltcGxlbWVudGF0aW9uLlxuICogQXMgc3VjaCwgaXQgaXMgdGhlIHVzZXIncyByZXNwb25zaWJpbGl0eSB0byBleHRlbmQgb3duUHJvcHMgaW50ZXJmYWNlIGZyb20gc3RhdGUgb3JcbiAqIGRpc3BhdGNoIHByb3BzIG9yIGJvdGggd2hlbiBhcHBsaWNhYmxlXG4gKlxuICogQHBhcmFtIG1hcFN0YXRlVG9Qcm9wc1xuICogQHBhcmFtIG1hcERpc3BhdGNoVG9Qcm9wc1xuICogQHBhcmFtIG1lcmdlUHJvcHNcbiAqIEBwYXJhbSBvcHRpb25zXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29ubmVjdDxEZWZhdWx0U3RhdGUgPSB1bmtub3duPiB7XG4gIC8vIHRzbGludDpkaXNhYmxlOm5vLXVubmVjZXNzYXJ5LWdlbmVyaWNzXG4gICgpOiBJbmZlcmFibGVDb21wb25lbnRFbmhhbmNlcjxEaXNwYXRjaFByb3A+XG5cbiAgLyoqIG1hcFN0YXRlIG9ubHkgKi9cbiAgPFRTdGF0ZVByb3BzID0ge30sIG5vX2Rpc3BhdGNoID0ge30sIFRPd25Qcm9wcyA9IHt9LCBTdGF0ZSA9IERlZmF1bHRTdGF0ZT4oXG4gICAgbWFwU3RhdGVUb1Byb3BzOiBNYXBTdGF0ZVRvUHJvcHNQYXJhbTxUU3RhdGVQcm9wcywgVE93blByb3BzLCBTdGF0ZT4sXG4gICk6IEluZmVyYWJsZUNvbXBvbmVudEVuaGFuY2VyV2l0aFByb3BzPFRTdGF0ZVByb3BzICYgRGlzcGF0Y2hQcm9wLCBUT3duUHJvcHM+XG5cbiAgLyoqIG1hcERpc3BhdGNoIG9ubHkgKGFzIGEgZnVuY3Rpb24pICovXG4gIDxub19zdGF0ZSA9IHt9LCBURGlzcGF0Y2hQcm9wcyA9IHt9LCBUT3duUHJvcHMgPSB7fT4oXG4gICAgbWFwU3RhdGVUb1Byb3BzOiBudWxsIHwgdW5kZWZpbmVkLFxuICAgIG1hcERpc3BhdGNoVG9Qcm9wczogTWFwRGlzcGF0Y2hUb1Byb3BzTm9uT2JqZWN0PFREaXNwYXRjaFByb3BzLCBUT3duUHJvcHM+LFxuICApOiBJbmZlcmFibGVDb21wb25lbnRFbmhhbmNlcldpdGhQcm9wczxURGlzcGF0Y2hQcm9wcywgVE93blByb3BzPlxuXG4gIC8qKiBtYXBEaXNwYXRjaCBvbmx5IChhcyBhbiBvYmplY3QpICovXG4gIDxub19zdGF0ZSA9IHt9LCBURGlzcGF0Y2hQcm9wcyA9IHt9LCBUT3duUHJvcHMgPSB7fT4oXG4gICAgbWFwU3RhdGVUb1Byb3BzOiBudWxsIHwgdW5kZWZpbmVkLFxuICAgIG1hcERpc3BhdGNoVG9Qcm9wczogTWFwRGlzcGF0Y2hUb1Byb3BzUGFyYW08VERpc3BhdGNoUHJvcHMsIFRPd25Qcm9wcz4sXG4gICk6IEluZmVyYWJsZUNvbXBvbmVudEVuaGFuY2VyV2l0aFByb3BzPFxuICAgIFJlc29sdmVUaHVua3M8VERpc3BhdGNoUHJvcHM+LFxuICAgIFRPd25Qcm9wc1xuICA+XG5cbiAgLyoqIG1hcFN0YXRlIGFuZCBtYXBEaXNwYXRjaCAoYXMgYSBmdW5jdGlvbikqL1xuICA8VFN0YXRlUHJvcHMgPSB7fSwgVERpc3BhdGNoUHJvcHMgPSB7fSwgVE93blByb3BzID0ge30sIFN0YXRlID0gRGVmYXVsdFN0YXRlPihcbiAgICBtYXBTdGF0ZVRvUHJvcHM6IE1hcFN0YXRlVG9Qcm9wc1BhcmFtPFRTdGF0ZVByb3BzLCBUT3duUHJvcHMsIFN0YXRlPixcbiAgICBtYXBEaXNwYXRjaFRvUHJvcHM6IE1hcERpc3BhdGNoVG9Qcm9wc05vbk9iamVjdDxURGlzcGF0Y2hQcm9wcywgVE93blByb3BzPixcbiAgKTogSW5mZXJhYmxlQ29tcG9uZW50RW5oYW5jZXJXaXRoUHJvcHM8XG4gICAgVFN0YXRlUHJvcHMgJiBURGlzcGF0Y2hQcm9wcyxcbiAgICBUT3duUHJvcHNcbiAgPlxuXG4gIC8qKiBtYXBTdGF0ZSBhbmQgbWFwRGlzcGF0Y2ggKG51bGxpc2gpICovXG4gIDxUU3RhdGVQcm9wcyA9IHt9LCBURGlzcGF0Y2hQcm9wcyA9IHt9LCBUT3duUHJvcHMgPSB7fSwgU3RhdGUgPSBEZWZhdWx0U3RhdGU+KFxuICAgIG1hcFN0YXRlVG9Qcm9wczogTWFwU3RhdGVUb1Byb3BzUGFyYW08VFN0YXRlUHJvcHMsIFRPd25Qcm9wcywgU3RhdGU+LFxuICAgIG1hcERpc3BhdGNoVG9Qcm9wczogbnVsbCB8IHVuZGVmaW5lZCxcbiAgKTogSW5mZXJhYmxlQ29tcG9uZW50RW5oYW5jZXJXaXRoUHJvcHM8VFN0YXRlUHJvcHMsIFRPd25Qcm9wcz5cblxuICAvKiogbWFwU3RhdGUgYW5kIG1hcERpc3BhdGNoIChhcyBhbiBvYmplY3QpICovXG4gIDxUU3RhdGVQcm9wcyA9IHt9LCBURGlzcGF0Y2hQcm9wcyA9IHt9LCBUT3duUHJvcHMgPSB7fSwgU3RhdGUgPSBEZWZhdWx0U3RhdGU+KFxuICAgIG1hcFN0YXRlVG9Qcm9wczogTWFwU3RhdGVUb1Byb3BzUGFyYW08VFN0YXRlUHJvcHMsIFRPd25Qcm9wcywgU3RhdGU+LFxuICAgIG1hcERpc3BhdGNoVG9Qcm9wczogTWFwRGlzcGF0Y2hUb1Byb3BzUGFyYW08VERpc3BhdGNoUHJvcHMsIFRPd25Qcm9wcz4sXG4gICk6IEluZmVyYWJsZUNvbXBvbmVudEVuaGFuY2VyV2l0aFByb3BzPFxuICAgIFRTdGF0ZVByb3BzICYgUmVzb2x2ZVRodW5rczxURGlzcGF0Y2hQcm9wcz4sXG4gICAgVE93blByb3BzXG4gID5cblxuICAvKiogbWVyZ2VQcm9wcyBvbmx5ICovXG4gIDxub19zdGF0ZSA9IHt9LCBub19kaXNwYXRjaCA9IHt9LCBUT3duUHJvcHMgPSB7fSwgVE1lcmdlZFByb3BzID0ge30+KFxuICAgIG1hcFN0YXRlVG9Qcm9wczogbnVsbCB8IHVuZGVmaW5lZCxcbiAgICBtYXBEaXNwYXRjaFRvUHJvcHM6IG51bGwgfCB1bmRlZmluZWQsXG4gICAgbWVyZ2VQcm9wczogTWVyZ2VQcm9wczx1bmRlZmluZWQsIERpc3BhdGNoUHJvcCwgVE93blByb3BzLCBUTWVyZ2VkUHJvcHM+LFxuICApOiBJbmZlcmFibGVDb21wb25lbnRFbmhhbmNlcldpdGhQcm9wczxUTWVyZ2VkUHJvcHMsIFRPd25Qcm9wcz5cblxuICAvKiogbWFwU3RhdGUgYW5kIG1lcmdlUHJvcHMgKi9cbiAgPFxuICAgIFRTdGF0ZVByb3BzID0ge30sXG4gICAgbm9fZGlzcGF0Y2ggPSB7fSxcbiAgICBUT3duUHJvcHMgPSB7fSxcbiAgICBUTWVyZ2VkUHJvcHMgPSB7fSxcbiAgICBTdGF0ZSA9IERlZmF1bHRTdGF0ZSxcbiAgPihcbiAgICBtYXBTdGF0ZVRvUHJvcHM6IE1hcFN0YXRlVG9Qcm9wc1BhcmFtPFRTdGF0ZVByb3BzLCBUT3duUHJvcHMsIFN0YXRlPixcbiAgICBtYXBEaXNwYXRjaFRvUHJvcHM6IG51bGwgfCB1bmRlZmluZWQsXG4gICAgbWVyZ2VQcm9wczogTWVyZ2VQcm9wczxUU3RhdGVQcm9wcywgRGlzcGF0Y2hQcm9wLCBUT3duUHJvcHMsIFRNZXJnZWRQcm9wcz4sXG4gICk6IEluZmVyYWJsZUNvbXBvbmVudEVuaGFuY2VyV2l0aFByb3BzPFRNZXJnZWRQcm9wcywgVE93blByb3BzPlxuXG4gIC8qKiBtYXBEaXNwYXRjaCAoYXMgYSBvYmplY3QpIGFuZCBtZXJnZVByb3BzICovXG4gIDxub19zdGF0ZSA9IHt9LCBURGlzcGF0Y2hQcm9wcyA9IHt9LCBUT3duUHJvcHMgPSB7fSwgVE1lcmdlZFByb3BzID0ge30+KFxuICAgIG1hcFN0YXRlVG9Qcm9wczogbnVsbCB8IHVuZGVmaW5lZCxcbiAgICBtYXBEaXNwYXRjaFRvUHJvcHM6IE1hcERpc3BhdGNoVG9Qcm9wc1BhcmFtPFREaXNwYXRjaFByb3BzLCBUT3duUHJvcHM+LFxuICAgIG1lcmdlUHJvcHM6IE1lcmdlUHJvcHM8dW5kZWZpbmVkLCBURGlzcGF0Y2hQcm9wcywgVE93blByb3BzLCBUTWVyZ2VkUHJvcHM+LFxuICApOiBJbmZlcmFibGVDb21wb25lbnRFbmhhbmNlcldpdGhQcm9wczxUTWVyZ2VkUHJvcHMsIFRPd25Qcm9wcz5cblxuICAvKiogbWFwU3RhdGUgYW5kIG9wdGlvbnMgKi9cbiAgPFRTdGF0ZVByb3BzID0ge30sIG5vX2Rpc3BhdGNoID0ge30sIFRPd25Qcm9wcyA9IHt9LCBTdGF0ZSA9IERlZmF1bHRTdGF0ZT4oXG4gICAgbWFwU3RhdGVUb1Byb3BzOiBNYXBTdGF0ZVRvUHJvcHNQYXJhbTxUU3RhdGVQcm9wcywgVE93blByb3BzLCBTdGF0ZT4sXG4gICAgbWFwRGlzcGF0Y2hUb1Byb3BzOiBudWxsIHwgdW5kZWZpbmVkLFxuICAgIG1lcmdlUHJvcHM6IG51bGwgfCB1bmRlZmluZWQsXG4gICAgb3B0aW9uczogQ29ubmVjdE9wdGlvbnM8U3RhdGUsIFRTdGF0ZVByb3BzLCBUT3duUHJvcHM+LFxuICApOiBJbmZlcmFibGVDb21wb25lbnRFbmhhbmNlcldpdGhQcm9wczxEaXNwYXRjaFByb3AgJiBUU3RhdGVQcm9wcywgVE93blByb3BzPlxuXG4gIC8qKiBtYXBEaXNwYXRjaCAoYXMgYSBmdW5jdGlvbikgYW5kIG9wdGlvbnMgKi9cbiAgPFRTdGF0ZVByb3BzID0ge30sIFREaXNwYXRjaFByb3BzID0ge30sIFRPd25Qcm9wcyA9IHt9PihcbiAgICBtYXBTdGF0ZVRvUHJvcHM6IG51bGwgfCB1bmRlZmluZWQsXG4gICAgbWFwRGlzcGF0Y2hUb1Byb3BzOiBNYXBEaXNwYXRjaFRvUHJvcHNOb25PYmplY3Q8VERpc3BhdGNoUHJvcHMsIFRPd25Qcm9wcz4sXG4gICAgbWVyZ2VQcm9wczogbnVsbCB8IHVuZGVmaW5lZCxcbiAgICBvcHRpb25zOiBDb25uZWN0T3B0aW9uczx7fSwgVFN0YXRlUHJvcHMsIFRPd25Qcm9wcz4sXG4gICk6IEluZmVyYWJsZUNvbXBvbmVudEVuaGFuY2VyV2l0aFByb3BzPFREaXNwYXRjaFByb3BzLCBUT3duUHJvcHM+XG5cbiAgLyoqIG1hcERpc3BhdGNoIChhcyBhbiBvYmplY3QpIGFuZCBvcHRpb25zKi9cbiAgPFRTdGF0ZVByb3BzID0ge30sIFREaXNwYXRjaFByb3BzID0ge30sIFRPd25Qcm9wcyA9IHt9PihcbiAgICBtYXBTdGF0ZVRvUHJvcHM6IG51bGwgfCB1bmRlZmluZWQsXG4gICAgbWFwRGlzcGF0Y2hUb1Byb3BzOiBNYXBEaXNwYXRjaFRvUHJvcHNQYXJhbTxURGlzcGF0Y2hQcm9wcywgVE93blByb3BzPixcbiAgICBtZXJnZVByb3BzOiBudWxsIHwgdW5kZWZpbmVkLFxuICAgIG9wdGlvbnM6IENvbm5lY3RPcHRpb25zPHt9LCBUU3RhdGVQcm9wcywgVE93blByb3BzPixcbiAgKTogSW5mZXJhYmxlQ29tcG9uZW50RW5oYW5jZXJXaXRoUHJvcHM8XG4gICAgUmVzb2x2ZVRodW5rczxURGlzcGF0Y2hQcm9wcz4sXG4gICAgVE93blByb3BzXG4gID5cblxuICAvKiogbWFwU3RhdGUsICBtYXBEaXNwYXRjaCAoYXMgYSBmdW5jdGlvbiksIGFuZCBvcHRpb25zICovXG4gIDxUU3RhdGVQcm9wcyA9IHt9LCBURGlzcGF0Y2hQcm9wcyA9IHt9LCBUT3duUHJvcHMgPSB7fSwgU3RhdGUgPSBEZWZhdWx0U3RhdGU+KFxuICAgIG1hcFN0YXRlVG9Qcm9wczogTWFwU3RhdGVUb1Byb3BzUGFyYW08VFN0YXRlUHJvcHMsIFRPd25Qcm9wcywgU3RhdGU+LFxuICAgIG1hcERpc3BhdGNoVG9Qcm9wczogTWFwRGlzcGF0Y2hUb1Byb3BzTm9uT2JqZWN0PFREaXNwYXRjaFByb3BzLCBUT3duUHJvcHM+LFxuICAgIG1lcmdlUHJvcHM6IG51bGwgfCB1bmRlZmluZWQsXG4gICAgb3B0aW9uczogQ29ubmVjdE9wdGlvbnM8U3RhdGUsIFRTdGF0ZVByb3BzLCBUT3duUHJvcHM+LFxuICApOiBJbmZlcmFibGVDb21wb25lbnRFbmhhbmNlcldpdGhQcm9wczxcbiAgICBUU3RhdGVQcm9wcyAmIFREaXNwYXRjaFByb3BzLFxuICAgIFRPd25Qcm9wc1xuICA+XG5cbiAgLyoqIG1hcFN0YXRlLCAgbWFwRGlzcGF0Y2ggKGFzIGFuIG9iamVjdCksIGFuZCBvcHRpb25zICovXG4gIDxUU3RhdGVQcm9wcyA9IHt9LCBURGlzcGF0Y2hQcm9wcyA9IHt9LCBUT3duUHJvcHMgPSB7fSwgU3RhdGUgPSBEZWZhdWx0U3RhdGU+KFxuICAgIG1hcFN0YXRlVG9Qcm9wczogTWFwU3RhdGVUb1Byb3BzUGFyYW08VFN0YXRlUHJvcHMsIFRPd25Qcm9wcywgU3RhdGU+LFxuICAgIG1hcERpc3BhdGNoVG9Qcm9wczogTWFwRGlzcGF0Y2hUb1Byb3BzUGFyYW08VERpc3BhdGNoUHJvcHMsIFRPd25Qcm9wcz4sXG4gICAgbWVyZ2VQcm9wczogbnVsbCB8IHVuZGVmaW5lZCxcbiAgICBvcHRpb25zOiBDb25uZWN0T3B0aW9uczxTdGF0ZSwgVFN0YXRlUHJvcHMsIFRPd25Qcm9wcz4sXG4gICk6IEluZmVyYWJsZUNvbXBvbmVudEVuaGFuY2VyV2l0aFByb3BzPFxuICAgIFRTdGF0ZVByb3BzICYgUmVzb2x2ZVRodW5rczxURGlzcGF0Y2hQcm9wcz4sXG4gICAgVE93blByb3BzXG4gID5cblxuICAvKiogbWFwU3RhdGUsIG1hcERpc3BhdGNoLCBtZXJnZVByb3BzLCBhbmQgb3B0aW9ucyAqL1xuICA8XG4gICAgVFN0YXRlUHJvcHMgPSB7fSxcbiAgICBURGlzcGF0Y2hQcm9wcyA9IHt9LFxuICAgIFRPd25Qcm9wcyA9IHt9LFxuICAgIFRNZXJnZWRQcm9wcyA9IHt9LFxuICAgIFN0YXRlID0gRGVmYXVsdFN0YXRlLFxuICA+KFxuICAgIG1hcFN0YXRlVG9Qcm9wczogTWFwU3RhdGVUb1Byb3BzUGFyYW08VFN0YXRlUHJvcHMsIFRPd25Qcm9wcywgU3RhdGU+LFxuICAgIG1hcERpc3BhdGNoVG9Qcm9wczogTWFwRGlzcGF0Y2hUb1Byb3BzUGFyYW08VERpc3BhdGNoUHJvcHMsIFRPd25Qcm9wcz4sXG4gICAgbWVyZ2VQcm9wczogTWVyZ2VQcm9wczxcbiAgICAgIFRTdGF0ZVByb3BzLFxuICAgICAgVERpc3BhdGNoUHJvcHMsXG4gICAgICBUT3duUHJvcHMsXG4gICAgICBUTWVyZ2VkUHJvcHNcbiAgICA+LFxuICAgIG9wdGlvbnM/OiBDb25uZWN0T3B0aW9uczxTdGF0ZSwgVFN0YXRlUHJvcHMsIFRPd25Qcm9wcywgVE1lcmdlZFByb3BzPixcbiAgKTogSW5mZXJhYmxlQ29tcG9uZW50RW5oYW5jZXJXaXRoUHJvcHM8VE1lcmdlZFByb3BzLCBUT3duUHJvcHM+XG4gIC8vIHRzbGludDplbmFibGU6bm8tdW5uZWNlc3NhcnktZ2VuZXJpY3Ncbn1cblxubGV0IGhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZFB1cmVPcHRpb24gPSBmYWxzZVxuXG4vKipcbiAqIENvbm5lY3RzIGEgUmVhY3QgY29tcG9uZW50IHRvIGEgUmVkdXggc3RvcmUuXG4gKlxuICogLSBXaXRob3V0IGFyZ3VtZW50cywganVzdCB3cmFwcyB0aGUgY29tcG9uZW50LCB3aXRob3V0IGNoYW5naW5nIHRoZSBiZWhhdmlvciAvIHByb3BzXG4gKlxuICogLSBJZiAyIHBhcmFtcyBhcmUgcGFzc2VkICgzcmQgcGFyYW0sIG1lcmdlUHJvcHMsIGlzIHNraXBwZWQpLCBkZWZhdWx0IGJlaGF2aW9yXG4gKiBpcyB0byBvdmVycmlkZSBvd25Qcm9wcyAoYXMgc3RhdGVkIGluIHRoZSBkb2NzKSwgc28gd2hhdCByZW1haW5zIGlzIGV2ZXJ5dGhpbmcgdGhhdCdzXG4gKiBub3QgYSBzdGF0ZSBvciBkaXNwYXRjaCBwcm9wXG4gKlxuICogLSBXaGVuIDNyZCBwYXJhbSBpcyBwYXNzZWQsIHdlIGRvbid0IGtub3cgaWYgb3duUHJvcHMgcHJvcGFnYXRlIGFuZCB3aGV0aGVyIHRoZXlcbiAqIHNob3VsZCBiZSB2YWxpZCBjb21wb25lbnQgcHJvcHMsIGJlY2F1c2UgaXQgZGVwZW5kcyBvbiBtZXJnZVByb3BzIGltcGxlbWVudGF0aW9uLlxuICogQXMgc3VjaCwgaXQgaXMgdGhlIHVzZXIncyByZXNwb25zaWJpbGl0eSB0byBleHRlbmQgb3duUHJvcHMgaW50ZXJmYWNlIGZyb20gc3RhdGUgb3JcbiAqIGRpc3BhdGNoIHByb3BzIG9yIGJvdGggd2hlbiBhcHBsaWNhYmxlXG4gKlxuICogQHBhcmFtIG1hcFN0YXRlVG9Qcm9wcyBBIGZ1bmN0aW9uIHRoYXQgZXh0cmFjdHMgdmFsdWVzIGZyb20gc3RhdGVcbiAqIEBwYXJhbSBtYXBEaXNwYXRjaFRvUHJvcHMgU2V0dXAgZm9yIGRpc3BhdGNoaW5nIGFjdGlvbnNcbiAqIEBwYXJhbSBtZXJnZVByb3BzIE9wdGlvbmFsIGNhbGxiYWNrIHRvIG1lcmdlIHN0YXRlIGFuZCBkaXNwYXRjaCBwcm9wcyB0b2dldGhlclxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBmb3IgY29uZmlndXJpbmcgdGhlIGNvbm5lY3Rpb25cbiAqXG4gKi9cbmZ1bmN0aW9uIGNvbm5lY3Q8XG4gIFRTdGF0ZVByb3BzID0ge30sXG4gIFREaXNwYXRjaFByb3BzID0ge30sXG4gIFRPd25Qcm9wcyA9IHt9LFxuICBUTWVyZ2VkUHJvcHMgPSB7fSxcbiAgU3RhdGUgPSB1bmtub3duLFxuPihcbiAgbWFwU3RhdGVUb1Byb3BzPzogTWFwU3RhdGVUb1Byb3BzUGFyYW08VFN0YXRlUHJvcHMsIFRPd25Qcm9wcywgU3RhdGU+LFxuICBtYXBEaXNwYXRjaFRvUHJvcHM/OiBNYXBEaXNwYXRjaFRvUHJvcHNQYXJhbTxURGlzcGF0Y2hQcm9wcywgVE93blByb3BzPixcbiAgbWVyZ2VQcm9wcz86IE1lcmdlUHJvcHM8VFN0YXRlUHJvcHMsIFREaXNwYXRjaFByb3BzLCBUT3duUHJvcHMsIFRNZXJnZWRQcm9wcz4sXG4gIHtcbiAgICAvLyBUaGUgYHB1cmVgIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkLCBzbyBUUyBkb2Vzbid0IGxpa2UgdXMgZGVzdHJ1Y3R1cmluZyB0aGlzIHRvIGNoZWNrIGl0cyBleGlzdGVuY2UuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHB1cmUsXG4gICAgYXJlU3RhdGVzRXF1YWwgPSBzdHJpY3RFcXVhbCxcbiAgICBhcmVPd25Qcm9wc0VxdWFsID0gc2hhbGxvd0VxdWFsLFxuICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IHNoYWxsb3dFcXVhbCxcbiAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gc2hhbGxvd0VxdWFsLFxuXG4gICAgLy8gdXNlIFJlYWN0J3MgZm9yd2FyZFJlZiB0byBleHBvc2UgYSByZWYgb2YgdGhlIHdyYXBwZWQgY29tcG9uZW50XG4gICAgZm9yd2FyZFJlZiA9IGZhbHNlLFxuXG4gICAgLy8gdGhlIGNvbnRleHQgY29uc3VtZXIgdG8gdXNlXG4gICAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0LFxuICB9OiBDb25uZWN0T3B0aW9uczx1bmtub3duLCB1bmtub3duLCB1bmtub3duLCB1bmtub3duPiA9IHt9LFxuKTogdW5rbm93biB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHB1cmUgIT09IHVuZGVmaW5lZCAmJiAhaGFzV2FybmVkQWJvdXREZXByZWNhdGVkUHVyZU9wdGlvbikge1xuICAgICAgaGFzV2FybmVkQWJvdXREZXByZWNhdGVkUHVyZU9wdGlvbiA9IHRydWVcbiAgICAgIHdhcm5pbmcoXG4gICAgICAgICdUaGUgYHB1cmVgIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkLiBgY29ubmVjdGAgaXMgbm93IGFsd2F5cyBhIFwicHVyZS9tZW1vaXplZFwiIGNvbXBvbmVudCcsXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgY29uc3QgQ29udGV4dCA9IGNvbnRleHRcblxuICBjb25zdCBpbml0TWFwU3RhdGVUb1Byb3BzID0gbWFwU3RhdGVUb1Byb3BzRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMpXG4gIGNvbnN0IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3J5KG1hcERpc3BhdGNoVG9Qcm9wcylcbiAgY29uc3QgaW5pdE1lcmdlUHJvcHMgPSBtZXJnZVByb3BzRmFjdG9yeShtZXJnZVByb3BzKVxuXG4gIGNvbnN0IHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IEJvb2xlYW4obWFwU3RhdGVUb1Byb3BzKVxuXG4gIGNvbnN0IHdyYXBXaXRoQ29ubmVjdCA9IDxUUHJvcHMsPihcbiAgICBXcmFwcGVkQ29tcG9uZW50OiBDb21wb25lbnRUeXBlPFRQcm9wcz4sXG4gICkgPT4ge1xuICAgIHR5cGUgV3JhcHBlZENvbXBvbmVudFByb3BzID0gVFByb3BzICZcbiAgICAgIENvbm5lY3RQcm9wc01heWJlV2l0aG91dENvbnRleHQ8VFByb3BzPlxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnN0IGlzVmFsaWQgPSAvKiNfX1BVUkVfXyovIGlzVmFsaWRFbGVtZW50VHlwZShXcmFwcGVkQ29tcG9uZW50KVxuICAgICAgaWYgKCFpc1ZhbGlkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYFlvdSBtdXN0IHBhc3MgYSBjb21wb25lbnQgdG8gdGhlIGZ1bmN0aW9uIHJldHVybmVkIGJ5IGNvbm5lY3QuIEluc3RlYWQgcmVjZWl2ZWQgJHtzdHJpbmdpZnlDb21wb25lbnQoXG4gICAgICAgICAgICBXcmFwcGVkQ29tcG9uZW50LFxuICAgICAgICAgICl9YCxcbiAgICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IHdyYXBwZWRDb21wb25lbnROYW1lID1cbiAgICAgIFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnXG5cbiAgICBjb25zdCBkaXNwbGF5TmFtZSA9IGBDb25uZWN0KCR7d3JhcHBlZENvbXBvbmVudE5hbWV9KWBcblxuICAgIGNvbnN0IHNlbGVjdG9yRmFjdG9yeU9wdGlvbnM6IFNlbGVjdG9yRmFjdG9yeU9wdGlvbnM8XG4gICAgICBhbnksXG4gICAgICBhbnksXG4gICAgICBhbnksXG4gICAgICBhbnksXG4gICAgICBTdGF0ZVxuICAgID4gPSB7XG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBkaXNwbGF5TmFtZSxcbiAgICAgIHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudCxcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHMsXG4gICAgICBhcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsLFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIENvbm5lY3RGdW5jdGlvbjxUT3duUHJvcHM+KFxuICAgICAgcHJvcHM6IEludGVybmFsQ29ubmVjdFByb3BzICYgVE93blByb3BzLFxuICAgICkge1xuICAgICAgY29uc3QgW3Byb3BzQ29udGV4dCwgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiwgd3JhcHBlclByb3BzXSA9XG4gICAgICAgIFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgICAgICAgIC8vIERpc3Rpbmd1aXNoIGJldHdlZW4gYWN0dWFsIFwiZGF0YVwiIHByb3BzIHRoYXQgd2VyZSBwYXNzZWQgdG8gdGhlIHdyYXBwZXIgY29tcG9uZW50LFxuICAgICAgICAgIC8vIGFuZCB2YWx1ZXMgbmVlZGVkIHRvIGNvbnRyb2wgYmVoYXZpb3IgKGZvcndhcmRlZCByZWZzLCBhbHRlcm5hdGUgY29udGV4dCBpbnN0YW5jZXMpLlxuICAgICAgICAgIC8vIFRvIG1haW50YWluIHRoZSB3cmFwcGVyUHJvcHMgb2JqZWN0IHJlZmVyZW5jZSwgbWVtb2l6ZSB0aGlzIGRlc3RydWN0dXJpbmcuXG4gICAgICAgICAgY29uc3QgeyByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmLCAuLi53cmFwcGVyUHJvcHMgfSA9IHByb3BzXG4gICAgICAgICAgcmV0dXJuIFtwcm9wcy5jb250ZXh0LCByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmLCB3cmFwcGVyUHJvcHNdXG4gICAgICAgIH0sIFtwcm9wc10pXG5cbiAgICAgIGNvbnN0IENvbnRleHRUb1VzZTogUmVhY3RSZWR1eENvbnRleHRJbnN0YW5jZSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgICAgICAvLyBVc2VycyBtYXkgb3B0aW9uYWxseSBwYXNzIGluIGEgY3VzdG9tIGNvbnRleHQgaW5zdGFuY2UgdG8gdXNlIGluc3RlYWQgb2Ygb3VyIFJlYWN0UmVkdXhDb250ZXh0LlxuICAgICAgICAvLyBNZW1vaXplIHRoZSBjaGVjayB0aGF0IGRldGVybWluZXMgd2hpY2ggY29udGV4dCBpbnN0YW5jZSB3ZSBzaG91bGQgdXNlLlxuICAgICAgICBsZXQgUmVzdWx0Q29udGV4dCA9IENvbnRleHRcbiAgICAgICAgaWYgKHByb3BzQ29udGV4dD8uQ29uc3VtZXIpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgY29uc3QgaXNWYWxpZCA9IC8qI19fUFVSRV9fKi8gaXNDb250ZXh0Q29uc3VtZXIoXG4gICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgPHByb3BzQ29udGV4dC5Db25zdW1lciAvPixcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgJ1lvdSBtdXN0IHBhc3MgYSB2YWxpZCBSZWFjdCBjb250ZXh0IGNvbnN1bWVyIGFzIGBwcm9wcy5jb250ZXh0YCcsXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFJlc3VsdENvbnRleHQgPSBwcm9wc0NvbnRleHRcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFJlc3VsdENvbnRleHRcbiAgICAgIH0sIFtwcm9wc0NvbnRleHQsIENvbnRleHRdKVxuXG4gICAgICAvLyBSZXRyaWV2ZSB0aGUgc3RvcmUgYW5kIGFuY2VzdG9yIHN1YnNjcmlwdGlvbiB2aWEgY29udGV4dCwgaWYgYXZhaWxhYmxlXG4gICAgICBjb25zdCBjb250ZXh0VmFsdWUgPSBSZWFjdC51c2VDb250ZXh0KENvbnRleHRUb1VzZSlcblxuICAgICAgLy8gVGhlIHN0b3JlIF9tdXN0XyBleGlzdCBhcyBlaXRoZXIgYSBwcm9wIG9yIGluIGNvbnRleHQuXG4gICAgICAvLyBXZSdsbCBjaGVjayB0byBzZWUgaWYgaXQgX2xvb2tzXyBsaWtlIGEgUmVkdXggc3RvcmUgZmlyc3QuXG4gICAgICAvLyBUaGlzIGFsbG93cyB1cyB0byBwYXNzIHRocm91Z2ggYSBgc3RvcmVgIHByb3AgdGhhdCBpcyBqdXN0IGEgcGxhaW4gdmFsdWUuXG4gICAgICBjb25zdCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPVxuICAgICAgICBCb29sZWFuKHByb3BzLnN0b3JlKSAmJlxuICAgICAgICBCb29sZWFuKHByb3BzLnN0b3JlIS5nZXRTdGF0ZSkgJiZcbiAgICAgICAgQm9vbGVhbihwcm9wcy5zdG9yZSEuZGlzcGF0Y2gpXG4gICAgICBjb25zdCBkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCA9XG4gICAgICAgIEJvb2xlYW4oY29udGV4dFZhbHVlKSAmJiBCb29sZWFuKGNvbnRleHRWYWx1ZSEuc3RvcmUpXG5cbiAgICAgIGlmIChcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICAhZGlkU3RvcmVDb21lRnJvbVByb3BzICYmXG4gICAgICAgICFkaWRTdG9yZUNvbWVGcm9tQ29udGV4dFxuICAgICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgQ291bGQgbm90IGZpbmQgXCJzdG9yZVwiIGluIHRoZSBjb250ZXh0IG9mIGAgK1xuICAgICAgICAgICAgYFwiJHtkaXNwbGF5TmFtZX1cIi4gRWl0aGVyIHdyYXAgdGhlIHJvb3QgY29tcG9uZW50IGluIGEgPFByb3ZpZGVyPiwgYCArXG4gICAgICAgICAgICBgb3IgcGFzcyBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHByb3ZpZGVyIHRvIDxQcm92aWRlcj4gYW5kIHRoZSBjb3JyZXNwb25kaW5nIGAgK1xuICAgICAgICAgICAgYFJlYWN0IGNvbnRleHQgY29uc3VtZXIgdG8gJHtkaXNwbGF5TmFtZX0gaW4gY29ubmVjdCBvcHRpb25zLmAsXG4gICAgICAgIClcbiAgICAgIH1cblxuICAgICAgLy8gQmFzZWQgb24gdGhlIHByZXZpb3VzIGNoZWNrLCBvbmUgb2YgdGhlc2UgbXVzdCBiZSB0cnVlXG4gICAgICBjb25zdCBzdG9yZTogU3RvcmUgPSBkaWRTdG9yZUNvbWVGcm9tUHJvcHNcbiAgICAgICAgPyBwcm9wcy5zdG9yZSFcbiAgICAgICAgOiBjb250ZXh0VmFsdWUhLnN0b3JlXG5cbiAgICAgIGNvbnN0IGdldFNlcnZlclN0YXRlID0gZGlkU3RvcmVDb21lRnJvbUNvbnRleHRcbiAgICAgICAgPyBjb250ZXh0VmFsdWUhLmdldFNlcnZlclN0YXRlXG4gICAgICAgIDogc3RvcmUuZ2V0U3RhdGVcblxuICAgICAgY29uc3QgY2hpbGRQcm9wc1NlbGVjdG9yID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgICAgIC8vIFRoZSBjaGlsZCBwcm9wcyBzZWxlY3RvciBuZWVkcyB0aGUgc3RvcmUgcmVmZXJlbmNlIGFzIGFuIGlucHV0LlxuICAgICAgICAvLyBSZS1jcmVhdGUgdGhpcyBzZWxlY3RvciB3aGVuZXZlciB0aGUgc3RvcmUgY2hhbmdlcy5cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRTZWxlY3RvckZhY3Rvcnkoc3RvcmUuZGlzcGF0Y2gsIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMpXG4gICAgICB9LCBbc3RvcmVdKVxuXG4gICAgICBjb25zdCBbc3Vic2NyaXB0aW9uLCBub3RpZnlOZXN0ZWRTdWJzXSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuIE5PX1NVQlNDUklQVElPTl9BUlJBWVxuXG4gICAgICAgIC8vIFRoaXMgU3Vic2NyaXB0aW9uJ3Mgc291cmNlIHNob3VsZCBtYXRjaCB3aGVyZSBzdG9yZSBjYW1lIGZyb206IHByb3BzIHZzLiBjb250ZXh0LiBBIGNvbXBvbmVudFxuICAgICAgICAvLyBjb25uZWN0ZWQgdG8gdGhlIHN0b3JlIHZpYSBwcm9wcyBzaG91bGRuJ3QgdXNlIHN1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQsIG9yIHZpY2UgdmVyc2EuXG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGNyZWF0ZVN1YnNjcmlwdGlvbihcbiAgICAgICAgICBzdG9yZSxcbiAgICAgICAgICBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPyB1bmRlZmluZWQgOiBjb250ZXh0VmFsdWUhLnN1YnNjcmlwdGlvbixcbiAgICAgICAgKVxuXG4gICAgICAgIC8vIGBub3RpZnlOZXN0ZWRTdWJzYCBpcyBkdXBsaWNhdGVkIHRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZCBpblxuICAgICAgICAvLyB0aGUgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcCwgd2hlcmUgYHN1YnNjcmlwdGlvbmAgd2lsbCB0aGVuIGJlIG51bGwuIFRoaXMgY2FuXG4gICAgICAgIC8vIHByb2JhYmx5IGJlIGF2b2lkZWQgaWYgU3Vic2NyaXB0aW9uJ3MgbGlzdGVuZXJzIGxvZ2ljIGlzIGNoYW5nZWQgdG8gbm90IGNhbGwgbGlzdGVuZXJzXG4gICAgICAgIC8vIHRoYXQgaGF2ZSBiZWVuIHVuc3Vic2NyaWJlZCBpbiB0aGUgIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG4gICAgICAgIGNvbnN0IG5vdGlmeU5lc3RlZFN1YnMgPVxuICAgICAgICAgIHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzLmJpbmQoc3Vic2NyaXB0aW9uKVxuXG4gICAgICAgIHJldHVybiBbc3Vic2NyaXB0aW9uLCBub3RpZnlOZXN0ZWRTdWJzXVxuICAgICAgfSwgW3N0b3JlLCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMsIGNvbnRleHRWYWx1ZV0pXG5cbiAgICAgIC8vIERldGVybWluZSB3aGF0IHtzdG9yZSwgc3Vic2NyaXB0aW9ufSB2YWx1ZSBzaG91bGQgYmUgcHV0IGludG8gbmVzdGVkIGNvbnRleHQsIGlmIG5lY2Vzc2FyeSxcbiAgICAgIC8vIGFuZCBtZW1vaXplIHRoYXQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgY29udGV4dCB1cGRhdGVzLlxuICAgICAgY29uc3Qgb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBpZiAoZGlkU3RvcmVDb21lRnJvbVByb3BzKSB7XG4gICAgICAgICAgLy8gVGhpcyBjb21wb25lbnQgaXMgZGlyZWN0bHkgc3Vic2NyaWJlZCB0byBhIHN0b3JlIGZyb20gcHJvcHMuXG4gICAgICAgICAgLy8gV2UgZG9uJ3Qgd2FudCBkZXNjZW5kYW50cyByZWFkaW5nIGZyb20gdGhpcyBzdG9yZSAtIHBhc3MgZG93biB3aGF0ZXZlclxuICAgICAgICAgIC8vIHRoZSBleGlzdGluZyBjb250ZXh0IHZhbHVlIGlzIGZyb20gdGhlIG5lYXJlc3QgY29ubmVjdGVkIGFuY2VzdG9yLlxuICAgICAgICAgIHJldHVybiBjb250ZXh0VmFsdWUhXG4gICAgICAgIH1cblxuICAgICAgICAvLyBPdGhlcndpc2UsIHB1dCB0aGlzIGNvbXBvbmVudCdzIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBpbnRvIGNvbnRleHQsIHNvIHRoYXRcbiAgICAgICAgLy8gY29ubmVjdGVkIGRlc2NlbmRhbnRzIHdvbid0IHVwZGF0ZSB1bnRpbCBhZnRlciB0aGlzIGNvbXBvbmVudCBpcyBkb25lXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uY29udGV4dFZhbHVlLFxuICAgICAgICAgIHN1YnNjcmlwdGlvbixcbiAgICAgICAgfSBhcyBSZWFjdFJlZHV4Q29udGV4dFZhbHVlXG4gICAgICB9LCBbZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWUsIHN1YnNjcmlwdGlvbl0pXG5cbiAgICAgIC8vIFNldCB1cCByZWZzIHRvIGNvb3JkaW5hdGUgdmFsdWVzIGJldHdlZW4gdGhlIHN1YnNjcmlwdGlvbiBlZmZlY3QgYW5kIHRoZSByZW5kZXIgbG9naWNcbiAgICAgIGNvbnN0IGxhc3RDaGlsZFByb3BzID0gUmVhY3QudXNlUmVmPHVua25vd24+KClcbiAgICAgIGNvbnN0IGxhc3RXcmFwcGVyUHJvcHMgPSBSZWFjdC51c2VSZWYod3JhcHBlclByb3BzKVxuICAgICAgY29uc3QgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSA9IFJlYWN0LnVzZVJlZjx1bmtub3duPigpXG4gICAgICBjb25zdCByZW5kZXJJc1NjaGVkdWxlZCA9IFJlYWN0LnVzZVJlZihmYWxzZSlcbiAgICAgIGNvbnN0IGlzTW91bnRlZCA9IFJlYWN0LnVzZVJlZihmYWxzZSlcblxuICAgICAgY29uc3QgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvciA9IFJlYWN0LnVzZVJlZjxFcnJvcj4oKVxuXG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPSB0cnVlXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPSBmYWxzZVxuICAgICAgICB9XG4gICAgICB9LCBbXSlcblxuICAgICAgY29uc3QgYWN0dWFsQ2hpbGRQcm9wc1NlbGVjdG9yID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNlbGVjdG9yID0gKCkgPT4ge1xuICAgICAgICAgIC8vIFRyaWNreSBsb2dpYyBoZXJlOlxuICAgICAgICAgIC8vIC0gVGhpcyByZW5kZXIgbWF5IGhhdmUgYmVlbiB0cmlnZ2VyZWQgYnkgYSBSZWR1eCBzdG9yZSB1cGRhdGUgdGhhdCBwcm9kdWNlZCBuZXcgY2hpbGQgcHJvcHNcbiAgICAgICAgICAvLyAtIEhvd2V2ZXIsIHdlIG1heSBoYXZlIGdvdHRlbiBuZXcgd3JhcHBlciBwcm9wcyBhZnRlciB0aGF0XG4gICAgICAgICAgLy8gSWYgd2UgaGF2ZSBuZXcgY2hpbGQgcHJvcHMsIGFuZCB0aGUgc2FtZSB3cmFwcGVyIHByb3BzLCB3ZSBrbm93IHdlIHNob3VsZCB1c2UgdGhlIG5ldyBjaGlsZCBwcm9wcyBhcy1pcy5cbiAgICAgICAgICAvLyBCdXQsIGlmIHdlIGhhdmUgbmV3IHdyYXBwZXIgcHJvcHMsIHRob3NlIG1pZ2h0IGNoYW5nZSB0aGUgY2hpbGQgcHJvcHMsIHNvIHdlIGhhdmUgdG8gcmVjYWxjdWxhdGUgdGhpbmdzLlxuICAgICAgICAgIC8vIFNvLCB3ZSdsbCB1c2UgdGhlIGNoaWxkIHByb3BzIGZyb20gc3RvcmUgdXBkYXRlIG9ubHkgaWYgdGhlIHdyYXBwZXIgcHJvcHMgYXJlIHRoZSBzYW1lIGFzIGxhc3QgdGltZS5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgJiZcbiAgICAgICAgICAgIHdyYXBwZXJQcm9wcyA9PT0gbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50XG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVE9ETyBXZSdyZSByZWFkaW5nIHRoZSBzdG9yZSBkaXJlY3RseSBpbiByZW5kZXIoKSBoZXJlLiBCYWQgaWRlYT9cbiAgICAgICAgICAvLyBUaGlzIHdpbGwgbGlrZWx5IGNhdXNlIEJhZCBUaGluZ3MgKFRNKSB0byBoYXBwZW4gaW4gQ29uY3VycmVudCBNb2RlLlxuICAgICAgICAgIC8vIE5vdGUgdGhhdCB3ZSBkbyB0aGlzIGJlY2F1c2Ugb24gcmVuZGVycyBfbm90XyBjYXVzZWQgYnkgc3RvcmUgdXBkYXRlcywgd2UgbmVlZCB0aGUgbGF0ZXN0IHN0b3JlIHN0YXRlXG4gICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHdoYXQgdGhlIGNoaWxkIHByb3BzIHNob3VsZCBiZS5cbiAgICAgICAgICByZXR1cm4gY2hpbGRQcm9wc1NlbGVjdG9yKHN0b3JlLmdldFN0YXRlKCksIHdyYXBwZXJQcm9wcylcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VsZWN0b3JcbiAgICAgIH0sIFtzdG9yZSwgd3JhcHBlclByb3BzXSlcblxuICAgICAgLy8gV2UgbmVlZCB0aGlzIHRvIGV4ZWN1dGUgc3luY2hyb25vdXNseSBldmVyeSB0aW1lIHdlIHJlLXJlbmRlci4gSG93ZXZlciwgUmVhY3Qgd2FybnNcbiAgICAgIC8vIGFib3V0IHVzZUxheW91dEVmZmVjdCBpbiBTU1IsIHNvIHdlIHRyeSB0byBkZXRlY3QgZW52aXJvbm1lbnQgYW5kIGZhbGwgYmFjayB0b1xuICAgICAgLy8ganVzdCB1c2VFZmZlY3QgaW5zdGVhZCB0byBhdm9pZCB0aGUgd2FybmluZywgc2luY2UgbmVpdGhlciB3aWxsIHJ1biBhbnl3YXkuXG5cbiAgICAgIGNvbnN0IHN1YnNjcmliZUZvclJlYWN0ID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN1YnNjcmliZSA9IChyZWFjdExpc3RlbmVyOiAoKSA9PiB2b2lkKSA9PiB7XG4gICAgICAgICAgaWYgKCFzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7fVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzdWJzY3JpYmVVcGRhdGVzKFxuICAgICAgICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgICAgICAgc3RvcmUsXG4gICAgICAgICAgICBzdWJzY3JpcHRpb24sXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjaGlsZFByb3BzU2VsZWN0b3IsXG4gICAgICAgICAgICBsYXN0V3JhcHBlclByb3BzLFxuICAgICAgICAgICAgbGFzdENoaWxkUHJvcHMsXG4gICAgICAgICAgICByZW5kZXJJc1NjaGVkdWxlZCxcbiAgICAgICAgICAgIGlzTW91bnRlZCxcbiAgICAgICAgICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsXG4gICAgICAgICAgICBub3RpZnlOZXN0ZWRTdWJzLFxuICAgICAgICAgICAgcmVhY3RMaXN0ZW5lcixcbiAgICAgICAgICApXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3Vic2NyaWJlXG4gICAgICB9LCBbc3Vic2NyaXB0aW9uXSlcblxuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzKGNhcHR1cmVXcmFwcGVyUHJvcHMsIFtcbiAgICAgICAgbGFzdFdyYXBwZXJQcm9wcyxcbiAgICAgICAgbGFzdENoaWxkUHJvcHMsXG4gICAgICAgIHJlbmRlcklzU2NoZWR1bGVkLFxuICAgICAgICB3cmFwcGVyUHJvcHMsXG4gICAgICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsXG4gICAgICAgIG5vdGlmeU5lc3RlZFN1YnMsXG4gICAgICBdKVxuXG4gICAgICBsZXQgYWN0dWFsQ2hpbGRQcm9wczogUmVjb3JkPHN0cmluZywgdW5rbm93bj5cblxuICAgICAgdHJ5IHtcbiAgICAgICAgYWN0dWFsQ2hpbGRQcm9wcyA9IHVzZVN5bmNFeHRlcm5hbFN0b3JlKFxuICAgICAgICAgIC8vIFRPRE8gV2UncmUgcGFzc2luZyB0aHJvdWdoIGEgYmlnIHdyYXBwZXIgdGhhdCBkb2VzIGEgYnVuY2ggb2YgZXh0cmEgc2lkZSBlZmZlY3RzIGJlc2lkZXMgc3Vic2NyaWJpbmdcbiAgICAgICAgICBzdWJzY3JpYmVGb3JSZWFjdCxcbiAgICAgICAgICAvLyBUT0RPIFRoaXMgaXMgaW5jcmVkaWJseSBoYWNreS4gV2UndmUgYWxyZWFkeSBwcm9jZXNzZWQgdGhlIHN0b3JlIHVwZGF0ZSBhbmQgY2FsY3VsYXRlZCBuZXcgY2hpbGQgcHJvcHMsXG4gICAgICAgICAgLy8gVE9ETyBhbmQgd2UncmUganVzdCBwYXNzaW5nIHRoYXQgdGhyb3VnaCBzbyBpdCB0cmlnZ2VycyBhIHJlLXJlbmRlciBmb3IgdXMgcmF0aGVyIHRoYW4gcmVseWluZyBvbiBgdVNFU2AuXG4gICAgICAgICAgYWN0dWFsQ2hpbGRQcm9wc1NlbGVjdG9yLFxuICAgICAgICAgIGdldFNlcnZlclN0YXRlXG4gICAgICAgICAgICA/ICgpID0+IGNoaWxkUHJvcHNTZWxlY3RvcihnZXRTZXJ2ZXJTdGF0ZSgpLCB3cmFwcGVyUHJvcHMpXG4gICAgICAgICAgICA6IGFjdHVhbENoaWxkUHJvcHNTZWxlY3RvcixcbiAgICAgICAgKVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0cmEtc2VtaVxuICAgICAgICAgIDsoZXJyIGFzIEVycm9yKS5tZXNzYWdlICs9XG4gICAgICAgICAgICBgXFxuVGhlIGVycm9yIG1heSBiZSBjb3JyZWxhdGVkIHdpdGggdGhpcyBwcmV2aW91cyBlcnJvcjpcXG4ke2xhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudC5zdGFja31cXG5cXG5gXG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBlcnJcbiAgICAgIH1cblxuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IHVuZGVmaW5lZFxuICAgICAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSB1bmRlZmluZWRcbiAgICAgICAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IGFjdHVhbENoaWxkUHJvcHNcbiAgICAgIH0pXG5cbiAgICAgIC8vIE5vdyB0aGF0IGFsbCB0aGF0J3MgZG9uZSwgd2UgY2FuIGZpbmFsbHkgdHJ5IHRvIGFjdHVhbGx5IHJlbmRlciB0aGUgY2hpbGQgY29tcG9uZW50LlxuICAgICAgLy8gV2UgbWVtb2l6ZSB0aGUgZWxlbWVudHMgZm9yIHRoZSByZW5kZXJlZCBjaGlsZCBjb21wb25lbnQgYXMgYW4gb3B0aW1pemF0aW9uLlxuICAgICAgY29uc3QgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50ID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgIDxXcmFwcGVkQ29tcG9uZW50XG4gICAgICAgICAgICB7Li4uYWN0dWFsQ2hpbGRQcm9wc31cbiAgICAgICAgICAgIHJlZj17cmVhY3RSZWR1eEZvcndhcmRlZFJlZn1cbiAgICAgICAgICAvPlxuICAgICAgICApXG4gICAgICB9LCBbcmVhY3RSZWR1eEZvcndhcmRlZFJlZiwgV3JhcHBlZENvbXBvbmVudCwgYWN0dWFsQ2hpbGRQcm9wc10pXG5cbiAgICAgIC8vIElmIFJlYWN0IHNlZXMgdGhlIGV4YWN0IHNhbWUgZWxlbWVudCByZWZlcmVuY2UgYXMgbGFzdCB0aW1lLCBpdCBiYWlscyBvdXQgb2YgcmUtcmVuZGVyaW5nXG4gICAgICAvLyB0aGF0IGNoaWxkLCBzYW1lIGFzIGlmIGl0IHdhcyB3cmFwcGVkIGluIFJlYWN0Lm1lbW8oKSBvciByZXR1cm5lZCBmYWxzZSBmcm9tIHNob3VsZENvbXBvbmVudFVwZGF0ZS5cbiAgICAgIGNvbnN0IHJlbmRlcmVkQ2hpbGQgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICAgICAgaWYgKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykge1xuICAgICAgICAgIC8vIElmIHRoaXMgY29tcG9uZW50IGlzIHN1YnNjcmliZWQgdG8gc3RvcmUgdXBkYXRlcywgd2UgbmVlZCB0byBwYXNzIGl0cyBvd25cbiAgICAgICAgICAvLyBzdWJzY3JpcHRpb24gaW5zdGFuY2UgZG93biB0byBvdXIgZGVzY2VuZGFudHMuIFRoYXQgbWVhbnMgcmVuZGVyaW5nIHRoZSBzYW1lXG4gICAgICAgICAgLy8gQ29udGV4dCBpbnN0YW5jZSwgYW5kIHB1dHRpbmcgYSBkaWZmZXJlbnQgdmFsdWUgaW50byB0aGUgY29udGV4dC5cbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPENvbnRleHRUb1VzZS5Qcm92aWRlciB2YWx1ZT17b3ZlcnJpZGRlbkNvbnRleHRWYWx1ZX0+XG4gICAgICAgICAgICAgIHtyZW5kZXJlZFdyYXBwZWRDb21wb25lbnR9XG4gICAgICAgICAgICA8L0NvbnRleHRUb1VzZS5Qcm92aWRlcj5cbiAgICAgICAgICApXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50XG4gICAgICB9LCBbQ29udGV4dFRvVXNlLCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQsIG92ZXJyaWRkZW5Db250ZXh0VmFsdWVdKVxuXG4gICAgICByZXR1cm4gcmVuZGVyZWRDaGlsZFxuICAgIH1cblxuICAgIGNvbnN0IF9Db25uZWN0ID0gUmVhY3QubWVtbyhDb25uZWN0RnVuY3Rpb24pXG5cbiAgICB0eXBlIENvbm5lY3RlZFdyYXBwZXJDb21wb25lbnQgPSB0eXBlb2YgX0Nvbm5lY3QgJiB7XG4gICAgICBXcmFwcGVkQ29tcG9uZW50OiB0eXBlb2YgV3JhcHBlZENvbXBvbmVudFxuICAgIH1cblxuICAgIC8vIEFkZCBhIGhhY2t5IGNhc3QgdG8gZ2V0IHRoZSByaWdodCBvdXRwdXQgdHlwZVxuICAgIGNvbnN0IENvbm5lY3QgPSBfQ29ubmVjdCBhcyB1bmtub3duIGFzIENvbm5lY3RlZENvbXBvbmVudDxcbiAgICAgIHR5cGVvZiBXcmFwcGVkQ29tcG9uZW50LFxuICAgICAgV3JhcHBlZENvbXBvbmVudFByb3BzXG4gICAgPlxuICAgIENvbm5lY3QuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnRcbiAgICBDb25uZWN0LmRpc3BsYXlOYW1lID0gQ29ubmVjdEZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWVcblxuICAgIGlmIChmb3J3YXJkUmVmKSB7XG4gICAgICBjb25zdCBfZm9yd2FyZGVkID0gUmVhY3QuZm9yd2FyZFJlZihcbiAgICAgICAgZnVuY3Rpb24gZm9yd2FyZENvbm5lY3RSZWYocHJvcHMsIHJlZikge1xuICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICByZXR1cm4gPENvbm5lY3Qgey4uLnByb3BzfSByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmPXtyZWZ9IC8+XG4gICAgICAgIH0sXG4gICAgICApXG5cbiAgICAgIGNvbnN0IGZvcndhcmRlZCA9IF9mb3J3YXJkZWQgYXMgQ29ubmVjdGVkV3JhcHBlckNvbXBvbmVudFxuICAgICAgZm9yd2FyZGVkLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWVcbiAgICAgIGZvcndhcmRlZC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudFxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi8gaG9pc3RTdGF0aWNzKGZvcndhcmRlZCwgV3JhcHBlZENvbXBvbmVudClcbiAgICB9XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qLyBob2lzdFN0YXRpY3MoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudClcbiAgfVxuXG4gIHJldHVybiB3cmFwV2l0aENvbm5lY3Rcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdCBhcyBDb25uZWN0XG4iLCJpbXBvcnQgdHlwZSB7IENvbnRleHQsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgUmVhY3QgfSBmcm9tICcuLi91dGlscy9yZWFjdCdcbmltcG9ydCB0eXBlIHsgQWN0aW9uLCBTdG9yZSwgVW5rbm93bkFjdGlvbiB9IGZyb20gJ3JlZHV4J1xuaW1wb3J0IHR5cGUgeyBEZXZNb2RlQ2hlY2tGcmVxdWVuY3kgfSBmcm9tICcuLi9ob29rcy91c2VTZWxlY3RvcidcbmltcG9ydCB7IGNyZWF0ZVN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbidcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0J1xuaW1wb3J0IHR5cGUgeyBSZWFjdFJlZHV4Q29udGV4dFZhbHVlIH0gZnJvbSAnLi9Db250ZXh0J1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnXG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvdmlkZXJQcm9wczxcbiAgQSBleHRlbmRzIEFjdGlvbjxzdHJpbmc+ID0gVW5rbm93bkFjdGlvbixcbiAgUyA9IHVua25vd24sXG4+IHtcbiAgLyoqXG4gICAqIFRoZSBzaW5nbGUgUmVkdXggc3RvcmUgaW4geW91ciBhcHBsaWNhdGlvbi5cbiAgICovXG4gIHN0b3JlOiBTdG9yZTxTLCBBPlxuXG4gIC8qKlxuICAgKiBBbiBvcHRpb25hbCBzZXJ2ZXIgc3RhdGUgc25hcHNob3QuIFdpbGwgYmUgdXNlZCBkdXJpbmcgaW5pdGlhbCBoeWRyYXRpb24gcmVuZGVyIGlmIGF2YWlsYWJsZSwgdG8gZW5zdXJlIHRoYXQgdGhlIFVJIG91dHB1dCBpcyBjb25zaXN0ZW50IHdpdGggdGhlIEhUTUwgZ2VuZXJhdGVkIG9uIHRoZSBzZXJ2ZXIuXG4gICAqL1xuICBzZXJ2ZXJTdGF0ZT86IFNcblxuICAvKipcbiAgICogT3B0aW9uYWwgY29udGV4dCB0byBiZSB1c2VkIGludGVybmFsbHkgaW4gcmVhY3QtcmVkdXguIFVzZSBSZWFjdC5jcmVhdGVDb250ZXh0KCkgdG8gY3JlYXRlIGEgY29udGV4dCB0byBiZSB1c2VkLlxuICAgKiBJZiB0aGlzIGlzIHVzZWQsIHlvdSdsbCBuZWVkIHRvIGN1c3RvbWl6ZSBgY29ubmVjdGAgYnkgc3VwcGx5aW5nIHRoZSBzYW1lIGNvbnRleHQgcHJvdmlkZWQgdG8gdGhlIFByb3ZpZGVyLlxuICAgKiBTZXQgdGhlIGluaXRpYWwgdmFsdWUgdG8gbnVsbCwgYW5kIHRoZSBob29rcyB3aWxsIGVycm9yXG4gICAqIGlmIHRoaXMgaXMgbm90IG92ZXJ3cml0dGVuIGJ5IFByb3ZpZGVyLlxuICAgKi9cbiAgY29udGV4dD86IENvbnRleHQ8UmVhY3RSZWR1eENvbnRleHRWYWx1ZTxTLCBBPiB8IG51bGw+XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIGZyZXF1ZW5jeSBvZiBzdGFiaWxpdHkgY2hlY2tzIGZvciBhbGwgc2VsZWN0b3JzLlxuICAgKiBUaGlzIHNldHRpbmcgb3ZlcnJpZGVzIHRoZSBnbG9iYWwgY29uZmlndXJhdGlvbiBmb3JcbiAgICogdGhlIGB1c2VTZWxlY3RvcmAgc3RhYmlsaXR5IGNoZWNrLCBhbGxvd2luZyB5b3UgdG8gc3BlY2lmeSBob3cgb2Z0ZW5cbiAgICogdGhlc2UgY2hlY2tzIHNob3VsZCBvY2N1ciBpbiBkZXZlbG9wbWVudCBtb2RlLlxuICAgKlxuICAgKiBAc2luY2UgOC4xLjBcbiAgICovXG4gIHN0YWJpbGl0eUNoZWNrPzogRGV2TW9kZUNoZWNrRnJlcXVlbmN5XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIGZyZXF1ZW5jeSBvZiBpZGVudGl0eSBmdW5jdGlvbiBjaGVja3MgZm9yIGFsbCBzZWxlY3RvcnMuXG4gICAqIFRoaXMgc2V0dGluZyBvdmVycmlkZXMgdGhlIGdsb2JhbCBjb25maWd1cmF0aW9uIGZvclxuICAgKiB0aGUgYHVzZVNlbGVjdG9yYCBpZGVudGl0eSBmdW5jdGlvbiBjaGVjaywgYWxsb3dpbmcgeW91IHRvIHNwZWNpZnkgaG93IG9mdGVuXG4gICAqIHRoZXNlIGNoZWNrcyBzaG91bGQgb2NjdXIgaW4gZGV2ZWxvcG1lbnQgbW9kZS5cbiAgICpcbiAgICogKipOb3RlKio6IFByZXZpb3VzbHkgcmVmZXJyZWQgdG8gYXMgYG5vb3BDaGVja2AuXG4gICAqXG4gICAqIEBzaW5jZSA5LjAuMFxuICAgKi9cbiAgaWRlbnRpdHlGdW5jdGlvbkNoZWNrPzogRGV2TW9kZUNoZWNrRnJlcXVlbmN5XG5cbiAgY2hpbGRyZW46IFJlYWN0Tm9kZVxufVxuXG5mdW5jdGlvbiBQcm92aWRlcjxBIGV4dGVuZHMgQWN0aW9uPHN0cmluZz4gPSBVbmtub3duQWN0aW9uLCBTID0gdW5rbm93bj4oe1xuICBzdG9yZSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHNlcnZlclN0YXRlLFxuICBzdGFiaWxpdHlDaGVjayA9ICdvbmNlJyxcbiAgaWRlbnRpdHlGdW5jdGlvbkNoZWNrID0gJ29uY2UnLFxufTogUHJvdmlkZXJQcm9wczxBLCBTPikge1xuICBjb25zdCBjb250ZXh0VmFsdWUgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBjcmVhdGVTdWJzY3JpcHRpb24oc3RvcmUpXG4gICAgcmV0dXJuIHtcbiAgICAgIHN0b3JlLFxuICAgICAgc3Vic2NyaXB0aW9uLFxuICAgICAgZ2V0U2VydmVyU3RhdGU6IHNlcnZlclN0YXRlID8gKCkgPT4gc2VydmVyU3RhdGUgOiB1bmRlZmluZWQsXG4gICAgICBzdGFiaWxpdHlDaGVjayxcbiAgICAgIGlkZW50aXR5RnVuY3Rpb25DaGVjayxcbiAgICB9XG4gIH0sIFtzdG9yZSwgc2VydmVyU3RhdGUsIHN0YWJpbGl0eUNoZWNrLCBpZGVudGl0eUZ1bmN0aW9uQ2hlY2tdKVxuXG4gIGNvbnN0IHByZXZpb3VzU3RhdGUgPSBSZWFjdC51c2VNZW1vKCgpID0+IHN0b3JlLmdldFN0YXRlKCksIFtzdG9yZV0pXG5cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgeyBzdWJzY3JpcHRpb24gfSA9IGNvbnRleHRWYWx1ZVxuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnNcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKClcblxuICAgIGlmIChwcmV2aW91c1N0YXRlICE9PSBzdG9yZS5nZXRTdGF0ZSgpKSB7XG4gICAgICBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicygpXG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKVxuICAgICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSB1bmRlZmluZWRcbiAgICB9XG4gIH0sIFtjb250ZXh0VmFsdWUsIHByZXZpb3VzU3RhdGVdKVxuXG4gIGNvbnN0IENvbnRleHQgPSBjb250ZXh0IHx8IFJlYWN0UmVkdXhDb250ZXh0XG5cbiAgLy8gQHRzLWlnbm9yZSAnQW55QWN0aW9uJyBpcyBhc3NpZ25hYmxlIHRvIHRoZSBjb25zdHJhaW50IG9mIHR5cGUgJ0EnLCBidXQgJ0EnIGNvdWxkIGJlIGluc3RhbnRpYXRlZCB3aXRoIGEgZGlmZmVyZW50IHN1YnR5cGVcbiAgcmV0dXJuIDxDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtjb250ZXh0VmFsdWV9PntjaGlsZHJlbn08L0NvbnRleHQuUHJvdmlkZXI+XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb3ZpZGVyXG4iLCJpbXBvcnQgdHlwZSB7IENvbnRleHQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB0eXBlIHsgQWN0aW9uLCBTdG9yZSB9IGZyb20gJ3JlZHV4J1xuaW1wb3J0IHR5cGUgeyBSZWFjdFJlZHV4Q29udGV4dFZhbHVlIH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0J1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnXG5pbXBvcnQge1xuICBjcmVhdGVSZWR1eENvbnRleHRIb29rLFxuICB1c2VSZWR1eENvbnRleHQgYXMgdXNlRGVmYXVsdFJlZHV4Q29udGV4dCxcbn0gZnJvbSAnLi91c2VSZWR1eENvbnRleHQnXG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHR5cGUgdGhhdCBleHRyYWN0cyB0aGUgYWN0aW9uIHR5cGUgZnJvbSBhIGdpdmVuIFJlZHV4IHN0b3JlLlxuICpcbiAqIEB0ZW1wbGF0ZSBTdG9yZVR5cGUgLSBUaGUgc3BlY2lmaWMgdHlwZSBvZiB0aGUgUmVkdXggc3RvcmUuXG4gKlxuICogQHNpbmNlIDkuMS4wXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IHR5cGUgRXh0cmFjdFN0b3JlQWN0aW9uVHlwZTxTdG9yZVR5cGUgZXh0ZW5kcyBTdG9yZT4gPVxuICBTdG9yZVR5cGUgZXh0ZW5kcyBTdG9yZTxhbnksIGluZmVyIEFjdGlvblR5cGU+ID8gQWN0aW9uVHlwZSA6IG5ldmVyXG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGN1c3RvbSBob29rIHRoYXQgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBSZWR1eCBzdG9yZS5cbiAqXG4gKiBAdGVtcGxhdGUgU3RvcmVUeXBlIC0gVGhlIHNwZWNpZmljIHR5cGUgb2YgdGhlIFJlZHV4IHN0b3JlIHRoYXQgZ2V0cyByZXR1cm5lZC5cbiAqXG4gKiBAc2luY2UgOS4xLjBcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBVc2VTdG9yZTxTdG9yZVR5cGUgZXh0ZW5kcyBTdG9yZT4ge1xuICAvKipcbiAgICogUmV0dXJucyB0aGUgUmVkdXggc3RvcmUgaW5zdGFuY2UuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBSZWR1eCBzdG9yZSBpbnN0YW5jZS5cbiAgICovXG4gICgpOiBTdG9yZVR5cGVcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgUmVkdXggc3RvcmUgaW5zdGFuY2Ugd2l0aCBzcGVjaWZpYyBzdGF0ZSBhbmQgYWN0aW9uIHR5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgUmVkdXggc3RvcmUgd2l0aCB0aGUgc3BlY2lmaWVkIHN0YXRlIGFuZCBhY3Rpb24gdHlwZXMuXG4gICAqXG4gICAqIEB0ZW1wbGF0ZSBTdGF0ZVR5cGUgLSBUaGUgc3BlY2lmaWMgdHlwZSBvZiB0aGUgc3RhdGUgdXNlZCBpbiB0aGUgc3RvcmUuXG4gICAqIEB0ZW1wbGF0ZSBBY3Rpb25UeXBlIC0gVGhlIHNwZWNpZmljIHR5cGUgb2YgdGhlIGFjdGlvbnMgdXNlZCBpbiB0aGUgc3RvcmUuXG4gICAqL1xuICA8XG4gICAgU3RhdGVUeXBlIGV4dGVuZHMgUmV0dXJuVHlwZTxTdG9yZVR5cGVbJ2dldFN0YXRlJ10+ID0gUmV0dXJuVHlwZTxcbiAgICAgIFN0b3JlVHlwZVsnZ2V0U3RhdGUnXVxuICAgID4sXG4gICAgQWN0aW9uVHlwZSBleHRlbmRzIEFjdGlvbiA9IEV4dHJhY3RTdG9yZUFjdGlvblR5cGU8U3RvcmU+LFxuICA+KCk6IFN0b3JlPFN0YXRlVHlwZSwgQWN0aW9uVHlwZT5cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIFwicHJlLXR5cGVkXCIgdmVyc2lvbiBvZiB7QGxpbmtjb2RlIHVzZVN0b3JlIHVzZVN0b3JlfVxuICAgKiB3aGVyZSB0aGUgdHlwZSBvZiB0aGUgUmVkdXggYHN0b3JlYCBpcyBwcmVkZWZpbmVkLlxuICAgKlxuICAgKiBUaGlzIGFsbG93cyB5b3UgdG8gc2V0IHRoZSBgc3RvcmVgIHR5cGUgb25jZSwgZWxpbWluYXRpbmcgdGhlIG5lZWQgdG9cbiAgICogc3BlY2lmeSBpdCB3aXRoIGV2ZXJ5IHtAbGlua2NvZGUgdXNlU3RvcmUgdXNlU3RvcmV9IGNhbGwuXG4gICAqXG4gICAqIEByZXR1cm5zIEEgcHJlLXR5cGVkIGB1c2VTdG9yZWAgd2l0aCB0aGUgc3RvcmUgdHlwZSBhbHJlYWR5IGRlZmluZWQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYHRzXG4gICAqIGV4cG9ydCBjb25zdCB1c2VBcHBTdG9yZSA9IHVzZVN0b3JlLndpdGhUeXBlczxBcHBTdG9yZT4oKVxuICAgKiBgYGBcbiAgICpcbiAgICogQHRlbXBsYXRlIE92ZXJyaWRlU3RvcmVUeXBlIC0gVGhlIHNwZWNpZmljIHR5cGUgb2YgdGhlIFJlZHV4IHN0b3JlIHRoYXQgZ2V0cyByZXR1cm5lZC5cbiAgICpcbiAgICogQHNpbmNlIDkuMS4wXG4gICAqL1xuICB3aXRoVHlwZXM6IDxcbiAgICBPdmVycmlkZVN0b3JlVHlwZSBleHRlbmRzIFN0b3JlVHlwZSxcbiAgPigpID0+IFVzZVN0b3JlPE92ZXJyaWRlU3RvcmVUeXBlPlxufVxuXG4vKipcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VTdG9yZWAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZVN0b3JlYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0b3JlSG9vazxcbiAgU3RhdGVUeXBlID0gdW5rbm93bixcbiAgQWN0aW9uVHlwZSBleHRlbmRzIEFjdGlvbiA9IEFjdGlvbixcbj4oXG4gIC8vIEB0cy1pZ25vcmVcbiAgY29udGV4dD86IENvbnRleHQ8UmVhY3RSZWR1eENvbnRleHRWYWx1ZTxcbiAgICBTdGF0ZVR5cGUsXG4gICAgQWN0aW9uVHlwZVxuICA+IHwgbnVsbD4gPSBSZWFjdFJlZHV4Q29udGV4dCxcbikge1xuICBjb25zdCB1c2VSZWR1eENvbnRleHQgPVxuICAgIGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0XG4gICAgICA/IHVzZURlZmF1bHRSZWR1eENvbnRleHRcbiAgICAgIDogLy8gQHRzLWlnbm9yZVxuICAgICAgICBjcmVhdGVSZWR1eENvbnRleHRIb29rKGNvbnRleHQpXG4gIGNvbnN0IHVzZVN0b3JlID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgc3RvcmUgfSA9IHVzZVJlZHV4Q29udGV4dCgpXG4gICAgcmV0dXJuIHN0b3JlXG4gIH1cblxuICBPYmplY3QuYXNzaWduKHVzZVN0b3JlLCB7XG4gICAgd2l0aFR5cGVzOiAoKSA9PiB1c2VTdG9yZSxcbiAgfSlcblxuICByZXR1cm4gdXNlU3RvcmUgYXMgVXNlU3RvcmU8U3RvcmU8U3RhdGVUeXBlLCBBY3Rpb25UeXBlPj5cbn1cblxuLyoqXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgcmVkdXggc3RvcmVcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbiAqIGltcG9ydCB7IHVzZVN0b3JlIH0gZnJvbSAncmVhY3QtcmVkdXgnXG4gKlxuICogZXhwb3J0IGNvbnN0IEV4YW1wbGVDb21wb25lbnQgPSAoKSA9PiB7XG4gKiAgIGNvbnN0IHN0b3JlID0gdXNlU3RvcmUoKVxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cbiAqIH1cbiAqL1xuZXhwb3J0IGNvbnN0IHVzZVN0b3JlID0gLyojX19QVVJFX18qLyBjcmVhdGVTdG9yZUhvb2soKVxuIiwiaW1wb3J0IHR5cGUgeyBDb250ZXh0IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgdHlwZSB7IEFjdGlvbiwgRGlzcGF0Y2gsIFVua25vd25BY3Rpb24gfSBmcm9tICdyZWR1eCdcblxuaW1wb3J0IHR5cGUgeyBSZWFjdFJlZHV4Q29udGV4dFZhbHVlIH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0J1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnXG5pbXBvcnQgeyBjcmVhdGVTdG9yZUhvb2ssIHVzZVN0b3JlIGFzIHVzZURlZmF1bHRTdG9yZSB9IGZyb20gJy4vdXNlU3RvcmUnXG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGN1c3RvbSBob29rIHRoYXQgcHJvdmlkZXMgYSBkaXNwYXRjaCBmdW5jdGlvblxuICogZnJvbSB0aGUgUmVkdXggc3RvcmUuXG4gKlxuICogQHRlbXBsYXRlIERpc3BhdGNoVHlwZSAtIFRoZSBzcGVjaWZpYyB0eXBlIG9mIHRoZSBkaXNwYXRjaCBmdW5jdGlvbi5cbiAqXG4gKiBAc2luY2UgOS4xLjBcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBVc2VEaXNwYXRjaDxcbiAgRGlzcGF0Y2hUeXBlIGV4dGVuZHMgRGlzcGF0Y2g8VW5rbm93bkFjdGlvbj4gPSBEaXNwYXRjaDxVbmtub3duQWN0aW9uPixcbj4ge1xuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGlzcGF0Y2ggZnVuY3Rpb24gZnJvbSB0aGUgUmVkdXggc3RvcmUuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBkaXNwYXRjaCBmdW5jdGlvbiBmcm9tIHRoZSBSZWR1eCBzdG9yZS5cbiAgICpcbiAgICogQHRlbXBsYXRlIEFwcERpc3BhdGNoIC0gVGhlIHNwZWNpZmljIHR5cGUgb2YgdGhlIGRpc3BhdGNoIGZ1bmN0aW9uLlxuICAgKi9cbiAgPEFwcERpc3BhdGNoIGV4dGVuZHMgRGlzcGF0Y2hUeXBlID0gRGlzcGF0Y2hUeXBlPigpOiBBcHBEaXNwYXRjaFxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgXCJwcmUtdHlwZWRcIiB2ZXJzaW9uIG9mIHtAbGlua2NvZGUgdXNlRGlzcGF0Y2ggdXNlRGlzcGF0Y2h9XG4gICAqIHdoZXJlIHRoZSB0eXBlIG9mIHRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGlzIHByZWRlZmluZWQuXG4gICAqXG4gICAqIFRoaXMgYWxsb3dzIHlvdSB0byBzZXQgdGhlIGBkaXNwYXRjaGAgdHlwZSBvbmNlLCBlbGltaW5hdGluZyB0aGUgbmVlZCB0b1xuICAgKiBzcGVjaWZ5IGl0IHdpdGggZXZlcnkge0BsaW5rY29kZSB1c2VEaXNwYXRjaCB1c2VEaXNwYXRjaH0gY2FsbC5cbiAgICpcbiAgICogQHJldHVybnMgQSBwcmUtdHlwZWQgYHVzZURpc3BhdGNoYCB3aXRoIHRoZSBkaXNwYXRjaCB0eXBlIGFscmVhZHkgZGVmaW5lZC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHNcbiAgICogZXhwb3J0IGNvbnN0IHVzZUFwcERpc3BhdGNoID0gdXNlRGlzcGF0Y2gud2l0aFR5cGVzPEFwcERpc3BhdGNoPigpXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdGVtcGxhdGUgT3ZlcnJpZGVEaXNwYXRjaFR5cGUgLSBUaGUgc3BlY2lmaWMgdHlwZSBvZiB0aGUgZGlzcGF0Y2ggZnVuY3Rpb24uXG4gICAqXG4gICAqIEBzaW5jZSA5LjEuMFxuICAgKi9cbiAgd2l0aFR5cGVzOiA8XG4gICAgT3ZlcnJpZGVEaXNwYXRjaFR5cGUgZXh0ZW5kcyBEaXNwYXRjaFR5cGUsXG4gID4oKSA9PiBVc2VEaXNwYXRjaDxPdmVycmlkZURpc3BhdGNoVHlwZT5cbn1cblxuLyoqXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlRGlzcGF0Y2hgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhY3QuQ29udGV4dH0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VEaXNwYXRjaGAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEaXNwYXRjaEhvb2s8XG4gIFN0YXRlVHlwZSA9IHVua25vd24sXG4gIEFjdGlvblR5cGUgZXh0ZW5kcyBBY3Rpb24gPSBVbmtub3duQWN0aW9uLFxuPihcbiAgLy8gQHRzLWlnbm9yZVxuICBjb250ZXh0PzogQ29udGV4dDxSZWFjdFJlZHV4Q29udGV4dFZhbHVlPFxuICAgIFN0YXRlVHlwZSxcbiAgICBBY3Rpb25UeXBlXG4gID4gfCBudWxsPiA9IFJlYWN0UmVkdXhDb250ZXh0LFxuKSB7XG4gIGNvbnN0IHVzZVN0b3JlID1cbiAgICBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRTdG9yZSA6IGNyZWF0ZVN0b3JlSG9vayhjb250ZXh0KVxuXG4gIGNvbnN0IHVzZURpc3BhdGNoID0gKCkgPT4ge1xuICAgIGNvbnN0IHN0b3JlID0gdXNlU3RvcmUoKVxuICAgIHJldHVybiBzdG9yZS5kaXNwYXRjaFxuICB9XG5cbiAgT2JqZWN0LmFzc2lnbih1c2VEaXNwYXRjaCwge1xuICAgIHdpdGhUeXBlczogKCkgPT4gdXNlRGlzcGF0Y2gsXG4gIH0pXG5cbiAgcmV0dXJuIHVzZURpc3BhdGNoIGFzIFVzZURpc3BhdGNoPERpc3BhdGNoPEFjdGlvblR5cGU+PlxufVxuXG4vKipcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IGBkaXNwYXRjaGAgZnVuY3Rpb24uXG4gKlxuICogQHJldHVybnMge2FueXxmdW5jdGlvbn0gcmVkdXggc3RvcmUncyBgZGlzcGF0Y2hgIGZ1bmN0aW9uXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCdcbiAqIGltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnXG4gKlxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoeyB2YWx1ZSB9KSA9PiB7XG4gKiAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKVxuICogICBjb25zdCBpbmNyZWFzZUNvdW50ZXIgPSB1c2VDYWxsYmFjaygoKSA9PiBkaXNwYXRjaCh7IHR5cGU6ICdpbmNyZWFzZS1jb3VudGVyJyB9KSwgW10pXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPGRpdj5cbiAqICAgICAgIDxzcGFuPnt2YWx1ZX08L3NwYW4+XG4gKiAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2luY3JlYXNlQ291bnRlcn0+SW5jcmVhc2UgY291bnRlcjwvYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICogICApXG4gKiB9XG4gKi9cbmV4cG9ydCBjb25zdCB1c2VEaXNwYXRjaCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlRGlzcGF0Y2hIb29rKClcbiIsImltcG9ydCBjb25uZWN0IGZyb20gJy4vY29tcG9uZW50cy9jb25uZWN0J1xuZXhwb3J0IHR5cGUge1xuICBDb25uZWN0LFxuICBDb25uZWN0UHJvcHMsXG4gIENvbm5lY3RlZFByb3BzLFxufSBmcm9tICcuL2NvbXBvbmVudHMvY29ubmVjdCdcblxuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuL3V0aWxzL3NoYWxsb3dFcXVhbCdcblxuaW1wb3J0IFByb3ZpZGVyIGZyb20gJy4vY29tcG9uZW50cy9Qcm92aWRlcidcbmltcG9ydCB7IGRlZmF1bHROb29wQmF0Y2ggfSBmcm9tICcuL3V0aWxzL2JhdGNoJ1xuXG5leHBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vY29tcG9uZW50cy9Db250ZXh0J1xuZXhwb3J0IHR5cGUgeyBSZWFjdFJlZHV4Q29udGV4dFZhbHVlIH0gZnJvbSAnLi9jb21wb25lbnRzL0NvbnRleHQnXG5cbmV4cG9ydCB0eXBlIHsgUHJvdmlkZXJQcm9wcyB9IGZyb20gJy4vY29tcG9uZW50cy9Qcm92aWRlcidcblxuZXhwb3J0IHR5cGUge1xuICBNYXBEaXNwYXRjaFRvUHJvcHMsXG4gIE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcnksXG4gIE1hcERpc3BhdGNoVG9Qcm9wc0Z1bmN0aW9uLFxuICBNYXBEaXNwYXRjaFRvUHJvcHNOb25PYmplY3QsXG4gIE1hcERpc3BhdGNoVG9Qcm9wc1BhcmFtLFxuICBNYXBTdGF0ZVRvUHJvcHMsXG4gIE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcnksXG4gIE1hcFN0YXRlVG9Qcm9wc1BhcmFtLFxuICBNZXJnZVByb3BzLFxuICBTZWxlY3RvcixcbiAgU2VsZWN0b3JGYWN0b3J5LFxufSBmcm9tICcuL2Nvbm5lY3Qvc2VsZWN0b3JGYWN0b3J5J1xuXG5leHBvcnQgeyBjcmVhdGVEaXNwYXRjaEhvb2ssIHVzZURpc3BhdGNoIH0gZnJvbSAnLi9ob29rcy91c2VEaXNwYXRjaCdcbmV4cG9ydCB0eXBlIHsgVXNlRGlzcGF0Y2ggfSBmcm9tICcuL2hvb2tzL3VzZURpc3BhdGNoJ1xuXG5leHBvcnQgeyBjcmVhdGVTZWxlY3Rvckhvb2ssIHVzZVNlbGVjdG9yIH0gZnJvbSAnLi9ob29rcy91c2VTZWxlY3RvcidcbmV4cG9ydCB0eXBlIHsgVXNlU2VsZWN0b3IgfSBmcm9tICcuL2hvb2tzL3VzZVNlbGVjdG9yJ1xuXG5leHBvcnQgeyBjcmVhdGVTdG9yZUhvb2ssIHVzZVN0b3JlIH0gZnJvbSAnLi9ob29rcy91c2VTdG9yZSdcbmV4cG9ydCB0eXBlIHsgVXNlU3RvcmUgfSBmcm9tICcuL2hvb2tzL3VzZVN0b3JlJ1xuXG5leHBvcnQgdHlwZSB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4vdXRpbHMvU3Vic2NyaXB0aW9uJ1xuXG5leHBvcnQgKiBmcm9tICcuL3R5cGVzJ1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIEFzIG9mIFJlYWN0IDE4LCBiYXRjaGluZyBpcyBlbmFibGVkIGJ5IGRlZmF1bHQgZm9yIFJlYWN0RE9NIGFuZCBSZWFjdCBOYXRpdmUuXG4gKiBUaGlzIGlzIG5vdyBhIG5vLW9wIHRoYXQgaW1tZWRpYXRlbHkgcnVucyB0aGUgY2FsbGJhY2suXG4gKi9cbmNvbnN0IGJhdGNoID0gZGVmYXVsdE5vb3BCYXRjaFxuXG5leHBvcnQgeyBQcm92aWRlciwgYmF0Y2gsIGNvbm5lY3QsIHNoYWxsb3dFcXVhbCB9XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFLQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFBdUIsSUFBQUMsYUFBQSxHQUFBSCxNQUFBO0FBQ3ZCLElBQUFJLGFBQUEsR0FBQUYsT0FBQTtBQUFpRCxTQUFBRyx5QkFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxtQkFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsQ0FBQSxXQUFBQSxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxLQUFBRixDQUFBO0FBQUEsU0FBQUwsd0JBQUFLLENBQUEsRUFBQUUsQ0FBQSxTQUFBQSxDQUFBLElBQUFGLENBQUEsSUFBQUEsQ0FBQSxDQUFB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