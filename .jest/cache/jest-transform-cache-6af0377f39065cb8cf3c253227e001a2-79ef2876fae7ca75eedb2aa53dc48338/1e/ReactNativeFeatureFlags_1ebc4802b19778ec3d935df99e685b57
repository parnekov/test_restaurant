763a963d02243a818226256514ca34ba
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useModernRuntimeScheduler = exports.shouldUseSetNativePropsInFabric = exports.shouldUseRemoveClippedSubviewsAsDefaultOnIOS = exports.shouldUseAnimatedObjectForTransform = exports.override = exports.jsOnlyTestFlag = exports.isLayoutAnimationEnabled = exports.inspectorEnableModernCDPRegistry = exports.inspectorEnableCxxInspectorPackagerConnection = exports.enableSpannableBuildingUnification = exports.enableMicrotasks = exports.enableFixForClippedSubviewsCrash = exports.enableCustomDrawOrderFabric = exports.enableBackgroundExecutor = exports.enableAccessToHostTreeInFabric = exports.commonTestFlag = exports.batchRenderingUpdatesInEventLoop = exports.animatedShouldUseSingleOp = exports.animatedShouldDebounceQueueFlush = void 0;
var _ReactNativeFeatureFlagsBase = require("./ReactNativeFeatureFlagsBase");
var jsOnlyTestFlag = exports.jsOnlyTestFlag = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('jsOnlyTestFlag', false);
var isLayoutAnimationEnabled = exports.isLayoutAnimationEnabled = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('isLayoutAnimationEnabled', true);
var animatedShouldDebounceQueueFlush = exports.animatedShouldDebounceQueueFlush = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldDebounceQueueFlush', false);
var animatedShouldUseSingleOp = exports.animatedShouldUseSingleOp = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldUseSingleOp', false);
var enableAccessToHostTreeInFabric = exports.enableAccessToHostTreeInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAccessToHostTreeInFabric', false);
var shouldUseAnimatedObjectForTransform = exports.shouldUseAnimatedObjectForTransform = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseAnimatedObjectForTransform', false);
var shouldUseSetNativePropsInFabric = exports.shouldUseSetNativePropsInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseSetNativePropsInFabric', true);
var shouldUseRemoveClippedSubviewsAsDefaultOnIOS = exports.shouldUseRemoveClippedSubviewsAsDefaultOnIOS = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseRemoveClippedSubviewsAsDefaultOnIOS', false);
var commonTestFlag = exports.commonTestFlag = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('commonTestFlag', false);
var enableBackgroundExecutor = exports.enableBackgroundExecutor = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableBackgroundExecutor', false);
var useModernRuntimeScheduler = exports.useModernRuntimeScheduler = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useModernRuntimeScheduler', false);
var enableMicrotasks = exports.enableMicrotasks = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableMicrotasks', false);
var batchRenderingUpdatesInEventLoop = exports.batchRenderingUpdatesInEventLoop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('batchRenderingUpdatesInEventLoop', false);
var enableSpannableBuildingUnification = exports.enableSpannableBuildingUnification = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableSpannableBuildingUnification', false);
var enableCustomDrawOrderFabric = exports.enableCustomDrawOrderFabric = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableCustomDrawOrderFabric', false);
var enableFixForClippedSubviewsCrash = exports.enableFixForClippedSubviewsCrash = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFixForClippedSubviewsCrash', false);
var inspectorEnableCxxInspectorPackagerConnection = exports.inspectorEnableCxxInspectorPackagerConnection = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('inspectorEnableCxxInspectorPackagerConnection', false);
var inspectorEnableModernCDPRegistry = exports.inspectorEnableModernCDPRegistry = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('inspectorEnableModernCDPRegistry', false);
var override = exports.override = _ReactNativeFeatureFlagsBase.setOverrides;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUmVhY3ROYXRpdmVGZWF0dXJlRmxhZ3NCYXNlIiwicmVxdWlyZSIsImpzT25seVRlc3RGbGFnIiwiZXhwb3J0cyIsImNyZWF0ZUphdmFTY3JpcHRGbGFnR2V0dGVyIiwiaXNMYXlvdXRBbmltYXRpb25FbmFibGVkIiwiYW5pbWF0ZWRTaG91bGREZWJvdW5jZVF1ZXVlRmx1c2giLCJhbmltYXRlZFNob3VsZFVzZVNpbmdsZU9wIiwiZW5hYmxlQWNjZXNzVG9Ib3N0VHJlZUluRmFicmljIiwic2hvdWxkVXNlQW5pbWF0ZWRPYmplY3RGb3JUcmFuc2Zvcm0iLCJzaG91bGRVc2VTZXROYXRpdmVQcm9wc0luRmFicmljIiwic2hvdWxkVXNlUmVtb3ZlQ2xpcHBlZFN1YnZpZXdzQXNEZWZhdWx0T25JT1MiLCJjb21tb25UZXN0RmxhZyIsImNyZWF0ZU5hdGl2ZUZsYWdHZXR0ZXIiLCJlbmFibGVCYWNrZ3JvdW5kRXhlY3V0b3IiLCJ1c2VNb2Rlcm5SdW50aW1lU2NoZWR1bGVyIiwiZW5hYmxlTWljcm90YXNrcyIsImJhdGNoUmVuZGVyaW5nVXBkYXRlc0luRXZlbnRMb29wIiwiZW5hYmxlU3Bhbm5hYmxlQnVpbGRpbmdVbmlmaWNhdGlvbiIsImVuYWJsZUN1c3RvbURyYXdPcmRlckZhYnJpYyIsImVuYWJsZUZpeEZvckNsaXBwZWRTdWJ2aWV3c0NyYXNoIiwiaW5zcGVjdG9yRW5hYmxlQ3h4SW5zcGVjdG9yUGFja2FnZXJDb25uZWN0aW9uIiwiaW5zcGVjdG9yRW5hYmxlTW9kZXJuQ0RQUmVnaXN0cnkiLCJvdmVycmlkZSIsInNldE92ZXJyaWRlcyJdLCJzb3VyY2VzIjpbIlJlYWN0TmF0aXZlRmVhdHVyZUZsYWdzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZ2VuZXJhdGVkIFNpZ25lZFNvdXJjZTw8N2M4M2Q1NjEzYzNiZTUxN2VmZTQ4Mzc4ZTYzNTZlNzk+PlxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKi9cblxuLyoqXG4gKiBJTVBPUlRBTlQ6IERvIE5PVCBtb2RpZnkgdGhpcyBmaWxlIGRpcmVjdGx5LlxuICpcbiAqIFRvIGNoYW5nZSB0aGUgZGVmaW5pdGlvbiBvZiB0aGUgZmxhZ3MsIGVkaXRcbiAqICAgcGFja2FnZXMvcmVhY3QtbmF0aXZlL3NjcmlwdHMvZmVhdHVyZWZsYWdzL1JlYWN0TmF0aXZlRmVhdHVyZUZsYWdzLmNvbmZpZy5qcy5cbiAqXG4gKiBUbyByZWdlbmVyYXRlIHRoaXMgY29kZSwgcnVuIHRoZSBmb2xsb3dpbmcgc2NyaXB0IGZyb20gdGhlIHJlcG8gcm9vdDpcbiAqICAgeWFybiBmZWF0dXJlZmxhZ3MtdXBkYXRlXG4gKi9cblxuaW1wb3J0IHtcbiAgdHlwZSBHZXR0ZXIsXG4gIGNyZWF0ZUphdmFTY3JpcHRGbGFnR2V0dGVyLFxuICBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyLFxuICBzZXRPdmVycmlkZXMsXG59IGZyb20gJy4vUmVhY3ROYXRpdmVGZWF0dXJlRmxhZ3NCYXNlJztcblxuZXhwb3J0IHR5cGUgUmVhY3ROYXRpdmVGZWF0dXJlRmxhZ3NKc09ubHkgPSB7XG4gIGpzT25seVRlc3RGbGFnOiBHZXR0ZXI8Ym9vbGVhbj4sXG4gIGlzTGF5b3V0QW5pbWF0aW9uRW5hYmxlZDogR2V0dGVyPGJvb2xlYW4+LFxuICBhbmltYXRlZFNob3VsZERlYm91bmNlUXVldWVGbHVzaDogR2V0dGVyPGJvb2xlYW4+LFxuICBhbmltYXRlZFNob3VsZFVzZVNpbmdsZU9wOiBHZXR0ZXI8Ym9vbGVhbj4sXG4gIGVuYWJsZUFjY2Vzc1RvSG9zdFRyZWVJbkZhYnJpYzogR2V0dGVyPGJvb2xlYW4+LFxuICBzaG91bGRVc2VBbmltYXRlZE9iamVjdEZvclRyYW5zZm9ybTogR2V0dGVyPGJvb2xlYW4+LFxuICBzaG91bGRVc2VTZXROYXRpdmVQcm9wc0luRmFicmljOiBHZXR0ZXI8Ym9vbGVhbj4sXG4gIHNob3VsZFVzZVJlbW92ZUNsaXBwZWRTdWJ2aWV3c0FzRGVmYXVsdE9uSU9TOiBHZXR0ZXI8Ym9vbGVhbj4sXG59O1xuXG5leHBvcnQgdHlwZSBSZWFjdE5hdGl2ZUZlYXR1cmVGbGFnc0pzT25seU92ZXJyaWRlcyA9IFBhcnRpYWw8UmVhY3ROYXRpdmVGZWF0dXJlRmxhZ3NKc09ubHk+O1xuXG5leHBvcnQgdHlwZSBSZWFjdE5hdGl2ZUZlYXR1cmVGbGFncyA9IHtcbiAgLi4uUmVhY3ROYXRpdmVGZWF0dXJlRmxhZ3NKc09ubHksXG4gIGNvbW1vblRlc3RGbGFnOiBHZXR0ZXI8Ym9vbGVhbj4sXG4gIGVuYWJsZUJhY2tncm91bmRFeGVjdXRvcjogR2V0dGVyPGJvb2xlYW4+LFxuICB1c2VNb2Rlcm5SdW50aW1lU2NoZWR1bGVyOiBHZXR0ZXI8Ym9vbGVhbj4sXG4gIGVuYWJsZU1pY3JvdGFza3M6IEdldHRlcjxib29sZWFuPixcbiAgYmF0Y2hSZW5kZXJpbmdVcGRhdGVzSW5FdmVudExvb3A6IEdldHRlcjxib29sZWFuPixcbiAgZW5hYmxlU3Bhbm5hYmxlQnVpbGRpbmdVbmlmaWNhdGlvbjogR2V0dGVyPGJvb2xlYW4+LFxuICBlbmFibGVDdXN0b21EcmF3T3JkZXJGYWJyaWM6IEdldHRlcjxib29sZWFuPixcbiAgZW5hYmxlRml4Rm9yQ2xpcHBlZFN1YnZpZXdzQ3Jhc2g6IEdldHRlcjxib29sZWFuPixcbiAgaW5zcGVjdG9yRW5hYmxlQ3h4SW5zcGVjdG9yUGFja2FnZXJDb25uZWN0aW9uOiBHZXR0ZXI8Ym9vbGVhbj4sXG4gIGluc3BlY3RvckVuYWJsZU1vZGVybkNEUFJlZ2lzdHJ5OiBHZXR0ZXI8Ym9vbGVhbj4sXG59XG5cbi8qKlxuICogSlMtb25seSBmbGFnIGZvciB0ZXN0aW5nLiBEbyBOT1QgbW9kaWZ5LlxuICovXG5leHBvcnQgY29uc3QganNPbmx5VGVzdEZsYWc6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZUphdmFTY3JpcHRGbGFnR2V0dGVyKCdqc09ubHlUZXN0RmxhZycsIGZhbHNlKTtcblxuLyoqXG4gKiBGdW5jdGlvbiB1c2VkIHRvIGVuYWJsZSAvIGRpc2FibGVkIExheW91dCBBbmltYXRpb25zIGluIFJlYWN0IE5hdGl2ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGlzTGF5b3V0QW5pbWF0aW9uRW5hYmxlZDogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlSmF2YVNjcmlwdEZsYWdHZXR0ZXIoJ2lzTGF5b3V0QW5pbWF0aW9uRW5hYmxlZCcsIHRydWUpO1xuXG4vKipcbiAqIEVuYWJsZXMgYW4gZXhwZXJpbWVudGFsIGZsdXNoLXF1ZXVlIGRlYm91bmNpbmcgaW4gQW5pbWF0ZWQuanMuXG4gKi9cbmV4cG9ydCBjb25zdCBhbmltYXRlZFNob3VsZERlYm91bmNlUXVldWVGbHVzaDogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlSmF2YVNjcmlwdEZsYWdHZXR0ZXIoJ2FuaW1hdGVkU2hvdWxkRGVib3VuY2VRdWV1ZUZsdXNoJywgZmFsc2UpO1xuXG4vKipcbiAqIEVuYWJsZXMgYW4gZXhwZXJpbWVudGFsIG1lZ2Etb3BlcmF0aW9uIGZvciBBbmltYXRlZC5qcyB0aGF0IHJlcGxhY2VzIG1hbnkgY2FsbHMgdG8gbmF0aXZlIHdpdGggYSBzaW5nbGUgY2FsbCBpbnRvIG5hdGl2ZSwgdG8gcmVkdWNlIEpTSS9KTkkgdHJhZmZpYy5cbiAqL1xuZXhwb3J0IGNvbnN0IGFuaW1hdGVkU2hvdWxkVXNlU2luZ2xlT3A6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZUphdmFTY3JpcHRGbGFnR2V0dGVyKCdhbmltYXRlZFNob3VsZFVzZVNpbmdsZU9wJywgZmFsc2UpO1xuXG4vKipcbiAqIEVuYWJsZXMgYWNjZXNzIHRvIHRoZSBob3N0IHRyZWUgaW4gRmFicmljIHVzaW5nIERPTS1jb21wYXRpYmxlIEFQSXMuXG4gKi9cbmV4cG9ydCBjb25zdCBlbmFibGVBY2Nlc3NUb0hvc3RUcmVlSW5GYWJyaWM6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZUphdmFTY3JpcHRGbGFnR2V0dGVyKCdlbmFibGVBY2Nlc3NUb0hvc3RUcmVlSW5GYWJyaWMnLCBmYWxzZSk7XG5cbi8qKlxuICogRW5hYmxlcyB1c2Ugb2YgQW5pbWF0ZWRPYmplY3QgZm9yIGFuaW1hdGluZyB0cmFuc2Zvcm0gdmFsdWVzLlxuICovXG5leHBvcnQgY29uc3Qgc2hvdWxkVXNlQW5pbWF0ZWRPYmplY3RGb3JUcmFuc2Zvcm06IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZUphdmFTY3JpcHRGbGFnR2V0dGVyKCdzaG91bGRVc2VBbmltYXRlZE9iamVjdEZvclRyYW5zZm9ybScsIGZhbHNlKTtcblxuLyoqXG4gKiBFbmFibGVzIHVzZSBvZiBzZXROYXRpdmVQcm9wcyBpbiBKUyBkcml2ZW4gYW5pbWF0aW9ucy5cbiAqL1xuZXhwb3J0IGNvbnN0IHNob3VsZFVzZVNldE5hdGl2ZVByb3BzSW5GYWJyaWM6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZUphdmFTY3JpcHRGbGFnR2V0dGVyKCdzaG91bGRVc2VTZXROYXRpdmVQcm9wc0luRmFicmljJywgdHJ1ZSk7XG5cbi8qKlxuICogcmVtb3ZlQ2xpcHBlZFN1YnZpZXdzIHByb3Agd2lsbCBiZSB1c2VkIGFzIHRoZSBkZWZhdWx0IGluIEZsYXRMaXN0IG9uIGlPUyB0byBtYXRjaCBBbmRyb2lkXG4gKi9cbmV4cG9ydCBjb25zdCBzaG91bGRVc2VSZW1vdmVDbGlwcGVkU3Vidmlld3NBc0RlZmF1bHRPbklPUzogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlSmF2YVNjcmlwdEZsYWdHZXR0ZXIoJ3Nob3VsZFVzZVJlbW92ZUNsaXBwZWRTdWJ2aWV3c0FzRGVmYXVsdE9uSU9TJywgZmFsc2UpO1xuXG4vKipcbiAqIENvbW1vbiBmbGFnIGZvciB0ZXN0aW5nLiBEbyBOT1QgbW9kaWZ5LlxuICovXG5leHBvcnQgY29uc3QgY29tbW9uVGVzdEZsYWc6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZU5hdGl2ZUZsYWdHZXR0ZXIoJ2NvbW1vblRlc3RGbGFnJywgZmFsc2UpO1xuLyoqXG4gKiBFbmFibGVzIHRoZSB1c2Ugb2YgYSBiYWNrZ3JvdW5kIGV4ZWN1dG9yIHRvIGNvbXB1dGUgbGF5b3V0IGFuZCBjb21taXQgdXBkYXRlcyBvbiBGYWJyaWMgKHRoaXMgc3lzdGVtIGlzIGRlcHJlY2F0ZWQgYW5kIHNob3VsZCBub3QgYmUgdXNlZCkuXG4gKi9cbmV4cG9ydCBjb25zdCBlbmFibGVCYWNrZ3JvdW5kRXhlY3V0b3I6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZU5hdGl2ZUZsYWdHZXR0ZXIoJ2VuYWJsZUJhY2tncm91bmRFeGVjdXRvcicsIGZhbHNlKTtcbi8qKlxuICogV2hlbiBlbmFibGVkLCBpdCB1c2VzIHRoZSBtb2Rlcm4gZm9yayBvZiBSdW50aW1lU2NoZWR1bGVyIHRoYXQgYWxsb3dzIHNjaGVkdWxpbmcgdGFza3Mgd2l0aCBwcmlvcml0aWVzIGZyb20gYW55IHRocmVhZC5cbiAqL1xuZXhwb3J0IGNvbnN0IHVzZU1vZGVyblJ1bnRpbWVTY2hlZHVsZXI6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZU5hdGl2ZUZsYWdHZXR0ZXIoJ3VzZU1vZGVyblJ1bnRpbWVTY2hlZHVsZXInLCBmYWxzZSk7XG4vKipcbiAqIEVuYWJsZXMgdGhlIHVzZSBvZiBtaWNyb3Rhc2tzIGluIEhlcm1lcyAoc2NoZWR1bGluZykgYW5kIFJ1bnRpbWVTY2hlZHVsZXIgKGV4ZWN1dGlvbikuXG4gKi9cbmV4cG9ydCBjb25zdCBlbmFibGVNaWNyb3Rhc2tzOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCdlbmFibGVNaWNyb3Rhc2tzJywgZmFsc2UpO1xuLyoqXG4gKiBXaGVuIGVuYWJsZWQsIHRoZSBSdW50aW1lU2NoZWR1bGVyIHByb2Nlc3NpbmcgdGhlIGV2ZW50IGxvb3Agd2lsbCBiYXRjaCBhbGwgcmVuZGVyaW5nIHVwZGF0ZXMgYW5kIGRpc3BhdGNoIHRoZW0gdG9nZXRoZXIgYXQgdGhlIGVuZCBvZiBlYWNoIGl0ZXJhdGlvbiBvZiB0aGUgbG9vcC5cbiAqL1xuZXhwb3J0IGNvbnN0IGJhdGNoUmVuZGVyaW5nVXBkYXRlc0luRXZlbnRMb29wOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCdiYXRjaFJlbmRlcmluZ1VwZGF0ZXNJbkV2ZW50TG9vcCcsIGZhbHNlKTtcbi8qKlxuICogVXNlcyBuZXcsIGRlZHVwbGljYXRlZCBsb2dpYyBmb3IgY29uc3RydWN0aW5nIEFuZHJvaWQgU3Bhbm5hYmxlcyBmcm9tIHRleHQgZnJhZ21lbnRzXG4gKi9cbmV4cG9ydCBjb25zdCBlbmFibGVTcGFubmFibGVCdWlsZGluZ1VuaWZpY2F0aW9uOiBHZXR0ZXI8Ym9vbGVhbj4gPSBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyKCdlbmFibGVTcGFubmFibGVCdWlsZGluZ1VuaWZpY2F0aW9uJywgZmFsc2UpO1xuLyoqXG4gKiBXaGVuIGVuYWJsZWQsIEZhYnJpYyB3aWxsIHVzZSBjdXN0b21EcmF3T3JkZXIgaW4gUmVhY3RWaWV3R3JvdXAgKHNpbWlsYXIgdG8gb2xkIGFyY2hpdGVjdHVyZSkuXG4gKi9cbmV4cG9ydCBjb25zdCBlbmFibGVDdXN0b21EcmF3T3JkZXJGYWJyaWM6IEdldHRlcjxib29sZWFuPiA9IGNyZWF0ZU5hdGl2ZUZsYWdHZXR0ZXIoJ2VuYWJsZUN1c3RvbURyYXdPcmRlckZhYnJpYycsIGZhbHNlKTtcbi8qKlxuICogQXR0ZW1wdCBhdCBmaXhpbmcgYSBjcmFzaCByZWxhdGVkIHRvIHN1YnZpZXcgY2xpcHBpbmcgb24gQW5kcm9pZC4gVGhpcyBpcyBhIGtpbGwgc3dpdGNoIGZvciB0aGUgZml4XG4gKi9cbmV4cG9ydCBjb25zdCBlbmFibGVGaXhGb3JDbGlwcGVkU3Vidmlld3NDcmFzaDogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlTmF0aXZlRmxhZ0dldHRlcignZW5hYmxlRml4Rm9yQ2xpcHBlZFN1YnZpZXdzQ3Jhc2gnLCBmYWxzZSk7XG4vKipcbiAqIEZsYWcgZGV0ZXJtaW5pbmcgaWYgdGhlIEMrKyBpbXBsZW1lbnRhdGlvbiBvZiBJbnNwZWN0b3JQYWNrYWdlckNvbm5lY3Rpb24gc2hvdWxkIGJlIHVzZWQgaW5zdGVhZCBvZiB0aGUgcGVyLXBsYXRmb3JtIG9uZS4gVGhpcyBmbGFnIGlzIGdsb2JhbCBhbmQgc2hvdWxkIG5vdCBiZSBjaGFuZ2VkIGFjcm9zcyBSZWFjdCBIb3N0IGxpZmV0aW1lcy5cbiAqL1xuZXhwb3J0IGNvbnN0IGluc3BlY3RvckVuYWJsZUN4eEluc3BlY3RvclBhY2thZ2VyQ29ubmVjdGlvbjogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlTmF0aXZlRmxhZ0dldHRlcignaW5zcGVjdG9yRW5hYmxlQ3h4SW5zcGVjdG9yUGFja2FnZXJDb25uZWN0aW9uJywgZmFsc2UpO1xuLyoqXG4gKiBGbGFnIGRldGVybWluaW5nIGlmIHRoZSBtb2Rlcm4gQ0RQIGJhY2tlbmQgc2hvdWxkIGJlIGVuYWJsZWQuIFRoaXMgZmxhZyBpcyBnbG9iYWwgYW5kIHNob3VsZCBub3QgYmUgY2hhbmdlZCBhY3Jvc3MgUmVhY3QgSG9zdCBsaWZldGltZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBpbnNwZWN0b3JFbmFibGVNb2Rlcm5DRFBSZWdpc3RyeTogR2V0dGVyPGJvb2xlYW4+ID0gY3JlYXRlTmF0aXZlRmxhZ0dldHRlcignaW5zcGVjdG9yRW5hYmxlTW9kZXJuQ0RQUmVnaXN0cnknLCBmYWxzZSk7XG5cbi8qKlxuICogT3ZlcnJpZGVzIHRoZSBmZWF0dXJlIGZsYWdzIHdpdGggdGhlIHByb3ZpZGVkIG1ldGhvZHMuXG4gKiBOT1RFOiBPbmx5IEpTLW9ubHkgZmxhZ3MgY2FuIGJlIG92ZXJyaWRkZW4gZnJvbSBKYXZhU2NyaXB0IHVzaW5nIHRoaXMgQVBJLlxuICovXG5leHBvcnQgY29uc3Qgb3ZlcnJpZGUgPSBzZXRPdmVycmlkZXM7XG4iXSwibWFw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