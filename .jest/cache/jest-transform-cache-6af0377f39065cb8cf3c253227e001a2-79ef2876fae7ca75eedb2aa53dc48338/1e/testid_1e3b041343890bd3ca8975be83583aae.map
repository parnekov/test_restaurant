{"version":3,"names":["_findAll","require","_matches","_makeQueries","matchTestId","node","testId","options","arguments","length","undefined","exact","normalizer","matches","props","testID","queryAllByTestId","instance","queryAllByTestIdFn","queryOptions","findAll","getMultipleError","String","getMissingError","_ref","makeQueries","getBy","getAllBy","queryBy","queryAllBy","findBy","findAllBy","bindByTestIdQueries","getByTestId","getAllByTestId","queryByTestId","findByTestId","findAllByTestId","exports"],"sources":["../../src/queries/test-id.ts"],"sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\nimport { findAll } from '../helpers/find-all';\nimport { matches, TextMatch, TextMatchOptions } from '../matches';\nimport { makeQueries } from './make-queries';\nimport type {\n  FindAllByQuery,\n  FindByQuery,\n  GetAllByQuery,\n  GetByQuery,\n  QueryAllByQuery,\n  QueryByQuery,\n} from './make-queries';\nimport type { CommonQueryOptions } from './options';\n\ntype ByTestIdOptions = CommonQueryOptions & TextMatchOptions;\n\nconst matchTestId = (\n  node: ReactTestInstance,\n  testId: TextMatch,\n  options: TextMatchOptions = {},\n) => {\n  const { exact, normalizer } = options;\n  return matches(testId, node.props.testID, normalizer, exact);\n};\n\nconst queryAllByTestId = (\n  instance: ReactTestInstance,\n): QueryAllByQuery<TextMatch, ByTestIdOptions> =>\n  function queryAllByTestIdFn(testId, queryOptions) {\n    return findAll(instance, (node) => matchTestId(node, testId, queryOptions), queryOptions);\n  };\n\nconst getMultipleError = (testId: TextMatch) =>\n  `Found multiple elements with testID: ${String(testId)}`;\nconst getMissingError = (testId: TextMatch) =>\n  `Unable to find an element with testID: ${String(testId)}`;\n\nconst { getBy, getAllBy, queryBy, queryAllBy, findBy, findAllBy } = makeQueries(\n  queryAllByTestId,\n  getMissingError,\n  getMultipleError,\n);\n\nexport type ByTestIdQueries = {\n  getByTestId: GetByQuery<TextMatch, ByTestIdOptions>;\n  getAllByTestId: GetAllByQuery<TextMatch, ByTestIdOptions>;\n  queryByTestId: QueryByQuery<TextMatch, ByTestIdOptions>;\n  queryAllByTestId: QueryAllByQuery<TextMatch, ByTestIdOptions>;\n  findByTestId: FindByQuery<TextMatch, ByTestIdOptions>;\n  findAllByTestId: FindAllByQuery<TextMatch, ByTestIdOptions>;\n};\n\nexport const bindByTestIdQueries = (instance: ReactTestInstance): ByTestIdQueries => ({\n  getByTestId: getBy(instance),\n  getAllByTestId: getAllBy(instance),\n  queryByTestId: queryBy(instance),\n  queryAllByTestId: queryAllBy(instance),\n  findByTestId: findBy(instance),\n  findAllByTestId: findAllBy(instance),\n});\n"],"mappings":";;;;;;AACA,IAAAA,QAAA,GAAAC,OAAA;AACA,IAAAC,QAAA,GAAAD,OAAA;AACA,IAAAE,YAAA,GAAAF,OAAA;AAaA,IAAMG,WAAW,GAAG,SAAdA,WAAWA,CACfC,IAAuB,EACvBC,MAAiB,EAEd;EAAA,IADHC,OAAyB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAE9B,IAAQG,KAAK,GAAiBJ,OAAO,CAA7BI,KAAK;IAAEC,UAAA,GAAeL,OAAO,CAAtBK,UAAA;EACf,OAAO,IAAAV,QAAA,CAAAW,OAAO,EAACP,MAAM,EAAED,IAAI,CAACS,KAAK,CAACC,MAAM,EAAEH,UAAU,EAAED,KAAK,CAAC;AAC9D,CAAC;AAED,IAAMK,gBAAgB,GACpB,SADIA,gBAAgBA,CACpBC,QAA2B;EAAA,OAE3B,SAASC,kBAAkBA,CAACZ,MAAM,EAAEa,YAAY,EAAE;IAChD,OAAO,IAAAnB,QAAA,CAAAoB,OAAO,EAACH,QAAQ,EAAG,UAAAZ,IAAI;MAAA,OAAKD,WAAW,CAACC,IAAI,EAAEC,MAAM,EAAEa,YAAY,CAAC;IAAA,GAAEA,YAAY,CAAC;EAC3F,CAAC;AAAA;AAEH,IAAME,gBAAgB,GAAI,SAApBA,gBAAgBA,CAAIf,MAAiB;EAAA,OACxC,wCAAuCgB,MAAM,CAAChB,MAAM,CAAE,EAAC;AAAA;AAC1D,IAAMiB,eAAe,GAAI,SAAnBA,eAAeA,CAAIjB,MAAiB;EAAA,OACvC,0CAAyCgB,MAAM,CAAChB,MAAM,CAAE,EAAC;AAAA;AAE5D,IAAAkB,IAAA,GAAoE,IAAArB,YAAA,CAAAsB,WAAW,EAC7ET,gBAAgB,EAChBO,eAAe,EACfF,gBACF,CAAC;EAJOK,KAAK,GAAAF,IAAA,CAALE,KAAK;EAAEC,QAAQ,GAAAH,IAAA,CAARG,QAAQ;EAAEC,OAAO,GAAAJ,IAAA,CAAPI,OAAO;EAAEC,UAAU,GAAAL,IAAA,CAAVK,UAAU;EAAEC,MAAM,GAAAN,IAAA,CAANM,MAAM;EAAEC,SAAA,GAAAP,IAAA,CAAAO,SAAA;AAe/C,IAAMC,mBAAmB,GAAI,SAAvBA,mBAAmBA,CAAIf,QAA2B;EAAA,OAAuB;IACpFgB,WAAW,EAAEP,KAAK,CAACT,QAAQ,CAAC;IAC5BiB,cAAc,EAAEP,QAAQ,CAACV,QAAQ,CAAC;IAClCkB,aAAa,EAAEP,OAAO,CAACX,QAAQ,CAAC;IAChCD,gBAAgB,EAAEa,UAAU,CAACZ,QAAQ,CAAC;IACtCmB,YAAY,EAAEN,MAAM,CAACb,QAAQ,CAAC;IAC9BoB,eAAe,EAAEN,SAAS,CAACd,QAAQ;EACrC,CAAC;AAAA,CAAC;AAACqB,OAAA,CAAAN,mBAAA,GAAAA,mBAAA","ignoreList":[]}