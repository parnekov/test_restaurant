6c140e499cb9670f7b73c2f862bf96c0
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindByTestIdQueries = void 0;
var _findAll = require("../helpers/find-all");
var _matches = require("../matches");
var _makeQueries = require("./make-queries");
var matchTestId = function matchTestId(node, testId) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var exact = options.exact,
    normalizer = options.normalizer;
  return (0, _matches.matches)(testId, node.props.testID, normalizer, exact);
};
var queryAllByTestId = function queryAllByTestId(instance) {
  return function queryAllByTestIdFn(testId, queryOptions) {
    return (0, _findAll.findAll)(instance, function (node) {
      return matchTestId(node, testId, queryOptions);
    }, queryOptions);
  };
};
var getMultipleError = function getMultipleError(testId) {
  return `Found multiple elements with testID: ${String(testId)}`;
};
var getMissingError = function getMissingError(testId) {
  return `Unable to find an element with testID: ${String(testId)}`;
};
var _ref = (0, _makeQueries.makeQueries)(queryAllByTestId, getMissingError, getMultipleError),
  getBy = _ref.getBy,
  getAllBy = _ref.getAllBy,
  queryBy = _ref.queryBy,
  queryAllBy = _ref.queryAllBy,
  findBy = _ref.findBy,
  findAllBy = _ref.findAllBy;
var bindByTestIdQueries = function bindByTestIdQueries(instance) {
  return {
    getByTestId: getBy(instance),
    getAllByTestId: getAllBy(instance),
    queryByTestId: queryBy(instance),
    queryAllByTestId: queryAllBy(instance),
    findByTestId: findBy(instance),
    findAllByTestId: findAllBy(instance)
  };
};
exports.bindByTestIdQueries = bindByTestIdQueries;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZmluZEFsbCIsInJlcXVpcmUiLCJfbWF0Y2hlcyIsIl9tYWtlUXVlcmllcyIsIm1hdGNoVGVzdElkIiwibm9kZSIsInRlc3RJZCIsIm9wdGlvbnMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJleGFjdCIsIm5vcm1hbGl6ZXIiLCJtYXRjaGVzIiwicHJvcHMiLCJ0ZXN0SUQiLCJxdWVyeUFsbEJ5VGVzdElkIiwiaW5zdGFuY2UiLCJxdWVyeUFsbEJ5VGVzdElkRm4iLCJxdWVyeU9wdGlvbnMiLCJmaW5kQWxsIiwiZ2V0TXVsdGlwbGVFcnJvciIsIlN0cmluZyIsImdldE1pc3NpbmdFcnJvciIsIl9yZWYiLCJtYWtlUXVlcmllcyIsImdldEJ5IiwiZ2V0QWxsQnkiLCJxdWVyeUJ5IiwicXVlcnlBbGxCeSIsImZpbmRCeSIsImZpbmRBbGxCeSIsImJpbmRCeVRlc3RJZFF1ZXJpZXMiLCJnZXRCeVRlc3RJZCIsImdldEFsbEJ5VGVzdElkIiwicXVlcnlCeVRlc3RJZCIsImZpbmRCeVRlc3RJZCIsImZpbmRBbGxCeVRlc3RJZCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvcXVlcmllcy90ZXN0LWlkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUmVhY3RUZXN0SW5zdGFuY2UgfSBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcbmltcG9ydCB7IGZpbmRBbGwgfSBmcm9tICcuLi9oZWxwZXJzL2ZpbmQtYWxsJztcbmltcG9ydCB7IG1hdGNoZXMsIFRleHRNYXRjaCwgVGV4dE1hdGNoT3B0aW9ucyB9IGZyb20gJy4uL21hdGNoZXMnO1xuaW1wb3J0IHsgbWFrZVF1ZXJpZXMgfSBmcm9tICcuL21ha2UtcXVlcmllcyc7XG5pbXBvcnQgdHlwZSB7XG4gIEZpbmRBbGxCeVF1ZXJ5LFxuICBGaW5kQnlRdWVyeSxcbiAgR2V0QWxsQnlRdWVyeSxcbiAgR2V0QnlRdWVyeSxcbiAgUXVlcnlBbGxCeVF1ZXJ5LFxuICBRdWVyeUJ5UXVlcnksXG59IGZyb20gJy4vbWFrZS1xdWVyaWVzJztcbmltcG9ydCB0eXBlIHsgQ29tbW9uUXVlcnlPcHRpb25zIH0gZnJvbSAnLi9vcHRpb25zJztcblxudHlwZSBCeVRlc3RJZE9wdGlvbnMgPSBDb21tb25RdWVyeU9wdGlvbnMgJiBUZXh0TWF0Y2hPcHRpb25zO1xuXG5jb25zdCBtYXRjaFRlc3RJZCA9IChcbiAgbm9kZTogUmVhY3RUZXN0SW5zdGFuY2UsXG4gIHRlc3RJZDogVGV4dE1hdGNoLFxuICBvcHRpb25zOiBUZXh0TWF0Y2hPcHRpb25zID0ge30sXG4pID0+IHtcbiAgY29uc3QgeyBleGFjdCwgbm9ybWFsaXplciB9ID0gb3B0aW9ucztcbiAgcmV0dXJuIG1hdGNoZXModGVzdElkLCBub2RlLnByb3BzLnRlc3RJRCwgbm9ybWFsaXplciwgZXhhY3QpO1xufTtcblxuY29uc3QgcXVlcnlBbGxCeVRlc3RJZCA9IChcbiAgaW5zdGFuY2U6IFJlYWN0VGVzdEluc3RhbmNlLFxuKTogUXVlcnlBbGxCeVF1ZXJ5PFRleHRNYXRjaCwgQnlUZXN0SWRPcHRpb25zPiA9PlxuICBmdW5jdGlvbiBxdWVyeUFsbEJ5VGVzdElkRm4odGVzdElkLCBxdWVyeU9wdGlvbnMpIHtcbiAgICByZXR1cm4gZmluZEFsbChpbnN0YW5jZSwgKG5vZGUpID0+IG1hdGNoVGVzdElkKG5vZGUsIHRlc3RJZCwgcXVlcnlPcHRpb25zKSwgcXVlcnlPcHRpb25zKTtcbiAgfTtcblxuY29uc3QgZ2V0TXVsdGlwbGVFcnJvciA9ICh0ZXN0SWQ6IFRleHRNYXRjaCkgPT5cbiAgYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIHdpdGggdGVzdElEOiAke1N0cmluZyh0ZXN0SWQpfWA7XG5jb25zdCBnZXRNaXNzaW5nRXJyb3IgPSAodGVzdElkOiBUZXh0TWF0Y2gpID0+XG4gIGBVbmFibGUgdG8gZmluZCBhbiBlbGVtZW50IHdpdGggdGVzdElEOiAke1N0cmluZyh0ZXN0SWQpfWA7XG5cbmNvbnN0IHsgZ2V0QnksIGdldEFsbEJ5LCBxdWVyeUJ5LCBxdWVyeUFsbEJ5LCBmaW5kQnksIGZpbmRBbGxCeSB9ID0gbWFrZVF1ZXJpZXMoXG4gIHF1ZXJ5QWxsQnlUZXN0SWQsXG4gIGdldE1pc3NpbmdFcnJvcixcbiAgZ2V0TXVsdGlwbGVFcnJvcixcbik7XG5cbmV4cG9ydCB0eXBlIEJ5VGVzdElkUXVlcmllcyA9IHtcbiAgZ2V0QnlUZXN0SWQ6IEdldEJ5UXVlcnk8VGV4dE1hdGNoLCBCeVRlc3RJZE9wdGlvbnM+O1xuICBnZXRBbGxCeVRlc3RJZDogR2V0QWxsQnlRdWVyeTxUZXh0TWF0Y2gsIEJ5VGVzdElkT3B0aW9ucz47XG4gIHF1ZXJ5QnlUZXN0SWQ6IFF1ZXJ5QnlRdWVyeTxUZXh0TWF0Y2gsIEJ5VGVzdElkT3B0aW9ucz47XG4gIHF1ZXJ5QWxsQnlUZXN0SWQ6IFF1ZXJ5QWxsQnlRdWVyeTxUZXh0TWF0Y2gsIEJ5VGVzdElkT3B0aW9ucz47XG4gIGZpbmRCeVRlc3RJZDogRmluZEJ5UXVlcnk8VGV4dE1hdGNoLCBCeVRlc3RJZE9wdGlvbnM+O1xuICBmaW5kQWxsQnlUZXN0SWQ6IEZpbmRBbGxCeVF1ZXJ5PFRleHRNYXRjaCwgQnlUZXN0SWRPcHRpb25zPjtcbn07XG5cbmV4cG9ydCBjb25zdCBiaW5kQnlUZXN0SWRRdWVyaWVzID0gKGluc3RhbmNlOiBSZWFjdFRlc3RJbnN0YW5jZSk6IEJ5VGVzdElkUXVlcmllcyA9PiAoe1xuICBnZXRCeVRlc3RJZDogZ2V0QnkoaW5zdGFuY2UpLFxuICBnZXRBbGxCeVRlc3RJZDogZ2V0QWxsQnkoaW5zdGFuY2UpLFxuICBxdWVyeUJ5VGVzdElkOiBxdWVyeUJ5KGluc3RhbmNlKSxcbiAgcXVlcnlBbGxCeVRlc3RJZDogcXVlcnlBbGxCeShpbnN0YW5jZSksXG4gIGZpbmRCeVRlc3RJZDogZmluZEJ5KGluc3RhbmNlKSxcbiAgZmluZEFsbEJ5VGVzdElkOiBmaW5kQWxsQnkoaW5zdGFuY2UpLFxufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLElBQUFBLFFBQUEs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