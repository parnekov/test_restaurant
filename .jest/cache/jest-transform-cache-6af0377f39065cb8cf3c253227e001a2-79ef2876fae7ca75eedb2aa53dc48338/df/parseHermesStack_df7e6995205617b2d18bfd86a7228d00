aaa561f134b5934b9002930de747c34f
'use strict';

var RE_FRAME = /^ {4}at (.+?)(?: \((native)\)?| \((address at )?(.*?):(\d+):(\d+)\))$/;
var RE_SKIPPED = /^ {4}... skipping (\d+) frames$/;
function isInternalBytecodeSourceUrl(sourceUrl) {
  return sourceUrl === 'InternalBytecode.js';
}
function parseLine(line) {
  var asFrame = line.match(RE_FRAME);
  if (asFrame) {
    return {
      type: 'FRAME',
      functionName: asFrame[1],
      location: asFrame[2] === 'native' ? {
        type: 'NATIVE'
      } : asFrame[3] === 'address at ' ? isInternalBytecodeSourceUrl(asFrame[4]) ? {
        type: 'INTERNAL_BYTECODE',
        sourceUrl: asFrame[4],
        line1Based: Number.parseInt(asFrame[5], 10),
        virtualOffset0Based: Number.parseInt(asFrame[6], 10)
      } : {
        type: 'BYTECODE',
        sourceUrl: asFrame[4],
        line1Based: Number.parseInt(asFrame[5], 10),
        virtualOffset0Based: Number.parseInt(asFrame[6], 10)
      } : {
        type: 'SOURCE',
        sourceUrl: asFrame[4],
        line1Based: Number.parseInt(asFrame[5], 10),
        column1Based: Number.parseInt(asFrame[6], 10)
      }
    };
  }
  var asSkipped = line.match(RE_SKIPPED);
  if (asSkipped) {
    return {
      type: 'SKIPPED',
      count: Number.parseInt(asSkipped[1], 10)
    };
  }
}
module.exports = function parseHermesStack(stack) {
  var lines = stack.split(/\n/);
  var entries = [];
  var lastMessageLine = -1;
  for (var i = 0; i < lines.length; ++i) {
    var line = lines[i];
    if (!line) {
      continue;
    }
    var entry = parseLine(line);
    if (entry) {
      entries.push(entry);
      continue;
    }
    lastMessageLine = i;
    entries = [];
  }
  var message = lines.slice(0, lastMessageLine + 1).join('\n');
  return {
    message: message,
    entries: entries
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSRV9GUkFNRSIsIlJFX1NLSVBQRUQiLCJpc0ludGVybmFsQnl0ZWNvZGVTb3VyY2VVcmwiLCJzb3VyY2VVcmwiLCJwYXJzZUxpbmUiLCJsaW5lIiwiYXNGcmFtZSIsIm1hdGNoIiwidHlwZSIsImZ1bmN0aW9uTmFtZSIsImxvY2F0aW9uIiwibGluZTFCYXNlZCIsIk51bWJlciIsInBhcnNlSW50IiwidmlydHVhbE9mZnNldDBCYXNlZCIsImNvbHVtbjFCYXNlZCIsImFzU2tpcHBlZCIsImNvdW50IiwibW9kdWxlIiwiZXhwb3J0cyIsInBhcnNlSGVybWVzU3RhY2siLCJzdGFjayIsImxpbmVzIiwic3BsaXQiLCJlbnRyaWVzIiwibGFzdE1lc3NhZ2VMaW5lIiwiaSIsImxlbmd0aCIsImVudHJ5IiwicHVzaCIsIm1lc3NhZ2UiLCJzbGljZSIsImpvaW4iXSwic291cmNlcyI6WyJwYXJzZUhlcm1lc1N0YWNrLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3RcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnR5cGUgSGVybWVzU3RhY2tMb2NhdGlvbk5hdGl2ZSA9ICRSZWFkT25seTx7XG4gIHR5cGU6ICdOQVRJVkUnLFxufT47XG5cbnR5cGUgSGVybWVzU3RhY2tMb2NhdGlvblNvdXJjZSA9ICRSZWFkT25seTx7XG4gIHR5cGU6ICdTT1VSQ0UnLFxuICBzb3VyY2VVcmw6IHN0cmluZyxcbiAgbGluZTFCYXNlZDogbnVtYmVyLFxuICBjb2x1bW4xQmFzZWQ6IG51bWJlcixcbn0+O1xuXG50eXBlIEhlcm1lc1N0YWNrTG9jYXRpb25JbnRlcm5hbEJ5dGVjb2RlID0gJFJlYWRPbmx5PHtcbiAgdHlwZTogJ0lOVEVSTkFMX0JZVEVDT0RFJyxcbiAgc291cmNlVXJsOiBzdHJpbmcsXG4gIGxpbmUxQmFzZWQ6IG51bWJlcixcbiAgdmlydHVhbE9mZnNldDBCYXNlZDogbnVtYmVyLFxufT47XG5cbnR5cGUgSGVybWVzU3RhY2tMb2NhdGlvbkJ5dGVjb2RlID0gJFJlYWRPbmx5PHtcbiAgdHlwZTogJ0JZVEVDT0RFJyxcbiAgc291cmNlVXJsOiBzdHJpbmcsXG4gIGxpbmUxQmFzZWQ6IG51bWJlcixcbiAgdmlydHVhbE9mZnNldDBCYXNlZDogbnVtYmVyLFxufT47XG5cbnR5cGUgSGVybWVzU3RhY2tMb2NhdGlvbiA9XG4gIHwgSGVybWVzU3RhY2tMb2NhdGlvbk5hdGl2ZVxuICB8IEhlcm1lc1N0YWNrTG9jYXRpb25Tb3VyY2VcbiAgfCBIZXJtZXNTdGFja0xvY2F0aW9uSW50ZXJuYWxCeXRlY29kZVxuICB8IEhlcm1lc1N0YWNrTG9jYXRpb25CeXRlY29kZTtcblxudHlwZSBIZXJtZXNTdGFja0VudHJ5RnJhbWUgPSAkUmVhZE9ubHk8e1xuICB0eXBlOiAnRlJBTUUnLFxuICBsb2NhdGlvbjogSGVybWVzU3RhY2tMb2NhdGlvbixcbiAgZnVuY3Rpb25OYW1lOiBzdHJpbmcsXG59PjtcblxudHlwZSBIZXJtZXNTdGFja0VudHJ5U2tpcHBlZCA9ICRSZWFkT25seTx7XG4gIHR5cGU6ICdTS0lQUEVEJyxcbiAgY291bnQ6IG51bWJlcixcbn0+O1xuXG50eXBlIEhlcm1lc1N0YWNrRW50cnkgPSBIZXJtZXNTdGFja0VudHJ5RnJhbWUgfCBIZXJtZXNTdGFja0VudHJ5U2tpcHBlZDtcblxuZXhwb3J0IHR5cGUgSGVybWVzUGFyc2VkU3RhY2sgPSAkUmVhZE9ubHk8e1xuICBtZXNzYWdlOiBzdHJpbmcsXG4gIGVudHJpZXM6ICRSZWFkT25seUFycmF5PEhlcm1lc1N0YWNrRW50cnk+LFxufT47XG5cbi8vIENhcHR1cmluZyBncm91cHM6XG4vLyAxLiBmdW5jdGlvbiBuYW1lXG4vLyAyLiBpcyB0aGlzIGEgbmF0aXZlIHN0YWNrIGZyYW1lP1xuLy8gMy4gaXMgdGhpcyBhIGJ5dGVjb2RlIGFkZHJlc3Mgb3IgYSBzb3VyY2UgbG9jYXRpb24/XG4vLyA0LiBzb3VyY2UgVVJMIChmaWxlbmFtZSlcbi8vIDUuIGxpbmUgbnVtYmVyICgxIGJhc2VkKVxuLy8gNi4gY29sdW1uIG51bWJlciAoMSBiYXNlZCkgb3IgdmlydHVhbCBvZmZzZXQgKDAgYmFzZWQpXG5jb25zdCBSRV9GUkFNRSA9XG4gIC9eIHs0fWF0ICguKz8pKD86IFxcKChuYXRpdmUpXFwpP3wgXFwoKGFkZHJlc3MgYXQgKT8oLio/KTooXFxkKyk6KFxcZCspXFwpKSQvO1xuXG4vLyBDYXB0dXJpbmcgZ3JvdXBzOlxuLy8gMS4gY291bnQgb2Ygc2tpcHBlZCBmcmFtZXNcbmNvbnN0IFJFX1NLSVBQRUQgPSAvXiB7NH0uLi4gc2tpcHBpbmcgKFxcZCspIGZyYW1lcyQvO1xuXG5mdW5jdGlvbiBpc0ludGVybmFsQnl0ZWNvZGVTb3VyY2VVcmwoc291cmNlVXJsOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9oZXJtZXMvYmxvYi8zMzMyZmEwMjBjYWUwYmFiNzUxZjY0OGRiN2M5NGUxZDY4N2VlZWM3L2xpYi9WTS9SdW50aW1lLmNwcCNMMTEwMFxuICByZXR1cm4gc291cmNlVXJsID09PSAnSW50ZXJuYWxCeXRlY29kZS5qcyc7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTGluZShsaW5lOiBzdHJpbmcpOiA/SGVybWVzU3RhY2tFbnRyeSB7XG4gIGNvbnN0IGFzRnJhbWUgPSBsaW5lLm1hdGNoKFJFX0ZSQU1FKTtcbiAgaWYgKGFzRnJhbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ0ZSQU1FJyxcbiAgICAgIGZ1bmN0aW9uTmFtZTogYXNGcmFtZVsxXSxcbiAgICAgIGxvY2F0aW9uOlxuICAgICAgICBhc0ZyYW1lWzJdID09PSAnbmF0aXZlJ1xuICAgICAgICAgID8ge3R5cGU6ICdOQVRJVkUnfVxuICAgICAgICAgIDogYXNGcmFtZVszXSA9PT0gJ2FkZHJlc3MgYXQgJ1xuICAgICAgICAgID8gaXNJbnRlcm5hbEJ5dGVjb2RlU291cmNlVXJsKGFzRnJhbWVbNF0pXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnSU5URVJOQUxfQllURUNPREUnLFxuICAgICAgICAgICAgICAgIHNvdXJjZVVybDogYXNGcmFtZVs0XSxcbiAgICAgICAgICAgICAgICBsaW5lMUJhc2VkOiBOdW1iZXIucGFyc2VJbnQoYXNGcmFtZVs1XSwgMTApLFxuICAgICAgICAgICAgICAgIHZpcnR1YWxPZmZzZXQwQmFzZWQ6IE51bWJlci5wYXJzZUludChhc0ZyYW1lWzZdLCAxMCksXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdCWVRFQ09ERScsXG4gICAgICAgICAgICAgICAgc291cmNlVXJsOiBhc0ZyYW1lWzRdLFxuICAgICAgICAgICAgICAgIGxpbmUxQmFzZWQ6IE51bWJlci5wYXJzZUludChhc0ZyYW1lWzVdLCAxMCksXG4gICAgICAgICAgICAgICAgdmlydHVhbE9mZnNldDBCYXNlZDogTnVtYmVyLnBhcnNlSW50KGFzRnJhbWVbNl0sIDEwKSxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIDoge1xuICAgICAgICAgICAgICB0eXBlOiAnU09VUkNFJyxcbiAgICAgICAgICAgICAgc291cmNlVXJsOiBhc0ZyYW1lWzRdLFxuICAgICAgICAgICAgICBsaW5lMUJhc2VkOiBOdW1iZXIucGFyc2VJbnQoYXNGcmFtZVs1XSwgMTApLFxuICAgICAgICAgICAgICBjb2x1bW4xQmFzZWQ6IE51bWJlci5wYXJzZUludChhc0ZyYW1lWzZdLCAxMCksXG4gICAgICAgICAgICB9LFxuICAgIH07XG4gIH1cbiAgY29uc3QgYXNTa2lwcGVkID0gbGluZS5tYXRjaChSRV9TS0lQUEVEKTtcbiAgaWYgKGFzU2tpcHBlZCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnU0tJUFBFRCcsXG4gICAgICBjb3VudDogTnVtYmVyLnBhcnNlSW50KGFzU2tpcHBlZFsxXSwgMTApLFxuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlcm1lc1N0YWNrKHN0YWNrOiBzdHJpbmcpOiBIZXJtZXNQYXJzZWRTdGFjayB7XG4gIGNvbnN0IGxpbmVzID0gc3RhY2suc3BsaXQoL1xcbi8pO1xuICBsZXQgZW50cmllczogQXJyYXk8SGVybWVzU3RhY2tFbnRyeUZyYW1lIHwgSGVybWVzU3RhY2tFbnRyeVNraXBwZWQ+ID0gW107XG4gIGxldCBsYXN0TWVzc2FnZUxpbmUgPSAtMTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7ICsraSkge1xuICAgIGNvbnN0IGxpbmUgPSBsaW5lc1tpXTtcbiAgICBpZiAoIWxpbmUpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCBlbnRyeSA9IHBhcnNlTGluZShsaW5lKTtcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGVudHJpZXMucHVzaChlbnRyeSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgLy8gTm8gbWF0Y2ggLSB3ZSdyZSBzdGlsbCBpbiB0aGUgbWVzc2FnZVxuICAgIGxhc3RNZXNzYWdlTGluZSA9IGk7XG4gICAgZW50cmllcyA9IFtdO1xuICB9XG4gIGNvbnN0IG1lc3NhZ2UgPSBsaW5lcy5zbGljZSgwLCBsYXN0TWVzc2FnZUxpbmUgKyAxKS5qb2luKCdcXG4nKTtcbiAgcmV0dXJuIHttZXNzYWdlLCBlbnRyaWVzfTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQVVBLFlBQVk7O0FBMERaLElBQU1BLFFBQVEsR0FDWix1RUFBdUU7QUFJekUsSUFBTUMsVUFBVSxHQUFHLGlDQUFpQztBQUVwRCxTQUFTQywyQkFBMkJBLENBQUNDLFNBQWlCLEVBQVc7RUFFL0QsT0FBT0EsU0FBUyxLQUFLLHFCQUFxQjtBQUM1QztBQUVBLFNBQVNDLFNBQVNBLENBQUNDLElBQVksRUFBcUI7RUFDbEQsSUFBTUMsT0FBTyxHQUFHRCxJQUFJLENBQUNFLEtBQUssQ0FBQ1AsUUFBUSxDQUFDO0VBQ3BDLElBQUlNLE9BQU8sRUFBRTtJQUNYLE9BQU87TUFDTEUsSUFBSSxFQUFFLE9BQU87TUFDYkMsWUFBWSxFQUFFSCxPQUFPLENBQUMsQ0FBQyxDQUFDO01BQ3hCSSxRQUFRLEVBQ05KLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLEdBQ25CO1FBQUNFLElBQUksRUFBRTtNQUFRLENBQUMsR0FDaEJGLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxhQUFhLEdBQzVCSiwyQkFBMkIsQ0FBQ0ksT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQ3JDO1FBQ0VFLElBQUksRUFBRSxtQkFBbUI7UUFDekJMLFNBQVMsRUFBRUcsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNyQkssVUFBVSxFQUFFQyxNQUFNLENBQUNDLFFBQVEsQ0FBQ1AsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUMzQ1EsbUJBQW1CLEVBQUVGLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDUCxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtNQUNyRCxDQUFDLEdBQ0Q7UUFDRUUsSUFBSSxFQUFFLFVBQVU7UUFDaEJMLFNBQVMsRUFBRUcsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNyQkssVUFBVSxFQUFFQyxNQUFNLENBQUNDLFFBQVEsQ0FBQ1AsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUMzQ1EsbUJBQW1CLEVBQUVGLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDUCxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtNQUNyRCxDQUFDLEdBQ0g7UUFDRUUsSUFBSSxFQUFFLFFBQVE7UUFDZEwsU0FBUyxFQUFFRyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3JCSyxVQUFVLEVBQUVDLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDUCxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQzNDUyxZQUFZLEVBQUVILE1BQU0sQ0FBQ0MsUUFBUSxDQUFDUCxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtNQUM5QztJQUNSLENBQUM7RUFDSDtFQUNBLElBQU1VLFNBQVMsR0FBR1gsSUFBSSxDQUFDRSxLQUFLLENBQUNOLFVBQVUsQ0FBQztFQUN4QyxJQUFJZSxTQUFTLEVBQUU7SUFDYixPQUFPO01BQ0xSLElBQUksRUFBRSxTQUFTO01BQ2ZTLEtBQUssRUFBRUwsTUFBTSxDQUFDQyxRQUFRLENBQUNHLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQ3pDLENBQUM7RUFDSDtBQUNGO0FBRUFFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFNBQVNDLGdCQUFnQkEsQ0FBQ0MsS0FBYSxFQUFxQjtFQUMzRSxJQUFNQyxLQUFLLEdBQUdELEtBQUssQ0FBQ0UsS0FBSyxDQUFDLElBQUksQ0FBQztFQUMvQixJQUFJQyxPQUErRCxHQUFHLEVBQUU7RUFDeEUsSUFBSUMsZUFBZSxHQUFHLENBQUMsQ0FBQztFQUN4QixLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0osS0FBSyxDQUFDSyxNQUFNLEVBQUUsRUFBRUQsQ0FBQyxFQUFFO0lBQ3JDLElBQU1yQixJQUFJLEdBQUdpQixLQUFLLENBQUNJLENBQUMsQ0FBQztJQUNyQixJQUFJLENBQUNyQixJQUFJLEVBQUU7TUFDVDtJQUNGO0lBQ0EsSUFBTXVCLEtBQUssR0FBR3hCLFNBQVMsQ0FBQ0MsSUFBSSxDQUFDO0lBQzdCLElBQUl1QixLQUFLLEVBQUU7TUFDVEosT0FBTyxDQUFDSyxJQUFJLENBQUNELEtBQUssQ0FBQztNQUNuQjtJQUNGO0lBRUFILGVBQWUsR0FBR0MsQ0FBQztJQUNuQkYsT0FBTyxHQUFHLEVBQUU7RUFDZDtFQUNBLElBQU1NLE9BQU8sR0FBR1IsS0FBSyxDQUFDUyxLQUFLLENBQUMsQ0FBQyxFQUFFTixlQUFlLEdBQUcsQ0FBQyxDQUFDLENBQUNPLElBQUksQ0FBQyxJQUFJLENBQUM7RUFDOUQsT0FBTztJQUFDRixPQUFPLEVBQVBBLE9BQU87SUFBRU4sT0FBTyxFQUFQQTtFQUFPLENBQUM7QUFDM0IsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==