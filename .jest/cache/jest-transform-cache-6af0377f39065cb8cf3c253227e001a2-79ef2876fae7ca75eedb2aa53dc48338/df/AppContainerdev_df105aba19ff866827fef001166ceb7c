bef9cca69d7a8bb9c0f426a35b814fb7
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _ReactNativeStyleAttributes = _interopRequireDefault(require("../Components/View/ReactNativeStyleAttributes"));
var _View = _interopRequireDefault(require("../Components/View/View"));
var _DebuggingOverlay = _interopRequireDefault(require("../Debugging/DebuggingOverlay"));
var _useSubscribeToDebuggingOverlayRegistry = _interopRequireDefault(require("../Debugging/useSubscribeToDebuggingOverlayRegistry"));
var _RCTDeviceEventEmitter = _interopRequireDefault(require("../EventEmitter/RCTDeviceEventEmitter"));
var _LogBoxNotificationContainer = _interopRequireDefault(require("../LogBox/LogBoxNotificationContainer"));
var _StyleSheet = _interopRequireDefault(require("../StyleSheet/StyleSheet"));
var _RootTag = require("./RootTag");
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var useEffect = React.useEffect,
  useState = React.useState,
  useCallback = React.useCallback;
var reactDevToolsHook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
if (reactDevToolsHook) {
  reactDevToolsHook.resolveRNStyle = require('../StyleSheet/flattenStyle');
  reactDevToolsHook.nativeStyleEditorValidAttributes = Object.keys(_ReactNativeStyleAttributes.default);
}
var InspectorDeferred = function InspectorDeferred(_ref) {
  var inspectedViewRef = _ref.inspectedViewRef,
    onInspectedViewRerenderRequest = _ref.onInspectedViewRerenderRequest,
    reactDevToolsAgent = _ref.reactDevToolsAgent;
  var Inspector = require('../Inspector/Inspector');
  return (0, _jsxRuntime.jsx)(Inspector, {
    inspectedViewRef: inspectedViewRef,
    onRequestRerenderApp: onInspectedViewRerenderRequest,
    reactDevToolsAgent: reactDevToolsAgent
  });
};
var ReactDevToolsOverlayDeferred = function ReactDevToolsOverlayDeferred(_ref2) {
  var inspectedViewRef = _ref2.inspectedViewRef,
    reactDevToolsAgent = _ref2.reactDevToolsAgent;
  var ReactDevToolsOverlay = require('../Inspector/ReactDevToolsOverlay').default;
  return (0, _jsxRuntime.jsx)(ReactDevToolsOverlay, {
    inspectedViewRef: inspectedViewRef,
    reactDevToolsAgent: reactDevToolsAgent
  });
};
var AppContainer = function AppContainer(_ref3) {
  var children = _ref3.children,
    fabric = _ref3.fabric,
    initialProps = _ref3.initialProps,
    _ref3$internal_exclud = _ref3.internal_excludeInspector,
    internal_excludeInspector = _ref3$internal_exclud === void 0 ? false : _ref3$internal_exclud,
    _ref3$internal_exclud2 = _ref3.internal_excludeLogBox,
    internal_excludeLogBox = _ref3$internal_exclud2 === void 0 ? false : _ref3$internal_exclud2,
    rootTag = _ref3.rootTag,
    showArchitectureIndicator = _ref3.showArchitectureIndicator,
    WrapperComponent = _ref3.WrapperComponent;
  var appContainerRootViewRef = React.useRef(null);
  var innerViewRef = React.useRef(null);
  var debuggingOverlayRef = React.useRef(null);
  (0, _useSubscribeToDebuggingOverlayRegistry.default)(appContainerRootViewRef, debuggingOverlayRef);
  var _useState = useState(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    key = _useState2[0],
    setKey = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    shouldRenderInspector = _useState4[0],
    setShouldRenderInspector = _useState4[1];
  var _useState5 = useState(reactDevToolsHook == null ? void 0 : reactDevToolsHook.reactDevtoolsAgent),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    reactDevToolsAgent = _useState6[0],
    setReactDevToolsAgent = _useState6[1];
  useEffect(function () {
    var inspectorSubscription = null;
    if (!internal_excludeInspector) {
      inspectorSubscription = _RCTDeviceEventEmitter.default.addListener('toggleElementInspector', function () {
        return setShouldRenderInspector(function (value) {
          return !value;
        });
      });
    }
    var reactDevToolsAgentListener = null;
    if (reactDevToolsHook != null && reactDevToolsAgent == null) {
      reactDevToolsAgentListener = setReactDevToolsAgent;
      reactDevToolsHook.on == null ? void 0 : reactDevToolsHook.on('react-devtools', reactDevToolsAgentListener);
    }
    return function () {
      var _inspectorSubscriptio;
      (_inspectorSubscriptio = inspectorSubscription) == null ? void 0 : _inspectorSubscriptio.remove();
      if ((reactDevToolsHook == null ? void 0 : reactDevToolsHook.off) != null && reactDevToolsAgentListener != null) {
        reactDevToolsHook.off('react-devtools', reactDevToolsAgentListener);
      }
    };
  }, []);
  var innerView = (0, _jsxRuntime.jsx)(_View.default, {
    collapsable: reactDevToolsAgent == null && !shouldRenderInspector,
    pointerEvents: "box-none",
    style: styles.container,
    ref: innerViewRef,
    children: children
  }, key);
  if (WrapperComponent != null) {
    innerView = (0, _jsxRuntime.jsx)(WrapperComponent, {
      initialProps: initialProps,
      fabric: fabric === true,
      showArchitectureIndicator: showArchitectureIndicator === true,
      children: innerView
    });
  }
  var onInspectedViewRerenderRequest = useCallback(function () {
    return setKey(function (k) {
      return k + 1;
    });
  }, []);
  return (0, _jsxRuntime.jsx)(_RootTag.RootTagContext.Provider, {
    value: (0, _RootTag.createRootTag)(rootTag),
    children: (0, _jsxRuntime.jsxs)(_View.default, {
      ref: appContainerRootViewRef,
      style: styles.container,
      pointerEvents: "box-none",
      children: [innerView, (0, _jsxRuntime.jsx)(_DebuggingOverlay.default, {
        ref: debuggingOverlayRef
      }), reactDevToolsAgent != null && (0, _jsxRuntime.jsx)(ReactDevToolsOverlayDeferred, {
        inspectedViewRef: innerViewRef,
        reactDevToolsAgent: reactDevToolsAgent
      }), shouldRenderInspector && (0, _jsxRuntime.jsx)(InspectorDeferred, {
        inspectedViewRef: innerViewRef,
        onInspectedViewRerenderRequest: onInspectedViewRerenderRequest,
        reactDevToolsAgent: reactDevToolsAgent
      }), !internal_excludeLogBox && (0, _jsxRuntime.jsx)(_LogBoxNotificationContainer.default, {})]
    })
  });
};
var styles = _StyleSheet.default.create({
  container: {
    flex: 1
  }
});
var _default = exports.default = AppContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,