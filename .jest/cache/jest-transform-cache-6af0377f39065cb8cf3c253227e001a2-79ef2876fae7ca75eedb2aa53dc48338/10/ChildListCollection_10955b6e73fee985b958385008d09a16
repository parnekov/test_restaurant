8ead4abaa055a2528afaa04f9818cdd2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _invariant = _interopRequireDefault(require("invariant"));
var ChildListCollection = exports.default = function () {
  function ChildListCollection() {
    (0, _classCallCheck2.default)(this, ChildListCollection);
    this._cellKeyToChildren = new Map();
    this._childrenToCellKey = new Map();
  }
  return (0, _createClass2.default)(ChildListCollection, [{
    key: "add",
    value: function add(list, cellKey) {
      var _this$_cellKeyToChild;
      (0, _invariant.default)(!this._childrenToCellKey.has(list), 'Trying to add already present child list');
      var cellLists = (_this$_cellKeyToChild = this._cellKeyToChildren.get(cellKey)) != null ? _this$_cellKeyToChild : new Set();
      cellLists.add(list);
      this._cellKeyToChildren.set(cellKey, cellLists);
      this._childrenToCellKey.set(list, cellKey);
    }
  }, {
    key: "remove",
    value: function remove(list) {
      var cellKey = this._childrenToCellKey.get(list);
      (0, _invariant.default)(cellKey != null, 'Trying to remove non-present child list');
      this._childrenToCellKey.delete(list);
      var cellLists = this._cellKeyToChildren.get(cellKey);
      (0, _invariant.default)(cellLists, '_cellKeyToChildren should contain cellKey');
      cellLists.delete(list);
      if (cellLists.size === 0) {
        this._cellKeyToChildren.delete(cellKey);
      }
    }
  }, {
    key: "forEach",
    value: function forEach(fn) {
      for (var listSet of this._cellKeyToChildren.values()) {
        for (var list of listSet) {
          fn(list);
        }
      }
    }
  }, {
    key: "forEachInCell",
    value: function forEachInCell(cellKey, fn) {
      var _this$_cellKeyToChild2;
      var listSet = (_this$_cellKeyToChild2 = this._cellKeyToChildren.get(cellKey)) != null ? _this$_cellKeyToChild2 : [];
      for (var list of listSet) {
        fn(list);
      }
    }
  }, {
    key: "anyInCell",
    value: function anyInCell(cellKey, fn) {
      var _this$_cellKeyToChild3;
      var listSet = (_this$_cellKeyToChild3 = this._cellKeyToChildren.get(cellKey)) != null ? _this$_cellKeyToChild3 : [];
      for (var list of listSet) {
        if (fn(list)) {
          return true;
        }
      }
      return false;
    }
  }, {
    key: "size",
    value: function size() {
      return this._childrenToCellKey.size;
    }
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW52YXJpYW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJDaGlsZExpc3RDb2xsZWN0aW9uIiwiZXhwb3J0cyIsImRlZmF1bHQiLCJfY2xhc3NDYWxsQ2hlY2syIiwiX2NlbGxLZXlUb0NoaWxkcmVuIiwiTWFwIiwiX2NoaWxkcmVuVG9DZWxsS2V5IiwiX2NyZWF0ZUNsYXNzMiIsImtleSIsInZhbHVlIiwiYWRkIiwibGlzdCIsImNlbGxLZXkiLCJfdGhpcyRfY2VsbEtleVRvQ2hpbGQiLCJpbnZhcmlhbnQiLCJoYXMiLCJjZWxsTGlzdHMiLCJnZXQiLCJTZXQiLCJzZXQiLCJyZW1vdmUiLCJkZWxldGUiLCJzaXplIiwiZm9yRWFjaCIsImZuIiwibGlzdFNldCIsInZhbHVlcyIsImZvckVhY2hJbkNlbGwiLCJfdGhpcyRfY2VsbEtleVRvQ2hpbGQyIiwiYW55SW5DZWxsIiwiX3RoaXMkX2NlbGxLZXlUb0NoaWxkMyJdLCJzb3VyY2VzIjpbIkNoaWxkTGlzdENvbGxlY3Rpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hpbGRMaXN0Q29sbGVjdGlvbjxUTGlzdD4ge1xuICBfY2VsbEtleVRvQ2hpbGRyZW46IE1hcDxzdHJpbmcsIFNldDxUTGlzdD4+ID0gbmV3IE1hcCgpO1xuICBfY2hpbGRyZW5Ub0NlbGxLZXk6IE1hcDxUTGlzdCwgc3RyaW5nPiA9IG5ldyBNYXAoKTtcblxuICBhZGQobGlzdDogVExpc3QsIGNlbGxLZXk6IHN0cmluZyk6IHZvaWQge1xuICAgIGludmFyaWFudChcbiAgICAgICF0aGlzLl9jaGlsZHJlblRvQ2VsbEtleS5oYXMobGlzdCksXG4gICAgICAnVHJ5aW5nIHRvIGFkZCBhbHJlYWR5IHByZXNlbnQgY2hpbGQgbGlzdCcsXG4gICAgKTtcblxuICAgIGNvbnN0IGNlbGxMaXN0cyA9IHRoaXMuX2NlbGxLZXlUb0NoaWxkcmVuLmdldChjZWxsS2V5KSA/PyBuZXcgU2V0KCk7XG4gICAgY2VsbExpc3RzLmFkZChsaXN0KTtcbiAgICB0aGlzLl9jZWxsS2V5VG9DaGlsZHJlbi5zZXQoY2VsbEtleSwgY2VsbExpc3RzKTtcblxuICAgIHRoaXMuX2NoaWxkcmVuVG9DZWxsS2V5LnNldChsaXN0LCBjZWxsS2V5KTtcbiAgfVxuXG4gIHJlbW92ZShsaXN0OiBUTGlzdCk6IHZvaWQge1xuICAgIGNvbnN0IGNlbGxLZXkgPSB0aGlzLl9jaGlsZHJlblRvQ2VsbEtleS5nZXQobGlzdCk7XG4gICAgaW52YXJpYW50KGNlbGxLZXkgIT0gbnVsbCwgJ1RyeWluZyB0byByZW1vdmUgbm9uLXByZXNlbnQgY2hpbGQgbGlzdCcpO1xuICAgIHRoaXMuX2NoaWxkcmVuVG9DZWxsS2V5LmRlbGV0ZShsaXN0KTtcblxuICAgIGNvbnN0IGNlbGxMaXN0cyA9IHRoaXMuX2NlbGxLZXlUb0NoaWxkcmVuLmdldChjZWxsS2V5KTtcbiAgICBpbnZhcmlhbnQoY2VsbExpc3RzLCAnX2NlbGxLZXlUb0NoaWxkcmVuIHNob3VsZCBjb250YWluIGNlbGxLZXknKTtcbiAgICBjZWxsTGlzdHMuZGVsZXRlKGxpc3QpO1xuXG4gICAgaWYgKGNlbGxMaXN0cy5zaXplID09PSAwKSB7XG4gICAgICB0aGlzLl9jZWxsS2V5VG9DaGlsZHJlbi5kZWxldGUoY2VsbEtleSk7XG4gICAgfVxuICB9XG5cbiAgZm9yRWFjaChmbjogVExpc3QgPT4gdm9pZCk6IHZvaWQge1xuICAgIGZvciAoY29uc3QgbGlzdFNldCBvZiB0aGlzLl9jZWxsS2V5VG9DaGlsZHJlbi52YWx1ZXMoKSkge1xuICAgICAgZm9yIChjb25zdCBsaXN0IG9mIGxpc3RTZXQpIHtcbiAgICAgICAgZm4obGlzdCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yRWFjaEluQ2VsbChjZWxsS2V5OiBzdHJpbmcsIGZuOiBUTGlzdCA9PiB2b2lkKTogdm9pZCB7XG4gICAgY29uc3QgbGlzdFNldCA9IHRoaXMuX2NlbGxLZXlUb0NoaWxkcmVuLmdldChjZWxsS2V5KSA/PyBbXTtcbiAgICBmb3IgKGNvbnN0IGxpc3Qgb2YgbGlzdFNldCkge1xuICAgICAgZm4obGlzdCk7XG4gICAgfVxuICB9XG5cbiAgYW55SW5DZWxsKGNlbGxLZXk6IHN0cmluZywgZm46IFRMaXN0ID0+IGJvb2xlYW4pOiBib29sZWFuIHtcbiAgICBjb25zdCBsaXN0U2V0ID0gdGhpcy5fY2VsbEtleVRvQ2hpbGRyZW4uZ2V0KGNlbGxLZXkpID8/IFtdO1xuICAgIGZvciAoY29uc3QgbGlzdCBvZiBsaXN0U2V0KSB7XG4gICAgICBpZiAoZm4obGlzdCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fY2hpbGRyZW5Ub0NlbGxLZXkuc2l6ZTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBVUEsSUFBQUEsVUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQWtDLElBRWJDLG1CQUFtQixHQUFBQyxPQUFBLENBQUFDLE9BQUE7RUFBQSxTQUFBRixvQkFBQTtJQUFBLElBQUFHLGdCQUFBLENBQUFELE9BQUEsUUFBQUYsbUJBQUE7SUFBQSxLQUN0Q0ksa0JBQWtCLEdBQTRCLElBQUlDLEdBQUcsQ0FBQyxDQUFDO0lBQUEsS0FDdkRDLGtCQUFrQixHQUF1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