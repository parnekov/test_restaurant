{"version":3,"names":["_findAll","require","_hostComponentNames","_matchTextContent","_makeQueries","queryAllByText","instance","queryAllByTextFn","text","options","arguments","length","undefined","findAll","node","isHostText","matchTextContent","Object","assign","matchDeepestOnly","getMultipleError","String","getMissingError","_ref","makeQueries","getBy","getAllBy","queryBy","queryAllBy","findBy","findAllBy","bindByTextQueries","getByText","getAllByText","queryByText","findByText","findAllByText","exports"],"sources":["../../src/queries/text.ts"],"sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\nimport { findAll } from '../helpers/find-all';\nimport { isHostText } from '../helpers/host-component-names';\nimport { matchTextContent } from '../helpers/matchers/match-text-content';\nimport { TextMatch, TextMatchOptions } from '../matches';\nimport { makeQueries } from './make-queries';\nimport type {\n  FindAllByQuery,\n  FindByQuery,\n  GetAllByQuery,\n  GetByQuery,\n  QueryAllByQuery,\n  QueryByQuery,\n} from './make-queries';\nimport type { CommonQueryOptions } from './options';\n\ntype ByTextOptions = CommonQueryOptions & TextMatchOptions;\n\nconst queryAllByText = (instance: ReactTestInstance): QueryAllByQuery<TextMatch, ByTextOptions> =>\n  function queryAllByTextFn(text, options = {}) {\n    return findAll(instance, (node) => isHostText(node) && matchTextContent(node, text, options), {\n      ...options,\n      matchDeepestOnly: true,\n    });\n  };\n\nconst getMultipleError = (text: TextMatch) => `Found multiple elements with text: ${String(text)}`;\n\nconst getMissingError = (text: TextMatch) => `Unable to find an element with text: ${String(text)}`;\n\nconst { getBy, getAllBy, queryBy, queryAllBy, findBy, findAllBy } = makeQueries(\n  queryAllByText,\n  getMissingError,\n  getMultipleError,\n);\n\nexport type ByTextQueries = {\n  getByText: GetByQuery<TextMatch, ByTextOptions>;\n  getAllByText: GetAllByQuery<TextMatch, ByTextOptions>;\n  queryByText: QueryByQuery<TextMatch, ByTextOptions>;\n  queryAllByText: QueryAllByQuery<TextMatch, ByTextOptions>;\n  findByText: FindByQuery<TextMatch, ByTextOptions>;\n  findAllByText: FindAllByQuery<TextMatch, ByTextOptions>;\n};\n\nexport const bindByTextQueries = (instance: ReactTestInstance): ByTextQueries => ({\n  getByText: getBy(instance),\n  getAllByText: getAllBy(instance),\n  queryByText: queryBy(instance),\n  queryAllByText: queryAllBy(instance),\n  findByText: findBy(instance),\n  findAllByText: findAllBy(instance),\n});\n"],"mappings":";;;;;;AACA,IAAAA,QAAA,GAAAC,OAAA;AACA,IAAAC,mBAAA,GAAAD,OAAA;AACA,IAAAE,iBAAA,GAAAF,OAAA;AAEA,IAAAG,YAAA,GAAAH,OAAA;AAaA,IAAMI,cAAc,GAAI,SAAlBA,cAAcA,CAAIC,QAA2B;EAAA,OACjD,SAASC,gBAAgBA,CAACC,IAAI,EAAgB;IAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAC1C,OAAO,IAAAV,QAAA,CAAAa,OAAO,EAACP,QAAQ,EAAG,UAAAQ,IAAI;MAAA,OAAK,IAAAZ,mBAAA,CAAAa,UAAU,EAACD,IAAI,CAAC,IAAI,IAAAX,iBAAA,CAAAa,gBAAgB,EAACF,IAAI,EAAEN,IAAI,EAAEC,OAAO,CAAC;IAAA,GAAAQ,MAAA,CAAAC,MAAA,KACvFT,OAAO;MACVU,gBAAgB,EAAE;IAAA,EACnB,CAAC;EACJ,CAAC;AAAA;AAEH,IAAMC,gBAAgB,GAAI,SAApBA,gBAAgBA,CAAIZ,IAAe;EAAA,OAAM,sCAAqCa,MAAM,CAACb,IAAI,CAAE,EAAC;AAAA;AAElG,IAAMc,eAAe,GAAI,SAAnBA,eAAeA,CAAId,IAAe;EAAA,OAAM,wCAAuCa,MAAM,CAACb,IAAI,CAAE,EAAC;AAAA;AAEnG,IAAAe,IAAA,GAAoE,IAAAnB,YAAA,CAAAoB,WAAW,EAC7EnB,cAAc,EACdiB,eAAe,EACfF,gBACF,CAAC;EAJOK,KAAK,GAAAF,IAAA,CAALE,KAAK;EAAEC,QAAQ,GAAAH,IAAA,CAARG,QAAQ;EAAEC,OAAO,GAAAJ,IAAA,CAAPI,OAAO;EAAEC,UAAU,GAAAL,IAAA,CAAVK,UAAU;EAAEC,MAAM,GAAAN,IAAA,CAANM,MAAM;EAAEC,SAAA,GAAAP,IAAA,CAAAO,SAAA;AAe/C,IAAMC,iBAAiB,GAAI,SAArBA,iBAAiBA,CAAIzB,QAA2B;EAAA,OAAqB;IAChF0B,SAAS,EAAEP,KAAK,CAACnB,QAAQ,CAAC;IAC1B2B,YAAY,EAAEP,QAAQ,CAACpB,QAAQ,CAAC;IAChC4B,WAAW,EAAEP,OAAO,CAACrB,QAAQ,CAAC;IAC9BD,cAAc,EAAEuB,UAAU,CAACtB,QAAQ,CAAC;IACpC6B,UAAU,EAAEN,MAAM,CAACvB,QAAQ,CAAC;IAC5B8B,aAAa,EAAEN,SAAS,CAACxB,QAAQ;EACnC,CAAC;AAAA,CAAC;AAAC+B,OAAA,CAAAN,iBAAA,GAAAA,iBAAA","ignoreList":[]}