8b7c4c03e1be6ff6584d8244e48a0a55
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindByTextQueries = void 0;
var _findAll = require("../helpers/find-all");
var _hostComponentNames = require("../helpers/host-component-names");
var _matchTextContent = require("../helpers/matchers/match-text-content");
var _makeQueries = require("./make-queries");
var queryAllByText = function queryAllByText(instance) {
  return function queryAllByTextFn(text) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return (0, _findAll.findAll)(instance, function (node) {
      return (0, _hostComponentNames.isHostText)(node) && (0, _matchTextContent.matchTextContent)(node, text, options);
    }, Object.assign({}, options, {
      matchDeepestOnly: true
    }));
  };
};
var getMultipleError = function getMultipleError(text) {
  return `Found multiple elements with text: ${String(text)}`;
};
var getMissingError = function getMissingError(text) {
  return `Unable to find an element with text: ${String(text)}`;
};
var _ref = (0, _makeQueries.makeQueries)(queryAllByText, getMissingError, getMultipleError),
  getBy = _ref.getBy,
  getAllBy = _ref.getAllBy,
  queryBy = _ref.queryBy,
  queryAllBy = _ref.queryAllBy,
  findBy = _ref.findBy,
  findAllBy = _ref.findAllBy;
var bindByTextQueries = function bindByTextQueries(instance) {
  return {
    getByText: getBy(instance),
    getAllByText: getAllBy(instance),
    queryByText: queryBy(instance),
    queryAllByText: queryAllBy(instance),
    findByText: findBy(instance),
    findAllByText: findAllBy(instance)
  };
};
exports.bindByTextQueries = bindByTextQueries;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZmluZEFsbCIsInJlcXVpcmUiLCJfaG9zdENvbXBvbmVudE5hbWVzIiwiX21hdGNoVGV4dENvbnRlbnQiLCJfbWFrZVF1ZXJpZXMiLCJxdWVyeUFsbEJ5VGV4dCIsImluc3RhbmNlIiwicXVlcnlBbGxCeVRleHRGbiIsInRleHQiLCJvcHRpb25zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiZmluZEFsbCIsIm5vZGUiLCJpc0hvc3RUZXh0IiwibWF0Y2hUZXh0Q29udGVudCIsIk9iamVjdCIsImFzc2lnbiIsIm1hdGNoRGVlcGVzdE9ubHkiLCJnZXRNdWx0aXBsZUVycm9yIiwiU3RyaW5nIiwiZ2V0TWlzc2luZ0Vycm9yIiwiX3JlZiIsIm1ha2VRdWVyaWVzIiwiZ2V0QnkiLCJnZXRBbGxCeSIsInF1ZXJ5QnkiLCJxdWVyeUFsbEJ5IiwiZmluZEJ5IiwiZmluZEFsbEJ5IiwiYmluZEJ5VGV4dFF1ZXJpZXMiLCJnZXRCeVRleHQiLCJnZXRBbGxCeVRleHQiLCJxdWVyeUJ5VGV4dCIsImZpbmRCeVRleHQiLCJmaW5kQWxsQnlUZXh0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9xdWVyaWVzL3RleHQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBSZWFjdFRlc3RJbnN0YW5jZSB9IGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInO1xuaW1wb3J0IHsgZmluZEFsbCB9IGZyb20gJy4uL2hlbHBlcnMvZmluZC1hbGwnO1xuaW1wb3J0IHsgaXNIb3N0VGV4dCB9IGZyb20gJy4uL2hlbHBlcnMvaG9zdC1jb21wb25lbnQtbmFtZXMnO1xuaW1wb3J0IHsgbWF0Y2hUZXh0Q29udGVudCB9IGZyb20gJy4uL2hlbHBlcnMvbWF0Y2hlcnMvbWF0Y2gtdGV4dC1jb250ZW50JztcbmltcG9ydCB7IFRleHRNYXRjaCwgVGV4dE1hdGNoT3B0aW9ucyB9IGZyb20gJy4uL21hdGNoZXMnO1xuaW1wb3J0IHsgbWFrZVF1ZXJpZXMgfSBmcm9tICcuL21ha2UtcXVlcmllcyc7XG5pbXBvcnQgdHlwZSB7XG4gIEZpbmRBbGxCeVF1ZXJ5LFxuICBGaW5kQnlRdWVyeSxcbiAgR2V0QWxsQnlRdWVyeSxcbiAgR2V0QnlRdWVyeSxcbiAgUXVlcnlBbGxCeVF1ZXJ5LFxuICBRdWVyeUJ5UXVlcnksXG59IGZyb20gJy4vbWFrZS1xdWVyaWVzJztcbmltcG9ydCB0eXBlIHsgQ29tbW9uUXVlcnlPcHRpb25zIH0gZnJvbSAnLi9vcHRpb25zJztcblxudHlwZSBCeVRleHRPcHRpb25zID0gQ29tbW9uUXVlcnlPcHRpb25zICYgVGV4dE1hdGNoT3B0aW9ucztcblxuY29uc3QgcXVlcnlBbGxCeVRleHQgPSAoaW5zdGFuY2U6IFJlYWN0VGVzdEluc3RhbmNlKTogUXVlcnlBbGxCeVF1ZXJ5PFRleHRNYXRjaCwgQnlUZXh0T3B0aW9ucz4gPT5cbiAgZnVuY3Rpb24gcXVlcnlBbGxCeVRleHRGbih0ZXh0LCBvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gZmluZEFsbChpbnN0YW5jZSwgKG5vZGUpID0+IGlzSG9zdFRleHQobm9kZSkgJiYgbWF0Y2hUZXh0Q29udGVudChub2RlLCB0ZXh0LCBvcHRpb25zKSwge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIG1hdGNoRGVlcGVzdE9ubHk6IHRydWUsXG4gICAgfSk7XG4gIH07XG5cbmNvbnN0IGdldE11bHRpcGxlRXJyb3IgPSAodGV4dDogVGV4dE1hdGNoKSA9PiBgRm91bmQgbXVsdGlwbGUgZWxlbWVudHMgd2l0aCB0ZXh0OiAke1N0cmluZyh0ZXh0KX1gO1xuXG5jb25zdCBnZXRNaXNzaW5nRXJyb3IgPSAodGV4dDogVGV4dE1hdGNoKSA9PiBgVW5hYmxlIHRvIGZpbmQgYW4gZWxlbWVudCB3aXRoIHRleHQ6ICR7U3RyaW5nKHRleHQpfWA7XG5cbmNvbnN0IHsgZ2V0QnksIGdldEFsbEJ5LCBxdWVyeUJ5LCBxdWVyeUFsbEJ5LCBmaW5kQnksIGZpbmRBbGxCeSB9ID0gbWFrZVF1ZXJpZXMoXG4gIHF1ZXJ5QWxsQnlUZXh0LFxuICBnZXRNaXNzaW5nRXJyb3IsXG4gIGdldE11bHRpcGxlRXJyb3IsXG4pO1xuXG5leHBvcnQgdHlwZSBCeVRleHRRdWVyaWVzID0ge1xuICBnZXRCeVRleHQ6IEdldEJ5UXVlcnk8VGV4dE1hdGNoLCBCeVRleHRPcHRpb25zPjtcbiAgZ2V0QWxsQnlUZXh0OiBHZXRBbGxCeVF1ZXJ5PFRleHRNYXRjaCwgQnlUZXh0T3B0aW9ucz47XG4gIHF1ZXJ5QnlUZXh0OiBRdWVyeUJ5UXVlcnk8VGV4dE1hdGNoLCBCeVRleHRPcHRpb25zPjtcbiAgcXVlcnlBbGxCeVRleHQ6IFF1ZXJ5QWxsQnlRdWVyeTxUZXh0TWF0Y2gsIEJ5VGV4dE9wdGlvbnM+O1xuICBmaW5kQnlUZXh0OiBGaW5kQnlRdWVyeTxUZXh0TWF0Y2gsIEJ5VGV4dE9wdGlvbnM+O1xuICBmaW5kQWxsQnlUZXh0OiBGaW5kQWxsQnlRdWVyeTxUZXh0TWF0Y2gsIEJ5VGV4dE9wdGlvbnM+O1xufTtcblxuZXhwb3J0IGNvbnN0IGJpbmRCeVRleHRRdWVyaWVzID0gKGluc3RhbmNlOiBSZWFjdFRlc3RJbnN0YW5jZSk6IEJ5VGV4dFF1ZXJpZXMgPT4gKHtcbiAgZ2V0QnlUZXh0OiBnZXRCeShpbnN0YW5jZSksXG4gIGdldEFsbEJ5VGV4dDogZ2V0QWxsQnkoaW5zdGFuY2UpLFxuICBxdWVyeUJ5VGV4dDogcXVlcnlCeShpbnN0YW5jZSksXG4gIHF1ZXJ5QWxsQnlUZXh0OiBxdWVyeUFsbEJ5KGluc3RhbmNlKSxcbiAgZmluZEJ5VGV4dDogZmluZEJ5KGluc3RhbmNlKSxcbiAgZmluZEFsbEJ5VGV4dDogZmluZEFsbEJ5KGluc3RhbmNlKSxcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxJQUFBQSxRQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxtQkFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsaUJBQUEsR0FBQUYsT0FBQTtBQUVBLElBQUFHLFlBQUEsR0FBQUgsT0FBQTtBQWFBLElBQU1JLGNBQWMsR0FBSSxTQUFsQkEsY0FBY0EsQ0FBSUMsUUFBMkI7RUFBQSxPQUNqRCxTQUFTQyxnQkFBZ0JBLENBQUNDLElBQUksRUFBZ0I7SUFBQSxJQUFkQyxPQUFPLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLENBQUMsQ0FBQztJQUMxQyxPQUFPLElBQUFWLFFBQUEsQ0FBQWEsT0FBTyxFQUFDUCxRQUFRLEVBQUcsVUFBQVEsSUFBSTtNQUFBLE9BQUssSUFBQVosbUJBQUEsQ0FBQWEsVUFBVSxFQUFDRCxJQUFJLENBQUMsSUFBSSxJQUFBWCxpQkFBQSxDQUFBYSxnQkFBZ0IsRUFBQ0YsSUFBSSxFQUFFTixJQUFJLEVBQUVDLE9BQU8sQ0FBQztJQUFBLEdBQUFRLE1BQUEsQ0FBQUMsTUFBQSxLQUN2RlQsT0FBTztNQUNWVSxnQkFBZ0IsRUFBRTtJQUFBLEVBQ25CLENBQUM7RUFDSixDQUFDO0FBQUE7QUFFSCxJQUFNQyxnQkFBZ0IsR0FBSSxTQUFwQkEsZ0JBQWdCQSxDQUFJWixJQUFlO0VBQUEsT0FBTSxzQ0FBcUNhLE1BQU0sQ0FBQ2IsSUFBSSxDQUFFLEVBQUM7QUFBQTtBQUVsRyxJQUFNYyxlQUFlLEdBQUksU0FBbkJBLGVBQWVBLENBQUlkLElBQWU7RUFBQSxPQUFNLHdDQUF1Q2EsTUFBTSxDQUFDYixJQUFJLENBQUUsRUFBQztBQUFBO0FBRW5HLElBQUFlLElBQUEsR0FBb0UsSUFBQW5CLFlBQUEsQ0FBQW9CLFdBQVcsRUFDN0VuQixjQUFjLEVBQ2RpQixlQUFlLEVBQ2ZGLGdCQUNGLENBQUM7RUFKT0ssS0FBSyxHQUFBRixJQUFBLENBQUxFLEtBQUs7RUFBRUMsUUFBUSxHQUFBSCxJQUFBLENBQVJHLFFBQVE7RUFBRUMsT0FBTyxHQUFBSixJQUFBLENBQVBJLE9BQU87RUFBRUMsVUFBVSxHQUFBTCxJQUFBLENBQVZLLFVBQVU7RUFBRUMsTUFBTSxHQUFBTixJQUFBLENBQU5NLE1BQU07RUFBRUMsU0FBQSxHQUFBUCxJQUFBLENBQUFPLFNBQUE7QUFlL0MsSUFBTUMsaUJBQWlCLEdBQUksU0FBckJBLGlCQUFpQkEsQ0FBSXpCLFFBQTJCO0VBQUEsT0FBcUI7SUFDaEYwQixTQUFTLEVBQUVQLEtBQUssQ0FBQ25CLFFBQVEsQ0FBQztJQUMxQjJCLFlBQVksRUFBRVAsUUFBUSxDQUFDcEIsUUFBUSxDQUFDO0lBQ2hDNEIsV0FBVyxFQUFFUCxPQUFPLENBQUNyQixRQUFRLENBQUM7SUFDOUJELGNBQWMsRUFBRXVCLFVBQVUsQ0FBQ3RCLFFBQVEsQ0FBQztJQUNwQzZCLFVBQVUsRUFBRU4sTUFBTSxDQUFDdkIsUUFBUSxDQUFDO0lBQzVCOEIsYUFBYSxFQUFFTixTQUFTLENBQUN4QixRQUFRO0VBQ25DLENBQUM7QUFBQSxDQUFDO0FBQUMrQixPQUFBLENBQUFOLGlCQUFBLEdBQUFBLGlCQUFBIiwiaWdub3JlTGlzdCI6W119