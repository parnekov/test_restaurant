e6a9fd795884416cec965e0694a3737b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _common = _interopRequireDefault(require("./common"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "start", "end", "colors", "locations", "useAngle", "angleCenter", "angle", "style"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var convertPoint = function convertPoint(name, point) {
  if (Array.isArray(point)) {
    console.warn(`LinearGradient '${name}' property should be an object with fields 'x' and 'y', ` + 'Array type is deprecated.');
    return {
      x: point[0],
      y: point[1]
    };
  }
  return point;
};
var LinearGradient = exports.default = function (_Component) {
  function LinearGradient() {
    (0, _classCallCheck2.default)(this, LinearGradient);
    return _callSuper(this, LinearGradient, arguments);
  }
  (0, _inherits2.default)(LinearGradient, _Component);
  return (0, _createClass2.default)(LinearGradient, [{
    key: "setNativeProps",
    value: function setNativeProps(props) {
      this.gradientRef.setNativeProps(props);
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;
      var _this$props = this.props,
        children = _this$props.children,
        start = _this$props.start,
        end = _this$props.end,
        colors = _this$props.colors,
        locations = _this$props.locations,
        useAngle = _this$props.useAngle,
        angleCenter = _this$props.angleCenter,
        angle = _this$props.angle,
        style = _this$props.style,
        otherProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
      if (colors && locations && colors.length !== locations.length) {
        console.warn('LinearGradient colors and locations props should be arrays of the same length');
      }
      return (0, _jsxRuntime.jsxs)(_reactNative.View, Object.assign({
        ref: function ref(component) {
          _this.gradientRef = component;
        }
      }, otherProps, {
        style: style,
        children: [(0, _jsxRuntime.jsx)(_common.default, {
          style: {
            position: 'absolute',
            top: 0,
            left: 0,
            bottom: 0,
            right: 0
          },
          colors: colors.map(_reactNative.processColor),
          startPoint: convertPoint('start', start),
          endPoint: convertPoint('end', end),
          locations: locations ? locations.slice(0, colors.length) : null,
          useAngle: useAngle,
          angleCenter: convertPoint('angleCenter', angleCenter),
          angle: angle
        }), children]
      }));
    }
  }]);
}(_react.Component);
LinearGradient.defaultProps = {
  start: {
    x: 0.5,
    y: 0.0
  },
  end: {
    x: 0.5,
    y: 1.0
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,