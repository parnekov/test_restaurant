ab2933f1e809aca491a71a8e64277cbf
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getActionFromState;
function getActionFromState(state, options) {
  var _state$index;
  var _normalizedConfig$scr;
  var normalizedConfig = options ? createNormalizedConfigItem(options) : {};
  var routes = state.index != null ? state.routes.slice(0, state.index + 1) : state.routes;
  if (routes.length === 0) {
    return undefined;
  }
  if (!(routes.length === 1 && routes[0].key === undefined || routes.length === 2 && routes[0].key === undefined && routes[0].name === (normalizedConfig === null || normalizedConfig === void 0 ? void 0 : normalizedConfig.initialRouteName) && routes[1].key === undefined)) {
    return {
      type: 'RESET',
      payload: state
    };
  }
  var route = state.routes[(_state$index = state.index) != null ? _state$index : state.routes.length - 1];
  var current = route === null || route === void 0 ? void 0 : route.state;
  var config = normalizedConfig === null || normalizedConfig === void 0 ? void 0 : (_normalizedConfig$scr = normalizedConfig.screens) === null || _normalizedConfig$scr === void 0 ? void 0 : _normalizedConfig$scr[route === null || route === void 0 ? void 0 : route.name];
  var params = Object.assign({}, route.params);
  var payload = route ? {
    name: route.name,
    path: route.path,
    params: params
  } : undefined;
  while (current) {
    var _config, _config2, _config2$screens;
    if (current.routes.length === 0) {
      return undefined;
    }
    var _routes = current.index != null ? current.routes.slice(0, current.index + 1) : current.routes;
    var _route = _routes[_routes.length - 1];
    Object.assign(params, {
      initial: undefined,
      screen: undefined,
      params: undefined,
      state: undefined
    });
    if (_routes.length === 1 && _routes[0].key === undefined) {
      params.initial = true;
      params.screen = _route.name;
    } else if (_routes.length === 2 && _routes[0].key === undefined && _routes[0].name === ((_config = config) === null || _config === void 0 ? void 0 : _config.initialRouteName) && _routes[1].key === undefined) {
      params.initial = false;
      params.screen = _route.name;
    } else {
      params.state = current;
      break;
    }
    if (_route.state) {
      params.params = Object.assign({}, _route.params);
      params = params.params;
    } else {
      params.path = _route.path;
      params.params = _route.params;
    }
    current = _route.state;
    config = (_config2 = config) === null || _config2 === void 0 ? void 0 : (_config2$screens = _config2.screens) === null || _config2$screens === void 0 ? void 0 : _config2$screens[_route.name];
  }
  if (!payload) {
    return;
  }
  return {
    type: 'NAVIGATE',
    payload: payload
  };
}
var createNormalizedConfigItem = function createNormalizedConfigItem(config) {
  return typeof config === 'object' && config != null ? {
    initialRouteName: config.initialRouteName,
    screens: config.screens != null ? createNormalizedConfigs(config.screens) : undefined
  } : {};
};
var createNormalizedConfigs = function createNormalizedConfigs(options) {
  return Object.entries(options).reduce(function (acc, _ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
      k = _ref2[0],
      v = _ref2[1];
    acc[k] = createNormalizedConfigItem(v);
    return acc;
  }, {});
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXRBY3Rpb25Gcm9tU3RhdGUiLCJzdGF0ZSIsIm9wdGlvbnMiLCJfc3RhdGUkaW5kZXgiLCJfbm9ybWFsaXplZENvbmZpZyRzY3IiLCJub3JtYWxpemVkQ29uZmlnIiwiY3JlYXRlTm9ybWFsaXplZENvbmZpZ0l0ZW0iLCJyb3V0ZXMiLCJpbmRleCIsInNsaWNlIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwia2V5IiwibmFtZSIsImluaXRpYWxSb3V0ZU5hbWUiLCJ0eXBlIiwicGF5bG9hZCIsInJvdXRlIiwiY3VycmVudCIsImNvbmZpZyIsInNjcmVlbnMiLCJwYXJhbXMiLCJPYmplY3QiLCJhc3NpZ24iLCJwYXRoIiwiX2NvbmZpZyIsIl9jb25maWcyIiwiX2NvbmZpZzIkc2NyZWVucyIsImluaXRpYWwiLCJzY3JlZW4iLCJjcmVhdGVOb3JtYWxpemVkQ29uZmlncyIsImVudHJpZXMiLCJyZWR1Y2UiLCJhY2MiLCJfcmVmIiwiX3JlZjIiLCJfc2xpY2VkVG9BcnJheTIiLCJkZWZhdWx0IiwiayIsInYiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvZ2V0QWN0aW9uRnJvbVN0YXRlLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUE4QmUsU0FBU0Esa0JBQWtCQSxDQUN4Q0MsS0FBb0MsRUFDcENDLE9BQWlCLEVBQ21EO0VBQUEsSUFBQUMsWUFBQTtFQUFBLElBQUFDLHFCQUFBO0VBRXBFLElBQU1DLGdCQUFnQixHQUFHSCxPQUFPLEdBQzVCSSwwQkFBMEIsQ0FBQ0osT0FBTyxDQUFnQyxHQUNsRSxDQUFDLENBQUM7RUFFTixJQUFNSyxNQUFNLEdBQ1ZOLEtBQUssQ0FBQ08sS0FBSyxJQUFJLElBQUksR0FBR1AsS0FBSyxDQUFDTSxNQUFNLENBQUNFLEtBQUssQ0FBQyxDQUFDLEVBQUVSLEtBQUssQ0FBQ08sS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHUCxLQUFLLENBQUNNLE1BQU07RUFFN0UsSUFBSUEsTUFBTSxDQUFD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