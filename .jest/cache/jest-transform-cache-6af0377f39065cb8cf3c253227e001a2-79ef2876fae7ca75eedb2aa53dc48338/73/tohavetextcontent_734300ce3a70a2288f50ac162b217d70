886aef418c4db7df1c92016479fa6ea9
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveTextContent = void 0;
var jest_matcher_utils_1 = require("jest-matcher-utils");
var utils_1 = require("./utils");
function collectNormalizedText(element) {
  var childrenText = collectChildrenText(element).join('');
  return (0, utils_1.normalize)(childrenText);
}
function collectChildrenText(element) {
  if (typeof element === 'string') return [element];
  if (!(element != null && element.children)) return [];
  var result = [];
  element.children.forEach(function (child) {
    result.push.apply(result, (0, _toConsumableArray2.default)(collectChildrenText(child)));
  });
  return result;
}
function toHaveTextContent(element, checkWith) {
  var _this = this;
  (0, utils_1.checkReactElement)(element, toHaveTextContent, this);
  var textContent = collectNormalizedText(element);
  return {
    pass: (0, utils_1.matches)(textContent, checkWith),
    message: function message() {
      var to = _this.isNot ? 'not to' : 'to';
      return (0, utils_1.getMessage)((0, jest_matcher_utils_1.matcherHint)(`${_this.isNot ? '.not' : ''}.toHaveTextContent`, 'element', ''), `Expected element ${to} have text content`, checkWith, 'Received', textContent);
    }
  };
}
exports.toHaveTextContent = toHaveTextContent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl90b0NvbnN1bWFibGVBcnJheTIiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvSGF2ZVRleHRDb250ZW50IiwiamVzdF9tYXRjaGVyX3V0aWxzXzEiLCJ1dGlsc18xIiwiY29sbGVjdE5vcm1hbGl6ZWRUZXh0IiwiZWxlbWVudCIsImNoaWxkcmVuVGV4dCIsImNvbGxlY3RDaGlsZHJlblRleHQiLCJqb2luIiwibm9ybWFsaXplIiwiY2hpbGRyZW4iLCJyZXN1bHQiLCJmb3JFYWNoIiwiY2hpbGQiLCJwdXNoIiwiYXBwbHkiLCJkZWZhdWx0IiwiY2hlY2tXaXRoIiwiX3RoaXMiLCJjaGVja1JlYWN0RWxlbWVudCIsInRleHRDb250ZW50IiwicGFzcyIsIm1hdGNoZXMiLCJtZXNzYWdlIiwidG8iLCJpc05vdCIsImdldE1lc3NhZ2UiLCJtYXRjaGVySGludCJdLCJzb3VyY2VzIjpbInRvLWhhdmUtdGV4dC1jb250ZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50b0hhdmVUZXh0Q29udGVudCA9IHZvaWQgMDtcbmNvbnN0IGplc3RfbWF0Y2hlcl91dGlsc18xID0gcmVxdWlyZShcImplc3QtbWF0Y2hlci11dGlsc1wiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmZ1bmN0aW9uIGNvbGxlY3ROb3JtYWxpemVkVGV4dChlbGVtZW50KSB7XG4gICAgY29uc3QgY2hpbGRyZW5UZXh0ID0gY29sbGVjdENoaWxkcmVuVGV4dChlbGVtZW50KS5qb2luKCcnKTtcbiAgICByZXR1cm4gKDAsIHV0aWxzXzEubm9ybWFsaXplKShjaGlsZHJlblRleHQpO1xufVxuZnVuY3Rpb24gY29sbGVjdENoaWxkcmVuVGV4dChlbGVtZW50KSB7XG4gICAgaWYgKHR5cGVvZiBlbGVtZW50ID09PSAnc3RyaW5nJylcbiAgICAgICAgcmV0dXJuIFtlbGVtZW50XTtcbiAgICBpZiAoIWVsZW1lbnQ/LmNoaWxkcmVuKVxuICAgICAgICByZXR1cm4gW107XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgZWxlbWVudC5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgICAgICByZXN1bHQucHVzaCguLi5jb2xsZWN0Q2hpbGRyZW5UZXh0KGNoaWxkKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHRvSGF2ZVRleHRDb250ZW50KGVsZW1lbnQsIGNoZWNrV2l0aCkge1xuICAgICgwLCB1dGlsc18xLmNoZWNrUmVhY3RFbGVtZW50KShlbGVtZW50LCB0b0hhdmVUZXh0Q29udGVudCwgdGhpcyk7XG4gICAgY29uc3QgdGV4dENvbnRlbnQgPSBjb2xsZWN0Tm9ybWFsaXplZFRleHQoZWxlbWVudCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcGFzczogKDAsIHV0aWxzXzEubWF0Y2hlcykodGV4dENvbnRlbnQsIGNoZWNrV2l0aCksXG4gICAgICAgIG1lc3NhZ2U6ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRvID0gdGhpcy5pc05vdCA/ICdub3QgdG8nIDogJ3RvJztcbiAgICAgICAgICAgIHJldHVybiAoMCwgdXRpbHNfMS5nZXRNZXNzYWdlKSgoMCwgamVzdF9tYXRjaGVyX3V0aWxzXzEubWF0Y2hlckhpbnQpKGAke3RoaXMuaXNOb3QgPyAnLm5vdCcgOiAnJ30udG9IYXZlVGV4dENvbnRlbnRgLCAnZWxlbWVudCcsICcnKSwgYEV4cGVjdGVkIGVsZW1lbnQgJHt0b30gaGF2ZSB0ZXh0IGNvbnRlbnRgLCBjaGVja1dpdGgsICdSZWNlaXZlZCcsIHRleHRDb250ZW50KTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZXhwb3J0cy50b0hhdmVUZXh0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