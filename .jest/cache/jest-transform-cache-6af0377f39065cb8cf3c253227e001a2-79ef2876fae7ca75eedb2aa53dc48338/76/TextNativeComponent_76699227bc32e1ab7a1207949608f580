655a7e59e743dad8698a6485d07ceb18
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NativeVirtualText = exports.NativeText = void 0;
var _ViewConfig = require("../NativeComponent/ViewConfig");
var _UIManager = _interopRequireDefault(require("../ReactNative/UIManager"));
var _createReactNativeComponentClass = _interopRequireDefault(require("../Renderer/shims/createReactNativeComponentClass"));
var textViewConfig = {
  validAttributes: {
    isHighlighted: true,
    isPressable: true,
    numberOfLines: true,
    ellipsizeMode: true,
    allowFontScaling: true,
    dynamicTypeRamp: true,
    maxFontSizeMultiplier: true,
    disabled: true,
    selectable: true,
    selectionColor: true,
    adjustsFontSizeToFit: true,
    minimumFontScale: true,
    textBreakStrategy: true,
    onTextLayout: true,
    onInlineViewLayout: true,
    dataDetectorType: true,
    android_hyphenationFrequency: true,
    lineBreakStrategyIOS: true
  },
  directEventTypes: {
    topTextLayout: {
      registrationName: 'onTextLayout'
    },
    topInlineViewLayout: {
      registrationName: 'onInlineViewLayout'
    }
  },
  uiViewClassName: 'RCTText'
};
var virtualTextViewConfig = {
  validAttributes: {
    isHighlighted: true,
    isPressable: true,
    maxFontSizeMultiplier: true
  },
  uiViewClassName: 'RCTVirtualText'
};
var NativeText = exports.NativeText = (0, _createReactNativeComponentClass.default)('RCTText', function () {
  return (0, _ViewConfig.createViewConfig)(textViewConfig);
});
var NativeVirtualText = exports.NativeVirtualText = !global.RN$Bridgeless && !_UIManager.default.hasViewManagerConfig('RCTVirtualText') ? NativeText : (0, _createReactNativeComponentClass.default)('RCTVirtualText', function () {
  return (0, _ViewConfig.createViewConfig)(virtualTextViewConfig);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfVmlld0NvbmZpZyIsInJlcXVpcmUiLCJfVUlNYW5hZ2VyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9jcmVhdGVSZWFjdE5hdGl2ZUNvbXBvbmVudENsYXNzIiwidGV4dFZpZXdDb25maWciLCJ2YWxpZEF0dHJpYnV0ZXMiLCJpc0hpZ2hsaWdodGVkIiwiaXNQcmVzc2FibGUiLCJudW1iZXJPZkxpbmVzIiwiZWxsaXBzaXplTW9kZSIsImFsbG93Rm9udFNjYWxpbmciLCJkeW5hbWljVHlwZVJhbXAiLCJtYXhGb250U2l6ZU11bHRpcGxpZXIiLCJkaXNhYmxlZCIsInNlbGVjdGFibGUiLCJzZWxlY3Rpb25Db2xvciIsImFkanVzdHNGb250U2l6ZVRvRml0IiwibWluaW11bUZvbnRTY2FsZSIsInRleHRCcmVha1N0cmF0ZWd5Iiwib25UZXh0TGF5b3V0Iiwib25JbmxpbmVWaWV3TGF5b3V0IiwiZGF0YURldGVjdG9yVHlwZSIsImFuZHJvaWRfaHlwaGVuYXRpb25GcmVxdWVuY3kiLCJsaW5lQnJlYWtTdHJhdGVneUlPUyIsImRpcmVjdEV2ZW50VHlwZXMiLCJ0b3BUZXh0TGF5b3V0IiwicmVnaXN0cmF0aW9uTmFtZSIsInRvcElubGluZVZpZXdMYXlvdXQiLCJ1aVZpZXdDbGFzc05hbWUiLCJ2aXJ0dWFsVGV4dFZpZXdDb25maWciLCJOYXRpdmVUZXh0IiwiZXhwb3J0cyIsImNyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3MiLCJjcmVhdGVWaWV3Q29uZmlnIiwiTmF0aXZlVmlydHVhbFRleHQiLCJnbG9iYWwiLCJSTiRCcmlkZ2VsZXNzIiwiVUlNYW5hZ2VyIiwiaGFzVmlld01hbmFnZXJDb25maWciXSwic291cmNlcyI6WyJUZXh0TmF0aXZlQ29tcG9uZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCB7Y3JlYXRlVmlld0NvbmZpZ30gZnJvbSAnLi4vTmF0aXZlQ29tcG9uZW50L1ZpZXdDb25maWcnO1xuaW1wb3J0IFVJTWFuYWdlciBmcm9tICcuLi9SZWFjdE5hdGl2ZS9VSU1hbmFnZXInO1xuaW1wb3J0IGNyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3MgZnJvbSAnLi4vUmVuZGVyZXIvc2hpbXMvY3JlYXRlUmVhY3ROYXRpdmVDb21wb25lbnRDbGFzcyc7XG5pbXBvcnQge3R5cGUgSG9zdENvbXBvbmVudH0gZnJvbSAnLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmVUeXBlcyc7XG5pbXBvcnQge3R5cGUgUHJvY2Vzc2VkQ29sb3JWYWx1ZX0gZnJvbSAnLi4vU3R5bGVTaGVldC9wcm9jZXNzQ29sb3InO1xuaW1wb3J0IHt0eXBlIFByZXNzRXZlbnR9IGZyb20gJy4uL1R5cGVzL0NvcmVFdmVudFR5cGVzJztcbmltcG9ydCB7dHlwZSBUZXh0UHJvcHN9IGZyb20gJy4vVGV4dFByb3BzJztcblxudHlwZSBOYXRpdmVUZXh0UHJvcHMgPSAkUmVhZE9ubHk8e1xuICAuLi5UZXh0UHJvcHMsXG4gIGlzSGlnaGxpZ2h0ZWQ/OiA/Ym9vbGVhbixcbiAgc2VsZWN0aW9uQ29sb3I/OiA/UHJvY2Vzc2VkQ29sb3JWYWx1ZSxcbiAgb25DbGljaz86ID8oZXZlbnQ6IFByZXNzRXZlbnQpID0+IG1peGVkLFxuICAvLyBUaGlzIGlzIG9ubHkgbmVlZGVkIGZvciBwbGF0Zm9ybXMgdGhhdCBvcHRpbWl6ZSB0ZXh0IGhpdCB0ZXN0aW5nLCBlLmcuLFxuICAvLyByZWFjdC1uYXRpdmUtd2luZG93cy4gSXQgY2FuIGJlIHVzZWQgdG8gb25seSBoaXQgdGVzdCB2aXJ0dWFsIHRleHQgc3BhbnNcbiAgLy8gdGhhdCBoYXZlIHByZXNzYWJsZSBldmVudHMgYXR0YWNoZWQgdG8gdGhlbS5cbiAgaXNQcmVzc2FibGU/OiA/Ym9vbGVhbixcbn0+O1xuXG5jb25zdCB0ZXh0Vmlld0NvbmZpZyA9IHtcbiAgdmFsaWRBdHRyaWJ1dGVzOiB7XG4gICAgaXNIaWdobGlnaHRlZDogdHJ1ZSxcbiAgICBpc1ByZXNzYWJsZTogdHJ1ZSxcbiAgICBudW1iZXJPZkxpbmVzOiB0cnVlLFxuICAgIGVsbGlwc2l6ZU1vZGU6IHRydWUsXG4gICAgYWxsb3dGb250U2NhbGluZzogdHJ1ZSxcbiAgICBkeW5hbWljVHlwZVJhbXA6IHRydWUsXG4gICAgbWF4Rm9udFNpemVNdWx0aXBsaWVyOiB0cnVlLFxuICAgIGRpc2FibGVkOiB0cnVlLFxuICAgIHNlbGVjdGFibGU6IHRydWUsXG4gICAgc2VsZWN0aW9uQ29sb3I6IHRydWUsXG4gICAgYWRqdXN0c0ZvbnRTaXplVG9GaXQ6IHRydWUsXG4gICAgbWluaW11bUZvbnRTY2FsZTogdHJ1ZSxcbiAgICB0ZXh0QnJlYWtTdHJhdGVneTogdHJ1ZSxcbiAgICBvblRleHRMYXlvdXQ6IHRydWUsXG4gICAgb25JbmxpbmVWaWV3TGF5b3V0OiB0cnVlLFxuICAgIGRhdGFEZXRlY3RvclR5cGU6IHRydWUsXG4gICAgYW5kcm9pZF9oeXBoZW5hdGlvbkZyZXF1ZW5jeTogdHJ1ZSxcbiAgICBsaW5lQnJlYWtTdHJhdGVneUlPUzogdHJ1ZSxcbiAgfSxcbiAgZGlyZWN0RXZlbnRUeXBlczoge1xuICAgIHRvcFRleHRMYXlvdXQ6IHtcbiAgICAgIHJlZ2lzdHJhdGlvbk5hbWU6ICdvblRleHRMYXlvdXQnLFxuICAgIH0sXG4gICAgdG9wSW5saW5lVmlld0xheW91dDoge1xuICAgICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uSW5saW5lVmlld0xheW91dCcsXG4gICAgfSxcbiAgfSxcbiAgdWlWaWV3Q2xhc3NOYW1lOiAnUkNUVGV4dCcsXG59O1xuXG5jb25zdCB2aXJ0dWFsVGV4dFZpZXdDb25maWcgPSB7XG4gIHZhbGlkQXR0cmlidXRlczoge1xuICAgIGlzSGlnaGxpZ2h0ZWQ6IHRydWUsXG4gICAgaXNQcmVzc2FibGU6IHRydWUsXG4gICAgbWF4Rm9udFNpemVNdWx0aXBsaWVyOiB0cnVlLFxuICB9LFxuICB1aVZpZXdDbGFzc05hbWU6ICdSQ1RWaXJ0dWFsVGV4dCcsXG59O1xuXG5leHBvcnQgY29uc3QgTmF0aXZlVGV4dDogSG9zdENvbXBvbmVudDxOYXRpdmVUZXh0UHJvcHM+ID1cbiAgKGNyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3MoJ1JDVFRleHQnLCAoKSA9PlxuICAgIGNyZWF0ZVZpZXdDb25maWcodGV4dFZpZXdDb25maWcpLFxuICApOiBhbnkpO1xuXG5leHBvcnQgY29uc3QgTmF0aXZlVmlydHVhbFRleHQ6IEhvc3RDb21wb25lbnQ8TmF0aXZlVGV4dFByb3BzPiA9XG4gICFnbG9iYWwuUk4kQnJpZGdlbGVzcyAmJiAhVUlNYW5hZ2VyLmhhc1ZpZXdNYW5hZ2VyQ29uZmlnKCdSQ1RWaXJ0dWFsVGV4dCcpXG4gICAgPyBOYXRpdmVUZXh0XG4gICAgOiAoY3JlYXRlUmVhY3ROYXRpdmVDb21wb25lbnRDbGFzcygnUkNUVmlydHVhbFRleHQnLCAoKSA9PlxuICAgICAgICBjcmVhdGVWaWV3Q29uZmlnKHZpcnR1YWxUZXh0Vmlld0NvbmZpZyksXG4gICAgICApOiBhbnkpO1xuIl0sIm1hcHBpbmdzIjoiOzs7OztBQVVBLElBQUFBLFdBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFHLGdDQUFBLEdBQUFELHNCQUFBLENBQUFGLE9BQUE7QUFpQkEsSUFBTUksY0FBYyxHQUFHO0VBQ3JCQyxlQUFlLEVBQUU7SUFDZkMsYUFBYSxFQUFFLElBQUk7SUFDbkJDLFdBQVcsRUFBRSxJQUFJO0lBQ2pCQyxhQUFhLEVBQUUsSUFBSTtJQUNuQkMsYUFBYSxFQUFFLElBQUk7SUFDbkJDLGdCQUFnQixFQUFFLElBQUk7SUFDdEJDLGVBQWUsRUFBRSxJQUFJO0lBQ3JCQyxxQkFBcUIsRUFBRSxJQUFJO0lBQzNCQyxRQUFRLEVBQUUsSUFBSTtJQUNkQyxVQUFVLEVBQUUsSUFBSTtJQUNoQkMsY0FBYyxFQUFFLElBQUk7SUFDcEJDLG9CQUFvQixFQUFFLElBQUk7SUFDMUJDLGdCQUFnQixFQUFFLElBQUk7SUFDdEJDLGlCQUFpQixFQUFFLElBQUk7SUFDdkJDLFlBQVksRUFBRSxJQUFJO0lBQ2xCQyxrQkFBa0IsRUFBRSxJQUFJO0lBQ3hCQyxnQkFBZ0IsRUFBRSxJQUFJO0lBQ3RCQyw0QkFBNEIsRUFBRSxJQUFJO0lBQ2xDQyxvQkFBb0IsRUFBRTtFQUN4QixDQUFDO0VBQ0RDLGdCQUFnQixFQUFFO0lBQ2hCQyxhQUFhLEVBQUU7TUFDYkMsZ0JBQWdCLEVBQUU7SUFDcEIsQ0FBQztJQUNEQyxtQkFBbUIsRUFBRTtNQUNuQkQsZ0JBQWdCLEVBQUU7SUFDcEI7RUFDRixDQUFDO0VBQ0RFLGVBQWUsRUFBRTtBQUNuQixDQUFDO0FBRUQsSUFBTUMscUJBQXFCLEdBQUc7RUFDNUJ4QixlQUFlLEVBQUU7SUFDZkMsYUFBYSxFQUFFLElBQUk7SUFDbkJDLFdBQVcsRUFBRSxJQUFJO0lBQ2pCSyxxQkFBcUIsRUFBRTtFQUN6QixDQUFDO0VBQ0RnQixlQUFlLEVBQUU7QUFDbkIsQ0FBQztBQUVNLElBQU1FLFVBQTBDLEdBQUFDLE9BQUEsQ0FBQUQsVUFBQSxHQUNwRCxJQUFBRSx3Q0FBK0IsRUFBQyxTQUFTLEVBQUU7RUFBQSxPQUMxQyxJQUFBQyw0QkFBZ0IsRUFBQzdCLGNBQWMsQ0FBQztBQUFBLENBQ2xDLENBQU87QUFFRixJQUFNOEIsaUJBQWlELEdBQUFILE9BQUEsQ0FBQUcsaUJBQUEsR0FDNUQsQ0FBQ0MsTUFBTSxDQUFDQyxhQUFhLElBQUksQ0FBQ0Msa0JBQVMsQ0FBQ0Msb0JBQW9CLENBQUMsZ0JBQWdCLENBQUMsR0FDdEVSLFVBQVUsR0FDVCxJQUFBRSx3Q0FBK0IsRUFBQyxnQkFBZ0IsRUFBRTtFQUFBLE9BQ2pELElBQUFDLDRCQUFnQixFQUFDSixxQkFBcUIsQ0FBQztBQUFBLENBQ3pDLENBQU8iLCJpZ25vcmVMaXN0IjpbXX0=