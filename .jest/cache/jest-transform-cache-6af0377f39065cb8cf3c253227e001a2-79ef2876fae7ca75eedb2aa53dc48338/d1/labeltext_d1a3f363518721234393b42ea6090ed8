e2f273a384dd48ab0ac0cd2e45abdced
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindByLabelTextQueries = void 0;
var _findAll = require("../helpers/find-all");
var _matchLabelText = require("../helpers/matchers/match-label-text");
var _makeQueries = require("./make-queries");
function queryAllByLabelText(instance) {
  return function (text, queryOptions) {
    return (0, _findAll.findAll)(instance, function (node) {
      return (0, _matchLabelText.matchLabelText)(instance, node, text, queryOptions);
    }, queryOptions);
  };
}
var getMultipleError = function getMultipleError(labelText) {
  return `Found multiple elements with accessibility label: ${String(labelText)} `;
};
var getMissingError = function getMissingError(labelText) {
  return `Unable to find an element with accessibility label: ${String(labelText)}`;
};
var _ref = (0, _makeQueries.makeQueries)(queryAllByLabelText, getMissingError, getMultipleError),
  getBy = _ref.getBy,
  getAllBy = _ref.getAllBy,
  queryBy = _ref.queryBy,
  queryAllBy = _ref.queryAllBy,
  findBy = _ref.findBy,
  findAllBy = _ref.findAllBy;
var bindByLabelTextQueries = function bindByLabelTextQueries(instance) {
  return {
    getByLabelText: getBy(instance),
    getAllByLabelText: getAllBy(instance),
    queryByLabelText: queryBy(instance),
    queryAllByLabelText: queryAllBy(instance),
    findByLabelText: findBy(instance),
    findAllByLabelText: findAllBy(instance)
  };
};
exports.bindByLabelTextQueries = bindByLabelTextQueries;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZmluZEFsbCIsInJlcXVpcmUiLCJfbWF0Y2hMYWJlbFRleHQiLCJfbWFrZVF1ZXJpZXMiLCJxdWVyeUFsbEJ5TGFiZWxUZXh0IiwiaW5zdGFuY2UiLCJ0ZXh0IiwicXVlcnlPcHRpb25zIiwiZmluZEFsbCIsIm5vZGUiLCJtYXRjaExhYmVsVGV4dCIsImdldE11bHRpcGxlRXJyb3IiLCJsYWJlbFRleHQiLCJTdHJpbmciLCJnZXRNaXNzaW5nRXJyb3IiLCJfcmVmIiwibWFrZVF1ZXJpZXMiLCJnZXRCeSIsImdldEFsbEJ5IiwicXVlcnlCeSIsInF1ZXJ5QWxsQnkiLCJmaW5kQnkiLCJmaW5kQWxsQnkiLCJiaW5kQnlMYWJlbFRleHRRdWVyaWVzIiwiZ2V0QnlMYWJlbFRleHQiLCJnZXRBbGxCeUxhYmVsVGV4dCIsInF1ZXJ5QnlMYWJlbFRleHQiLCJmaW5kQnlMYWJlbFRleHQiLCJmaW5kQWxsQnlMYWJlbFRleHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3F1ZXJpZXMvbGFiZWwtdGV4dC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0VGVzdEluc3RhbmNlIH0gZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcic7XG5pbXBvcnQgeyBmaW5kQWxsIH0gZnJvbSAnLi4vaGVscGVycy9maW5kLWFsbCc7XG5pbXBvcnQgeyBUZXh0TWF0Y2gsIFRleHRNYXRjaE9wdGlvbnMgfSBmcm9tICcuLi9tYXRjaGVzJztcbmltcG9ydCB7IG1hdGNoTGFiZWxUZXh0IH0gZnJvbSAnLi4vaGVscGVycy9tYXRjaGVycy9tYXRjaC1sYWJlbC10ZXh0JztcbmltcG9ydCB7IG1ha2VRdWVyaWVzIH0gZnJvbSAnLi9tYWtlLXF1ZXJpZXMnO1xuaW1wb3J0IHR5cGUge1xuICBGaW5kQWxsQnlRdWVyeSxcbiAgRmluZEJ5UXVlcnksXG4gIEdldEFsbEJ5UXVlcnksXG4gIEdldEJ5UXVlcnksXG4gIFF1ZXJ5QWxsQnlRdWVyeSxcbiAgUXVlcnlCeVF1ZXJ5LFxufSBmcm9tICcuL21ha2UtcXVlcmllcyc7XG5pbXBvcnQgeyBDb21tb25RdWVyeU9wdGlvbnMgfSBmcm9tICcuL29wdGlvbnMnO1xuXG50eXBlIEJ5TGFiZWxUZXh0T3B0aW9ucyA9IENvbW1vblF1ZXJ5T3B0aW9ucyAmIFRleHRNYXRjaE9wdGlvbnM7XG5cbmZ1bmN0aW9uIHF1ZXJ5QWxsQnlMYWJlbFRleHQoaW5zdGFuY2U6IFJlYWN0VGVzdEluc3RhbmNlKSB7XG4gIHJldHVybiAodGV4dDogVGV4dE1hdGNoLCBxdWVyeU9wdGlvbnM/OiBCeUxhYmVsVGV4dE9wdGlvbnMpID0+IHtcbiAgICByZXR1cm4gZmluZEFsbChcbiAgICAgIGluc3RhbmNlLFxuICAgICAgKG5vZGUpID0+IG1hdGNoTGFiZWxUZXh0KGluc3RhbmNlLCBub2RlLCB0ZXh0LCBxdWVyeU9wdGlvbnMpLFxuICAgICAgcXVlcnlPcHRpb25zLFxuICAgICk7XG4gIH07XG59XG5cbmNvbnN0IGdldE11bHRpcGxlRXJyb3IgPSAobGFiZWxUZXh0OiBUZXh0TWF0Y2gpID0+XG4gIGBGb3VuZCBtdWx0aXBsZSBlbGVtZW50cyB3aXRoIGFjY2Vzc2liaWxpdHkgbGFiZWw6ICR7U3RyaW5nKGxhYmVsVGV4dCl9IGA7XG5jb25zdCBnZXRNaXNzaW5nRXJyb3IgPSAobGFiZWxUZXh0OiBUZXh0TWF0Y2gpID0+XG4gIGBVbmFibGUgdG8gZmluZCBhbiBlbGVtZW50IHdpdGggYWNjZXNzaWJpbGl0eSBsYWJlbDogJHtTdHJpbmcobGFiZWxUZXh0KX1gO1xuXG5jb25zdCB7IGdldEJ5LCBnZXRBbGxCeSwgcXVlcnlCeSwgcXVlcnlBbGxCeSwgZmluZEJ5LCBmaW5kQWxsQnkgfSA9IG1ha2VRdWVyaWVzKFxuICBxdWVyeUFsbEJ5TGFiZWxUZXh0LFxuICBnZXRNaXNzaW5nRXJyb3IsXG4gIGdldE11bHRpcGxlRXJyb3IsXG4pO1xuXG5leHBvcnQgdHlwZSBCeUxhYmVsVGV4dFF1ZXJpZXMgPSB7XG4gIGdldEJ5TGFiZWxUZXh0OiBHZXRCeVF1ZXJ5PFRleHRNYXRjaCwgQnlMYWJlbFRleHRPcHRpb25zPjtcbiAgZ2V0QWxsQnlMYWJlbFRleHQ6IEdldEFsbEJ5UXVlcnk8VGV4dE1hdGNoLCBCeUxhYmVsVGV4dE9wdGlvbnM+O1xuICBxdWVyeUJ5TGFiZWxUZXh0OiBRdWVyeUJ5UXVlcnk8VGV4dE1hdGNoLCBCeUxhYmVsVGV4dE9wdGlvbnM+O1xuICBxdWVyeUFsbEJ5TGFiZWxUZXh0OiBRdWVyeUFsbEJ5UXVlcnk8VGV4dE1hdGNoLCBCeUxhYmVsVGV4dE9wdGlvbnM+O1xuICBmaW5kQnlMYWJlbFRleHQ6IEZpbmRCeVF1ZXJ5PFRleHRNYXRjaCwgQnlMYWJlbFRleHRPcHRpb25zPjtcbiAgZmluZEFsbEJ5TGFiZWxUZXh0OiBGaW5kQWxsQnlRdWVyeTxUZXh0TWF0Y2gsIEJ5TGFiZWxUZXh0T3B0aW9ucz47XG59O1xuXG5leHBvcnQgY29uc3QgYmluZEJ5TGFiZWxUZXh0UXVlcmllcyA9IChpbnN0YW5jZTogUmVhY3RUZXN0SW5zdGFuY2UpOiBCeUxhYmVsVGV4dFF1ZXJpZXMgPT4gKHtcbiAgZ2V0QnlMYWJlbFRleHQ6IGdldEJ5KGluc3RhbmNlKSxcbiAgZ2V0QWxsQnlMYWJlbFRleHQ6IGdldEFsbEJ5KGluc3RhbmNlKSxcbiAgcXVlcnlCeUxhYmVsVGV4dDogcXVlcnlCeShpbnN0YW5jZSksXG4gIHF1ZXJ5QWxsQnlMYWJlbFRleHQ6IHF1ZXJ5QWxsQnkoaW5zdGFuY2UpLFxuICBmaW5kQnlMYWJlbFRleHQ6IGZpbmRCeShpbnN0YW5jZSksXG4gIGZpbmRBbGxCeUxhYmVsVGV4dDogZmluZEFsbEJ5KGluc3RhbmNlKSxcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxJQUFBQSxRQUFBLEdBQUFDLE9BQUE7QUFFQSxJQUFBQyxlQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxZQUFBLEdBQUFGLE9BQUE7QUFhQSxTQUFTRyxtQkFBbUJBLENBQUNDLFFBQTJCLEVBQUU7RUFDeEQsT0FBTyxVQUFDQyxJQUFlLEVBQUVDLFlBQWlDLEVBQUs7SUFDN0QsT0FBTyxJQUFBUCxRQUFBLENBQUFRLE9BQU8sRUFDWkgsUUFBUSxFQUNQLFVBQUFJLElBQUk7TUFBQSxPQUFLLElBQUFQLGVBQUEsQ0FBQVEsY0FBYyxFQUFDTCxRQUFRLEVBQUVJLElBQUksRUFBRUgsSUFBSSxFQUFFQyxZQUFZLENBQUM7SUFBQSxHQUM1REEsWUFDRixDQUFDO0VBQ0gsQ0FBQztBQUNIO0FBRUEsSUFBTUksZ0JBQWdCLEdBQUksU0FBcEJBLGdCQUFnQkEsQ0FBSUMsU0FBb0I7RUFBQSxPQUMzQyxxREFBb0RDLE1BQU0sQ0FBQ0QsU0FBUyxDQUFFLEdBQUU7QUFBQTtBQUMzRSxJQUFNRSxlQUFlLEdBQUksU0FBbkJBLGVBQWVBLENBQUlGLFNBQW9CO0VBQUEsT0FDMUMsdURBQXNEQyxNQUFNLENBQUNELFNBQVMsQ0FBRSxFQUFDO0FBQUE7QUFFNUUsSUFBQUcsSUFBQSxHQUFvRSxJQUFBWixZQUFBLENBQUFhLFdBQVcsRUFDN0VaLG1CQUFtQixFQUNuQlUsZUFBZSxFQUNmSCxnQkFDRixDQUFDO0VBSk9NLEtBQUssR0FBQUYsSUFBQSxDQUFMRSxLQUFLO0VBQUVDLFFBQVEsR0FBQUgsSUFBQSxDQUFSRyxRQUFRO0VBQUVDLE9BQU8sR0FBQUosSUFBQSxDQUFQSSxPQUFPO0VBQUVDLFVBQVUsR0FBQUwsSUFBQSxDQUFWSyxVQUFVO0VBQUVDLE1BQU0sR0FBQU4sSUFBQSxDQUFOTSxNQUFNO0VBQUVDLFNBQUEsR0FBQVAsSUFBQSxDQUFBTyxTQUFBO0FBZS9DLElBQU1DLHNCQUFzQixHQUFJLFNBQTFCQSxzQkFBc0JBLENBQUlsQixRQUEyQjtFQUFBLE9BQTBCO0lBQzFGbUIsY0FBYyxFQUFFUCxLQUFLLENBQUNaLFFBQVEsQ0FBQztJQUMvQm9CLGlCQUFpQixFQUFFUCxRQUFRLENBQUNiLFFBQVEsQ0FBQztJQUNyQ3FCLGdCQUFnQixFQUFFUCxPQUFPLENBQUNkLFFBQVEsQ0FBQztJQUNuQ0QsbUJBQW1CLEVBQUVnQixVQUFVLENBQUNmLFFBQVEsQ0FBQztJQUN6Q3NCLGVBQWUsRUFBRU4sTUFBTSxDQUFDaEIsUUFBUSxDQUFDO0lBQ2pDdUIsa0JBQWtCLEVBQUVOLFNBQVMsQ0FBQ2pCLFFBQVE7RUFDeEMsQ0FBQztBQUFBLENBQUM7QUFBQ3dCLE9BQUEsQ0FBQU4sc0JBQUEsR0FBQUEsc0JBQUEiLCJpZ25vcmVMaXN0IjpbXX0=