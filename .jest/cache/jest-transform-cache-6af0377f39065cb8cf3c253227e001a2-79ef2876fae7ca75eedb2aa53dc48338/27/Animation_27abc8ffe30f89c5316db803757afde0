654bf476210d3dd64a311d7689f3ffb1
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _NativeAnimatedHelper = _interopRequireDefault(require("../NativeAnimatedHelper"));
var _AnimatedProps = _interopRequireDefault(require("../nodes/AnimatedProps"));
var startNativeAnimationNextId = 1;
var Animation = exports.default = function () {
  function Animation() {
    (0, _classCallCheck2.default)(this, Animation);
  }
  return (0, _createClass2.default)(Animation, [{
    key: "start",
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
  }, {
    key: "stop",
    value: function stop() {
      if (this._nativeId) {
        _NativeAnimatedHelper.default.API.stopAnimation(this._nativeId);
      }
    }
  }, {
    key: "__getNativeAnimationConfig",
    value: function __getNativeAnimationConfig() {
      throw new Error('This animation type cannot be offloaded to native');
    }
  }, {
    key: "__debouncedOnEnd",
    value: function __debouncedOnEnd(result) {
      var onEnd = this.__onEnd;
      this.__onEnd = null;
      onEnd && onEnd(result);
    }
  }, {
    key: "__findAnimatedPropsNodes",
    value: function __findAnimatedPropsNodes(node) {
      var result = [];
      if (node instanceof _AnimatedProps.default) {
        result.push(node);
        return result;
      }
      for (var child of node.__getChildren()) {
        result.push.apply(result, (0, _toConsumableArray2.default)(this.__findAnimatedPropsNodes(child)));
      }
      return result;
    }
  }, {
    key: "__startNativeAnimation",
    value: function __startNativeAnimation(animatedValue) {
      var _this = this;
      var startNativeAnimationWaitId = `${startNativeAnimationNextId}:startAnimation`;
      startNativeAnimationNextId += 1;
      _NativeAnimatedHelper.default.API.setWaitingForIdentifier(startNativeAnimationWaitId);
      try {
        var config = this.__getNativeAnimationConfig();
        animatedValue.__makeNative(config.platformConfig);
        this._nativeId = _NativeAnimatedHelper.default.generateNewAnimationId();
        _NativeAnimatedHelper.default.API.startAnimatingNode(this._nativeId, animatedValue.__getNativeTag(), config, function (result) {
          _this.__debouncedOnEnd(result);
          var value = result.value;
          if (value != null) {
            animatedValue.__onAnimatedValueUpdateReceived(value);
            _this.__findAnimatedPropsNodes(animatedValue).forEach(function (node) {
              return node.update();
            });
          }
        });
      } catch (e) {
        throw e;
      } finally {
        _NativeAnimatedHelper.default.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);
      }
    }
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,