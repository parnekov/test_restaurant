b46fda185d7ffbddeac9f18ab3e0bb01
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _reactRedux = require("react-redux");
var _hooks = require("../../store/hooks");
var _ordersSlice = require("../../store/slices/ordersSlice");
var _OrderListItem = _interopRequireDefault(require("../../components/OrderListItem"));
var _CheckBox = _interopRequireDefault(require("../../components/CheckBox"));
var _OrderScreenWrapper = _interopRequireDefault(require("../../components/OrderScreenWrapper"));
var _Total = _interopRequireDefault(require("../../components/Total"));
var _PayButton = _interopRequireDefault(require("../../components/PayButton"));
var _theme = require("../../utils/theme");
var _builders = require("../../utils/builders");
var _constants = require("../../utils/constants");
var _routes = require("../../navigation/routes");
var _styles = _interopRequireDefault(require("./styles"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var testID = _routes.SCREEN_NAMES.MY_ORDER;
var MyOrder = function MyOrder() {
  var dispatch = (0, _reactRedux.useDispatch)();
  var restaurantId = (0, _hooks.useAppSelector)(_ordersSlice.selectRestaurantId);
  var qrCodeName = (0, _hooks.useAppSelector)(_ordersSlice.selectRestaurantQrCodeName);
  var navigation = (0, _native.useNavigation)();
  var myOrder = (0, _hooks.useAppSelector)(_ordersSlice.selectMyOrder);
  var isSelectedAll = myOrder == null ? void 0 : myOrder.orderItems.every(function (item) {
    return item.checked;
  });
  (0, _react.useLayoutEffect)(function () {
    navigation.setOptions({
      tabBarLabel: _routes.SCREEN_NAMES.MY_ORDER
    });
  }, [navigation]);
  (0, _react.useEffect)(function () {
    dispatch((0, _ordersSlice.getOrdersThunk)());
  }, [dispatch]);
  var checkUncheckAll = (0, _react.useCallback)(function (isCheck) {
    return dispatch((0, _ordersSlice.checkUncheckMyOrderItems)({
      checked: isCheck
    }));
  }, [dispatch]);
  var makeData = (0, _react.useMemo)(function () {
    var newItems = myOrder == null ? void 0 : myOrder.orderItems.filter(function (item) {
      return item.status === _constants.ORDER_STATUS.New;
    });
    var inProgressItems = myOrder == null ? void 0 : myOrder.orderItems.filter(function (item) {
      return item.status === _constants.ORDER_STATUS.InProgress;
    });
    var readyItems = myOrder == null ? void 0 : myOrder.orderItems.filter(function (item) {
      return item.status === _constants.ORDER_STATUS.Ready;
    });
    var data = [];
    if (newItems != null && newItems.length) {
      data.push({
        title: 'New',
        data: newItems
      });
    }
    if (inProgressItems != null && inProgressItems.length) {
      data.push({
        title: 'In Progress',
        data: inProgressItems
      });
    }
    if (readyItems != null && readyItems.length) {
      data.push({
        title: 'Ready',
        data: readyItems
      });
    }
    return data;
  }, [myOrder]);
  var totalPrice = (0, _react.useCallback)(function () {
    return (myOrder == null ? void 0 : myOrder.orderItems.reduce(function (acc, curr) {
      return curr.checked && !curr.isPaid ? acc + curr.amount * curr.price : acc;
    }, 0)) || 0;
  }, [myOrder]);
  var onChangeCheckOrderItem = (0, _react.useCallback)(function (_ref) {
    var check = _ref.check,
      itemId = _ref.itemId;
    dispatch((0, _ordersSlice.checkUncheckMyOrderItems)({
      checked: check,
      itemId: itemId
    }));
  }, [dispatch]);
  var onChangeAmountItem = (0, _react.useCallback)(function (_ref2) {
    var updatedAmount = _ref2.updatedAmount,
      itemId = _ref2.itemId;
    dispatch((0, _ordersSlice.changeAmountMyOrderItem)({
      updatedAmount: updatedAmount,
      itemId: itemId
    }));
  }, [dispatch]);
  var renderItem = (0, _react.useCallback)(function (_ref3) {
    var item = _ref3.item;
    return (0, _jsxRuntime.jsx)(_OrderListItem.default, {
      orderItem: item,
      onChangeCheckbox: onChangeCheckOrderItem,
      onChangeAmount: onChangeAmountItem
    });
  }, [onChangeCheckOrderItem, onChangeAmountItem]);
  var renderSectionHeader = (0, _react.useCallback)(function (_ref4) {
    var title = _ref4.section.title;
    return (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: _styles.default.sectionHeader,
      children: title
    });
  }, []);
  var amountItems = (0, _react.useMemo)(function () {
    var _myOrder$orderItems;
    return myOrder == null ? void 0 : (_myOrder$orderItems = myOrder.orderItems) == null ? void 0 : _myOrder$orderItems.reduce(function (acc, curr) {
      return curr.checked && !(curr != null && curr.isPaid) ? acc + curr.amount : acc;
    }, 0);
  }, [myOrder]);
  var renderSectionFooter = (0, _react.useCallback)(function () {
    return (0, _jsxRuntime.jsx)(_Total.default, {
      amountItems: amountItems,
      price: totalPrice()
    });
  }, [amountItems, totalPrice]);
  var payOrders = function payOrders() {
    var body = (0, _builders.makeMyOrderBodyToPost)(myOrder);
    dispatch((0, _ordersSlice.postOrdersThunk)({
      restaurantId: restaurantId,
      qrCodeName: qrCodeName,
      body: body
    }));
  };
  return (0, _jsxRuntime.jsxs)(_OrderScreenWrapper.default, {
    testId: `${testID}-container`,
    children: [(0, _jsxRuntime.jsx)(_reactNative.SectionList, {
      testID: `${testID}-list`,
      contentContainerStyle: _styles.default.sectionContainer,
      ListHeaderComponent: (0, _jsxRuntime.jsx)(_CheckBox.default, {
        checked: isSelectedAll,
        title: isSelectedAll ? 'Unselect all' : 'Select all',
        onChange: checkUncheckAll,
        style: _styles.default.checkbox,
        checkedColor: _theme.COLORS.GRADIENT_TOP,
        testID: `${testID}-list-header-checkbox`
      }),
      sections: makeData,
      keyExtractor: function keyExtractor(item, index) {
        return item.id + index;
      },
      renderItem: renderItem,
      renderSectionHeader: renderSectionHeader,
      ListFooterComponent: renderSectionFooter
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _styles.default.payButtonContainer,
      children: (0, _jsxRuntime.jsx)(_PayButton.default, {
        amountItems: amountItems,
        price: totalPrice(),
        onPress: payOrders
      })
    })]
  });
};
var _default = exports.default = MyOrder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,