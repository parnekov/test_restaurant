{"version":3,"names":["Object","defineProperty","exports","value","default","InteractionManager","require","TouchHistoryMath","currentCentroidXOfTouchesChangedAfter","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY","PanResponder","_initializeGestureState","gestureState","moveX","moveY","x0","y0","dx","dy","vx","vy","numberActiveTouches","_accountsForMovesUpTo","_updateGestureStateOnMove","touchHistory","movedAfter","prevX","x","prevY","y","nextDX","nextDY","dt","mostRecentTimeStamp","create","config","interactionState","handle","stateID","Math","random","panHandlers","onStartShouldSetResponder","event","onStartShouldSetPanResponder","onMoveShouldSetResponder","onMoveShouldSetPanResponder","onStartShouldSetResponderCapture","nativeEvent","touches","length","onStartShouldSetPanResponderCapture","onMoveShouldSetResponderCapture","onMoveShouldSetPanResponderCapture","onResponderGrant","createInteractionHandle","onPanResponderGrant","onShouldBlockNativeResponder","onResponderReject","clearInteractionHandle","onPanResponderReject","onResponderRelease","onPanResponderRelease","onResponderStart","onPanResponderStart","onResponderMove","onPanResponderMove","onResponderEnd","onPanResponderEnd","onResponderTerminate","onPanResponderTerminate","onResponderTerminationRequest","onPanResponderTerminationRequest","getInteractionHandle","callback","_default"],"sources":["PanResponder.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {PressEvent} from '../Types/CoreEventTypes';\n\nconst InteractionManager = require('./InteractionManager');\nconst TouchHistoryMath = require('./TouchHistoryMath');\n\nconst currentCentroidXOfTouchesChangedAfter =\n  TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;\nconst currentCentroidYOfTouchesChangedAfter =\n  TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;\nconst previousCentroidXOfTouchesChangedAfter =\n  TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;\nconst previousCentroidYOfTouchesChangedAfter =\n  TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;\nconst currentCentroidX = TouchHistoryMath.currentCentroidX;\nconst currentCentroidY = TouchHistoryMath.currentCentroidY;\n\n/**\n * `PanResponder` reconciles several touches into a single gesture. It makes\n * single-touch gestures resilient to extra touches, and can be used to\n * recognize simple multi-touch gestures.\n *\n * By default, `PanResponder` holds an `InteractionManager` handle to block\n * long-running JS events from interrupting active gestures.\n *\n * It provides a predictable wrapper of the responder handlers provided by the\n * [gesture responder system](docs/gesture-responder-system.html).\n * For each handler, it provides a new `gestureState` object alongside the\n * native event object:\n *\n * ```\n * onPanResponderMove: (event, gestureState) => {}\n * ```\n *\n * A native event is a synthetic touch event with the following form:\n *\n *  - `nativeEvent`\n *      + `changedTouches` - Array of all touch events that have changed since the last event\n *      + `identifier` - The ID of the touch\n *      + `locationX` - The X position of the touch, relative to the element\n *      + `locationY` - The Y position of the touch, relative to the element\n *      + `pageX` - The X position of the touch, relative to the root element\n *      + `pageY` - The Y position of the touch, relative to the root element\n *      + `target` - The node id of the element receiving the touch event\n *      + `timestamp` - A time identifier for the touch, useful for velocity calculation\n *      + `touches` - Array of all current touches on the screen\n *\n * A `gestureState` object has the following:\n *\n *  - `stateID` - ID of the gestureState- persisted as long as there at least\n *     one touch on screen\n *  - `moveX` - the latest screen coordinates of the recently-moved touch\n *  - `moveY` - the latest screen coordinates of the recently-moved touch\n *  - `x0` - the screen coordinates of the responder grant\n *  - `y0` - the screen coordinates of the responder grant\n *  - `dx` - accumulated distance of the gesture since the touch started\n *  - `dy` - accumulated distance of the gesture since the touch started\n *  - `vx` - current velocity of the gesture\n *  - `vy` - current velocity of the gesture\n *  - `numberActiveTouches` - Number of touches currently on screen\n *\n * ### Basic Usage\n *\n * ```\n *   componentWillMount: function() {\n *     this._panResponder = PanResponder.create({\n *       // Ask to be the responder:\n *       onStartShouldSetPanResponder: (evt, gestureState) => true,\n *       onStartShouldSetPanResponderCapture: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponder: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,\n *\n *       onPanResponderGrant: (evt, gestureState) => {\n *         // The gesture has started. Show visual feedback so the user knows\n *         // what is happening!\n *\n *         // gestureState.d{x,y} will be set to zero now\n *       },\n *       onPanResponderMove: (evt, gestureState) => {\n *         // The most recent move distance is gestureState.move{X,Y}\n *\n *         // The accumulated gesture distance since becoming responder is\n *         // gestureState.d{x,y}\n *       },\n *       onPanResponderTerminationRequest: (evt, gestureState) => true,\n *       onPanResponderRelease: (evt, gestureState) => {\n *         // The user has released all touches while this view is the\n *         // responder. This typically means a gesture has succeeded\n *       },\n *       onPanResponderTerminate: (evt, gestureState) => {\n *         // Another component has become the responder, so this gesture\n *         // should be cancelled\n *       },\n *       onShouldBlockNativeResponder: (evt, gestureState) => {\n *         // Returns whether this component should block native components from becoming the JS\n *         // responder. Returns true by default. Is currently only supported on android.\n *         return true;\n *       },\n *     });\n *   },\n *\n *   render: function() {\n *     return (\n *       <View {...this._panResponder.panHandlers} />\n *     );\n *   },\n *\n * ```\n *\n * ### Working Example\n *\n * To see it in action, try the\n * [PanResponder example in RNTester](https://github.com/facebook/react-native/blob/HEAD/packages/rn-tester/js/examples/PanResponder/PanResponderExample.js)\n */\n\nexport type GestureState = {|\n  /**\n   * ID of the gestureState - persisted as long as there at least one touch on screen\n   */\n  stateID: number,\n\n  /**\n   * The latest screen coordinates of the recently-moved touch\n   */\n  moveX: number,\n\n  /**\n   * The latest screen coordinates of the recently-moved touch\n   */\n  moveY: number,\n\n  /**\n   * The screen coordinates of the responder grant\n   */\n  x0: number,\n\n  /**\n   * The screen coordinates of the responder grant\n   */\n  y0: number,\n\n  /**\n   * Accumulated distance of the gesture since the touch started\n   */\n  dx: number,\n\n  /**\n   * Accumulated distance of the gesture since the touch started\n   */\n  dy: number,\n\n  /**\n   * Current velocity of the gesture\n   */\n  vx: number,\n\n  /**\n   * Current velocity of the gesture\n   */\n  vy: number,\n\n  /**\n   * Number of touches currently on screen\n   */\n  numberActiveTouches: number,\n\n  /**\n   * All `gestureState` accounts for timeStamps up until this value\n   *\n   * @private\n   */\n  _accountsForMovesUpTo: number,\n|};\n\ntype ActiveCallback = (\n  event: PressEvent,\n  gestureState: GestureState,\n) => boolean;\n\ntype PassiveCallback = (event: PressEvent, gestureState: GestureState) => mixed;\n\nexport type PanHandlers = {|\n  onMoveShouldSetResponder: (event: PressEvent) => boolean,\n  onMoveShouldSetResponderCapture: (event: PressEvent) => boolean,\n  onResponderEnd: (event: PressEvent) => void,\n  onResponderGrant: (event: PressEvent) => boolean,\n  onResponderMove: (event: PressEvent) => void,\n  onResponderReject: (event: PressEvent) => void,\n  onResponderRelease: (event: PressEvent) => void,\n  onResponderStart: (event: PressEvent) => void,\n  onResponderTerminate: (event: PressEvent) => void,\n  onResponderTerminationRequest: (event: PressEvent) => boolean,\n  onStartShouldSetResponder: (event: PressEvent) => boolean,\n  onStartShouldSetResponderCapture: (event: PressEvent) => boolean,\n|};\n\ntype PanResponderConfig = $ReadOnly<{|\n  onMoveShouldSetPanResponder?: ?ActiveCallback,\n  onMoveShouldSetPanResponderCapture?: ?ActiveCallback,\n  onStartShouldSetPanResponder?: ?ActiveCallback,\n  onStartShouldSetPanResponderCapture?: ?ActiveCallback,\n  /**\n   * The body of `onResponderGrant` returns a bool, but the vast majority of\n   * callsites return void and this TODO notice is found in it:\n   *   TODO: t7467124 investigate if this can be removed\n   */\n  onPanResponderGrant?: ?(PassiveCallback | ActiveCallback),\n  onPanResponderReject?: ?PassiveCallback,\n  onPanResponderStart?: ?PassiveCallback,\n  onPanResponderEnd?: ?PassiveCallback,\n  onPanResponderRelease?: ?PassiveCallback,\n  onPanResponderMove?: ?PassiveCallback,\n  onPanResponderTerminate?: ?PassiveCallback,\n  onPanResponderTerminationRequest?: ?ActiveCallback,\n  onShouldBlockNativeResponder?: ?ActiveCallback,\n|}>;\n\nconst PanResponder = {\n  /**\n   *\n   * A graphical explanation of the touch data flow:\n   *\n   * +----------------------------+             +--------------------------------+\n   * | ResponderTouchHistoryStore |             |TouchHistoryMath                |\n   * +----------------------------+             +----------+---------------------+\n   * |Global store of touchHistory|             |Allocation-less math util       |\n   * |including activeness, start |             |on touch history (centroids     |\n   * |position, prev/cur position.|             |and multitouch movement etc)    |\n   * |                            |             |                                |\n   * +----^-----------------------+             +----^---------------------------+\n   *      |                                          |\n   *      | (records relevant history                |\n   *      |  of touches relevant for                 |\n   *      |  implementing higher level               |\n   *      |  gestures)                               |\n   *      |                                          |\n   * +----+-----------------------+             +----|---------------------------+\n   * | ResponderEventPlugin       |             |    |   Your App/Component      |\n   * +----------------------------+             +----|---------------------------+\n   * |Negotiates which view gets  | Low level   |    |             High level    |\n   * |onResponderMove events.     | events w/   |  +-+-------+     events w/     |\n   * |Also records history into   | touchHistory|  |   Pan   |     multitouch +  |\n   * |ResponderTouchHistoryStore. +---------------->Responder+-----> accumulative|\n   * +----------------------------+ attached to |  |         |     distance and  |\n   *                                 each event |  +---------+     velocity.     |\n   *                                            |                                |\n   *                                            |                                |\n   *                                            +--------------------------------+\n   *\n   *\n   *\n   * Gesture that calculates cumulative movement over time in a way that just\n   * \"does the right thing\" for multiple touches. The \"right thing\" is very\n   * nuanced. When moving two touches in opposite directions, the cumulative\n   * distance is zero in each dimension. When two touches move in parallel five\n   * pixels in the same direction, the cumulative distance is five, not ten. If\n   * two touches start, one moves five in a direction, then stops and the other\n   * touch moves fives in the same direction, the cumulative distance is ten.\n   *\n   * This logic requires a kind of processing of time \"clusters\" of touch events\n   * so that two touch moves that essentially occur in parallel but move every\n   * other frame respectively, are considered part of the same movement.\n   *\n   * Explanation of some of the non-obvious fields:\n   *\n   * - moveX/moveY: If no move event has been observed, then `(moveX, moveY)` is\n   *   invalid. If a move event has been observed, `(moveX, moveY)` is the\n   *   centroid of the most recently moved \"cluster\" of active touches.\n   *   (Currently all move have the same timeStamp, but later we should add some\n   *   threshold for what is considered to be \"moving\"). If a palm is\n   *   accidentally counted as a touch, but a finger is moving greatly, the palm\n   *   will move slightly, but we only want to count the single moving touch.\n   * - x0/y0: Centroid location (non-cumulative) at the time of becoming\n   *   responder.\n   * - dx/dy: Cumulative touch distance - not the same thing as sum of each touch\n   *   distance. Accounts for touch moves that are clustered together in time,\n   *   moving the same direction. Only valid when currently responder (otherwise,\n   *   it only represents the drag distance below the threshold).\n   * - vx/vy: Velocity.\n   */\n\n  _initializeGestureState(gestureState: GestureState) {\n    gestureState.moveX = 0;\n    gestureState.moveY = 0;\n    gestureState.x0 = 0;\n    gestureState.y0 = 0;\n    gestureState.dx = 0;\n    gestureState.dy = 0;\n    gestureState.vx = 0;\n    gestureState.vy = 0;\n    gestureState.numberActiveTouches = 0;\n    // All `gestureState` accounts for timeStamps up until:\n    gestureState._accountsForMovesUpTo = 0;\n  },\n\n  /**\n   * This is nuanced and is necessary. It is incorrect to continuously take all\n   * active *and* recently moved touches, find the centroid, and track how that\n   * result changes over time. Instead, we must take all recently moved\n   * touches, and calculate how the centroid has changed just for those\n   * recently moved touches, and append that change to an accumulator. This is\n   * to (at least) handle the case where the user is moving three fingers, and\n   * then one of the fingers stops but the other two continue.\n   *\n   * This is very different than taking all of the recently moved touches and\n   * storing their centroid as `dx/dy`. For correctness, we must *accumulate\n   * changes* in the centroid of recently moved touches.\n   *\n   * There is also some nuance with how we handle multiple moved touches in a\n   * single event. With the way `ReactNativeEventEmitter` dispatches touches as\n   * individual events, multiple touches generate two 'move' events, each of\n   * them triggering `onResponderMove`. But with the way `PanResponder` works,\n   * all of the gesture inference is performed on the first dispatch, since it\n   * looks at all of the touches (even the ones for which there hasn't been a\n   * native dispatch yet). Therefore, `PanResponder` does not call\n   * `onResponderMove` passed the first dispatch. This diverges from the\n   * typical responder callback pattern (without using `PanResponder`), but\n   * avoids more dispatches than necessary.\n   */\n  _updateGestureStateOnMove(\n    gestureState: GestureState,\n    touchHistory: $PropertyType<PressEvent, 'touchHistory'>,\n  ) {\n    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n    gestureState.moveX = currentCentroidXOfTouchesChangedAfter(\n      touchHistory,\n      gestureState._accountsForMovesUpTo,\n    );\n    gestureState.moveY = currentCentroidYOfTouchesChangedAfter(\n      touchHistory,\n      gestureState._accountsForMovesUpTo,\n    );\n    const movedAfter = gestureState._accountsForMovesUpTo;\n    const prevX = previousCentroidXOfTouchesChangedAfter(\n      touchHistory,\n      movedAfter,\n    );\n    const x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    const prevY = previousCentroidYOfTouchesChangedAfter(\n      touchHistory,\n      movedAfter,\n    );\n    const y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    const nextDX = gestureState.dx + (x - prevX);\n    const nextDY = gestureState.dy + (y - prevY);\n\n    // TODO: This must be filtered intelligently.\n    const dt =\n      touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;\n    gestureState.vx = (nextDX - gestureState.dx) / dt;\n    gestureState.vy = (nextDY - gestureState.dy) / dt;\n\n    gestureState.dx = nextDX;\n    gestureState.dy = nextDY;\n    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n  },\n\n  /**\n   * @param {object} config Enhanced versions of all of the responder callbacks\n   * that provide not only the typical `ResponderSyntheticEvent`, but also the\n   * `PanResponder` gesture state.  Simply replace the word `Responder` with\n   * `PanResponder` in each of the typical `onResponder*` callbacks. For\n   * example, the `config` object would look like:\n   *\n   *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onPanResponderReject: (e, gestureState) => {...}`\n   *  - `onPanResponderGrant: (e, gestureState) => {...}`\n   *  - `onPanResponderStart: (e, gestureState) => {...}`\n   *  - `onPanResponderEnd: (e, gestureState) => {...}`\n   *  - `onPanResponderRelease: (e, gestureState) => {...}`\n   *  - `onPanResponderMove: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminate: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`\n   *  - `onShouldBlockNativeResponder: (e, gestureState) => {...}`\n   *\n   *  In general, for events that have capture equivalents, we update the\n   *  gestureState once in the capture phase and can use it in the bubble phase\n   *  as well.\n   *\n   *  Be careful with onStartShould* callbacks. They only reflect updated\n   *  `gestureState` for start/end events that bubble/capture to the Node.\n   *  Once the node is the responder, you can rely on every start/end event\n   *  being processed by the gesture and `gestureState` being updated\n   *  accordingly. (numberActiveTouches) may not be totally accurate unless you\n   *  are the responder.\n   */\n  create(config: PanResponderConfig): {\n    getInteractionHandle: () => ?number,\n    panHandlers: PanHandlers,\n  } {\n    const interactionState = {\n      handle: (null: ?number),\n    };\n    const gestureState: GestureState = {\n      // Useful for debugging\n      stateID: Math.random(),\n      moveX: 0,\n      moveY: 0,\n      x0: 0,\n      y0: 0,\n      dx: 0,\n      dy: 0,\n      vx: 0,\n      vy: 0,\n      numberActiveTouches: 0,\n      _accountsForMovesUpTo: 0,\n    };\n    const panHandlers = {\n      onStartShouldSetResponder(event: PressEvent): boolean {\n        return config.onStartShouldSetPanResponder == null\n          ? false\n          : config.onStartShouldSetPanResponder(event, gestureState);\n      },\n      onMoveShouldSetResponder(event: PressEvent): boolean {\n        return config.onMoveShouldSetPanResponder == null\n          ? false\n          : config.onMoveShouldSetPanResponder(event, gestureState);\n      },\n      onStartShouldSetResponderCapture(event: PressEvent): boolean {\n        // TODO: Actually, we should reinitialize the state any time\n        // touches.length increases from 0 active to > 0 active.\n        if (event.nativeEvent.touches.length === 1) {\n          PanResponder._initializeGestureState(gestureState);\n        }\n        gestureState.numberActiveTouches =\n          event.touchHistory.numberActiveTouches;\n        return config.onStartShouldSetPanResponderCapture != null\n          ? config.onStartShouldSetPanResponderCapture(event, gestureState)\n          : false;\n      },\n\n      onMoveShouldSetResponderCapture(event: PressEvent): boolean {\n        const touchHistory = event.touchHistory;\n        // Responder system incorrectly dispatches should* to current responder\n        // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n        if (\n          gestureState._accountsForMovesUpTo ===\n          touchHistory.mostRecentTimeStamp\n        ) {\n          return false;\n        }\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n        return config.onMoveShouldSetPanResponderCapture\n          ? config.onMoveShouldSetPanResponderCapture(event, gestureState)\n          : false;\n      },\n\n      onResponderGrant(event: PressEvent): boolean {\n        if (!interactionState.handle) {\n          interactionState.handle =\n            InteractionManager.createInteractionHandle();\n        }\n        gestureState.x0 = currentCentroidX(event.touchHistory);\n        gestureState.y0 = currentCentroidY(event.touchHistory);\n        gestureState.dx = 0;\n        gestureState.dy = 0;\n        if (config.onPanResponderGrant) {\n          config.onPanResponderGrant(event, gestureState);\n        }\n        // TODO: t7467124 investigate if this can be removed\n        return config.onShouldBlockNativeResponder == null\n          ? true\n          : config.onShouldBlockNativeResponder(event, gestureState);\n      },\n\n      onResponderReject(event: PressEvent): void {\n        clearInteractionHandle(\n          interactionState,\n          config.onPanResponderReject,\n          event,\n          gestureState,\n        );\n      },\n\n      onResponderRelease(event: PressEvent): void {\n        clearInteractionHandle(\n          interactionState,\n          config.onPanResponderRelease,\n          event,\n          gestureState,\n        );\n        PanResponder._initializeGestureState(gestureState);\n      },\n\n      onResponderStart(event: PressEvent): void {\n        const touchHistory = event.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        if (config.onPanResponderStart) {\n          config.onPanResponderStart(event, gestureState);\n        }\n      },\n\n      onResponderMove(event: PressEvent): void {\n        const touchHistory = event.touchHistory;\n        // Guard against the dispatch of two touch moves when there are two\n        // simultaneously changed touches.\n        if (\n          gestureState._accountsForMovesUpTo ===\n          touchHistory.mostRecentTimeStamp\n        ) {\n          return;\n        }\n        // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n        if (config.onPanResponderMove) {\n          config.onPanResponderMove(event, gestureState);\n        }\n      },\n\n      onResponderEnd(event: PressEvent): void {\n        const touchHistory = event.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        clearInteractionHandle(\n          interactionState,\n          config.onPanResponderEnd,\n          event,\n          gestureState,\n        );\n      },\n\n      onResponderTerminate(event: PressEvent): void {\n        clearInteractionHandle(\n          interactionState,\n          config.onPanResponderTerminate,\n          event,\n          gestureState,\n        );\n        PanResponder._initializeGestureState(gestureState);\n      },\n\n      onResponderTerminationRequest(event: PressEvent): boolean {\n        return config.onPanResponderTerminationRequest == null\n          ? true\n          : config.onPanResponderTerminationRequest(event, gestureState);\n      },\n    };\n    return {\n      panHandlers,\n      getInteractionHandle(): ?number {\n        return interactionState.handle;\n      },\n    };\n  },\n};\n\nfunction clearInteractionHandle(\n  interactionState: {handle: ?number, ...},\n  callback: ?(ActiveCallback | PassiveCallback),\n  event: PressEvent,\n  gestureState: GestureState,\n) {\n  if (interactionState.handle) {\n    InteractionManager.clearInteractionHandle(interactionState.handle);\n    interactionState.handle = null;\n  }\n  if (callback) {\n    callback(event, gestureState);\n  }\n}\n\nexport type PanResponderInstance = ReturnType<(typeof PanResponder)['create']>;\n\nexport default PanResponder;\n"],"mappings":"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","ignoreList":[]}