{"version":3,"names":["_interopRequireDefault","require","_classCallCheck2","_createClass2","_require","InteractionManager","Batchinator","callback","delayMS","default","_delay","_callback","key","value","dispose","options","arguments","length","undefined","abort","_taskHandle","cancel","schedule","_this","timeoutHandle","setTimeout","runAfterInteractions","clearTimeout","module","exports"],"sources":["Batchinator.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nconst {InteractionManager} = require('react-native');\n\n/**\n * A simple class for batching up invocations of a low-pri callback. A timeout is set to run the\n * callback once after a delay, no matter how many times it's scheduled. Once the delay is reached,\n * InteractionManager.runAfterInteractions is used to invoke the callback after any hi-pri\n * interactions are done running.\n *\n * Make sure to cleanup with dispose().  Example:\n *\n *   class Widget extends React.Component {\n *     _batchedSave: new Batchinator(() => this._saveState, 1000);\n *     _saveSate() {\n *       // save this.state to disk\n *     }\n *     componentDidUpdate() {\n *       this._batchedSave.schedule();\n *     }\n *     componentWillUnmount() {\n *       this._batchedSave.dispose();\n *     }\n *     ...\n *   }\n */\nclass Batchinator {\n  _callback: () => void;\n  _delay: number;\n  _taskHandle: ?{cancel: () => void, ...};\n  constructor(callback: () => void, delayMS: number) {\n    this._delay = delayMS;\n    this._callback = callback;\n  }\n  /*\n   * Cleanup any pending tasks.\n   *\n   * By default, if there is a pending task the callback is run immediately. Set the option abort to\n   * true to not call the callback if it was pending.\n   */\n  dispose(options: {abort: boolean, ...} = {abort: false}) {\n    if (this._taskHandle) {\n      this._taskHandle.cancel();\n      if (!options.abort) {\n        this._callback();\n      }\n      this._taskHandle = null;\n    }\n  }\n  schedule() {\n    if (this._taskHandle) {\n      return;\n    }\n    const timeoutHandle = setTimeout(() => {\n      this._taskHandle = InteractionManager.runAfterInteractions(() => {\n        // Note that we clear the handle before invoking the callback so that if the callback calls\n        // schedule again, it will actually schedule another task.\n        this._taskHandle = null;\n        this._callback();\n      });\n    }, this._delay);\n    this._taskHandle = {cancel: () => clearTimeout(timeoutHandle)};\n  }\n}\n\nmodule.exports = Batchinator;\n"],"mappings":"AAUA,YAAY;;AAAC,IAAAA,sBAAA,GAAAC,OAAA;AAAA,IAAAC,gBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAAA,IAAAE,aAAA,GAAAH,sBAAA,CAAAC,OAAA;AAEb,IAAAG,QAAA,GAA6BH,OAAO,CAAC,cAAc,CAAC;EAA7CI,kBAAkB,GAAAD,QAAA,CAAlBC,kBAAkB;AAA4B,IAwB/CC,WAAW;EAIf,SAAAA,YAAYC,QAAoB,EAAEC,OAAe,EAAE;IAAA,IAAAN,gBAAA,CAAAO,OAAA,QAAAH,WAAA;IACjD,IAAI,CAACI,MAAM,GAAGF,OAAO;IACrB,IAAI,CAACG,SAAS,GAAGJ,QAAQ;EAC3B;EAAC,WAAAJ,aAAA,CAAAM,OAAA,EAAAH,WAAA;IAAAM,GAAA;IAAAC,KAAA,EAOD,SAAAC,QAAA,EAAyD;MAAA,IAAjDC,OAA8B,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG;QAACG,KAAK,EAAE;MAAK,CAAC;MACrD,IAAI,IAAI,CAACC,WAAW,EAAE;QACpB,IAAI,CAACA,WAAW,CAACC,MAAM,CAAC,CAAC;QACzB,IAAI,CAACN,OAAO,CAACI,KAAK,EAAE;UAClB,IAAI,CAACR,SAAS,CAAC,CAAC;QAClB;QACA,IAAI,CAACS,WAAW,GAAG,IAAI;MACzB;IACF;EAAC;IAAAR,GAAA;IAAAC,KAAA,EACD,SAAAS,SAAA,EAAW;MAAA,IAAAC,KAAA;MACT,IAAI,IAAI,CAACH,WAAW,EAAE;QACpB;MACF;MACA,IAAMI,aAAa,GAAGC,UAAU,CAAC,YAAM;QACrCF,KAAI,CAACH,WAAW,GAAGf,kBAAkB,CAACqB,oBAAoB,CAAC,YAAM;UAG/DH,KAAI,CAACH,WAAW,GAAG,IAAI;UACvBG,KAAI,CAACZ,SAAS,CAAC,CAAC;QAClB,CAAC,CAAC;MACJ,CAAC,EAAE,IAAI,CAACD,MAAM,CAAC;MACf,IAAI,CAACU,WAAW,GAAG;QAACC,MAAM,EAAE,SAAAA,OAAA;UAAA,OAAMM,YAAY,CAACH,aAAa,CAAC;QAAA;MAAA,CAAC;IAChE;EAAC;AAAA;AAGHI,MAAM,CAACC,OAAO,GAAGvB,WAAW","ignoreList":[]}