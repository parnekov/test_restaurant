39328fb6dc8c6e543fa9f7005d9dd3cd
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _require = require('react-native'),
  InteractionManager = _require.InteractionManager;
var Batchinator = function () {
  function Batchinator(callback, delayMS) {
    (0, _classCallCheck2.default)(this, Batchinator);
    this._delay = delayMS;
    this._callback = callback;
  }
  return (0, _createClass2.default)(Batchinator, [{
    key: "dispose",
    value: function dispose() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        abort: false
      };
      if (this._taskHandle) {
        this._taskHandle.cancel();
        if (!options.abort) {
          this._callback();
        }
        this._taskHandle = null;
      }
    }
  }, {
    key: "schedule",
    value: function schedule() {
      var _this = this;
      if (this._taskHandle) {
        return;
      }
      var timeoutHandle = setTimeout(function () {
        _this._taskHandle = InteractionManager.runAfterInteractions(function () {
          _this._taskHandle = null;
          _this._callback();
        });
      }, this._delay);
      this._taskHandle = {
        cancel: function cancel() {
          return clearTimeout(timeoutHandle);
        }
      };
    }
  }]);
}();
module.exports = Batchinator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX3JlcXVpcmUiLCJJbnRlcmFjdGlvbk1hbmFnZXIiLCJCYXRjaGluYXRvciIsImNhbGxiYWNrIiwiZGVsYXlNUyIsImRlZmF1bHQiLCJfZGVsYXkiLCJfY2FsbGJhY2siLCJrZXkiLCJ2YWx1ZSIsImRpc3Bvc2UiLCJvcHRpb25zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiYWJvcnQiLCJfdGFza0hhbmRsZSIsImNhbmNlbCIsInNjaGVkdWxlIiwiX3RoaXMiLCJ0aW1lb3V0SGFuZGxlIiwic2V0VGltZW91dCIsInJ1bkFmdGVySW50ZXJhY3Rpb25zIiwiY2xlYXJUaW1lb3V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkJhdGNoaW5hdG9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IHtJbnRlcmFjdGlvbk1hbmFnZXJ9ID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlJyk7XG5cbi8qKlxuICogQSBzaW1wbGUgY2xhc3MgZm9yIGJhdGNoaW5nIHVwIGludm9jYXRpb25zIG9mIGEgbG93LXByaSBjYWxsYmFjay4gQSB0aW1lb3V0IGlzIHNldCB0byBydW4gdGhlXG4gKiBjYWxsYmFjayBvbmNlIGFmdGVyIGEgZGVsYXksIG5vIG1hdHRlciBob3cgbWFueSB0aW1lcyBpdCdzIHNjaGVkdWxlZC4gT25jZSB0aGUgZGVsYXkgaXMgcmVhY2hlZCxcbiAqIEludGVyYWN0aW9uTWFuYWdlci5ydW5BZnRlckludGVyYWN0aW9ucyBpcyB1c2VkIHRvIGludm9rZSB0aGUgY2FsbGJhY2sgYWZ0ZXIgYW55IGhpLXByaVxuICogaW50ZXJhY3Rpb25zIGFyZSBkb25lIHJ1bm5pbmcuXG4gKlxuICogTWFrZSBzdXJlIHRvIGNsZWFudXAgd2l0aCBkaXNwb3NlKCkuICBFeGFtcGxlOlxuICpcbiAqICAgY2xhc3MgV2lkZ2V0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAqICAgICBfYmF0Y2hlZFNhdmU6IG5ldyBCYXRjaGluYXRvcigoKSA9PiB0aGlzLl9zYXZlU3RhdGUsIDEwMDApO1xuICogICAgIF9zYXZlU2F0ZSgpIHtcbiAqICAgICAgIC8vIHNhdmUgdGhpcy5zdGF0ZSB0byBkaXNrXG4gKiAgICAgfVxuICogICAgIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAqICAgICAgIHRoaXMuX2JhdGNoZWRTYXZlLnNjaGVkdWxlKCk7XG4gKiAgICAgfVxuICogICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICogICAgICAgdGhpcy5fYmF0Y2hlZFNhdmUuZGlzcG9zZSgpO1xuICogICAgIH1cbiAqICAgICAuLi5cbiAqICAgfVxuICovXG5jbGFzcyBCYXRjaGluYXRvciB7XG4gIF9jYWxsYmFjazogKCkgPT4gdm9pZDtcbiAgX2RlbGF5OiBudW1iZXI7XG4gIF90YXNrSGFuZGxlOiA/e2NhbmNlbDogKCkgPT4gdm9pZCwgLi4ufTtcbiAgY29uc3RydWN0b3IoY2FsbGJhY2s6ICgpID0+IHZvaWQsIGRlbGF5TVM6IG51bWJlcikge1xuICAgIHRoaXMuX2RlbGF5ID0gZGVsYXlNUztcbiAgICB0aGlzLl9jYWxsYmFjayA9IGNhbGxiYWNrO1xuICB9XG4gIC8qXG4gICAqIENsZWFudXAgYW55IHBlbmRpbmcgdGFza3MuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIGlmIHRoZXJlIGlzIGEgcGVuZGluZyB0YXNrIHRoZSBjYWxsYmFjayBpcyBydW4gaW1tZWRpYXRlbHkuIFNldCB0aGUgb3B0aW9uIGFib3J0IHRvXG4gICAqIHRydWUgdG8gbm90IGNhbGwgdGhlIGNhbGxiYWNrIGlmIGl0IHdhcyBwZW5kaW5nLlxuICAgKi9cbiAgZGlzcG9zZShvcHRpb25zOiB7YWJvcnQ6IGJvb2xlYW4sIC4uLn0gPSB7YWJvcnQ6IGZhbHNlfSkge1xuICAgIGlmICh0aGlzLl90YXNrSGFuZGxlKSB7XG4gICAgICB0aGlzLl90YXNrSGFuZGxlLmNhbmNlbCgpO1xuICAgICAgaWYgKCFvcHRpb25zLmFib3J0KSB7XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgICB0aGlzLl90YXNrSGFuZGxlID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgc2NoZWR1bGUoKSB7XG4gICAgaWYgKHRoaXMuX3Rhc2tIYW5kbGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdGltZW91dEhhbmRsZSA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5fdGFza0hhbmRsZSA9IEludGVyYWN0aW9uTWFuYWdlci5ydW5BZnRlckludGVyYWN0aW9ucygoKSA9PiB7XG4gICAgICAgIC8vIE5vdGUgdGhhdCB3ZSBjbGVhciB0aGUgaGFuZGxlIGJlZm9yZSBpbnZva2luZyB0aGUgY2FsbGJhY2sgc28gdGhhdCBpZiB0aGUgY2FsbGJhY2sgY2FsbHNcbiAgICAgICAgLy8gc2NoZWR1bGUgYWdhaW4sIGl0IHdpbGwgYWN0dWFsbHkgc2NoZWR1bGUgYW5vdGhlciB0YXNrLlxuICAgICAgICB0aGlzLl90YXNrSGFuZGxlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY2FsbGJhY2soKTtcbiAgICAgIH0pO1xuICAgIH0sIHRoaXMuX2RlbGF5KTtcbiAgICB0aGlzLl90YXNrSGFuZGxlID0ge2NhbmNlbDogKCkgPT4gY2xlYXJUaW1lb3V0KHRpbWVvdXRIYW5kbGUpfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJhdGNoaW5hdG9yO1xuIl0sIm1hcHBpbmdzIjoiQUFVQSxZQUFZOztBQUFDLElBQUFBLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxnQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUUsYUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBRWIsSUFBQUcsUUFBQSxHQUE2QkgsT0FBTyxDQUFDLGNBQWMsQ0FBQztFQUE3Q0ksa0JBQWtCLEdBQUFELFFBQUEsQ0FBbEJDLGtCQUFrQjtBQUE0QixJQXdCL0NDLFdBQVc7RUFJZixTQUFBQSxZQUFZQyxRQUFvQixFQUFFQyxPQUFlLEVBQUU7SUFBQSxJQUFBTixnQkFBQSxDQUFBTyxPQUFBLFFBQUFILFdBQUE7SUFDakQsSUFBSSxDQUFDSSxNQUFNLEdBQUdGLE9BQU87SUFDckIsSUFBSSxDQUFDRyxTQUFTLEdBQUdKLFFBQVE7RUFDM0I7RUFBQyxXQUFBSixhQUFBLENBQUFNLE9BQUEsRUFBQUgsV0FBQTtJQUFBTSxHQUFBO0lBQUFDLEtBQUEsRUFPRCxTQUFBQyxRQUFBLEVBQXlEO01BQUEsSUFBakRDLE9BQThCLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHO1FBQUNHLEtBQUssRUFBRTtNQUFLLENBQUM7TUFDckQsSUFBSSxJQUFJLENBQUNDLFdBQVcsRUFBRTtRQUNwQixJQUFJLENBQUNBLFdBQVcsQ0FBQ0MsTUFBTSxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDTixPQUFPLENBQUNJLEtBQUssRUFBRTtVQUNsQixJQUFJLENBQUNSLFNBQVMsQ0FBQyxDQUFDO1FBQ2xCO1FBQ0EsSUFBSSxDQUFDUyxXQUFXLEdBQUcsSUFBSTtNQUN6QjtJQUNGO0VBQUM7SUFBQVIsR0FBQTtJQUFBQyxLQUFBLEVBQ0QsU0FBQVMsU0FBQSxFQUFXO01BQUEsSUFBQUMsS0FBQTtNQUNULElBQUksSUFBSSxDQUFDSCxXQUFXLEVBQUU7UUFDcEI7TUFDRjtNQUNBLElBQU1JLGFBQWEsR0FBR0MsVUFBVSxDQUFDLFlBQU07UUFDckNGLEtBQUksQ0FBQ0gsV0FBVyxHQUFHZixrQkFBa0IsQ0FBQ3FCLG9CQUFvQixDQUFDLFlBQU07VUFHL0RILEtBQUksQ0FBQ0gsV0FBVyxHQUFHLElBQUk7VUFDdkJHLEtBQUksQ0FBQ1osU0FBUyxDQUFDLENBQUM7UUFDbEIsQ0FBQyxDQUFDO01BQ0osQ0FBQyxFQUFFLElBQUksQ0FBQ0QsTUFBTSxDQUFDO01BQ2YsSUFBSSxDQUFDVSxXQUFXLEdBQUc7UUFBQ0MsTUFBTSxFQUFFLFNBQUFBLE9BQUE7VUFBQSxPQUFNTSxZQUFZLENBQUNILGFBQWEsQ0FBQztRQUFBO01BQUEsQ0FBQztJQUNoRTtFQUFDO0FBQUE7QUFHSEksTUFBTSxDQUFDQyxPQUFPLEdBQUd2QixXQUFXIiwiaWdub3JlTGlzdCI6W119